{"version":3,"file":"vite-plugin-webpackchunkname.js","sources":["../src/share.ts","../src/manualChunksConfig.ts","../src/utils.ts","../src/index.ts"],"sourcesContent":["import { basename, extname } from 'path'\r\nimport { moduleImpoterMap } from './type.d'\r\nimport { normalizePath } from '@rollup/pluginutils'\r\n\r\nconst APP_ROOT_PATH = normalizePath(process.cwd())\r\nexport const appRootPathRE = new RegExp(APP_ROOT_PATH, 'i')\r\nexport const userJSFilePathRE = new RegExp(\r\n  APP_ROOT_PATH + '/(?!node_modules).*\\\\.[tj]s[x]?$',\r\n  'i'\r\n)\r\nexport const CHUNK_NAME_TAG = 'chunkName'\r\nexport const chunkNameRE = /\\?chunkName=([\\w-.]*)/\r\nexport const bundleName = {\r\n  main: 'common',\r\n  vendor: 'vendor',\r\n}\r\n\r\nexport const getFileName = (filePath: string) => {\r\n  return basename(filePath, extname(filePath))\r\n}\r\n\r\nlet __moduleDeps: moduleImpoterMap = null\r\nexport const moduleDeps = {\r\n  get(id: string) {\r\n    return __moduleDeps[id]\r\n  },\r\n  set(v: moduleImpoterMap) {\r\n    __moduleDeps = v\r\n  },\r\n}\r\n\r\nlet __appDepMap: moduleImpoterMap = null\r\nexport const appModuleIdChunkNamesMap = {\r\n  get(id: string) {\r\n    return __appDepMap[id]\r\n  },\r\n  set(v: moduleImpoterMap) {\r\n    __appDepMap = v\r\n  },\r\n}\r\n","import type { GetModuleInfo } from 'rollup'\r\nimport {\r\n  bundleName,\r\n  chunkNameRE,\r\n  appRootPathRE,\r\n  moduleDeps,\r\n  appModuleIdChunkNamesMap,\r\n} from './share'\r\n\r\nconst cssLangs = `\\\\.(css|less|sass|scss|styl|stylus|pcss|postcss)($|\\\\?)`\r\nconst cssLangRE = new RegExp(cssLangs)\r\nconst isCSSRequest = (request: string): boolean => cssLangRE.test(request)\r\n\r\nconst __moduleInVenderMap = new Map<string, boolean>()\r\n\r\n// rollup 把入口文件打包成index-[hash].js，名字 index.html 保持一致\r\n// 此文件【不export】任何变量，所以即使部分内容发生变化，也能保证多数包能够被长效缓存\r\n/**\r\n * 打包策略（靠前优先）：\r\n * 1. 从入口文件引入的三方包，打包成 vendor\r\n * 2. 路由带有 webpackChunkName 的，按给定的名称打包\r\n * 3. 文件有且只有一次引用，按 rollup 默认逻辑\r\n * 4. 文件多次引用\r\n *  4.1 如果是 node_modules 模块，按包名打包\r\n *  4.2 如果是用户模块按照 getAppModuleChunkName 中的逻辑打包\r\n */\r\n\r\nexport function manualChunksConfig(\r\n  id: string,\r\n  opts: { getModuleInfo: GetModuleInfo }\r\n) {\r\n  const { getModuleInfo } = opts\r\n  const cacheIdMap = new Map<string, boolean>()\r\n  const nodeModuleInfo = moduleDeps.get(id)\r\n  const isNodeModules = !!nodeModuleInfo\r\n\r\n  // vite 用的模块，譬如：__vite-browser-external，plugin-vue:export-helper 等\r\n  const isInternalModule = !appRootPathRE.test(id)\r\n  const isThirdPackageImportByEntry =\r\n    isNodeModules &&\r\n    !isCSSRequest(id) &&\r\n    staticImportedByEntry(id, getModuleInfo, cacheIdMap)\r\n  if (isThirdPackageImportByEntry || isInternalModule) {\r\n    if (nodeModuleInfo && !__moduleInVenderMap.has(nodeModuleInfo.name)) {\r\n      __moduleInVenderMap.set(nodeModuleInfo.name, true)\r\n    }\r\n    return bundleName.vendor\r\n  }\r\n\r\n  const matchedChunkName = chunkNameRE.exec(id)\r\n  if (matchedChunkName) {\r\n    return formatChunkName(matchedChunkName[1])\r\n  }\r\n\r\n  const { importers } = getModuleInfo(id)\r\n  if (importers.length < 2) {\r\n    return void 0\r\n  }\r\n\r\n  //importers 大于 1 就存在chunk之间的引用\r\n\r\n  // 处理node_modules中的依赖\r\n  if (nodeModuleInfo) {\r\n    const rootModule = [...nodeModuleInfo.chunkNames]\r\n    let chunkName = bundleName.main\r\n    switch (rootModule.length) {\r\n      case 1:\r\n        chunkName = rootModule[0]\r\n        break\r\n      default:\r\n        break\r\n    }\r\n    if (__moduleInVenderMap.has(chunkName)) {\r\n      chunkName = bundleName.vendor\r\n    }\r\n    return chunkName\r\n  }\r\n\r\n  const appModuleInfo = appModuleIdChunkNamesMap.get(id)\r\n  if (appModuleInfo) {\r\n    const chunkNames = [...appModuleInfo.chunkNames].filter(Boolean)\r\n    const name = getAppModuleChunkName(chunkNames)\r\n    return formatChunkName(name)\r\n  }\r\n}\r\n\r\nfunction getAppModuleChunkName(chunkNames: string[]) {\r\n  if (chunkNames.indexOf(bundleName.main) >= 0) {\r\n    return bundleName.main\r\n  }\r\n\r\n  const names = chunkNames.filter((i: string) => i !== bundleName.main)\r\n  switch (names.length) {\r\n    case 1:\r\n      return names[0]\r\n    case 2:\r\n      return assembleChunkName(names)\r\n    default:\r\n      return bundleName.main\r\n  }\r\n}\r\n\r\nfunction assembleChunkName(names: string[]) {\r\n  const [c1, c2] = names.sort((a, b) => (a > b ? 1 : a < b ? -1 : 0))\r\n  return `shared/${c1}/${c2}`\r\n}\r\n\r\nfunction formatChunkName(name: string) {\r\n  return name.replace(/\\./g, '/')\r\n}\r\n\r\nfunction staticImportedByEntry(\r\n  id: string,\r\n  getModuleInfo: GetModuleInfo,\r\n  cache: Map<string, boolean>,\r\n  importStack: string[] = []\r\n): boolean {\r\n  if (cache.has(id)) {\r\n    return cache.get(id) as boolean\r\n  }\r\n  if (importStack.includes(id)) {\r\n    // circular deps!\r\n    cache.set(id, false)\r\n    return false\r\n  }\r\n  const mod = getModuleInfo(id)\r\n  if (!mod) {\r\n    cache.set(id, false)\r\n    return false\r\n  }\r\n\r\n  if (mod.isEntry) {\r\n    cache.set(id, true)\r\n    return true\r\n  }\r\n  const someImporterIs = mod.importers.some((importer) =>\r\n    staticImportedByEntry(\r\n      importer,\r\n      getModuleInfo,\r\n      cache,\r\n      importStack.concat(id)\r\n    )\r\n  )\r\n  cache.set(id, someImporterIs)\r\n  return someImporterIs\r\n}\r\n","import { GetManualChunk, GetManualChunkApi, ManualChunksOption } from 'rollup'\r\nimport { manualChunksConfig } from './manualChunksConfig'\r\n\r\n/**\r\n * Call user defined functions that may be defined\r\n * at `build.rollupOptions.output` before calling\r\n * `manualChunksConfig`.\r\n */\r\nexport function getManualChunks(\r\n  initialManualChunks: ManualChunksOption | undefined\r\n): GetManualChunk {\r\n  const userDefinedManualChunks =\r\n    typeof initialManualChunks === 'function' ? initialManualChunks : undefined\r\n  return (id: string, opts: GetManualChunkApi) => {\r\n    if (userDefinedManualChunks) {\r\n      const result = userDefinedManualChunks(id, opts)\r\n      if (result) {\r\n        return result\r\n      }\r\n    }\r\n    return manualChunksConfig(id, opts)\r\n  }\r\n}\r\n","import type { Plugin, ResolvedConfig } from 'vite'\r\nimport type { GetModuleInfo, ManualChunksOption } from 'rollup'\r\nimport type { ResolverObject } from '@rollup/plugin-alias'\r\n\r\nimport { parse as parseImports } from 'es-module-lexer'\r\nimport MagicString from 'magic-string'\r\nimport alias from '@rollup/plugin-alias'\r\nimport { getManualChunks } from './utils'\r\nimport {\r\n  bundleName,\r\n  CHUNK_NAME_TAG,\r\n  moduleDeps,\r\n  chunkNameRE,\r\n  appRootPathRE,\r\n  userJSFilePathRE,\r\n  appModuleIdChunkNamesMap,\r\n  getFileName,\r\n} from './share'\r\nimport { moduleImpoterMap } from './type.d'\r\n\r\nconst routeChunkNameRE = /(webpackC|c)hunkName:\\s*[\"']([\\w-/.]+)[\"']/\r\nconst nodeModuleRE = /node_modules\\/((@[^/]+\\/)?[^/]+)/g\r\nconst getNodeModulesName = (id: string) => {\r\n  let name = ''\r\n  let mached = null\r\n  while ((mached = nodeModuleRE.exec(id))) {\r\n    name = mached[1]\r\n  }\r\n\r\n  return name\r\n}\r\n\r\n// transform router content, eg:\r\n// import(/* webpackChunkName: \"detail\" */ \"@/detail/somepage.vue\")\r\n// trans to\r\n// import(\"@/detail/somepage.vue?chunkName=detail\")\r\n// so we can get chunkName params in manuanlChunks\r\n// also use chunkName: import(/* chunkName: \"detail\" */ \"@/detail/somepage.vue\")\r\nexport const manualChunksPlugin = function (): Plugin {\r\n  const nodeModuleIdSets: Set<string> = new Set()\r\n  const appModuleIdSets: Set<string> = new Set()\r\n  let _resolveIdByAlias: ResolverObject\r\n  let _config: ResolvedConfig\r\n\r\n  return {\r\n    name: 'manualNameChunksPlugin',\r\n    apply: 'build',\r\n    load(id) {\r\n      if (id.includes('node_modules')) {\r\n        nodeModuleIdSets.add(id)\r\n      } else if (appRootPathRE.test(id)) {\r\n        appModuleIdSets.add(id)\r\n      }\r\n      return null\r\n    },\r\n\r\n    configResolved(resolvedConfig) {\r\n      _config = resolvedConfig\r\n    },\r\n\r\n    buildEnd() {\r\n      const appModuleIdMap = appModuleId2chunkNamesMap(\r\n        appModuleIdSets,\r\n        this.getModuleInfo\r\n      )\r\n      const nodeModuleIdMap = nodeModuleId2issuerMap(\r\n        nodeModuleIdSets,\r\n        this.getModuleInfo\r\n      )\r\n      moduleDeps.set(nodeModuleIdMap)\r\n      appModuleIdChunkNamesMap.set(appModuleIdMap)\r\n    },\r\n\r\n    async transform(source, id) {\r\n      const hasConfigRouteChunkName =\r\n        userJSFilePathRE.test(id) && routeChunkNameRE.test(source)\r\n      if (hasConfigRouteChunkName) {\r\n        let str = new MagicString(source)\r\n        const imports = parseImports(source)[0]\r\n        for (let index = 0; index < imports.length; index++) {\r\n          const {\r\n            ss: sstart,\r\n            se: send,\r\n            s: start,\r\n            e: end,\r\n            n: rawValue,\r\n          } = imports[index]\r\n          const rawUrl = source.slice(sstart, send)\r\n          const matched = routeChunkNameRE.exec(rawUrl)\r\n          if (matched) {\r\n            const chunkName = matched[2].replace(/\\//g, '.')\r\n\r\n            let resolvedId = rawValue\r\n            if (_resolveIdByAlias) {\r\n              const rid = await _resolveIdByAlias.resolveId.call(\r\n                this,\r\n                rawValue,\r\n                id\r\n              )\r\n              if (rid) resolvedId = rid.id\r\n            }\r\n            const newContent = `\"${resolvedId}?${CHUNK_NAME_TAG}=${chunkName}\"`\r\n            str = str.overwrite(start, end, newContent)\r\n          }\r\n        }\r\n        return {\r\n          code: str.toString(),\r\n          map: _config.build.sourcemap\r\n            ? str.generateMap({\r\n                includeContent: true,\r\n                hires: true,\r\n              })\r\n            : null,\r\n        }\r\n      }\r\n    },\r\n\r\n    config(userConfig) {\r\n      if (!userConfig.build) userConfig.build = {}\r\n      if (!userConfig.build.rollupOptions) userConfig.build.rollupOptions = {}\r\n      if (!userConfig.build.rollupOptions.output)\r\n        userConfig.build.rollupOptions.output = {}\r\n\r\n      const rollupOptions = userConfig.build.rollupOptions\r\n      const output = rollupOptions.output\r\n      if (Array.isArray(output)) {\r\n        rollupOptions.output = output.map((item) => {\r\n          item.manualChunks = getManualChunks(\r\n            item.manualChunks as ManualChunksOption\r\n          )\r\n          return item\r\n        })\r\n      } else {\r\n        Object.assign(userConfig.build.rollupOptions.output, {\r\n          manualChunks: getManualChunks(\r\n            output.manualChunks as ManualChunksOption\r\n          ),\r\n        })\r\n      }\r\n\r\n      const userAlias = userConfig.resolve && (userConfig.resolve.alias as any)\r\n      if (userAlias)\r\n        _resolveIdByAlias = alias({ entries: userAlias }) as ResolverObject\r\n    },\r\n  }\r\n}\r\n\r\nfunction appModuleId2chunkNamesMap(\r\n  idSets: Set<string>,\r\n  getModuleInfo: GetModuleInfo\r\n) {\r\n  const depMaps: moduleImpoterMap = {}\r\n  for (const id of idSets) {\r\n    if (depMaps[id]) continue\r\n\r\n    const rootNames = getImportersChunkNames(id, getModuleInfo, depMaps)\r\n    depMaps[id] = {\r\n      chunkNames: rootNames,\r\n    }\r\n  }\r\n  return depMaps\r\n}\r\n\r\nfunction getImportersChunkNames(\r\n  id: string,\r\n  getModuleInfo: GetModuleInfo,\r\n  depMaps: moduleImpoterMap\r\n): Set<string> {\r\n  const ids = [id]\r\n  const resSets = new Set<string>()\r\n  for (const sid of ids) {\r\n    const info = depMaps[sid]\r\n    if (info) {\r\n      info.chunkNames.forEach((item) => resSets.add(item))\r\n    } else {\r\n      const { isEntry, importers } = getModuleInfo(sid)\r\n      if (isEntry) {\r\n        resSets.add(bundleName.main)\r\n      } else if (importers.length === 0) {\r\n        const name = getDynamicModuleName(sid)\r\n        depMaps[sid] = {\r\n          chunkNames: new Set([name]),\r\n        }\r\n        resSets.add(name)\r\n      } else {\r\n        importers.forEach((item) => {\r\n          if (ids.indexOf(item) === -1) {\r\n            ids.push(item)\r\n          }\r\n        })\r\n      }\r\n    }\r\n  }\r\n  return resSets\r\n}\r\n\r\nconst dynamicNameCache = new Map<string, number>()\r\nfunction getDynamicModuleName(moduleId: string): string {\r\n  const chunkNameRes = chunkNameRE.exec(moduleId)\r\n  if (chunkNameRes) return chunkNameRes[1]\r\n\r\n  const fileName = getFileName(moduleId)\r\n  if (dynamicNameCache.has(fileName)) {\r\n    const count = dynamicNameCache.get(fileName)\r\n    dynamicNameCache.set(fileName, count + 1)\r\n    return `${fileName}-${count}`\r\n  }\r\n  dynamicNameCache.set(fileName, 1)\r\n  return fileName\r\n}\r\n\r\nfunction nodeModuleId2issuerMap(\r\n  idSets: Set<string>,\r\n  getModuleInfo: GetModuleInfo\r\n) {\r\n  // 获取每个id的祖先发起者\r\n  const depMaps: moduleImpoterMap = {}\r\n  for (const id of idSets) {\r\n    if (!depMaps[id]) {\r\n      const moduleName = getNodeModulesName(id)\r\n      depMaps[id] = {\r\n        chunkNames: new Set([moduleName]),\r\n        name: moduleName,\r\n      }\r\n    }\r\n    const { importedIds } = getModuleInfo(id)\r\n    const depSets: Set<string> = new Set(importedIds)\r\n    for (const importedId of depSets) {\r\n      if (!depMaps[importedId]) {\r\n        depMaps[importedId] = {\r\n          chunkNames: new Set(),\r\n          name: getNodeModulesName(importedId),\r\n        }\r\n      }\r\n      ;[...depMaps[id].chunkNames].forEach((mid) =>\r\n        depMaps[importedId].chunkNames.add(mid)\r\n      );\r\n      ((getModuleInfo(importedId) || {}).importedIds || []).forEach((mid: string) =>\r\n        depSets.add(mid)\r\n      )\r\n    }\r\n  }\r\n  return depMaps\r\n}\r\n"],"names":["APP_ROOT_PATH","normalizePath","process","cwd","appRootPathRE","RegExp","userJSFilePathRE","chunkNameRE","bundleName","__moduleDeps","moduleDeps","id","v","__appDepMap","appModuleIdChunkNamesMap","cssLangRE","__moduleInVenderMap","Map","manualChunksConfig","opts","request","getModuleInfo","cacheIdMap","nodeModuleInfo","isNodeModules","isInternalModule","test","staticImportedByEntry","has","name","set","matchedChunkName","exec","formatChunkName","length","rootModule","__spreadArray","__read","chunkNames","chunkName","appModuleInfo","name_1","indexOf","names","filter","i","_a","sort","a","b","c1","c2","concat","assembleChunkName","getAppModuleChunkName","Boolean","replace","cache","importStack","get","includes","mod","isEntry","someImporterIs","importers","some","importer","getManualChunks","initialManualChunks","userDefinedManualChunks","undefined","result","routeChunkNameRE","nodeModuleRE","getNodeModulesName","mached","getImportersChunkNames","depMaps","ids","resSets","Set","ids_1","__values","ids_1_1","done","next","sid","value","info","forEach","item","add","_b","getDynamicModuleName","push","dynamicNameCache","moduleId","chunkNameRes","filePath","fileName","basename","extname","count","_resolveIdByAlias","_config","nodeModuleIdSets","appModuleIdSets","apply","load","configResolved","resolvedConfig","buildEnd","appModuleIdMap","idSets","idSets_1","idSets_1_1","rootNames","appModuleId2chunkNamesMap","this","nodeModuleIdMap","moduleName","importedIds","depSets","importedId","mid","depSets_1","e_4","depSets_1_1","idSets_2","idSets_2_1","nodeModuleId2issuerMap","transform","source","str","MagicString","imports","parseImports","parse","index","sstart","send","start","end","rawValue","rawUrl","slice","matched","resolvedId","resolveId","call","rid","sent","newContent","overwrite","code","toString","map","build","sourcemap","generateMap","includeContent","hires","config","userConfig","rollupOptions","output","Array","isArray","manualChunks","Object","assign","userAlias","resolve","alias","entries"],"mappings":"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"}