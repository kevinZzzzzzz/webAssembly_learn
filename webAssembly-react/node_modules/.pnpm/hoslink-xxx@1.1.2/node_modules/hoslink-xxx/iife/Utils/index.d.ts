/**
 * 去掉字符串空格
 * example:
 * @params str 字符串内容
 * @params global 是否匹配全部空格
 * @returns string
 */
export declare const trim: (str: string, global?: boolean) => string;
/**
 * 深度为对象的每个属性都去掉空格
 * @params data 任意类型的值
 * @returns data
 */
export declare const everyTrim: (data: any) => any;
/**
 * 判断是否为对象
 * example:
 * @params obj 任意类型的值
 * @returns true | false
 */
export declare const isObject: (obj: any) => boolean;
/**
 * 将参数拼接到接口 url 上
 * @params obj 对象
 * @returns temp 完整接口 uri 路径
 */
export declare const formatGetParams: (obj: any) => string;
/**
 * 密码加密(不可逆)
 * @params str 密码
 * @returns str 加密后的密码
 */
export declare const pwdencrypt: (str: string) => string;
/**
 * 获取 localStroage 的值(对象类型)
 * @params key 查询的 key 值
 * @returns value 值
 */
export declare const getLocalStroage: (key: string) => (key2: string | number) => any;
/**
 * 获取 SessionStroage 的值(对象类型)
 * @params key 查询的 key 值
 * @returns value 值
 */
export declare const getSessionStroage: (key: string) => (key2: string | number) => any;
/**
 * 获取系统配置 AppData
 * @params key 查询的 key 值
 * @returns value 值
 */
export declare const getApp: (key: string) => any;
/**
 * 判断系统配置血袋号形式是否为产品号 1 、献血码+产品码 2 、产品号 3 、穿越+海默
 * @params null
 * @returns true | false
 */
export declare const isBloodMap: () => boolean;
/**
 * 获取当前系统的定制医院 id
 * @params null
 * @returns string | number
 */
export declare const getCustom: () => any;
/**
 * 获取当前系统的消息提示 0 语音播报 1 铃声播报
 * @params null
 * @returns string | number
 */
export declare const getBroadCast: () => any;
/**
 * 比较前一个版本号是否比后一个版本号高
 * example:
 * `compareVer('1.1.1', '1.2.1') => false`
 * @params firstV 比较的版本号
 * @params secV 被比较的版本号
 * @returns true or false
 */
export declare const compareVer: (appV: string, serverV: string) => boolean;
/**
 * 深度合并对象(当前用于合并系统配置文件 app-data.json)
 * （已存在的属性不覆盖）
 * @param oldObj 旧对象
 * @param newObj 新对象
 * @param keys 强制覆盖属性的数组
 */
export declare const mergeObj: (oldObj: any, newObj: any, keys?: string[]) => any;
/**
 * 读、写、删除 cookie
 * @param key 键
 * @param value 值
 * @param time 保存事件
 */
export declare function setCookie(key: string, value: string, time: number): void;
export declare function getCookie(key: string): string;
export declare function removeCookie(key: string): void;
/**
 * 读、写 localStorage sessionStorage
 * @param 本地缓存类型 localStorage|sessionStorage
 * @param key 键
 * @param value 值
 */
type Type = 'localStorage' | 'sessionStorage';
export declare function setStorage(type: Type, key: string, value: string): void;
export declare function getStorage(type: Type, key: string): any;
/**
 * getV(obj, 'name', 'children' ...)
 * @param args
 * @returns {object | string}
 */
export declare const getV: (...args: any[]) => object | string;
/**
 * Base64 转换
 * @param input 内容
 * @returns output 转成 base64
 */
export declare const Base64: (input: string) => string;
/**
 * 解密菜单
 * @param hex 内容
 * @returns out 解密后的菜单
 */
export declare const hextoString: (hex: string) => string;
/**
 * 过滤菜单
 * @param menuList 所有菜单
 * @param role 用户权限
 * @returns arr 菜单
 */
export declare const getFilterMenu: (menuList: any[], role: string) => any[];
/**
 * 时间 format
 * @param date
 * @param {string} format
 * @returns {string}
 */
export declare const dateFormat: (date?: any, format?: string) => string;
/**
 * 时间截取控制
 * @param type subtract | add
 * @param {number | string} amount 截取数量
 * @param {unit} 单位 截取单位
 * @param {string} format
 * @returns {string}
 */
type Base = 'year' | 'years' | 'y' | 'month' | 'months' | 'M' | 'week' | 'weeks' | 'w' | 'day' | 'days' | 'd' | 'hour' | 'hours' | 'h' | 'minute' | 'minutes' | 'm' | 'second' | 'seconds' | 's' | 'millisecond' | 'milliseconds' | 'ms';
type _quarter = 'quarter' | 'quarters' | 'Q';
type controlType = 'subtract' | 'add';
export declare const dateControl: (type: controlType, amount: number | string, unit: Base | _quarter, format?: string) => string;
/**
 * 申请单排序规则
 * @type {string[]}
 */
export declare const ApplicationSort: string[];
/**
 * 当前用来处理申请单列表的排序过滤
 * @param arr
 * @param filter
 * @param sort
 * @param key
 * @param rule
 * @returns {any}
 */
export declare const applicationFilterSort: (arr: Array<any>, filter: Array<any>, sort?: string, key?: string, rule?: Array<any>) => any;
/**
 * 合并表格跨行
 * @param arr
 * @param keys:Array<String>
 * @returns {any}
 */
export declare const mainKeys: (keys: any[], n: number) => string;
export declare const arrToMapper: (arr: any[], ...keys: any[]) => void;
export declare const tableMapperRow: (arr: any[], ...keys: (string | number)[]) => any[];
export {};
//# sourceMappingURL=index.d.ts.map