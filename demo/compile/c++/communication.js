
var Module = (() => {
  var _scriptName = typeof document != 'undefined' ? document.currentScript?.src : undefined;
  
  return (
  function(moduleArg = {}) {
    var moduleRtn;

  // include: shell.js
  // The Module object: Our interface to the outside world. We import
  // and export values on it. There are various ways Module can be used:
  // 1. Not defined. We create it here
  // 2. A function parameter, function(moduleArg) => Promise<Module>
  // 3. pre-run appended it, var Module = {}; ..generated code..
  // 4. External script tag defines var Module.
  // We need to check if Module already exists (e.g. case 3 above).
  // Substitution will be replaced with actual code on later stage of the build,
  // this way Closure Compiler will not mangle it (e.g. case 4. above).
  // Note that if you want to run closure, and also to use Module
  // after the generated code, you will need to define   var Module = {};
  // before the code. Then that object will be used in the code, and you
  // can continue to use Module afterwards as well.
  var Module = moduleArg;

  // Set up the promise that indicates the Module is initialized
  var readyPromiseResolve, readyPromiseReject;
  var readyPromise = new Promise((resolve, reject) => {
    readyPromiseResolve = resolve;
    readyPromiseReject = reject;
  });
  ["_memory","___indirect_function_table","onRuntimeInitialized"].forEach((prop) => {
    if (!Object.getOwnPropertyDescriptor(readyPromise, prop)) {
      Object.defineProperty(readyPromise, prop, {
        get: () => abort('You are getting ' + prop + ' on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js'),
        set: () => abort('You are setting ' + prop + ' on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js'),
      });
    }
  });

  // Determine the runtime environment we are in. You can customize this by
  // setting the ENVIRONMENT setting at compile time (see settings.js).

  var ENVIRONMENT_IS_WEB = true;
  var ENVIRONMENT_IS_WORKER = false;
  var ENVIRONMENT_IS_NODE = false;
  var ENVIRONMENT_IS_SHELL = false;

  // --pre-jses are emitted after the Module integration code, so that they can
  // refer to Module (if they choose; they can also define Module)


  // Sometimes an existing Module object exists with properties
  // meant to overwrite the default module functionality. Here
  // we collect those properties and reapply _after_ we configure
  // the current environment's defaults to avoid having to be so
  // defensive during initialization.
  var moduleOverrides = Object.assign({}, Module);

  var arguments_ = [];
  var thisProgram = './this.program';
  var quit_ = (status, toThrow) => {
    throw toThrow;
  };

  // `/` should be present at the end if `scriptDirectory` is not empty
  var scriptDirectory = '';
  function locateFile(path) {
    if (Module['locateFile']) {
      return Module['locateFile'](path, scriptDirectory);
    }
    return scriptDirectory + path;
  }

  // Hooks that are implemented differently in different runtime environments.
  var readAsync, readBinary;

  if (ENVIRONMENT_IS_SHELL) {

    if ((typeof process == 'object' && typeof require === 'function') || typeof window == 'object' || typeof importScripts == 'function') throw new Error('not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)');

  } else

  // Note that this includes Node.js workers when relevant (pthreads is enabled).
  // Node.js workers are detected as a combination of ENVIRONMENT_IS_WORKER and
  // ENVIRONMENT_IS_NODE.
  if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
    if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
      scriptDirectory = self.location.href;
    } else if (typeof document != 'undefined' && document.currentScript) { // web
      scriptDirectory = document.currentScript.src;
    }
    // When MODULARIZE, this JS may be executed later, after document.currentScript
    // is gone, so we saved it, and we use it here instead of any other info.
    if (_scriptName) {
      scriptDirectory = _scriptName;
    }
    // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
    // otherwise, slice off the final part of the url to find the script directory.
    // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
    // and scriptDirectory will correctly be replaced with an empty string.
    // If scriptDirectory contains a query (starting with ?) or a fragment (starting with #),
    // they are removed because they could contain a slash.
    if (scriptDirectory.startsWith('blob:')) {
      scriptDirectory = '';
    } else {
      scriptDirectory = scriptDirectory.substr(0, scriptDirectory.replace(/[?#].*/, '').lastIndexOf('/')+1);
    }

    if (!(typeof window == 'object' || typeof importScripts == 'function')) throw new Error('not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)');

    {
  // include: web_or_worker_shell_read.js
  readAsync = (url) => {
      assert(!isFileURI(url), "readAsync does not work with file:// URLs");
      return fetch(url, { credentials: 'same-origin' })
        .then((response) => {
          if (response.ok) {
            return response.arrayBuffer();
          }
          return Promise.reject(new Error(response.status + ' : ' + response.url));
        })
    };
  // end include: web_or_worker_shell_read.js
    }
  } else
  {
    throw new Error('environment detection error');
  }

  var out = Module['print'] || console.log.bind(console);
  var err = Module['printErr'] || console.error.bind(console);

  // Merge back in the overrides
  Object.assign(Module, moduleOverrides);
  // Free the object hierarchy contained in the overrides, this lets the GC
  // reclaim data used.
  moduleOverrides = null;
  checkIncomingModuleAPI();

  // Emit code to handle expected values on the Module object. This applies Module.x
  // to the proper local x. This has two benefits: first, we only emit it if it is
  // expected to arrive, and second, by using a local everywhere else that can be
  // minified.

  if (Module['arguments']) arguments_ = Module['arguments'];legacyModuleProp('arguments', 'arguments_');

  if (Module['thisProgram']) thisProgram = Module['thisProgram'];legacyModuleProp('thisProgram', 'thisProgram');

  // perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
  // Assertions on removed incoming Module JS APIs.
  assert(typeof Module['memoryInitializerPrefixURL'] == 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');
  assert(typeof Module['pthreadMainPrefixURL'] == 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');
  assert(typeof Module['cdInitializerPrefixURL'] == 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');
  assert(typeof Module['filePackagePrefixURL'] == 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');
  assert(typeof Module['read'] == 'undefined', 'Module.read option was removed');
  assert(typeof Module['readAsync'] == 'undefined', 'Module.readAsync option was removed (modify readAsync in JS)');
  assert(typeof Module['readBinary'] == 'undefined', 'Module.readBinary option was removed (modify readBinary in JS)');
  assert(typeof Module['setWindowTitle'] == 'undefined', 'Module.setWindowTitle option was removed (modify emscripten_set_window_title in JS)');
  assert(typeof Module['TOTAL_MEMORY'] == 'undefined', 'Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY');
  legacyModuleProp('asm', 'wasmExports');
  legacyModuleProp('readAsync', 'readAsync');
  legacyModuleProp('readBinary', 'readBinary');
  legacyModuleProp('setWindowTitle', 'setWindowTitle');
  var IDBFS = 'IDBFS is no longer included by default; build with -lidbfs.js';
  var PROXYFS = 'PROXYFS is no longer included by default; build with -lproxyfs.js';
  var WORKERFS = 'WORKERFS is no longer included by default; build with -lworkerfs.js';
  var FETCHFS = 'FETCHFS is no longer included by default; build with -lfetchfs.js';
  var ICASEFS = 'ICASEFS is no longer included by default; build with -licasefs.js';
  var JSFILEFS = 'JSFILEFS is no longer included by default; build with -ljsfilefs.js';
  var OPFS = 'OPFS is no longer included by default; build with -lopfs.js';

  var NODEFS = 'NODEFS is no longer included by default; build with -lnodefs.js';

  assert(!ENVIRONMENT_IS_WORKER, 'worker environment detected but not enabled at build time.  Add `worker` to `-sENVIRONMENT` to enable.');

  assert(!ENVIRONMENT_IS_NODE, 'node environment detected but not enabled at build time.  Add `node` to `-sENVIRONMENT` to enable.');

  assert(!ENVIRONMENT_IS_SHELL, 'shell environment detected but not enabled at build time.  Add `shell` to `-sENVIRONMENT` to enable.');

  // end include: shell.js

  // include: preamble.js
  // === Preamble library stuff ===

  // Documentation for the public APIs defined in this file must be updated in:
  //    site/source/docs/api_reference/preamble.js.rst
  // A prebuilt local version of the documentation is available at:
  //    site/build/text/docs/api_reference/preamble.js.txt
  // You can also build docs locally as HTML or other formats in site/
  // An online HTML version (which may be of a different version of Emscripten)
  //    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

  var wasmBinary = Module['wasmBinary'];legacyModuleProp('wasmBinary', 'wasmBinary');

  // include: wasm2js.js
  // wasm2js.js - enough of a polyfill for the WebAssembly object so that we can load
  // wasm2js code that way.

  // Emit "var WebAssembly" if definitely using wasm2js. Otherwise, in MAYBE_WASM2JS
  // mode, we can't use a "var" since it would prevent normal wasm from working.
  /** @suppress{duplicate, const} */
  var
  WebAssembly = {
    // Note that we do not use closure quoting (this['buffer'], etc.) on these
    // functions, as they are just meant for internal use. In other words, this is
    // not a fully general polyfill.
    /** @constructor */
    Memory: function(opts) {
      this.buffer = new ArrayBuffer(opts['initial'] * 65536);
    },

    Module: function(binary) {
      // TODO: use the binary and info somehow - right now the wasm2js output is embedded in
      // the main JS
    },

    /** @constructor */
    Instance: function(module, info) {
      // TODO: use the module somehow - right now the wasm2js output is embedded in
      // the main JS
      // This will be replaced by the actual wasm2js code.
      this.exports = (
  function instantiate(info) {
  function Table(ret) {
    // grow method not included; table is not growable
    ret.set = function(i, func) {
      this[i] = func;
    };
    ret.get = function(i) {
      return this[i];
    };
    return ret;
  }

    var bufferView;
    var base64ReverseLookup = new Uint8Array(123/*'z'+1*/);
    for (var i = 25; i >= 0; --i) {
      base64ReverseLookup[48+i] = 52+i; // '0-9'
      base64ReverseLookup[65+i] = i; // 'A-Z'
      base64ReverseLookup[97+i] = 26+i; // 'a-z'
    }
    base64ReverseLookup[43] = 62; // '+'
    base64ReverseLookup[47] = 63; // '/'
    /** @noinline Inlining this function would mean expanding the base64 string 4x times in the source code, which Closure seems to be happy to do. */
    function base64DecodeToExistingUint8Array(uint8Array, offset, b64) {
      var b1, b2, i = 0, j = offset, bLength = b64.length, end = offset + (bLength*3>>2) - (b64[bLength-2] == '=') - (b64[bLength-1] == '=');
      for (; i < bLength; i += 4) {
        b1 = base64ReverseLookup[b64.charCodeAt(i+1)];
        b2 = base64ReverseLookup[b64.charCodeAt(i+2)];
        uint8Array[j++] = base64ReverseLookup[b64.charCodeAt(i)] << 2 | b1 >> 4;
        if (j < end) uint8Array[j++] = b1 << 4 | b2 >> 2;
        if (j < end) uint8Array[j++] = b2 << 6 | base64ReverseLookup[b64.charCodeAt(i+3)];
      }
    }
  function initActiveSegments(imports) {
    base64DecodeToExistingUint8Array(bufferView, 65536, "");
    base64DecodeToExistingUint8Array(bufferView, 84360, "8GIBAAAAAAAJAAAAAAAAAAAAAAA/AAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAQQAAAFhOAQAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFAAAAAAAAAAAAAABCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABDAAAARAAAAGhSAQAABAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAA/////woAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgSgEAAAAAAAUAAAAAAAAAAAAAAD8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEMAAABBAAAAcFYBAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALhKAQAlbS8lZC8leQAAAAglSDolTTolUwAAAAg=");
  }

    var scratchBuffer = new ArrayBuffer(16);
    var i32ScratchView = new Int32Array(scratchBuffer);
    var f32ScratchView = new Float32Array(scratchBuffer);
    var f64ScratchView = new Float64Array(scratchBuffer);
    
    function wasm2js_scratch_load_i32(index) {
      return i32ScratchView[index];
    }
        
    function wasm2js_scratch_store_i32(index, value) {
      i32ScratchView[index] = value;
    }
        
    function wasm2js_scratch_load_f64() {
      return f64ScratchView[0];
    }
        
    function wasm2js_scratch_store_f64(value) {
      f64ScratchView[0] = value;
    }
        function wasm2js_trap() { throw new Error('abort'); }

    function wasm2js_scratch_store_f32(value) {
      f32ScratchView[2] = value;
    }
        
    function wasm2js_scratch_load_f32() {
      return f32ScratchView[2];
    }
        
  function asmFunc(imports) {
  var buffer = new ArrayBuffer(16908288);
  var HEAP8 = new Int8Array(buffer);
  var HEAP16 = new Int16Array(buffer);
  var HEAP32 = new Int32Array(buffer);
  var HEAPU8 = new Uint8Array(buffer);
  var HEAPU16 = new Uint16Array(buffer);
  var HEAPU32 = new Uint32Array(buffer);
  var HEAPF32 = new Float32Array(buffer);
  var HEAPF64 = new Float64Array(buffer);
  var Math_imul = Math.imul;
  var Math_fround = Math.fround;
  var Math_abs = Math.abs;
  var Math_clz32 = Math.clz32;
  var Math_min = Math.min;
  var Math_max = Math.max;
  var Math_floor = Math.floor;
  var Math_ceil = Math.ceil;
  var Math_trunc = Math.trunc;
  var Math_sqrt = Math.sqrt;
  var env = imports.env;
  var fimport$0 = env._embind_register_class;
  var fimport$1 = env._embind_register_void;
  var fimport$2 = env._embind_register_bool;
  var fimport$3 = env._embind_register_integer;
  var fimport$4 = env._embind_register_float;
  var fimport$5 = env._embind_register_std_string;
  var fimport$6 = env._embind_register_std_wstring;
  var fimport$7 = env._embind_register_emval;
  var fimport$8 = env._embind_register_memory_view;
  var fimport$9 = env._embind_register_class_constructor;
  var fimport$10 = env._embind_register_class_function;
  var fimport$11 = env._emval_decref;
  var fimport$12 = env._emval_call;
  var fimport$13 = env._emval_get_method_caller;
  var fimport$14 = env._emval_run_destructors;
  var fimport$15 = env._emscripten_memcpy_js;
  var fimport$16 = env.emscripten_resize_heap;
  var wasi_snapshot_preview1 = imports.wasi_snapshot_preview1;
  var fimport$17 = wasi_snapshot_preview1.fd_write;
  var fimport$18 = wasi_snapshot_preview1.fd_read;
  var fimport$19 = wasi_snapshot_preview1.fd_close;
  var fimport$20 = env._abort_js;
  var fimport$21 = wasi_snapshot_preview1.environ_sizes_get;
  var fimport$22 = wasi_snapshot_preview1.environ_get;
  var fimport$23 = env._tzset_js;
  var fimport$24 = env.__assert_fail;
  var fimport$25 = env._embind_register_bigint;
  var fimport$26 = wasi_snapshot_preview1.fd_seek;
  var global$0 = 65536;
  var global$1 = 0;
  var global$2 = 0;
  var global$3 = 0;
  var __wasm_intrinsics_temp_i64 = 0;
  var __wasm_intrinsics_temp_i64$hi = 0;
  var i64toi32_i32$HIGH_BITS = 0;
  // EMSCRIPTEN_START_FUNCS
  ;
  function $0() {
    $1839();
    $535();
    $576();
    $4();
    $113();
    $119();
    $1739();
  }
  
  function $1($0_1) {
    $0_1 = $0_1 | 0;
    return $121(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0;
  }
  
  function $2($0_1) {
    $0_1 = $0_1 | 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[(0 + 84848 | 0) >> 2] | 0;
    HEAP32[(0 + 84848 | 0) >> 2] = $0_1;
  }
  
  function $3() {
    var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
    fimport$1(83896 | 0, 66206 | 0);
    fimport$2(83920 | 0, 66019 | 0, 1 | 0, 0 | 0);
    fimport$3(83932 | 0, 65885 | 0, 1 | 0, -128 | 0, 127 | 0);
    fimport$3(83956 | 0, 65878 | 0, 1 | 0, -128 | 0, 127 | 0);
    fimport$3(83944 | 0, 65876 | 0, 1 | 0, 0 | 0, 255 | 0);
    fimport$3(83968 | 0, 65771 | 0, 2 | 0, -32768 | 0, 32767 | 0);
    fimport$3(83980 | 0, 65762 | 0, 2 | 0, 0 | 0, 65535 | 0);
    fimport$3(83992 | 0, 65786 | 0, 4 | 0, -2147483648 | 0, 2147483647 | 0);
    fimport$3(84004 | 0, 65777 | 0, 4 | 0, 0 | 0, -1 | 0);
    fimport$3(84016 | 0, 66066 | 0, 4 | 0, -2147483648 | 0, 2147483647 | 0);
    fimport$3(84028 | 0, 66057 | 0, 4 | 0, 0 | 0, -1 | 0);
    i64toi32_i32$0 = -2147483648;
    i64toi32_i32$1 = 2147483647;
    $1856(84040 | 0, 65805 | 0, 8 | 0, 0 | 0, i64toi32_i32$0 | 0, -1 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = -1;
    $1856(84052 | 0, 65804 | 0, 8 | 0, 0 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$0 | 0);
    fimport$4(84064 | 0, 65794 | 0, 4 | 0);
    fimport$4(84076 | 0, 66173 | 0, 8 | 0);
    fimport$5(67248 | 0, 66097 | 0);
    fimport$5(67320 | 0, 66853 | 0);
    fimport$6(67392 | 0, 4 | 0, 66071 | 0);
    fimport$6(67468 | 0, 2 | 0, 66109 | 0);
    fimport$6(67544 | 0, 4 | 0, 66124 | 0);
    fimport$7(68228 | 0);
    fimport$8(67584 | 0, 0 | 0, 66784 | 0);
    fimport$8(67624 | 0, 0 | 0, 66886 | 0);
    fimport$8(67664 | 0, 1 | 0, 66814 | 0);
    fimport$8(67704 | 0, 2 | 0, 66349 | 0);
    fimport$8(67744 | 0, 3 | 0, 66380 | 0);
    fimport$8(67784 | 0, 4 | 0, 66420 | 0);
    fimport$8(67824 | 0, 5 | 0, 66449 | 0);
    fimport$8(67864 | 0, 4 | 0, 66923 | 0);
    fimport$8(67904 | 0, 5 | 0, 66953 | 0);
    fimport$8(67624 | 0, 0 | 0, 66551 | 0);
    fimport$8(67664 | 0, 1 | 0, 66518 | 0);
    fimport$8(67704 | 0, 2 | 0, 66617 | 0);
    fimport$8(67744 | 0, 3 | 0, 66583 | 0);
    fimport$8(67784 | 0, 4 | 0, 66751 | 0);
    fimport$8(67824 | 0, 5 | 0, 66717 | 0);
    fimport$8(67944 | 0, 8 | 0, 66684 | 0);
    fimport$8(67984 | 0, 9 | 0, 66650 | 0);
    fimport$8(68024 | 0, 6 | 0, 66487 | 0);
    fimport$8(68064 | 0, 7 | 0, 66992 | 0);
  }
  
  function $4() {
    HEAP32[(0 + 84852 | 0) >> 2] = 1;
    HEAP32[(0 + 84856 | 0) >> 2] = 0;
    $3();
    HEAP32[(0 + 84856 | 0) >> 2] = HEAP32[(0 + 84848 | 0) >> 2] | 0;
    HEAP32[(0 + 84848 | 0) >> 2] = 84852;
  }
  
  function $5() {
    $6(84860 | 0) | 0;
    return;
  }
  
  function $6($0_1) {
    $0_1 = $0_1 | 0;
    var $3_1 = 0, $4_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
    $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
    $8($4_1 | 0, 2 | 0) | 0;
    global$0 = $3_1 + 16 | 0;
    return $4_1 | 0;
  }
  
  function $7() {
    var $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $33_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $15_1 = 0, $16_1 = 0, $18_1 = 0, $19_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $31_1 = 0, $151_1 = 0, $35_1 = 0, $36_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $179_1 = 0, $192_1 = 0, $45_1 = 0, $46_1 = 0, $48_1 = 0, $49_1 = 0, $218_1 = 0;
    $2_1 = global$0 - 160 | 0;
    global$0 = $2_1;
    HEAP32[($2_1 + 64 | 0) >> 2] = $2_1 + 43 | 0;
    HEAP32[($2_1 + 60 | 0) >> 2] = 65989;
    $9();
    HEAP32[($2_1 + 56 | 0) >> 2] = 3;
    HEAP32[($2_1 + 52 | 0) >> 2] = $11() | 0;
    HEAP32[($2_1 + 48 | 0) >> 2] = $12() | 0;
    HEAP32[($2_1 + 44 | 0) >> 2] = 4;
    $10_1 = $14() | 0;
    $11_1 = $15() | 0;
    $12_1 = $16() | 0;
    $13_1 = $17() | 0;
    HEAP32[($2_1 + 136 | 0) >> 2] = HEAP32[($2_1 + 56 | 0) >> 2] | 0;
    $15_1 = $18() | 0;
    $16_1 = HEAP32[($2_1 + 56 | 0) >> 2] | 0;
    HEAP32[($2_1 + 144 | 0) >> 2] = HEAP32[($2_1 + 52 | 0) >> 2] | 0;
    $18_1 = $19() | 0;
    $19_1 = HEAP32[($2_1 + 52 | 0) >> 2] | 0;
    HEAP32[($2_1 + 140 | 0) >> 2] = HEAP32[($2_1 + 48 | 0) >> 2] | 0;
    $21_1 = $19() | 0;
    $22_1 = HEAP32[($2_1 + 48 | 0) >> 2] | 0;
    $23_1 = HEAP32[($2_1 + 60 | 0) >> 2] | 0;
    HEAP32[($2_1 + 148 | 0) >> 2] = HEAP32[($2_1 + 44 | 0) >> 2] | 0;
    fimport$0($10_1 | 0, $11_1 | 0, $12_1 | 0, $13_1 | 0, $15_1 | 0, $16_1 | 0, $18_1 | 0, $19_1 | 0, $21_1 | 0, $22_1 | 0, $23_1 | 0, $20() | 0 | 0, HEAP32[($2_1 + 44 | 0) >> 2] | 0 | 0);
    HEAP32[($2_1 + 68 | 0) >> 2] = $2_1 + 43 | 0;
    HEAP32[($2_1 + 156 | 0) >> 2] = HEAP32[($2_1 + 68 | 0) >> 2] | 0;
    HEAP32[($2_1 + 152 | 0) >> 2] = 5;
    $31_1 = HEAP32[($2_1 + 156 | 0) >> 2] | 0;
    $22(HEAP32[($2_1 + 152 | 0) >> 2] | 0 | 0);
    $33_1 = 0;
    HEAP32[($2_1 + 36 | 0) >> 2] = $33_1;
    HEAP32[($2_1 + 32 | 0) >> 2] = 6;
    i64toi32_i32$0 = HEAP32[($2_1 + 32 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($2_1 + 36 | 0) >> 2] | 0;
    $151_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $2_1;
    HEAP32[($2_1 + 72 | 0) >> 2] = $151_1;
    HEAP32[($2_1 + 76 | 0) >> 2] = i64toi32_i32$1;
    $35_1 = HEAP32[($2_1 + 72 | 0) >> 2] | 0;
    $36_1 = HEAP32[($2_1 + 76 | 0) >> 2] | 0;
    HEAP32[($2_1 + 100 | 0) >> 2] = $31_1;
    HEAP32[($2_1 + 96 | 0) >> 2] = 66263;
    HEAP32[($2_1 + 92 | 0) >> 2] = $36_1;
    HEAP32[($2_1 + 88 | 0) >> 2] = $35_1;
    $38_1 = HEAP32[($2_1 + 100 | 0) >> 2] | 0;
    $39_1 = HEAP32[($2_1 + 96 | 0) >> 2] | 0;
    $40_1 = HEAP32[($2_1 + 88 | 0) >> 2] | 0;
    HEAP32[($2_1 + 84 | 0) >> 2] = HEAP32[($2_1 + 92 | 0) >> 2] | 0;
    HEAP32[($2_1 + 80 | 0) >> 2] = $40_1;
    i64toi32_i32$1 = HEAP32[($2_1 + 80 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($2_1 + 84 | 0) >> 2] | 0;
    $179_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $2_1;
    HEAP32[($2_1 + 8 | 0) >> 2] = $179_1;
    HEAP32[($2_1 + 12 | 0) >> 2] = i64toi32_i32$0;
    $24($39_1 | 0, $2_1 + 8 | 0 | 0);
    HEAP32[($2_1 + 28 | 0) >> 2] = $33_1;
    HEAP32[($2_1 + 24 | 0) >> 2] = 7;
    i64toi32_i32$0 = HEAP32[($2_1 + 24 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($2_1 + 28 | 0) >> 2] | 0;
    $192_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $2_1;
    HEAP32[($2_1 + 104 | 0) >> 2] = $192_1;
    HEAP32[($2_1 + 108 | 0) >> 2] = i64toi32_i32$1;
    $45_1 = HEAP32[($2_1 + 104 | 0) >> 2] | 0;
    $46_1 = HEAP32[($2_1 + 108 | 0) >> 2] | 0;
    HEAP32[($2_1 + 132 | 0) >> 2] = $38_1;
    HEAP32[($2_1 + 128 | 0) >> 2] = 66253;
    HEAP32[($2_1 + 124 | 0) >> 2] = $46_1;
    HEAP32[($2_1 + 120 | 0) >> 2] = $45_1;
    $48_1 = HEAP32[($2_1 + 128 | 0) >> 2] | 0;
    $49_1 = HEAP32[($2_1 + 120 | 0) >> 2] | 0;
    HEAP32[($2_1 + 116 | 0) >> 2] = HEAP32[($2_1 + 124 | 0) >> 2] | 0;
    HEAP32[($2_1 + 112 | 0) >> 2] = $49_1;
    i64toi32_i32$1 = HEAP32[($2_1 + 112 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($2_1 + 116 | 0) >> 2] | 0;
    $218_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $2_1;
    HEAP32[($2_1 + 16 | 0) >> 2] = $218_1;
    HEAP32[($2_1 + 20 | 0) >> 2] = i64toi32_i32$0;
    $26($48_1 | 0, $2_1 + 16 | 0 | 0);
    global$0 = $2_1 + 160 | 0;
    return;
  }
  
  function $8($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $4_1 = 0, $5_1 = 0;
    $4_1 = global$0 - 16 | 0;
    global$0 = $4_1;
    HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
    HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
    $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
    HEAP32[$5_1 >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
    HEAP32[($5_1 + 4 | 0) >> 2] = 0;
    FUNCTION_TABLE[HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0]();
    $2($5_1 | 0);
    global$0 = $4_1 + 16 | 0;
    return $5_1 | 0;
  }
  
  function $9() {
    
  }
  
  function $10($0_1) {
    $0_1 = $0_1 | 0;
    var $3_1 = 0, $5_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
    $5_1 = $32(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
    global$0 = $3_1 + 16 | 0;
    return $5_1 | 0;
  }
  
  function $11() {
    return 0 | 0;
  }
  
  function $12() {
    return 0 | 0;
  }
  
  function $13($0_1) {
    $0_1 = $0_1 | 0;
    var $3_1 = 0, $4_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
    $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
    label$1 : {
    if (($4_1 | 0) == (0 | 0) & 1 | 0) {
      break label$1
    }
    $1747($4_1 | 0, 1 | 0);
    }
    global$0 = $3_1 + 16 | 0;
    return;
  }
  
  function $14() {
    return $33() | 0 | 0;
  }
  
  function $15() {
    return $34() | 0 | 0;
  }
  
  function $16() {
    return $35() | 0 | 0;
  }
  
  function $17() {
    return 0 | 0;
  }
  
  function $18() {
    return 68168 | 0;
  }
  
  function $19() {
    return 68171 | 0;
  }
  
  function $20() {
    return 68173 | 0;
  }
  
  function $21() {
    var $1_1 = 0;
    $1_1 = $1743(1 | 0) | 0;
    $36($1_1 | 0) | 0;
    return $1_1 | 0;
  }
  
  function $22($0_1) {
    $0_1 = $0_1 | 0;
    var $3_1 = 0, $5_1 = 0, $9_1 = 0, $13_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
    HEAP32[$3_1 >> 2] = 8;
    $5_1 = $14() | 0;
    $9_1 = $38($3_1 + 7 | 0 | 0) | 0;
    $13_1 = $39($3_1 + 7 | 0 | 0) | 0;
    HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[$3_1 >> 2] | 0;
    fimport$9($5_1 | 0, $9_1 | 0, $13_1 | 0, $18() | 0 | 0, HEAP32[$3_1 >> 2] | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0);
    global$0 = $3_1 + 16 | 0;
    return;
  }
  
  function $23($0_1) {
    $0_1 = $0_1 | 0;
    var $3_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
    $29($27(87844 | 0, 65536 | 0) | 0 | 0, 9 | 0) | 0;
    global$0 = $3_1 + 16 | 0;
    return;
  }
  
  function $24($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $4_1 = 0, $26_1 = 0, $5_1 = 0, $6_1 = 0, $8_1 = 0, $9_1 = 0, $13_1 = 0, $17_1 = 0;
    $4_1 = global$0 - 32 | 0;
    global$0 = $4_1;
    $5_1 = HEAP32[$1_1 >> 2] | 0;
    $6_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
    HEAP32[($4_1 + 20 | 0) >> 2] = $6_1;
    HEAP32[($4_1 + 16 | 0) >> 2] = $5_1;
    HEAP32[($4_1 + 12 | 0) >> 2] = 10;
    $8_1 = $14() | 0;
    $9_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
    $13_1 = $81($4_1 + 11 | 0 | 0) | 0;
    $17_1 = $82($4_1 + 11 | 0 | 0) | 0;
    HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
    $26_1 = 0;
    fimport$10($8_1 | 0, $9_1 | 0, $13_1 | 0, $17_1 | 0, $83() | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, $84($4_1 + 16 | 0 | 0) | 0 | 0, 0 | 0, $26_1 & 1 | 0 | 0, $26_1 & 1 | 0 | 0);
    global$0 = $4_1 + 32 | 0;
    return;
  }
  
  function $25($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $5_1 = 0;
    $5_1 = global$0 - 32 | 0;
    global$0 = $5_1;
    HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
    HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
    HEAP8[($5_1 + 23 | 0) >> 0] = $2_1;
    label$1 : {
    if (!((HEAPU8[($5_1 + 23 | 0) >> 0] | 0) & 1 | 0)) {
      break label$1
    }
    $30($5_1 + 12 | 0 | 0, $1_1 | 0);
    $31($5_1 + 12 | 0 | 0) | 0;
    }
    global$0 = $5_1 + 32 | 0;
    return;
  }
  
  function $26($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $4_1 = 0, $26_1 = 0, $5_1 = 0, $6_1 = 0, $8_1 = 0, $9_1 = 0, $13_1 = 0, $17_1 = 0;
    $4_1 = global$0 - 32 | 0;
    global$0 = $4_1;
    $5_1 = HEAP32[$1_1 >> 2] | 0;
    $6_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
    HEAP32[($4_1 + 20 | 0) >> 2] = $6_1;
    HEAP32[($4_1 + 16 | 0) >> 2] = $5_1;
    HEAP32[($4_1 + 12 | 0) >> 2] = 11;
    $8_1 = $14() | 0;
    $9_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
    $13_1 = $88($4_1 + 11 | 0 | 0) | 0;
    $17_1 = $89($4_1 + 11 | 0 | 0) | 0;
    HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
    $26_1 = 0;
    fimport$10($8_1 | 0, $9_1 | 0, $13_1 | 0, $17_1 | 0, $90() | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, $91($4_1 + 16 | 0 | 0) | 0 | 0, 0 | 0, $26_1 & 1 | 0 | 0, $26_1 & 1 | 0 | 0);
    global$0 = $4_1 + 32 | 0;
    return;
  }
  
  function $27($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $4_1 = 0, $9_1 = 0;
    $4_1 = global$0 - 16 | 0;
    global$0 = $4_1;
    HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
    HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
    $9_1 = $43(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, $42(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
    global$0 = $4_1 + 16 | 0;
    return $9_1 | 0;
  }
  
  function $28($0_1) {
    $0_1 = $0_1 | 0;
    var $3_1 = 0, $5_1 = 0, $12_1 = 0, $16_1 = 0, $20_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
    $5_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
    $12_1 = 24;
    $16_1 = 24;
    $228(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, (($44($5_1 + (HEAP32[((HEAP32[$5_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, (10 << $12_1 | 0) >> $12_1 | 0 | 0) | 0) << $16_1 | 0) >> $16_1 | 0 | 0) | 0;
    $195(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
    $20_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
    global$0 = $3_1 + 16 | 0;
    return $20_1 | 0;
  }
  
  function $29($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $4_1 = 0, $7_1 = 0;
    $4_1 = global$0 - 16 | 0;
    global$0 = $4_1;
    HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
    HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
    $7_1 = FUNCTION_TABLE[HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0](HEAP32[($4_1 + 12 | 0) >> 2] | 0) | 0;
    global$0 = $4_1 + 16 | 0;
    return $7_1 | 0;
  }
  
  function $30($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $4_1 = 0;
    $4_1 = global$0 - 16 | 0;
    global$0 = $4_1;
    HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
    HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
    $99($0_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 12 | 0);
    global$0 = $4_1 + 16 | 0;
    return;
  }
  
  function $31($0_1) {
    $0_1 = $0_1 | 0;
    var $3_1 = 0, $4_1 = 0, $10_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
    $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    HEAP32[($3_1 + 12 | 0) >> 2] = $4_1;
    label$1 : {
    if (!(($96($4_1 | 0) | 0) & 1 | 0)) {
      break label$1
    }
    fimport$11($97($4_1 | 0) | 0 | 0);
    HEAP32[($4_1 + 4 | 0) >> 2] = 0;
    }
    $10_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
    global$0 = $3_1 + 16 | 0;
    return $10_1 | 0;
  }
  
  function $32($0_1) {
    $0_1 = $0_1 | 0;
    HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
    return 68088 | 0;
  }
  
  function $33() {
    return 68088 | 0;
  }
  
  function $34() {
    return 68116 | 0;
  }
  
  function $35() {
    return 68152 | 0;
  }
  
  function $36($0_1) {
    $0_1 = $0_1 | 0;
    var $3_1 = 0, $4_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
    $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
    $29($27(87844 | 0, 67043 | 0) | 0 | 0, 9 | 0) | 0;
    global$0 = $3_1 + 16 | 0;
    return $4_1 | 0;
  }
  
  function $37($0_1) {
    $0_1 = $0_1 | 0;
    var $3_1 = 0, $6_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
    $6_1 = $40(FUNCTION_TABLE[HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0]() | 0 | 0) | 0;
    global$0 = $3_1 + 16 | 0;
    return $6_1 | 0;
  }
  
  function $38($0_1) {
    $0_1 = $0_1 | 0;
    HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
    return 1 | 0;
  }
  
  function $39($0_1) {
    $0_1 = $0_1 | 0;
    var $3_1 = 0, $4_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
    $4_1 = $41() | 0;
    global$0 = $3_1 + 16 | 0;
    return $4_1 | 0;
  }
  
  function $40($0_1) {
    $0_1 = $0_1 | 0;
    var $3_1 = 0;
    $3_1 = global$0 - 16 | 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
    return HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0;
  }
  
  function $41() {
    return 68176 | 0;
  }
  
  function $42($0_1) {
    $0_1 = $0_1 | 0;
    var $3_1 = 0, $5_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
    $5_1 = $52(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
    global$0 = $3_1 + 16 | 0;
    return $5_1 | 0;
  }
  
  function $43($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $5_1 = 0, $21_1 = 0, $37_1 = 0, $43_1 = 0, $49_1 = 0, $57_1 = 0, $67_1 = 0, $20_1 = 0, $42_1 = 0, $48_1 = 0, $55_1 = 0, $77_1 = 0;
    $5_1 = global$0 - 32 | 0;
    global$0 = $5_1;
    HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
    HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
    HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
    $221($5_1 + 12 | 0 | 0, HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0) | 0;
    label$1 : {
    if (!(($45($5_1 + 12 | 0 | 0) | 0) & 1 | 0)) {
      break label$1
    }
    $46($5_1 + 4 | 0 | 0, HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0) | 0;
    $20_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
    $21_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
    label$2 : {
      label$3 : {
      if (!((($47($21_1 + (HEAP32[((HEAP32[$21_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0) & 176 | 0 | 0) == (32 | 0) & 1 | 0)) {
        break label$3
      }
      $37_1 = (HEAP32[($5_1 + 24 | 0) >> 2] | 0) + (HEAP32[($5_1 + 20 | 0) >> 2] | 0) | 0;
      break label$2;
      }
      $37_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
    }
    $42_1 = (HEAP32[($5_1 + 24 | 0) >> 2] | 0) + (HEAP32[($5_1 + 20 | 0) >> 2] | 0) | 0;
    $43_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
    $48_1 = $43_1 + (HEAP32[((HEAP32[$43_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0;
    $49_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
    $55_1 = $48($49_1 + (HEAP32[((HEAP32[$49_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0;
    $57_1 = 24;
    HEAP32[($5_1 + 8 | 0) >> 2] = $49(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0, $20_1 | 0, $37_1 | 0, $42_1 | 0, $48_1 | 0, ($55_1 << $57_1 | 0) >> $57_1 | 0 | 0) | 0;
    label$4 : {
      if (!(($50($5_1 + 8 | 0 | 0) | 0) & 1 | 0)) {
      break label$4
      }
      $67_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
      $51($67_1 + (HEAP32[((HEAP32[$67_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, 5 | 0);
    }
    }
    $222($5_1 + 12 | 0 | 0) | 0;
    $77_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
    global$0 = $5_1 + 32 | 0;
    return $77_1 | 0;
  }
  
  function $44($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $4_1 = 0, $14_1 = 0, $21_1 = 0, $17_1 = 0;
    $4_1 = global$0 - 16 | 0;
    global$0 = $4_1;
    HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
    HEAP8[($4_1 + 11 | 0) >> 0] = $1_1;
    $439($4_1 + 4 | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
    $14_1 = 24;
    $17_1 = $79($78($4_1 + 4 | 0 | 0) | 0 | 0, ((HEAPU8[($4_1 + 11 | 0) >> 0] | 0) << $14_1 | 0) >> $14_1 | 0 | 0) | 0;
    $668($4_1 + 4 | 0 | 0) | 0;
    $21_1 = 24;
    global$0 = $4_1 + 16 | 0;
    return ($17_1 << $21_1 | 0) >> $21_1 | 0 | 0;
  }
  
  function $45($0_1) {
    $0_1 = $0_1 | 0;
    var $3_1 = 0;
    $3_1 = global$0 - 16 | 0;
    HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
    return (HEAPU8[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 0] | 0) & 1 | 0 | 0;
  }
  
  function $46($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $4_1 = 0, $5_1 = 0, $6_1 = 0;
    $4_1 = global$0 - 16 | 0;
    global$0 = $4_1;
    HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
    HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
    $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
    $6_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
    HEAP32[$5_1 >> 2] = $58($6_1 + (HEAP32[((HEAP32[$6_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0;
    global$0 = $4_1 + 16 | 0;
    return $5_1 | 0;
  }
  
  function $47($0_1) {
    $0_1 = $0_1 | 0;
    var $3_1 = 0;
    $3_1 = global$0 - 16 | 0;
    HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
    return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0;
  }
  
  function $48($0_1) {
    $0_1 = $0_1 | 0;
    var $3_1 = 0, $4_1 = 0, $11_1 = 0, $15_1 = 0, $19_1 = 0, $21_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
    $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
    label$1 : {
    if (!(($60($59() | 0 | 0, HEAP32[($4_1 + 76 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
      break label$1
    }
    $11_1 = 24;
    $15_1 = 24;
    HEAP32[($4_1 + 76 | 0) >> 2] = (($44($4_1 | 0, (32 << $11_1 | 0) >> $11_1 | 0 | 0) | 0) << $15_1 | 0) >> $15_1 | 0;
    }
    $19_1 = 24;
    $21_1 = ((HEAP32[($4_1 + 76 | 0) >> 2] | 0) << $19_1 | 0) >> $19_1 | 0;
    global$0 = $3_1 + 16 | 0;
    return $21_1 | 0;
  }
  
  function $49($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    var $8_1 = 0, $57_1 = 0, $99_1 = 0;
    $8_1 = global$0 - 64 | 0;
    global$0 = $8_1;
    HEAP32[($8_1 + 56 | 0) >> 2] = $0_1;
    HEAP32[($8_1 + 52 | 0) >> 2] = $1_1;
    HEAP32[($8_1 + 48 | 0) >> 2] = $2_1;
    HEAP32[($8_1 + 44 | 0) >> 2] = $3_1;
    HEAP32[($8_1 + 40 | 0) >> 2] = $4_1;
    HEAP8[($8_1 + 39 | 0) >> 0] = $5_1;
    label$1 : {
    label$2 : {
      if (!((HEAP32[($8_1 + 56 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
      break label$2
      }
      HEAP32[($8_1 + 60 | 0) >> 2] = HEAP32[($8_1 + 56 | 0) >> 2] | 0;
      break label$1;
    }
    HEAP32[($8_1 + 32 | 0) >> 2] = (HEAP32[($8_1 + 44 | 0) >> 2] | 0) - (HEAP32[($8_1 + 52 | 0) >> 2] | 0) | 0;
    HEAP32[($8_1 + 28 | 0) >> 2] = $53(HEAP32[($8_1 + 40 | 0) >> 2] | 0 | 0) | 0;
    label$3 : {
      label$4 : {
      if (!((HEAP32[($8_1 + 28 | 0) >> 2] | 0 | 0) > (HEAP32[($8_1 + 32 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$4
      }
      HEAP32[($8_1 + 28 | 0) >> 2] = (HEAP32[($8_1 + 28 | 0) >> 2] | 0) - (HEAP32[($8_1 + 32 | 0) >> 2] | 0) | 0;
      break label$3;
      }
      HEAP32[($8_1 + 28 | 0) >> 2] = 0;
    }
    HEAP32[($8_1 + 24 | 0) >> 2] = (HEAP32[($8_1 + 48 | 0) >> 2] | 0) - (HEAP32[($8_1 + 52 | 0) >> 2] | 0) | 0;
    label$5 : {
      if (!((HEAP32[($8_1 + 24 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
      break label$5
      }
      label$6 : {
      if (!(($54(HEAP32[($8_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 52 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 24 | 0) >> 2] | 0 | 0) | 0 | 0) != (HEAP32[($8_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$6
      }
      HEAP32[($8_1 + 56 | 0) >> 2] = 0;
      HEAP32[($8_1 + 60 | 0) >> 2] = HEAP32[($8_1 + 56 | 0) >> 2] | 0;
      break label$1;
      }
    }
    label$7 : {
      if (!((HEAP32[($8_1 + 28 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
      break label$7
      }
      $57_1 = 24;
      $55($8_1 + 12 | 0 | 0, HEAP32[($8_1 + 28 | 0) >> 2] | 0 | 0, ((HEAPU8[($8_1 + 39 | 0) >> 0] | 0) << $57_1 | 0) >> $57_1 | 0 | 0) | 0;
      label$8 : {
      label$9 : {
        if (!(($54(HEAP32[($8_1 + 56 | 0) >> 2] | 0 | 0, $56($8_1 + 12 | 0 | 0) | 0 | 0, HEAP32[($8_1 + 28 | 0) >> 2] | 0 | 0) | 0 | 0) != (HEAP32[($8_1 + 28 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$9
        }
        HEAP32[($8_1 + 56 | 0) >> 2] = 0;
        HEAP32[($8_1 + 60 | 0) >> 2] = HEAP32[($8_1 + 56 | 0) >> 2] | 0;
        HEAP32[($8_1 + 8 | 0) >> 2] = 1;
        break label$8;
      }
      HEAP32[($8_1 + 8 | 0) >> 2] = 0;
      }
      $1761($8_1 + 12 | 0 | 0) | 0;
      label$10 : {
      switch (HEAP32[($8_1 + 8 | 0) >> 2] | 0 | 0) {
      case 1:
        break label$1;
      default:
        break label$10;
      };
      }
    }
    HEAP32[($8_1 + 24 | 0) >> 2] = (HEAP32[($8_1 + 44 | 0) >> 2] | 0) - (HEAP32[($8_1 + 48 | 0) >> 2] | 0) | 0;
    label$11 : {
      if (!((HEAP32[($8_1 + 24 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
      break label$11
      }
      label$12 : {
      if (!(($54(HEAP32[($8_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 48 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 24 | 0) >> 2] | 0 | 0) | 0 | 0) != (HEAP32[($8_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$12
      }
      HEAP32[($8_1 + 56 | 0) >> 2] = 0;
      HEAP32[($8_1 + 60 | 0) >> 2] = HEAP32[($8_1 + 56 | 0) >> 2] | 0;
      break label$1;
      }
    }
    $57(HEAP32[($8_1 + 40 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
    HEAP32[($8_1 + 60 | 0) >> 2] = HEAP32[($8_1 + 56 | 0) >> 2] | 0;
    }
    $99_1 = HEAP32[($8_1 + 60 | 0) >> 2] | 0;
    global$0 = $8_1 + 64 | 0;
    return $99_1 | 0;
  }
  
  function $50($0_1) {
    $0_1 = $0_1 | 0;
    var $3_1 = 0;
    $3_1 = global$0 - 16 | 0;
    HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
    return (HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0 | 0;
  }
  
  function $51($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $4_1 = 0;
    $4_1 = global$0 - 16 | 0;
    global$0 = $4_1;
    HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
    HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
    $61(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
    global$0 = $4_1 + 16 | 0;
    return;
  }
  
  function $52($0_1) {
    $0_1 = $0_1 | 0;
    var $3_1 = 0, $5_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
    $5_1 = $122(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
    global$0 = $3_1 + 16 | 0;
    return $5_1 | 0;
  }
  
  function $53($0_1) {
    $0_1 = $0_1 | 0;
    var $3_1 = 0;
    $3_1 = global$0 - 16 | 0;
    HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
    return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0;
  }
  
  function $54($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $5_1 = 0, $6_1 = 0, $11_1 = 0;
    $5_1 = global$0 - 16 | 0;
    global$0 = $5_1;
    HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
    HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
    HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
    $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
    $11_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 48 | 0) >> 2] | 0 | 0]($6_1, HEAP32[($5_1 + 8 | 0) >> 2] | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0) | 0;
    global$0 = $5_1 + 16 | 0;
    return $11_1 | 0;
  }
  
  function $55($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $5_1 = 0, $6_1 = 0, $15_1 = 0;
    $5_1 = global$0 - 16 | 0;
    global$0 = $5_1;
    HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
    HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
    HEAP8[($5_1 + 7 | 0) >> 0] = $2_1;
    $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
    $62($6_1 | 0, $5_1 + 6 | 0 | 0, $5_1 + 5 | 0 | 0) | 0;
    $15_1 = 24;
    $1769($6_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, ((HEAPU8[($5_1 + 7 | 0) >> 0] | 0) << $15_1 | 0) >> $15_1 | 0 | 0);
    global$0 = $5_1 + 16 | 0;
    return $6_1 | 0;
  }
  
  function $56($0_1) {
    $0_1 = $0_1 | 0;
    var $3_1 = 0, $6_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
    $6_1 = $64($63(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
    global$0 = $3_1 + 16 | 0;
    return $6_1 | 0;
  }
  
  function $57($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $4_1 = 0, $5_1 = 0;
    $4_1 = global$0 - 16 | 0;
    HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
    HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
    $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
    HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
    HEAP32[($5_1 + 12 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
    return HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0;
  }
  
  function $58($0_1) {
    $0_1 = $0_1 | 0;
    var $3_1 = 0, $5_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
    $5_1 = $77(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
    global$0 = $3_1 + 16 | 0;
    return $5_1 | 0;
  }
  
  function $59() {
    return -1 | 0;
  }
  
  function $60($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $4_1 = 0;
    $4_1 = global$0 - 16 | 0;
    HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
    HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
    return (HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0 | 0;
  }
  
  function $61($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $4_1 = 0, $5_1 = 0;
    $4_1 = global$0 - 16 | 0;
    global$0 = $4_1;
    HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
    HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
    $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
    $441($5_1 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0 | (HEAP32[($4_1 + 8 | 0) >> 2] | 0) | 0 | 0);
    global$0 = $4_1 + 16 | 0;
    return;
  }
  
  function $62($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $5_1 = 0, $6_1 = 0;
    $5_1 = global$0 - 16 | 0;
    global$0 = $5_1;
    HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
    HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
    HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
    $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
    $65($6_1 | 0) | 0;
    $66($6_1 | 0) | 0;
    global$0 = $5_1 + 16 | 0;
    return $6_1 | 0;
  }
  
  function $63($0_1) {
    $0_1 = $0_1 | 0;
    var $3_1 = 0, $4_1 = 0, $9_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
    $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
    label$1 : {
    label$2 : {
      if (!(($69($4_1 | 0) | 0) & 1 | 0)) {
      break label$2
      }
      $9_1 = $70($4_1 | 0) | 0;
      break label$1;
    }
    $9_1 = $71($4_1 | 0) | 0;
    }
    global$0 = $3_1 + 16 | 0;
    return $9_1 | 0;
  }
  
  function $64($0_1) {
    $0_1 = $0_1 | 0;
    var $3_1 = 0;
    $3_1 = global$0 - 16 | 0;
    HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
    return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
  }
  
  function $65($0_1) {
    $0_1 = $0_1 | 0;
    var $3_1 = 0;
    $3_1 = global$0 - 16 | 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
    return HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0;
  }
  
  function $66($0_1) {
    $0_1 = $0_1 | 0;
    var $3_1 = 0, $4_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
    $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    $67($4_1 | 0) | 0;
    global$0 = $3_1 + 16 | 0;
    return $4_1 | 0;
  }
  
  function $67($0_1) {
    $0_1 = $0_1 | 0;
    var $3_1 = 0, $4_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
    $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
    $68($4_1 | 0) | 0;
    global$0 = $3_1 + 16 | 0;
    return $4_1 | 0;
  }
  
  function $68($0_1) {
    $0_1 = $0_1 | 0;
    var $3_1 = 0;
    $3_1 = global$0 - 16 | 0;
    HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
    return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
  }
  
  function $69($0_1) {
    $0_1 = $0_1 | 0;
    var $3_1 = 0, $16_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
    $16_1 = (((HEAPU8[(($72(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) + 11 | 0) >> 0] | 0) >>> 7 | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0;
    global$0 = $3_1 + 16 | 0;
    return $16_1 | 0;
  }
  
  function $70($0_1) {
    $0_1 = $0_1 | 0;
    var $3_1 = 0, $6_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
    $6_1 = HEAP32[($73(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
    global$0 = $3_1 + 16 | 0;
    return $6_1 | 0;
  }
  
  function $71($0_1) {
    $0_1 = $0_1 | 0;
    var $3_1 = 0, $6_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
    $6_1 = $74($73(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
    global$0 = $3_1 + 16 | 0;
    return $6_1 | 0;
  }
  
  function $72($0_1) {
    $0_1 = $0_1 | 0;
    var $3_1 = 0, $5_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
    $5_1 = $75(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
    global$0 = $3_1 + 16 | 0;
    return $5_1 | 0;
  }
  
  function $73($0_1) {
    $0_1 = $0_1 | 0;
    var $3_1 = 0, $5_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
    $5_1 = $76(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
    global$0 = $3_1 + 16 | 0;
    return $5_1 | 0;
  }
  
  function $74($0_1) {
    $0_1 = $0_1 | 0;
    var $3_1 = 0;
    $3_1 = global$0 - 16 | 0;
    HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
    return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
  }
  
  function $75($0_1) {
    $0_1 = $0_1 | 0;
    var $3_1 = 0;
    $3_1 = global$0 - 16 | 0;
    HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
    return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
  }
  
  function $76($0_1) {
    $0_1 = $0_1 | 0;
    var $3_1 = 0;
    $3_1 = global$0 - 16 | 0;
    HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
    return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
  }
  
  function $77($0_1) {
    $0_1 = $0_1 | 0;
    var $3_1 = 0;
    $3_1 = global$0 - 16 | 0;
    HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
    return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0;
  }
  
  function $78($0_1) {
    $0_1 = $0_1 | 0;
    var $3_1 = 0, $6_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
    $6_1 = $673(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 89312 | 0) | 0;
    global$0 = $3_1 + 16 | 0;
    return $6_1 | 0;
  }
  
  function $79($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $4_1 = 0, $5_1 = 0, $9_1 = 0, $13_1 = 0, $15_1 = 0;
    $4_1 = global$0 - 16 | 0;
    global$0 = $4_1;
    HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
    HEAP8[($4_1 + 11 | 0) >> 0] = $1_1;
    $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
    $9_1 = 24;
    $13_1 = 24;
    $15_1 = ((FUNCTION_TABLE[HEAP32[((HEAP32[$5_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($5_1, ((HEAPU8[($4_1 + 11 | 0) >> 0] | 0) << $9_1 | 0) >> $9_1 | 0) | 0) << $13_1 | 0) >> $13_1 | 0;
    global$0 = $4_1 + 16 | 0;
    return $15_1 | 0;
  }
  
  function $80($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $4_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $12_1 = 0, $18_1 = 0, $6_1 = 0;
    $4_1 = global$0 - 16 | 0;
    global$0 = $4_1;
    HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
    HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
    $6_1 = $85(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
    $7_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
    $8_1 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
    $9_1 = HEAP32[$7_1 >> 2] | 0;
    $12_1 = $6_1 + ($8_1 >> 1 | 0) | 0;
    label$1 : {
    label$2 : {
      if (!($8_1 & 1 | 0)) {
      break label$2
      }
      $18_1 = HEAP32[((HEAP32[$12_1 >> 2] | 0) + $9_1 | 0) >> 2] | 0;
      break label$1;
    }
    $18_1 = $9_1;
    }
    FUNCTION_TABLE[$18_1 | 0]($12_1);
    global$0 = $4_1 + 16 | 0;
    return;
  }
  
  function $81($0_1) {
    $0_1 = $0_1 | 0;
    HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
    return 2 | 0;
  }
  
  function $82($0_1) {
    $0_1 = $0_1 | 0;
    var $3_1 = 0, $4_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
    $4_1 = $86() | 0;
    global$0 = $3_1 + 16 | 0;
    return $4_1 | 0;
  }
  
  function $83() {
    return 68188 | 0;
  }
  
  function $84($0_1) {
    $0_1 = $0_1 | 0;
    var $3_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
    $5_1 = $1743(8 | 0) | 0;
    $6_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
    $7_1 = HEAP32[$6_1 >> 2] | 0;
    HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
    HEAP32[$5_1 >> 2] = $7_1;
    HEAP32[($3_1 + 8 | 0) >> 2] = $5_1;
    $9_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    global$0 = $3_1 + 16 | 0;
    return $9_1 | 0;
  }
  
  function $85($0_1) {
    $0_1 = $0_1 | 0;
    var $3_1 = 0;
    $3_1 = global$0 - 16 | 0;
    HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
    return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
  }
  
  function $86() {
    return 68180 | 0;
  }
  
  function $87($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    var $6_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $16_1 = 0, $22_1 = 0, $10_1 = 0;
    $6_1 = global$0 - 32 | 0;
    global$0 = $6_1;
    HEAP32[($6_1 + 28 | 0) >> 2] = $0_1;
    HEAP32[($6_1 + 24 | 0) >> 2] = $1_1;
    HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
    HEAP8[($6_1 + 19 | 0) >> 0] = $3_1 & 1 | 0;
    $10_1 = $85(HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) | 0;
    $11_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
    $12_1 = HEAP32[($11_1 + 4 | 0) >> 2] | 0;
    $13_1 = HEAP32[$11_1 >> 2] | 0;
    $16_1 = $10_1 + ($12_1 >> 1 | 0) | 0;
    label$1 : {
    label$2 : {
      if (!($12_1 & 1 | 0)) {
      break label$2
      }
      $22_1 = HEAP32[((HEAP32[$16_1 >> 2] | 0) + $13_1 | 0) >> 2] | 0;
      break label$1;
    }
    $22_1 = $13_1;
    }
    $92($6_1 + 8 | 0 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0);
    FUNCTION_TABLE[$22_1 | 0]($16_1, $6_1 + 8 | 0, ($93((HEAPU8[($6_1 + 19 | 0) >> 0] | 0) & 1 | 0 | 0) | 0) & 1 | 0);
    $31($6_1 + 8 | 0 | 0) | 0;
    global$0 = $6_1 + 32 | 0;
    return;
  }
  
  function $88($0_1) {
    $0_1 = $0_1 | 0;
    HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
    return 4 | 0;
  }
  
  function $89($0_1) {
    $0_1 = $0_1 | 0;
    var $3_1 = 0, $4_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
    $4_1 = $94() | 0;
    global$0 = $3_1 + 16 | 0;
    return $4_1 | 0;
  }
  
  function $90() {
    return 68236 | 0;
  }
  
  function $91($0_1) {
    $0_1 = $0_1 | 0;
    var $3_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
    $5_1 = $1743(8 | 0) | 0;
    $6_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
    $7_1 = HEAP32[$6_1 >> 2] | 0;
    HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
    HEAP32[$5_1 >> 2] = $7_1;
    HEAP32[($3_1 + 8 | 0) >> 2] = $5_1;
    $9_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    global$0 = $3_1 + 16 | 0;
    return $9_1 | 0;
  }
  
  function $92($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $4_1 = 0;
    $4_1 = global$0 - 16 | 0;
    global$0 = $4_1;
    HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
    HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
    $95($0_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
    global$0 = $4_1 + 16 | 0;
    return;
  }
  
  function $93($0_1) {
    $0_1 = $0_1 | 0;
    var $3_1 = 0;
    $3_1 = global$0 - 16 | 0;
    HEAP8[($3_1 + 15 | 0) >> 0] = $0_1;
    return (HEAPU8[($3_1 + 15 | 0) >> 0] | 0) & 1 | 0 | 0;
  }
  
  function $94() {
    return 68192 | 0;
  }
  
  function $95($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $4_1 = 0;
    $4_1 = global$0 - 16 | 0;
    global$0 = $4_1;
    HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
    HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
    $98($0_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
    global$0 = $4_1 + 16 | 0;
    return;
  }
  
  function $96($0_1) {
    $0_1 = $0_1 | 0;
    var $3_1 = 0;
    $3_1 = global$0 - 16 | 0;
    HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
    return (HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) >>> 0 > 8 >>> 0 & 1 | 0 | 0;
  }
  
  function $97($0_1) {
    $0_1 = $0_1 | 0;
    var $3_1 = 0;
    $3_1 = global$0 - 16 | 0;
    HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
    return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0;
  }
  
  function $98($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $4_1 = 0, $5_1 = 0;
    $4_1 = global$0 - 16 | 0;
    global$0 = $4_1;
    HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
    HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
    $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
    HEAP32[$5_1 >> 2] = $114() | 0;
    HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
    global$0 = $4_1 + 16 | 0;
    return $5_1 | 0;
  }
  
  function $99($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $5_1 = 0, $6_1 = 0, $11_1 = 0;
    $5_1 = global$0 - 48 | 0;
    global$0 = $5_1;
    HEAP32[($5_1 + 44 | 0) >> 2] = $0_1;
    HEAP32[($5_1 + 40 | 0) >> 2] = $1_1;
    HEAP32[($5_1 + 36 | 0) >> 2] = $2_1;
    $6_1 = HEAP32[($5_1 + 40 | 0) >> 2] | 0;
    $100($5_1 + 24 | 0 | 0) | 0;
    HEAP32[($5_1 + 20 | 0) >> 2] = 0;
    $11_1 = HEAP32[($5_1 + 36 | 0) >> 2] | 0;
    HEAPF64[($5_1 + 8 | 0) >> 3] = +FUNCTION_TABLE[$11_1 | 0]($101() | 0, $97($6_1 | 0) | 0, $5_1 + 20 | 0, $102($5_1 + 24 | 0 | 0) | 0);
    $103($5_1 + 4 | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) | 0;
    $104($0_1 | 0, +(+HEAPF64[($5_1 + 8 | 0) >> 3]));
    $105($5_1 + 4 | 0 | 0) | 0;
    global$0 = $5_1 + 48 | 0;
    return;
  }
  
  function $100($0_1) {
    $0_1 = $0_1 | 0;
    var $3_1 = 0, $4_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
    $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = $106($4_1 | 0) | 0;
    $107($3_1 + 8 | 0 | 0);
    global$0 = $3_1 + 16 | 0;
    return $4_1 | 0;
  }
  
  function $101() {
    label$1 : {
    if (!((((HEAPU8[(0 + 84872 | 0) >> 0] | 0) & 1 | 0) & 255 | 0 | 0) == (0 & 255 | 0 | 0) & 1 | 0)) {
      break label$1
    }
    HEAP32[(0 + 84868 | 0) >> 2] = fimport$13($108(68242 | 0) | 0 | 0, $109(68242 | 0) | 0 | 0, 0 | 0) | 0;
    HEAP8[(0 + 84872 | 0) >> 0] = 1;
    }
    return HEAP32[(0 + 84868 | 0) >> 2] | 0 | 0;
  }
  
  function $102($0_1) {
    $0_1 = $0_1 | 0;
    var $3_1 = 0, $5_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
    $5_1 = $110(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
    global$0 = $3_1 + 16 | 0;
    return $5_1 | 0;
  }
  
  function $103($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $4_1 = 0, $5_1 = 0;
    $4_1 = global$0 - 16 | 0;
    HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
    HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
    $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
    HEAP32[$5_1 >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
    return $5_1 | 0;
  }
  
  function $104($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = +$1_1;
    var $4_1 = 0;
    $4_1 = global$0 - 32 | 0;
    global$0 = $4_1;
    HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
    HEAPF64[($4_1 + 16 | 0) >> 3] = $1_1;
    HEAP32[($4_1 + 12 | 0) >> 2] = $111(+(+HEAPF64[($4_1 + 16 | 0) >> 3])) | 0;
    $92($0_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
    global$0 = $4_1 + 32 | 0;
    return;
  }
  
  function $105($0_1) {
    $0_1 = $0_1 | 0;
    var $3_1 = 0, $4_1 = 0, $11_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
    $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    HEAP32[($3_1 + 12 | 0) >> 2] = $4_1;
    label$1 : {
    if (!((HEAP32[$4_1 >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$1
    }
    fimport$14(HEAP32[$4_1 >> 2] | 0 | 0);
    }
    $11_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
    global$0 = $3_1 + 16 | 0;
    return $11_1 | 0;
  }
  
  function $106($0_1) {
    $0_1 = $0_1 | 0;
    HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
    return 0 | 0;
  }
  
  function $107($0_1) {
    $0_1 = $0_1 | 0;
    HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
    return;
  }
  
  function $108($0_1) {
    $0_1 = $0_1 | 0;
    HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
    return 1 | 0;
  }
  
  function $109($0_1) {
    $0_1 = $0_1 | 0;
    var $3_1 = 0, $4_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
    $4_1 = $112() | 0;
    global$0 = $3_1 + 16 | 0;
    return $4_1 | 0;
  }
  
  function $110($0_1) {
    $0_1 = $0_1 | 0;
    HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
    return 0 | 0;
  }
  
  function $111($0_1) {
    $0_1 = +$0_1;
    var $12_1 = 0.0, $3_1 = 0, $9_1 = 0;
    $3_1 = global$0 - 16 | 0;
    HEAPF64[($3_1 + 8 | 0) >> 3] = $0_1;
    $12_1 = +HEAPF64[($3_1 + 8 | 0) >> 3];
    label$1 : {
    label$2 : {
      if (!($12_1 < 4294967296.0 & $12_1 >= 0.0 | 0)) {
      break label$2
      }
      $9_1 = ~~$12_1 >>> 0;
      break label$1;
    }
    $9_1 = 0;
    }
    return $9_1 | 0;
  }
  
  function $112() {
    return 68244 | 0;
  }
  
  function $113() {
    $5();
    return;
  }
  
  function $114() {
    return $118() | 0 | 0;
  }
  
  function $115($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0, i64toi32_i32$0 = 0, $4_1 = 0, i64toi32_i32$1 = 0, $6_1 = 0, $5_1 = 0, $6$hi = 0;
    label$1 : {
    if (!$2_1) {
      break label$1
    }
    HEAP8[$0_1 >> 0] = $1_1;
    $3_1 = $0_1 + $2_1 | 0;
    HEAP8[($3_1 + -1 | 0) >> 0] = $1_1;
    if ($2_1 >>> 0 < 3 >>> 0) {
      break label$1
    }
    HEAP8[($0_1 + 2 | 0) >> 0] = $1_1;
    HEAP8[($0_1 + 1 | 0) >> 0] = $1_1;
    HEAP8[($3_1 + -3 | 0) >> 0] = $1_1;
    HEAP8[($3_1 + -2 | 0) >> 0] = $1_1;
    if ($2_1 >>> 0 < 7 >>> 0) {
      break label$1
    }
    HEAP8[($0_1 + 3 | 0) >> 0] = $1_1;
    HEAP8[($3_1 + -4 | 0) >> 0] = $1_1;
    if ($2_1 >>> 0 < 9 >>> 0) {
      break label$1
    }
    $4_1 = (0 - $0_1 | 0) & 3 | 0;
    $3_1 = $0_1 + $4_1 | 0;
    $1_1 = Math_imul($1_1 & 255 | 0, 16843009);
    HEAP32[$3_1 >> 2] = $1_1;
    $4_1 = ($2_1 - $4_1 | 0) & -4 | 0;
    $2_1 = $3_1 + $4_1 | 0;
    HEAP32[($2_1 + -4 | 0) >> 2] = $1_1;
    if ($4_1 >>> 0 < 9 >>> 0) {
      break label$1
    }
    HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
    HEAP32[($3_1 + 4 | 0) >> 2] = $1_1;
    HEAP32[($2_1 + -8 | 0) >> 2] = $1_1;
    HEAP32[($2_1 + -12 | 0) >> 2] = $1_1;
    if ($4_1 >>> 0 < 25 >>> 0) {
      break label$1
    }
    HEAP32[($3_1 + 24 | 0) >> 2] = $1_1;
    HEAP32[($3_1 + 20 | 0) >> 2] = $1_1;
    HEAP32[($3_1 + 16 | 0) >> 2] = $1_1;
    HEAP32[($3_1 + 12 | 0) >> 2] = $1_1;
    HEAP32[($2_1 + -16 | 0) >> 2] = $1_1;
    HEAP32[($2_1 + -20 | 0) >> 2] = $1_1;
    HEAP32[($2_1 + -24 | 0) >> 2] = $1_1;
    HEAP32[($2_1 + -28 | 0) >> 2] = $1_1;
    $5_1 = $3_1 & 4 | 0 | 24 | 0;
    $2_1 = $4_1 - $5_1 | 0;
    if ($2_1 >>> 0 < 32 >>> 0) {
      break label$1
    }
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 1;
    i64toi32_i32$1 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$0 | 0, 1 | 0, i64toi32_i32$1 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $6_1 = i64toi32_i32$1;
    $6$hi = i64toi32_i32$0;
    $1_1 = $3_1 + $5_1 | 0;
    label$2 : while (1) {
      i64toi32_i32$0 = $6$hi;
      i64toi32_i32$1 = $1_1;
      HEAP32[($1_1 + 24 | 0) >> 2] = $6_1;
      HEAP32[($1_1 + 28 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = $1_1;
      HEAP32[($1_1 + 16 | 0) >> 2] = $6_1;
      HEAP32[($1_1 + 20 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = $1_1;
      HEAP32[($1_1 + 8 | 0) >> 2] = $6_1;
      HEAP32[($1_1 + 12 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = $1_1;
      HEAP32[$1_1 >> 2] = $6_1;
      HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$0;
      $1_1 = $1_1 + 32 | 0;
      $2_1 = $2_1 + -32 | 0;
      if ($2_1 >>> 0 > 31 >>> 0) {
      continue label$2
      }
      break label$2;
    };
    }
    return $0_1 | 0;
  }
  
  function $116() {
    return 42 | 0;
  }
  
  function $117() {
    return $116() | 0 | 0;
  }
  
  function $118() {
    return 84932 | 0;
  }
  
  function $119() {
    HEAP32[(0 + 85028 | 0) >> 2] = 84908;
    HEAP32[(0 + 84956 | 0) >> 2] = $117() | 0;
  }
  
  function $120($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0, $4_1 = 0, $5_1 = 0;
    label$1 : {
    if ($2_1 >>> 0 < 512 >>> 0) {
      break label$1
    }
    fimport$15($0_1 | 0, $1_1 | 0, $2_1 | 0);
    return $0_1 | 0;
    }
    $3_1 = $0_1 + $2_1 | 0;
    label$2 : {
    label$3 : {
      if (($1_1 ^ $0_1 | 0) & 3 | 0) {
      break label$3
      }
      label$4 : {
      label$5 : {
        if ($0_1 & 3 | 0) {
        break label$5
        }
        $2_1 = $0_1;
        break label$4;
      }
      label$6 : {
        if ($2_1) {
        break label$6
        }
        $2_1 = $0_1;
        break label$4;
      }
      $2_1 = $0_1;
      label$7 : while (1) {
        HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
        $1_1 = $1_1 + 1 | 0;
        $2_1 = $2_1 + 1 | 0;
        if (!($2_1 & 3 | 0)) {
        break label$4
        }
        if ($2_1 >>> 0 < $3_1 >>> 0) {
        continue label$7
        }
        break label$7;
      };
      }
      $4_1 = $3_1 & -4 | 0;
      label$8 : {
      if ($3_1 >>> 0 < 64 >>> 0) {
        break label$8
      }
      $5_1 = $4_1 + -64 | 0;
      if ($2_1 >>> 0 > $5_1 >>> 0) {
        break label$8
      }
      label$9 : while (1) {
        HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
        HEAP32[($2_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
        HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
        HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
        HEAP32[($2_1 + 16 | 0) >> 2] = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
        HEAP32[($2_1 + 20 | 0) >> 2] = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
        HEAP32[($2_1 + 24 | 0) >> 2] = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
        HEAP32[($2_1 + 28 | 0) >> 2] = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
        HEAP32[($2_1 + 32 | 0) >> 2] = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
        HEAP32[($2_1 + 36 | 0) >> 2] = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
        HEAP32[($2_1 + 40 | 0) >> 2] = HEAP32[($1_1 + 40 | 0) >> 2] | 0;
        HEAP32[($2_1 + 44 | 0) >> 2] = HEAP32[($1_1 + 44 | 0) >> 2] | 0;
        HEAP32[($2_1 + 48 | 0) >> 2] = HEAP32[($1_1 + 48 | 0) >> 2] | 0;
        HEAP32[($2_1 + 52 | 0) >> 2] = HEAP32[($1_1 + 52 | 0) >> 2] | 0;
        HEAP32[($2_1 + 56 | 0) >> 2] = HEAP32[($1_1 + 56 | 0) >> 2] | 0;
        HEAP32[($2_1 + 60 | 0) >> 2] = HEAP32[($1_1 + 60 | 0) >> 2] | 0;
        $1_1 = $1_1 + 64 | 0;
        $2_1 = $2_1 + 64 | 0;
        if ($2_1 >>> 0 <= $5_1 >>> 0) {
        continue label$9
        }
        break label$9;
      };
      }
      if ($2_1 >>> 0 >= $4_1 >>> 0) {
      break label$2
      }
      label$10 : while (1) {
      HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
      $1_1 = $1_1 + 4 | 0;
      $2_1 = $2_1 + 4 | 0;
      if ($2_1 >>> 0 < $4_1 >>> 0) {
        continue label$10
      }
      break label$2;
      };
    }
    label$11 : {
      if ($3_1 >>> 0 >= 4 >>> 0) {
      break label$11
      }
      $2_1 = $0_1;
      break label$2;
    }
    label$12 : {
      $4_1 = $3_1 + -4 | 0;
      if ($0_1 >>> 0 <= $4_1 >>> 0) {
      break label$12
      }
      $2_1 = $0_1;
      break label$2;
    }
    $2_1 = $0_1;
    label$13 : while (1) {
      HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
      HEAP8[($2_1 + 1 | 0) >> 0] = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
      HEAP8[($2_1 + 2 | 0) >> 0] = HEAPU8[($1_1 + 2 | 0) >> 0] | 0;
      HEAP8[($2_1 + 3 | 0) >> 0] = HEAPU8[($1_1 + 3 | 0) >> 0] | 0;
      $1_1 = $1_1 + 4 | 0;
      $2_1 = $2_1 + 4 | 0;
      if ($2_1 >>> 0 <= $4_1 >>> 0) {
      continue label$13
      }
      break label$13;
    };
    }
    label$14 : {
    if ($2_1 >>> 0 >= $3_1 >>> 0) {
      break label$14
    }
    label$15 : while (1) {
      HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
      $1_1 = $1_1 + 1 | 0;
      $2_1 = $2_1 + 1 | 0;
      if (($2_1 | 0) != ($3_1 | 0)) {
      continue label$15
      }
      break label$15;
    };
    }
    return $0_1 | 0;
  }
  
  function $121($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0, $2_1 = 0;
    label$1 : {
    $1_1 = ($122($0_1 | 0) | 0) + 1 | 0;
    $2_1 = $126($1_1 | 0) | 0;
    if ($2_1) {
      break label$1
    }
    return 0 | 0;
    }
    return $120($2_1 | 0, $0_1 | 0, $1_1 | 0) | 0 | 0;
  }
  
  function $122($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0, $2_1 = 0, $3_1 = 0;
    $1_1 = $0_1;
    label$1 : {
    label$2 : {
      if (!($1_1 & 3 | 0)) {
      break label$2
      }
      label$3 : {
      if (HEAPU8[$1_1 >> 0] | 0) {
        break label$3
      }
      return $1_1 - $1_1 | 0 | 0;
      }
      $1_1 = $0_1;
      label$4 : while (1) {
      $1_1 = $1_1 + 1 | 0;
      if (!($1_1 & 3 | 0)) {
        break label$2
      }
      if (HEAPU8[$1_1 >> 0] | 0) {
        continue label$4
      }
      break label$1;
      };
    }
    label$5 : while (1) {
      $2_1 = $1_1;
      $1_1 = $1_1 + 4 | 0;
      $3_1 = HEAP32[$2_1 >> 2] | 0;
      if (((16843008 - $3_1 | 0 | $3_1 | 0) & -2139062144 | 0 | 0) == (-2139062144 | 0)) {
      continue label$5
      }
      break label$5;
    };
    label$6 : while (1) {
      $1_1 = $2_1;
      $2_1 = $1_1 + 1 | 0;
      if (HEAPU8[$1_1 >> 0] | 0) {
      continue label$6
      }
      break label$6;
    };
    }
    return $1_1 - $0_1 | 0 | 0;
  }
  
  function $123() {
    return __wasm_memory_size() << 16 | 0 | 0;
  }
  
  function $124() {
    return 85064 | 0;
  }
  
  function $125($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0, $2_1 = 0;
    $1_1 = HEAP32[(0 + 84360 | 0) >> 2] | 0;
    $2_1 = ($0_1 + 7 | 0) & -8 | 0;
    $0_1 = $1_1 + $2_1 | 0;
    label$1 : {
    label$2 : {
      label$3 : {
      if (!$2_1) {
        break label$3
      }
      if ($0_1 >>> 0 <= $1_1 >>> 0) {
        break label$2
      }
      }
      if ($0_1 >>> 0 <= ($123() | 0) >>> 0) {
      break label$1
      }
      if (fimport$16($0_1 | 0) | 0) {
      break label$1
      }
    }
    HEAP32[($124() | 0) >> 2] = 48;
    return -1 | 0;
    }
    HEAP32[(0 + 84360 | 0) >> 2] = $0_1;
    return $1_1 | 0;
  }
  
  function $126($0_1) {
    $0_1 = $0_1 | 0;
    var $5_1 = 0, $4_1 = 0, $7_1 = 0, $8_1 = 0, $3_1 = 0, $2_1 = 0, $6_1 = 0, $10_1 = 0, $11_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $1_1 = 0, $9_1 = 0, $79_1 = 0, $183_1 = 0, $774_1 = 0, $776_1 = 0;
    $1_1 = global$0 - 16 | 0;
    global$0 = $1_1;
    label$1 : {
    label$2 : {
      label$3 : {
      label$4 : {
        label$5 : {
        label$6 : {
          label$7 : {
          label$8 : {
            label$9 : {
            label$10 : {
              label$11 : {
              if ($0_1 >>> 0 > 244 >>> 0) {
                break label$11
              }
              label$12 : {
                $2_1 = HEAP32[(0 + 85068 | 0) >> 2] | 0;
                $3_1 = $0_1 >>> 0 < 11 >>> 0 ? 16 : ($0_1 + 11 | 0) & 504 | 0;
                $4_1 = $3_1 >>> 3 | 0;
                $0_1 = $2_1 >>> $4_1 | 0;
                if (!($0_1 & 3 | 0)) {
                break label$12
                }
                label$13 : {
                label$14 : {
                  $3_1 = (($0_1 ^ -1 | 0) & 1 | 0) + $4_1 | 0;
                  $4_1 = $3_1 << 3 | 0;
                  $0_1 = $4_1 + 85108 | 0;
                  $4_1 = HEAP32[($4_1 + 85116 | 0) >> 2] | 0;
                  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
                  if (($0_1 | 0) != ($5_1 | 0)) {
                  break label$14
                  }
                  HEAP32[(0 + 85068 | 0) >> 2] = $2_1 & (__wasm_rotl_i32(-2 | 0, $3_1 | 0) | 0) | 0;
                  break label$13;
                }
                HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
                HEAP32[($0_1 + 8 | 0) >> 2] = $5_1;
                }
                $0_1 = $4_1 + 8 | 0;
                $3_1 = $3_1 << 3 | 0;
                HEAP32[($4_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
                $4_1 = $4_1 + $3_1 | 0;
                HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 1 | 0;
                break label$1;
              }
              $6_1 = HEAP32[(0 + 85076 | 0) >> 2] | 0;
              if ($3_1 >>> 0 <= $6_1 >>> 0) {
                break label$10
              }
              label$15 : {
                if (!$0_1) {
                break label$15
                }
                label$16 : {
                label$17 : {
                  $79_1 = $0_1 << $4_1 | 0;
                  $0_1 = 2 << $4_1 | 0;
                  $4_1 = __wasm_ctz_i32($79_1 & ($0_1 | (0 - $0_1 | 0) | 0) | 0 | 0) | 0;
                  $0_1 = $4_1 << 3 | 0;
                  $5_1 = $0_1 + 85108 | 0;
                  $0_1 = HEAP32[($0_1 + 85116 | 0) >> 2] | 0;
                  $7_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
                  if (($5_1 | 0) != ($7_1 | 0)) {
                  break label$17
                  }
                  $2_1 = $2_1 & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0;
                  HEAP32[(0 + 85068 | 0) >> 2] = $2_1;
                  break label$16;
                }
                HEAP32[($7_1 + 12 | 0) >> 2] = $5_1;
                HEAP32[($5_1 + 8 | 0) >> 2] = $7_1;
                }
                HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
                $7_1 = $0_1 + $3_1 | 0;
                $4_1 = $4_1 << 3 | 0;
                $3_1 = $4_1 - $3_1 | 0;
                HEAP32[($7_1 + 4 | 0) >> 2] = $3_1 | 1 | 0;
                HEAP32[($0_1 + $4_1 | 0) >> 2] = $3_1;
                label$18 : {
                if (!$6_1) {
                  break label$18
                }
                $5_1 = ($6_1 & -8 | 0) + 85108 | 0;
                $4_1 = HEAP32[(0 + 85088 | 0) >> 2] | 0;
                label$19 : {
                  label$20 : {
                  $8_1 = 1 << ($6_1 >>> 3 | 0) | 0;
                  if ($2_1 & $8_1 | 0) {
                    break label$20
                  }
                  HEAP32[(0 + 85068 | 0) >> 2] = $2_1 | $8_1 | 0;
                  $8_1 = $5_1;
                  break label$19;
                  }
                  $8_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
                }
                HEAP32[($5_1 + 8 | 0) >> 2] = $4_1;
                HEAP32[($8_1 + 12 | 0) >> 2] = $4_1;
                HEAP32[($4_1 + 12 | 0) >> 2] = $5_1;
                HEAP32[($4_1 + 8 | 0) >> 2] = $8_1;
                }
                $0_1 = $0_1 + 8 | 0;
                HEAP32[(0 + 85088 | 0) >> 2] = $7_1;
                HEAP32[(0 + 85076 | 0) >> 2] = $3_1;
                break label$1;
              }
              $9_1 = HEAP32[(0 + 85072 | 0) >> 2] | 0;
              if (!$9_1) {
                break label$10
              }
              $7_1 = HEAP32[(((__wasm_ctz_i32($9_1 | 0) | 0) << 2 | 0) + 85372 | 0) >> 2] | 0;
              $4_1 = ((HEAP32[($7_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
              $5_1 = $7_1;
              label$21 : {
                label$22 : while (1) {
                label$23 : {
                  $0_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
                  if ($0_1) {
                  break label$23
                  }
                  $0_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
                  if (!$0_1) {
                  break label$21
                  }
                }
                $5_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
                $183_1 = $5_1;
                $5_1 = $5_1 >>> 0 < $4_1 >>> 0;
                $4_1 = $5_1 ? $183_1 : $4_1;
                $7_1 = $5_1 ? $0_1 : $7_1;
                $5_1 = $0_1;
                continue label$22;
                };
              }
              $10_1 = HEAP32[($7_1 + 24 | 0) >> 2] | 0;
              label$24 : {
                $0_1 = HEAP32[($7_1 + 12 | 0) >> 2] | 0;
                if (($0_1 | 0) == ($7_1 | 0)) {
                break label$24
                }
                $5_1 = HEAP32[($7_1 + 8 | 0) >> 2] | 0;
                HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
                HEAP32[($0_1 + 8 | 0) >> 2] = $5_1;
                break label$2;
              }
              label$25 : {
                label$26 : {
                $5_1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
                if (!$5_1) {
                  break label$26
                }
                $8_1 = $7_1 + 20 | 0;
                break label$25;
                }
                $5_1 = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
                if (!$5_1) {
                break label$9
                }
                $8_1 = $7_1 + 16 | 0;
              }
              label$27 : while (1) {
                $11_1 = $8_1;
                $0_1 = $5_1;
                $8_1 = $0_1 + 20 | 0;
                $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
                if ($5_1) {
                continue label$27
                }
                $8_1 = $0_1 + 16 | 0;
                $5_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
                if ($5_1) {
                continue label$27
                }
                break label$27;
              };
              HEAP32[$11_1 >> 2] = 0;
              break label$2;
              }
              $3_1 = -1;
              if ($0_1 >>> 0 > -65 >>> 0) {
              break label$10
              }
              $4_1 = $0_1 + 11 | 0;
              $3_1 = $4_1 & -8 | 0;
              $10_1 = HEAP32[(0 + 85072 | 0) >> 2] | 0;
              if (!$10_1) {
              break label$10
              }
              $6_1 = 31;
              label$28 : {
              if ($0_1 >>> 0 > 16777204 >>> 0) {
                break label$28
              }
              $0_1 = Math_clz32($4_1 >>> 8 | 0);
              $6_1 = ((($3_1 >>> (38 - $0_1 | 0) | 0) & 1 | 0) - ($0_1 << 1 | 0) | 0) + 62 | 0;
              }
              $4_1 = 0 - $3_1 | 0;
              label$29 : {
              label$30 : {
                label$31 : {
                label$32 : {
                  $5_1 = HEAP32[(($6_1 << 2 | 0) + 85372 | 0) >> 2] | 0;
                  if ($5_1) {
                  break label$32
                  }
                  $0_1 = 0;
                  $8_1 = 0;
                  break label$31;
                }
                $0_1 = 0;
                $7_1 = $3_1 << (($6_1 | 0) == (31 | 0) ? 0 : 25 - ($6_1 >>> 1 | 0) | 0) | 0;
                $8_1 = 0;
                label$33 : while (1) {
                  label$34 : {
                  $2_1 = ((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
                  if ($2_1 >>> 0 >= $4_1 >>> 0) {
                    break label$34
                  }
                  $4_1 = $2_1;
                  $8_1 = $5_1;
                  if ($4_1) {
                    break label$34
                  }
                  $4_1 = 0;
                  $8_1 = $5_1;
                  $0_1 = $5_1;
                  break label$30;
                  }
                  $2_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
                  $11_1 = HEAP32[(($5_1 + (($7_1 >>> 29 | 0) & 4 | 0) | 0) + 16 | 0) >> 2] | 0;
                  $0_1 = $2_1 ? (($2_1 | 0) == ($11_1 | 0) ? $0_1 : $2_1) : $0_1;
                  $7_1 = $7_1 << 1 | 0;
                  $5_1 = $11_1;
                  if ($5_1) {
                  continue label$33
                  }
                  break label$33;
                };
                }
                label$35 : {
                if ($0_1 | $8_1 | 0) {
                  break label$35
                }
                $8_1 = 0;
                $0_1 = 2 << $6_1 | 0;
                $0_1 = ($0_1 | (0 - $0_1 | 0) | 0) & $10_1 | 0;
                if (!$0_1) {
                  break label$10
                }
                $0_1 = HEAP32[(((__wasm_ctz_i32($0_1 | 0) | 0) << 2 | 0) + 85372 | 0) >> 2] | 0;
                }
                if (!$0_1) {
                break label$29
                }
              }
              label$36 : while (1) {
                $2_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
                $7_1 = $2_1 >>> 0 < $4_1 >>> 0;
                label$37 : {
                $5_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
                if ($5_1) {
                  break label$37
                }
                $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
                }
                $4_1 = $7_1 ? $2_1 : $4_1;
                $8_1 = $7_1 ? $0_1 : $8_1;
                $0_1 = $5_1;
                if ($0_1) {
                continue label$36
                }
                break label$36;
              };
              }
              if (!$8_1) {
              break label$10
              }
              if ($4_1 >>> 0 >= ((HEAP32[(0 + 85076 | 0) >> 2] | 0) - $3_1 | 0) >>> 0) {
              break label$10
              }
              $11_1 = HEAP32[($8_1 + 24 | 0) >> 2] | 0;
              label$38 : {
              $0_1 = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
              if (($0_1 | 0) == ($8_1 | 0)) {
                break label$38
              }
              $5_1 = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
              HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
              HEAP32[($0_1 + 8 | 0) >> 2] = $5_1;
              break label$3;
              }
              label$39 : {
              label$40 : {
                $5_1 = HEAP32[($8_1 + 20 | 0) >> 2] | 0;
                if (!$5_1) {
                break label$40
                }
                $7_1 = $8_1 + 20 | 0;
                break label$39;
              }
              $5_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
              if (!$5_1) {
                break label$8
              }
              $7_1 = $8_1 + 16 | 0;
              }
              label$41 : while (1) {
              $2_1 = $7_1;
              $0_1 = $5_1;
              $7_1 = $0_1 + 20 | 0;
              $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
              if ($5_1) {
                continue label$41
              }
              $7_1 = $0_1 + 16 | 0;
              $5_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
              if ($5_1) {
                continue label$41
              }
              break label$41;
              };
              HEAP32[$2_1 >> 2] = 0;
              break label$3;
            }
            label$42 : {
              $0_1 = HEAP32[(0 + 85076 | 0) >> 2] | 0;
              if ($0_1 >>> 0 < $3_1 >>> 0) {
              break label$42
              }
              $4_1 = HEAP32[(0 + 85088 | 0) >> 2] | 0;
              label$43 : {
              label$44 : {
                $5_1 = $0_1 - $3_1 | 0;
                if ($5_1 >>> 0 < 16 >>> 0) {
                break label$44
                }
                $7_1 = $4_1 + $3_1 | 0;
                HEAP32[($7_1 + 4 | 0) >> 2] = $5_1 | 1 | 0;
                HEAP32[($4_1 + $0_1 | 0) >> 2] = $5_1;
                HEAP32[($4_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
                break label$43;
              }
              HEAP32[($4_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
              $0_1 = $4_1 + $0_1 | 0;
              HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
              $7_1 = 0;
              $5_1 = 0;
              }
              HEAP32[(0 + 85076 | 0) >> 2] = $5_1;
              HEAP32[(0 + 85088 | 0) >> 2] = $7_1;
              $0_1 = $4_1 + 8 | 0;
              break label$1;
            }
            label$45 : {
              $7_1 = HEAP32[(0 + 85080 | 0) >> 2] | 0;
              if ($7_1 >>> 0 <= $3_1 >>> 0) {
              break label$45
              }
              $4_1 = $7_1 - $3_1 | 0;
              HEAP32[(0 + 85080 | 0) >> 2] = $4_1;
              $0_1 = HEAP32[(0 + 85092 | 0) >> 2] | 0;
              $5_1 = $0_1 + $3_1 | 0;
              HEAP32[(0 + 85092 | 0) >> 2] = $5_1;
              HEAP32[($5_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
              HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
              $0_1 = $0_1 + 8 | 0;
              break label$1;
            }
            label$46 : {
              label$47 : {
              if (!(HEAP32[(0 + 85540 | 0) >> 2] | 0)) {
                break label$47
              }
              $4_1 = HEAP32[(0 + 85548 | 0) >> 2] | 0;
              break label$46;
              }
              i64toi32_i32$1 = 0;
              i64toi32_i32$0 = -1;
              HEAP32[(i64toi32_i32$1 + 85552 | 0) >> 2] = -1;
              HEAP32[(i64toi32_i32$1 + 85556 | 0) >> 2] = i64toi32_i32$0;
              i64toi32_i32$1 = 0;
              i64toi32_i32$0 = 4096;
              HEAP32[(i64toi32_i32$1 + 85544 | 0) >> 2] = 4096;
              HEAP32[(i64toi32_i32$1 + 85548 | 0) >> 2] = i64toi32_i32$0;
              HEAP32[(0 + 85540 | 0) >> 2] = (($1_1 + 12 | 0) & -16 | 0) ^ 1431655768 | 0;
              HEAP32[(0 + 85560 | 0) >> 2] = 0;
              HEAP32[(0 + 85512 | 0) >> 2] = 0;
              $4_1 = 4096;
            }
            $0_1 = 0;
            $6_1 = $3_1 + 47 | 0;
            $2_1 = $4_1 + $6_1 | 0;
            $11_1 = 0 - $4_1 | 0;
            $8_1 = $2_1 & $11_1 | 0;
            if ($8_1 >>> 0 <= $3_1 >>> 0) {
              break label$1
            }
            $0_1 = 0;
            label$48 : {
              $4_1 = HEAP32[(0 + 85508 | 0) >> 2] | 0;
              if (!$4_1) {
              break label$48
              }
              $5_1 = HEAP32[(0 + 85500 | 0) >> 2] | 0;
              $10_1 = $5_1 + $8_1 | 0;
              if ($10_1 >>> 0 <= $5_1 >>> 0) {
              break label$1
              }
              if ($10_1 >>> 0 > $4_1 >>> 0) {
              break label$1
              }
            }
            label$49 : {
              label$50 : {
              if ((HEAPU8[(0 + 85512 | 0) >> 0] | 0) & 4 | 0) {
                break label$50
              }
              label$51 : {
                label$52 : {
                label$53 : {
                  label$54 : {
                  label$55 : {
                    $4_1 = HEAP32[(0 + 85092 | 0) >> 2] | 0;
                    if (!$4_1) {
                    break label$55
                    }
                    $0_1 = 85516;
                    label$56 : while (1) {
                    label$57 : {
                      $5_1 = HEAP32[$0_1 >> 2] | 0;
                      if ($4_1 >>> 0 < $5_1 >>> 0) {
                      break label$57
                      }
                      if ($4_1 >>> 0 < ($5_1 + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0) >>> 0) {
                      break label$54
                      }
                    }
                    $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
                    if ($0_1) {
                      continue label$56
                    }
                    break label$56;
                    };
                  }
                  $7_1 = $125(0 | 0) | 0;
                  if (($7_1 | 0) == (-1 | 0)) {
                    break label$51
                  }
                  $2_1 = $8_1;
                  label$58 : {
                    $0_1 = HEAP32[(0 + 85544 | 0) >> 2] | 0;
                    $4_1 = $0_1 + -1 | 0;
                    if (!($4_1 & $7_1 | 0)) {
                    break label$58
                    }
                    $2_1 = ($8_1 - $7_1 | 0) + (($4_1 + $7_1 | 0) & (0 - $0_1 | 0) | 0) | 0;
                  }
                  if ($2_1 >>> 0 <= $3_1 >>> 0) {
                    break label$51
                  }
                  label$59 : {
                    $0_1 = HEAP32[(0 + 85508 | 0) >> 2] | 0;
                    if (!$0_1) {
                    break label$59
                    }
                    $4_1 = HEAP32[(0 + 85500 | 0) >> 2] | 0;
                    $5_1 = $4_1 + $2_1 | 0;
                    if ($5_1 >>> 0 <= $4_1 >>> 0) {
                    break label$51
                    }
                    if ($5_1 >>> 0 > $0_1 >>> 0) {
                    break label$51
                    }
                  }
                  $0_1 = $125($2_1 | 0) | 0;
                  if (($0_1 | 0) != ($7_1 | 0)) {
                    break label$53
                  }
                  break label$49;
                  }
                  $2_1 = ($2_1 - $7_1 | 0) & $11_1 | 0;
                  $7_1 = $125($2_1 | 0) | 0;
                  if (($7_1 | 0) == ((HEAP32[$0_1 >> 2] | 0) + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0 | 0)) {
                  break label$52
                  }
                  $0_1 = $7_1;
                }
                if (($0_1 | 0) == (-1 | 0)) {
                  break label$51
                }
                label$60 : {
                  if ($2_1 >>> 0 < ($3_1 + 48 | 0) >>> 0) {
                  break label$60
                  }
                  $7_1 = $0_1;
                  break label$49;
                }
                $4_1 = HEAP32[(0 + 85548 | 0) >> 2] | 0;
                $4_1 = (($6_1 - $2_1 | 0) + $4_1 | 0) & (0 - $4_1 | 0) | 0;
                if (($125($4_1 | 0) | 0 | 0) == (-1 | 0)) {
                  break label$51
                }
                $2_1 = $4_1 + $2_1 | 0;
                $7_1 = $0_1;
                break label$49;
                }
                if (($7_1 | 0) != (-1 | 0)) {
                break label$49
                }
              }
              HEAP32[(0 + 85512 | 0) >> 2] = HEAP32[(0 + 85512 | 0) >> 2] | 0 | 4 | 0;
              }
              $7_1 = $125($8_1 | 0) | 0;
              $0_1 = $125(0 | 0) | 0;
              if (($7_1 | 0) == (-1 | 0)) {
              break label$5
              }
              if (($0_1 | 0) == (-1 | 0)) {
              break label$5
              }
              if ($7_1 >>> 0 >= $0_1 >>> 0) {
              break label$5
              }
              $2_1 = $0_1 - $7_1 | 0;
              if ($2_1 >>> 0 <= ($3_1 + 40 | 0) >>> 0) {
              break label$5
              }
            }
            $0_1 = (HEAP32[(0 + 85500 | 0) >> 2] | 0) + $2_1 | 0;
            HEAP32[(0 + 85500 | 0) >> 2] = $0_1;
            label$61 : {
              if ($0_1 >>> 0 <= (HEAP32[(0 + 85504 | 0) >> 2] | 0) >>> 0) {
              break label$61
              }
              HEAP32[(0 + 85504 | 0) >> 2] = $0_1;
            }
            label$62 : {
              label$63 : {
              $4_1 = HEAP32[(0 + 85092 | 0) >> 2] | 0;
              if (!$4_1) {
                break label$63
              }
              $0_1 = 85516;
              label$64 : while (1) {
                $5_1 = HEAP32[$0_1 >> 2] | 0;
                $8_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                if (($7_1 | 0) == ($5_1 + $8_1 | 0 | 0)) {
                break label$62
                }
                $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
                if ($0_1) {
                continue label$64
                }
                break label$7;
              };
              }
              label$65 : {
              label$66 : {
                $0_1 = HEAP32[(0 + 85084 | 0) >> 2] | 0;
                if (!$0_1) {
                break label$66
                }
                if ($7_1 >>> 0 >= $0_1 >>> 0) {
                break label$65
                }
              }
              HEAP32[(0 + 85084 | 0) >> 2] = $7_1;
              }
              $0_1 = 0;
              HEAP32[(0 + 85520 | 0) >> 2] = $2_1;
              HEAP32[(0 + 85516 | 0) >> 2] = $7_1;
              HEAP32[(0 + 85100 | 0) >> 2] = -1;
              HEAP32[(0 + 85104 | 0) >> 2] = HEAP32[(0 + 85540 | 0) >> 2] | 0;
              HEAP32[(0 + 85528 | 0) >> 2] = 0;
              label$67 : while (1) {
              $4_1 = $0_1 << 3 | 0;
              $5_1 = $4_1 + 85108 | 0;
              HEAP32[($4_1 + 85116 | 0) >> 2] = $5_1;
              HEAP32[($4_1 + 85120 | 0) >> 2] = $5_1;
              $0_1 = $0_1 + 1 | 0;
              if (($0_1 | 0) != (32 | 0)) {
                continue label$67
              }
              break label$67;
              };
              $0_1 = $2_1 + -40 | 0;
              $4_1 = (-8 - $7_1 | 0) & 7 | 0;
              $5_1 = $0_1 - $4_1 | 0;
              HEAP32[(0 + 85080 | 0) >> 2] = $5_1;
              $4_1 = $7_1 + $4_1 | 0;
              HEAP32[(0 + 85092 | 0) >> 2] = $4_1;
              HEAP32[($4_1 + 4 | 0) >> 2] = $5_1 | 1 | 0;
              HEAP32[(($7_1 + $0_1 | 0) + 4 | 0) >> 2] = 40;
              HEAP32[(0 + 85096 | 0) >> 2] = HEAP32[(0 + 85556 | 0) >> 2] | 0;
              break label$6;
            }
            if ($4_1 >>> 0 >= $7_1 >>> 0) {
              break label$7
            }
            if ($4_1 >>> 0 < $5_1 >>> 0) {
              break label$7
            }
            if ((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & 8 | 0) {
              break label$7
            }
            HEAP32[($0_1 + 4 | 0) >> 2] = $8_1 + $2_1 | 0;
            $0_1 = (-8 - $4_1 | 0) & 7 | 0;
            $5_1 = $4_1 + $0_1 | 0;
            HEAP32[(0 + 85092 | 0) >> 2] = $5_1;
            $7_1 = (HEAP32[(0 + 85080 | 0) >> 2] | 0) + $2_1 | 0;
            $0_1 = $7_1 - $0_1 | 0;
            HEAP32[(0 + 85080 | 0) >> 2] = $0_1;
            HEAP32[($5_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
            HEAP32[(($4_1 + $7_1 | 0) + 4 | 0) >> 2] = 40;
            HEAP32[(0 + 85096 | 0) >> 2] = HEAP32[(0 + 85556 | 0) >> 2] | 0;
            break label$6;
            }
            $0_1 = 0;
            break label$2;
          }
          $0_1 = 0;
          break label$3;
          }
          label$68 : {
          if ($7_1 >>> 0 >= (HEAP32[(0 + 85084 | 0) >> 2] | 0) >>> 0) {
            break label$68
          }
          HEAP32[(0 + 85084 | 0) >> 2] = $7_1;
          }
          $5_1 = $7_1 + $2_1 | 0;
          $0_1 = 85516;
          label$69 : {
          label$70 : {
            label$71 : while (1) {
            $8_1 = HEAP32[$0_1 >> 2] | 0;
            if (($8_1 | 0) == ($5_1 | 0)) {
              break label$70
            }
            $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
            if ($0_1) {
              continue label$71
            }
            break label$69;
            };
          }
          if (!((HEAPU8[($0_1 + 12 | 0) >> 0] | 0) & 8 | 0)) {
            break label$4
          }
          }
          $0_1 = 85516;
          label$72 : {
          label$73 : while (1) {
            label$74 : {
            $5_1 = HEAP32[$0_1 >> 2] | 0;
            if ($4_1 >>> 0 < $5_1 >>> 0) {
              break label$74
            }
            $5_1 = $5_1 + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0;
            if ($4_1 >>> 0 < $5_1 >>> 0) {
              break label$72
            }
            }
            $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
            continue label$73;
          };
          }
          $0_1 = $2_1 + -40 | 0;
          $8_1 = (-8 - $7_1 | 0) & 7 | 0;
          $11_1 = $0_1 - $8_1 | 0;
          HEAP32[(0 + 85080 | 0) >> 2] = $11_1;
          $8_1 = $7_1 + $8_1 | 0;
          HEAP32[(0 + 85092 | 0) >> 2] = $8_1;
          HEAP32[($8_1 + 4 | 0) >> 2] = $11_1 | 1 | 0;
          HEAP32[(($7_1 + $0_1 | 0) + 4 | 0) >> 2] = 40;
          HEAP32[(0 + 85096 | 0) >> 2] = HEAP32[(0 + 85556 | 0) >> 2] | 0;
          $0_1 = ($5_1 + ((39 - $5_1 | 0) & 7 | 0) | 0) + -47 | 0;
          $8_1 = $0_1 >>> 0 < ($4_1 + 16 | 0) >>> 0 ? $4_1 : $0_1;
          HEAP32[($8_1 + 4 | 0) >> 2] = 27;
          i64toi32_i32$2 = 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 85524 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 85528 | 0) >> 2] | 0;
          $774_1 = i64toi32_i32$0;
          i64toi32_i32$0 = $8_1 + 16 | 0;
          HEAP32[i64toi32_i32$0 >> 2] = $774_1;
          HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
          i64toi32_i32$2 = 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 85516 | 0) >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 85520 | 0) >> 2] | 0;
          $776_1 = i64toi32_i32$1;
          i64toi32_i32$1 = $8_1;
          HEAP32[($8_1 + 8 | 0) >> 2] = $776_1;
          HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$0;
          HEAP32[(0 + 85524 | 0) >> 2] = $8_1 + 8 | 0;
          HEAP32[(0 + 85520 | 0) >> 2] = $2_1;
          HEAP32[(0 + 85516 | 0) >> 2] = $7_1;
          HEAP32[(0 + 85528 | 0) >> 2] = 0;
          $0_1 = $8_1 + 24 | 0;
          label$75 : while (1) {
          HEAP32[($0_1 + 4 | 0) >> 2] = 7;
          $7_1 = $0_1 + 8 | 0;
          $0_1 = $0_1 + 4 | 0;
          if ($7_1 >>> 0 < $5_1 >>> 0) {
            continue label$75
          }
          break label$75;
          };
          if (($8_1 | 0) == ($4_1 | 0)) {
          break label$6
          }
          HEAP32[($8_1 + 4 | 0) >> 2] = (HEAP32[($8_1 + 4 | 0) >> 2] | 0) & -2 | 0;
          $7_1 = $8_1 - $4_1 | 0;
          HEAP32[($4_1 + 4 | 0) >> 2] = $7_1 | 1 | 0;
          HEAP32[$8_1 >> 2] = $7_1;
          label$76 : {
          label$77 : {
            if ($7_1 >>> 0 > 255 >>> 0) {
            break label$77
            }
            $0_1 = ($7_1 & -8 | 0) + 85108 | 0;
            label$78 : {
            label$79 : {
              $5_1 = HEAP32[(0 + 85068 | 0) >> 2] | 0;
              $7_1 = 1 << ($7_1 >>> 3 | 0) | 0;
              if ($5_1 & $7_1 | 0) {
              break label$79
              }
              HEAP32[(0 + 85068 | 0) >> 2] = $5_1 | $7_1 | 0;
              $5_1 = $0_1;
              break label$78;
            }
            $5_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
            }
            HEAP32[($0_1 + 8 | 0) >> 2] = $4_1;
            HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
            $7_1 = 12;
            $8_1 = 8;
            break label$76;
          }
          $0_1 = 31;
          label$80 : {
            if ($7_1 >>> 0 > 16777215 >>> 0) {
            break label$80
            }
            $0_1 = Math_clz32($7_1 >>> 8 | 0);
            $0_1 = ((($7_1 >>> (38 - $0_1 | 0) | 0) & 1 | 0) - ($0_1 << 1 | 0) | 0) + 62 | 0;
          }
          HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
          i64toi32_i32$1 = $4_1;
          i64toi32_i32$0 = 0;
          HEAP32[($4_1 + 16 | 0) >> 2] = 0;
          HEAP32[($4_1 + 20 | 0) >> 2] = i64toi32_i32$0;
          $5_1 = ($0_1 << 2 | 0) + 85372 | 0;
          label$81 : {
            label$82 : {
            label$83 : {
              $8_1 = HEAP32[(0 + 85072 | 0) >> 2] | 0;
              $2_1 = 1 << $0_1 | 0;
              if ($8_1 & $2_1 | 0) {
              break label$83
              }
              HEAP32[(0 + 85072 | 0) >> 2] = $8_1 | $2_1 | 0;
              HEAP32[$5_1 >> 2] = $4_1;
              HEAP32[($4_1 + 24 | 0) >> 2] = $5_1;
              break label$82;
            }
            $0_1 = $7_1 << (($0_1 | 0) == (31 | 0) ? 0 : 25 - ($0_1 >>> 1 | 0) | 0) | 0;
            $8_1 = HEAP32[$5_1 >> 2] | 0;
            label$84 : while (1) {
              $5_1 = $8_1;
              if (((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($7_1 | 0)) {
              break label$81
              }
              $8_1 = $0_1 >>> 29 | 0;
              $0_1 = $0_1 << 1 | 0;
              $2_1 = $5_1 + ($8_1 & 4 | 0) | 0;
              $8_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
              if ($8_1) {
              continue label$84
              }
              break label$84;
            };
            HEAP32[($2_1 + 16 | 0) >> 2] = $4_1;
            HEAP32[($4_1 + 24 | 0) >> 2] = $5_1;
            }
            $7_1 = 8;
            $8_1 = 12;
            $5_1 = $4_1;
            $0_1 = $4_1;
            break label$76;
          }
          $0_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
          HEAP32[($0_1 + 12 | 0) >> 2] = $4_1;
          HEAP32[($5_1 + 8 | 0) >> 2] = $4_1;
          HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
          $0_1 = 0;
          $7_1 = 24;
          $8_1 = 12;
          }
          HEAP32[($4_1 + $8_1 | 0) >> 2] = $5_1;
          HEAP32[($4_1 + $7_1 | 0) >> 2] = $0_1;
        }
        $0_1 = HEAP32[(0 + 85080 | 0) >> 2] | 0;
        if ($0_1 >>> 0 <= $3_1 >>> 0) {
          break label$5
        }
        $4_1 = $0_1 - $3_1 | 0;
        HEAP32[(0 + 85080 | 0) >> 2] = $4_1;
        $0_1 = HEAP32[(0 + 85092 | 0) >> 2] | 0;
        $5_1 = $0_1 + $3_1 | 0;
        HEAP32[(0 + 85092 | 0) >> 2] = $5_1;
        HEAP32[($5_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
        HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
        $0_1 = $0_1 + 8 | 0;
        break label$1;
        }
        HEAP32[($124() | 0) >> 2] = 48;
        $0_1 = 0;
        break label$1;
      }
      HEAP32[$0_1 >> 2] = $7_1;
      HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + $2_1 | 0;
      $0_1 = $127($7_1 | 0, $8_1 | 0, $3_1 | 0) | 0;
      break label$1;
      }
      label$85 : {
      if (!$11_1) {
        break label$85
      }
      label$86 : {
        label$87 : {
        $7_1 = HEAP32[($8_1 + 28 | 0) >> 2] | 0;
        $5_1 = ($7_1 << 2 | 0) + 85372 | 0;
        if (($8_1 | 0) != (HEAP32[$5_1 >> 2] | 0 | 0)) {
          break label$87
        }
        HEAP32[$5_1 >> 2] = $0_1;
        if ($0_1) {
          break label$86
        }
        $10_1 = $10_1 & (__wasm_rotl_i32(-2 | 0, $7_1 | 0) | 0) | 0;
        HEAP32[(0 + 85072 | 0) >> 2] = $10_1;
        break label$85;
        }
        label$88 : {
        label$89 : {
          if ((HEAP32[($11_1 + 16 | 0) >> 2] | 0 | 0) != ($8_1 | 0)) {
          break label$89
          }
          HEAP32[($11_1 + 16 | 0) >> 2] = $0_1;
          break label$88;
        }
        HEAP32[($11_1 + 20 | 0) >> 2] = $0_1;
        }
        if (!$0_1) {
        break label$85
        }
      }
      HEAP32[($0_1 + 24 | 0) >> 2] = $11_1;
      label$90 : {
        $5_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
        if (!$5_1) {
        break label$90
        }
        HEAP32[($0_1 + 16 | 0) >> 2] = $5_1;
        HEAP32[($5_1 + 24 | 0) >> 2] = $0_1;
      }
      $5_1 = HEAP32[($8_1 + 20 | 0) >> 2] | 0;
      if (!$5_1) {
        break label$85
      }
      HEAP32[($0_1 + 20 | 0) >> 2] = $5_1;
      HEAP32[($5_1 + 24 | 0) >> 2] = $0_1;
      }
      label$91 : {
      label$92 : {
        if ($4_1 >>> 0 > 15 >>> 0) {
        break label$92
        }
        $0_1 = $4_1 + $3_1 | 0;
        HEAP32[($8_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
        $0_1 = $8_1 + $0_1 | 0;
        HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
        break label$91;
      }
      HEAP32[($8_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
      $7_1 = $8_1 + $3_1 | 0;
      HEAP32[($7_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
      HEAP32[($7_1 + $4_1 | 0) >> 2] = $4_1;
      label$93 : {
        if ($4_1 >>> 0 > 255 >>> 0) {
        break label$93
        }
        $0_1 = ($4_1 & -8 | 0) + 85108 | 0;
        label$94 : {
        label$95 : {
          $3_1 = HEAP32[(0 + 85068 | 0) >> 2] | 0;
          $4_1 = 1 << ($4_1 >>> 3 | 0) | 0;
          if ($3_1 & $4_1 | 0) {
          break label$95
          }
          HEAP32[(0 + 85068 | 0) >> 2] = $3_1 | $4_1 | 0;
          $4_1 = $0_1;
          break label$94;
        }
        $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
        }
        HEAP32[($0_1 + 8 | 0) >> 2] = $7_1;
        HEAP32[($4_1 + 12 | 0) >> 2] = $7_1;
        HEAP32[($7_1 + 12 | 0) >> 2] = $0_1;
        HEAP32[($7_1 + 8 | 0) >> 2] = $4_1;
        break label$91;
      }
      $0_1 = 31;
      label$96 : {
        if ($4_1 >>> 0 > 16777215 >>> 0) {
        break label$96
        }
        $0_1 = Math_clz32($4_1 >>> 8 | 0);
        $0_1 = ((($4_1 >>> (38 - $0_1 | 0) | 0) & 1 | 0) - ($0_1 << 1 | 0) | 0) + 62 | 0;
      }
      HEAP32[($7_1 + 28 | 0) >> 2] = $0_1;
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$0 = 0;
      HEAP32[($7_1 + 16 | 0) >> 2] = 0;
      HEAP32[($7_1 + 20 | 0) >> 2] = i64toi32_i32$0;
      $3_1 = ($0_1 << 2 | 0) + 85372 | 0;
      label$97 : {
        label$98 : {
        label$99 : {
          $5_1 = 1 << $0_1 | 0;
          if ($10_1 & $5_1 | 0) {
          break label$99
          }
          HEAP32[(0 + 85072 | 0) >> 2] = $10_1 | $5_1 | 0;
          HEAP32[$3_1 >> 2] = $7_1;
          HEAP32[($7_1 + 24 | 0) >> 2] = $3_1;
          break label$98;
        }
        $0_1 = $4_1 << (($0_1 | 0) == (31 | 0) ? 0 : 25 - ($0_1 >>> 1 | 0) | 0) | 0;
        $5_1 = HEAP32[$3_1 >> 2] | 0;
        label$100 : while (1) {
          $3_1 = $5_1;
          if (((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($4_1 | 0)) {
          break label$97
          }
          $5_1 = $0_1 >>> 29 | 0;
          $0_1 = $0_1 << 1 | 0;
          $2_1 = $3_1 + ($5_1 & 4 | 0) | 0;
          $5_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
          if ($5_1) {
          continue label$100
          }
          break label$100;
        };
        HEAP32[($2_1 + 16 | 0) >> 2] = $7_1;
        HEAP32[($7_1 + 24 | 0) >> 2] = $3_1;
        }
        HEAP32[($7_1 + 12 | 0) >> 2] = $7_1;
        HEAP32[($7_1 + 8 | 0) >> 2] = $7_1;
        break label$91;
      }
      $0_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
      HEAP32[($0_1 + 12 | 0) >> 2] = $7_1;
      HEAP32[($3_1 + 8 | 0) >> 2] = $7_1;
      HEAP32[($7_1 + 24 | 0) >> 2] = 0;
      HEAP32[($7_1 + 12 | 0) >> 2] = $3_1;
      HEAP32[($7_1 + 8 | 0) >> 2] = $0_1;
      }
      $0_1 = $8_1 + 8 | 0;
      break label$1;
    }
    label$101 : {
      if (!$10_1) {
      break label$101
      }
      label$102 : {
      label$103 : {
        $8_1 = HEAP32[($7_1 + 28 | 0) >> 2] | 0;
        $5_1 = ($8_1 << 2 | 0) + 85372 | 0;
        if (($7_1 | 0) != (HEAP32[$5_1 >> 2] | 0 | 0)) {
        break label$103
        }
        HEAP32[$5_1 >> 2] = $0_1;
        if ($0_1) {
        break label$102
        }
        HEAP32[(0 + 85072 | 0) >> 2] = $9_1 & (__wasm_rotl_i32(-2 | 0, $8_1 | 0) | 0) | 0;
        break label$101;
      }
      label$104 : {
        label$105 : {
        if ((HEAP32[($10_1 + 16 | 0) >> 2] | 0 | 0) != ($7_1 | 0)) {
          break label$105
        }
        HEAP32[($10_1 + 16 | 0) >> 2] = $0_1;
        break label$104;
        }
        HEAP32[($10_1 + 20 | 0) >> 2] = $0_1;
      }
      if (!$0_1) {
        break label$101
      }
      }
      HEAP32[($0_1 + 24 | 0) >> 2] = $10_1;
      label$106 : {
      $5_1 = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
      if (!$5_1) {
        break label$106
      }
      HEAP32[($0_1 + 16 | 0) >> 2] = $5_1;
      HEAP32[($5_1 + 24 | 0) >> 2] = $0_1;
      }
      $5_1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
      if (!$5_1) {
      break label$101
      }
      HEAP32[($0_1 + 20 | 0) >> 2] = $5_1;
      HEAP32[($5_1 + 24 | 0) >> 2] = $0_1;
    }
    label$107 : {
      label$108 : {
      if ($4_1 >>> 0 > 15 >>> 0) {
        break label$108
      }
      $0_1 = $4_1 + $3_1 | 0;
      HEAP32[($7_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
      $0_1 = $7_1 + $0_1 | 0;
      HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
      break label$107;
      }
      HEAP32[($7_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
      $3_1 = $7_1 + $3_1 | 0;
      HEAP32[($3_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
      HEAP32[($3_1 + $4_1 | 0) >> 2] = $4_1;
      label$109 : {
      if (!$6_1) {
        break label$109
      }
      $5_1 = ($6_1 & -8 | 0) + 85108 | 0;
      $0_1 = HEAP32[(0 + 85088 | 0) >> 2] | 0;
      label$110 : {
        label$111 : {
        $8_1 = 1 << ($6_1 >>> 3 | 0) | 0;
        if ($8_1 & $2_1 | 0) {
          break label$111
        }
        HEAP32[(0 + 85068 | 0) >> 2] = $8_1 | $2_1 | 0;
        $8_1 = $5_1;
        break label$110;
        }
        $8_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
      }
      HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
      HEAP32[($8_1 + 12 | 0) >> 2] = $0_1;
      HEAP32[($0_1 + 12 | 0) >> 2] = $5_1;
      HEAP32[($0_1 + 8 | 0) >> 2] = $8_1;
      }
      HEAP32[(0 + 85088 | 0) >> 2] = $3_1;
      HEAP32[(0 + 85076 | 0) >> 2] = $4_1;
    }
    $0_1 = $7_1 + 8 | 0;
    }
    global$0 = $1_1 + 16 | 0;
    return $0_1 | 0;
  }
  
  function $127($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $4_1 = 0, $5_1 = 0, $7_1 = 0, $8_1 = 0, $3_1 = 0, $6_1 = 0, $9_1 = 0;
    $3_1 = $0_1 + ((-8 - $0_1 | 0) & 7 | 0) | 0;
    HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 | 3 | 0;
    $4_1 = $1_1 + ((-8 - $1_1 | 0) & 7 | 0) | 0;
    $5_1 = $3_1 + $2_1 | 0;
    $0_1 = $4_1 - $5_1 | 0;
    label$1 : {
    label$2 : {
      if (($4_1 | 0) != (HEAP32[(0 + 85092 | 0) >> 2] | 0 | 0)) {
      break label$2
      }
      HEAP32[(0 + 85092 | 0) >> 2] = $5_1;
      $2_1 = (HEAP32[(0 + 85080 | 0) >> 2] | 0) + $0_1 | 0;
      HEAP32[(0 + 85080 | 0) >> 2] = $2_1;
      HEAP32[($5_1 + 4 | 0) >> 2] = $2_1 | 1 | 0;
      break label$1;
    }
    label$3 : {
      if (($4_1 | 0) != (HEAP32[(0 + 85088 | 0) >> 2] | 0 | 0)) {
      break label$3
      }
      HEAP32[(0 + 85088 | 0) >> 2] = $5_1;
      $2_1 = (HEAP32[(0 + 85076 | 0) >> 2] | 0) + $0_1 | 0;
      HEAP32[(0 + 85076 | 0) >> 2] = $2_1;
      HEAP32[($5_1 + 4 | 0) >> 2] = $2_1 | 1 | 0;
      HEAP32[($5_1 + $2_1 | 0) >> 2] = $2_1;
      break label$1;
    }
    label$4 : {
      $1_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
      if (($1_1 & 3 | 0 | 0) != (1 | 0)) {
      break label$4
      }
      $6_1 = $1_1 & -8 | 0;
      $2_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
      label$5 : {
      label$6 : {
        if ($1_1 >>> 0 > 255 >>> 0) {
        break label$6
        }
        label$7 : {
        $7_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
        if (($2_1 | 0) != ($7_1 | 0)) {
          break label$7
        }
        HEAP32[(0 + 85068 | 0) >> 2] = (HEAP32[(0 + 85068 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $1_1 >>> 3 | 0 | 0) | 0) | 0;
        break label$5;
        }
        HEAP32[($7_1 + 12 | 0) >> 2] = $2_1;
        HEAP32[($2_1 + 8 | 0) >> 2] = $7_1;
        break label$5;
      }
      $8_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
      label$8 : {
        label$9 : {
        if (($2_1 | 0) == ($4_1 | 0)) {
          break label$9
        }
        $1_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
        HEAP32[($1_1 + 12 | 0) >> 2] = $2_1;
        HEAP32[($2_1 + 8 | 0) >> 2] = $1_1;
        break label$8;
        }
        label$10 : {
        label$11 : {
          label$12 : {
          $1_1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
          if (!$1_1) {
            break label$12
          }
          $7_1 = $4_1 + 20 | 0;
          break label$11;
          }
          $1_1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
          if (!$1_1) {
          break label$10
          }
          $7_1 = $4_1 + 16 | 0;
        }
        label$13 : while (1) {
          $9_1 = $7_1;
          $2_1 = $1_1;
          $7_1 = $2_1 + 20 | 0;
          $1_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
          if ($1_1) {
          continue label$13
          }
          $7_1 = $2_1 + 16 | 0;
          $1_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
          if ($1_1) {
          continue label$13
          }
          break label$13;
        };
        HEAP32[$9_1 >> 2] = 0;
        break label$8;
        }
        $2_1 = 0;
      }
      if (!$8_1) {
        break label$5
      }
      label$14 : {
        label$15 : {
        $7_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
        $1_1 = ($7_1 << 2 | 0) + 85372 | 0;
        if (($4_1 | 0) != (HEAP32[$1_1 >> 2] | 0 | 0)) {
          break label$15
        }
        HEAP32[$1_1 >> 2] = $2_1;
        if ($2_1) {
          break label$14
        }
        HEAP32[(0 + 85072 | 0) >> 2] = (HEAP32[(0 + 85072 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $7_1 | 0) | 0) | 0;
        break label$5;
        }
        label$16 : {
        label$17 : {
          if ((HEAP32[($8_1 + 16 | 0) >> 2] | 0 | 0) != ($4_1 | 0)) {
          break label$17
          }
          HEAP32[($8_1 + 16 | 0) >> 2] = $2_1;
          break label$16;
        }
        HEAP32[($8_1 + 20 | 0) >> 2] = $2_1;
        }
        if (!$2_1) {
        break label$5
        }
      }
      HEAP32[($2_1 + 24 | 0) >> 2] = $8_1;
      label$18 : {
        $1_1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
        if (!$1_1) {
        break label$18
        }
        HEAP32[($2_1 + 16 | 0) >> 2] = $1_1;
        HEAP32[($1_1 + 24 | 0) >> 2] = $2_1;
      }
      $1_1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
      if (!$1_1) {
        break label$5
      }
      HEAP32[($2_1 + 20 | 0) >> 2] = $1_1;
      HEAP32[($1_1 + 24 | 0) >> 2] = $2_1;
      }
      $0_1 = $6_1 + $0_1 | 0;
      $4_1 = $4_1 + $6_1 | 0;
      $1_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
    }
    HEAP32[($4_1 + 4 | 0) >> 2] = $1_1 & -2 | 0;
    HEAP32[($5_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
    HEAP32[($5_1 + $0_1 | 0) >> 2] = $0_1;
    label$19 : {
      if ($0_1 >>> 0 > 255 >>> 0) {
      break label$19
      }
      $2_1 = ($0_1 & -8 | 0) + 85108 | 0;
      label$20 : {
      label$21 : {
        $1_1 = HEAP32[(0 + 85068 | 0) >> 2] | 0;
        $0_1 = 1 << ($0_1 >>> 3 | 0) | 0;
        if ($1_1 & $0_1 | 0) {
        break label$21
        }
        HEAP32[(0 + 85068 | 0) >> 2] = $1_1 | $0_1 | 0;
        $0_1 = $2_1;
        break label$20;
      }
      $0_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
      }
      HEAP32[($2_1 + 8 | 0) >> 2] = $5_1;
      HEAP32[($0_1 + 12 | 0) >> 2] = $5_1;
      HEAP32[($5_1 + 12 | 0) >> 2] = $2_1;
      HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
      break label$1;
    }
    $2_1 = 31;
    label$22 : {
      if ($0_1 >>> 0 > 16777215 >>> 0) {
      break label$22
      }
      $2_1 = Math_clz32($0_1 >>> 8 | 0);
      $2_1 = ((($0_1 >>> (38 - $2_1 | 0) | 0) & 1 | 0) - ($2_1 << 1 | 0) | 0) + 62 | 0;
    }
    HEAP32[($5_1 + 28 | 0) >> 2] = $2_1;
    HEAP32[($5_1 + 16 | 0) >> 2] = 0;
    HEAP32[($5_1 + 20 | 0) >> 2] = 0;
    $1_1 = ($2_1 << 2 | 0) + 85372 | 0;
    label$23 : {
      label$24 : {
      label$25 : {
        $7_1 = HEAP32[(0 + 85072 | 0) >> 2] | 0;
        $4_1 = 1 << $2_1 | 0;
        if ($7_1 & $4_1 | 0) {
        break label$25
        }
        HEAP32[(0 + 85072 | 0) >> 2] = $7_1 | $4_1 | 0;
        HEAP32[$1_1 >> 2] = $5_1;
        HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
        break label$24;
      }
      $2_1 = $0_1 << (($2_1 | 0) == (31 | 0) ? 0 : 25 - ($2_1 >>> 1 | 0) | 0) | 0;
      $7_1 = HEAP32[$1_1 >> 2] | 0;
      label$26 : while (1) {
        $1_1 = $7_1;
        if (((HEAP32[($1_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($0_1 | 0)) {
        break label$23
        }
        $7_1 = $2_1 >>> 29 | 0;
        $2_1 = $2_1 << 1 | 0;
        $4_1 = $1_1 + ($7_1 & 4 | 0) | 0;
        $7_1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
        if ($7_1) {
        continue label$26
        }
        break label$26;
      };
      HEAP32[($4_1 + 16 | 0) >> 2] = $5_1;
      HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
      }
      HEAP32[($5_1 + 12 | 0) >> 2] = $5_1;
      HEAP32[($5_1 + 8 | 0) >> 2] = $5_1;
      break label$1;
    }
    $2_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
    HEAP32[($2_1 + 12 | 0) >> 2] = $5_1;
    HEAP32[($1_1 + 8 | 0) >> 2] = $5_1;
    HEAP32[($5_1 + 24 | 0) >> 2] = 0;
    HEAP32[($5_1 + 12 | 0) >> 2] = $1_1;
    HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
    }
    return $3_1 + 8 | 0 | 0;
  }
  
  function $128($0_1) {
    $0_1 = $0_1 | 0;
    var $2_1 = 0, $4_1 = 0, $1_1 = 0, $5_1 = 0, $3_1 = 0, $6_1 = 0, $7_1 = 0;
    label$1 : {
    if (!$0_1) {
      break label$1
    }
    $1_1 = $0_1 + -8 | 0;
    $2_1 = HEAP32[($0_1 + -4 | 0) >> 2] | 0;
    $0_1 = $2_1 & -8 | 0;
    $3_1 = $1_1 + $0_1 | 0;
    label$2 : {
      if ($2_1 & 1 | 0) {
      break label$2
      }
      if (!($2_1 & 2 | 0)) {
      break label$1
      }
      $4_1 = HEAP32[$1_1 >> 2] | 0;
      $1_1 = $1_1 - $4_1 | 0;
      if ($1_1 >>> 0 < (HEAP32[(0 + 85084 | 0) >> 2] | 0) >>> 0) {
      break label$1
      }
      $0_1 = $4_1 + $0_1 | 0;
      label$3 : {
      label$4 : {
        label$5 : {
        label$6 : {
          if (($1_1 | 0) == (HEAP32[(0 + 85088 | 0) >> 2] | 0 | 0)) {
          break label$6
          }
          $2_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
          label$7 : {
          if ($4_1 >>> 0 > 255 >>> 0) {
            break label$7
          }
          $5_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
          if (($2_1 | 0) != ($5_1 | 0)) {
            break label$5
          }
          HEAP32[(0 + 85068 | 0) >> 2] = (HEAP32[(0 + 85068 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 >>> 3 | 0 | 0) | 0) | 0;
          break label$2;
          }
          $6_1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
          label$8 : {
          if (($2_1 | 0) == ($1_1 | 0)) {
            break label$8
          }
          $4_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
          HEAP32[($4_1 + 12 | 0) >> 2] = $2_1;
          HEAP32[($2_1 + 8 | 0) >> 2] = $4_1;
          break label$3;
          }
          label$9 : {
          label$10 : {
            $4_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
            if (!$4_1) {
            break label$10
            }
            $5_1 = $1_1 + 20 | 0;
            break label$9;
          }
          $4_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
          if (!$4_1) {
            break label$4
          }
          $5_1 = $1_1 + 16 | 0;
          }
          label$11 : while (1) {
          $7_1 = $5_1;
          $2_1 = $4_1;
          $5_1 = $2_1 + 20 | 0;
          $4_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
          if ($4_1) {
            continue label$11
          }
          $5_1 = $2_1 + 16 | 0;
          $4_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
          if ($4_1) {
            continue label$11
          }
          break label$11;
          };
          HEAP32[$7_1 >> 2] = 0;
          break label$3;
        }
        $2_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
        if (($2_1 & 3 | 0 | 0) != (3 | 0)) {
          break label$2
        }
        HEAP32[(0 + 85076 | 0) >> 2] = $0_1;
        HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 & -2 | 0;
        HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
        HEAP32[$3_1 >> 2] = $0_1;
        return;
        }
        HEAP32[($5_1 + 12 | 0) >> 2] = $2_1;
        HEAP32[($2_1 + 8 | 0) >> 2] = $5_1;
        break label$2;
      }
      $2_1 = 0;
      }
      if (!$6_1) {
      break label$2
      }
      label$12 : {
      label$13 : {
        $5_1 = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
        $4_1 = ($5_1 << 2 | 0) + 85372 | 0;
        if (($1_1 | 0) != (HEAP32[$4_1 >> 2] | 0 | 0)) {
        break label$13
        }
        HEAP32[$4_1 >> 2] = $2_1;
        if ($2_1) {
        break label$12
        }
        HEAP32[(0 + 85072 | 0) >> 2] = (HEAP32[(0 + 85072 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
        break label$2;
      }
      label$14 : {
        label$15 : {
        if ((HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
          break label$15
        }
        HEAP32[($6_1 + 16 | 0) >> 2] = $2_1;
        break label$14;
        }
        HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
      }
      if (!$2_1) {
        break label$2
      }
      }
      HEAP32[($2_1 + 24 | 0) >> 2] = $6_1;
      label$16 : {
      $4_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
      if (!$4_1) {
        break label$16
      }
      HEAP32[($2_1 + 16 | 0) >> 2] = $4_1;
      HEAP32[($4_1 + 24 | 0) >> 2] = $2_1;
      }
      $4_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
      if (!$4_1) {
      break label$2
      }
      HEAP32[($2_1 + 20 | 0) >> 2] = $4_1;
      HEAP32[($4_1 + 24 | 0) >> 2] = $2_1;
    }
    if ($1_1 >>> 0 >= $3_1 >>> 0) {
      break label$1
    }
    $4_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    if (!($4_1 & 1 | 0)) {
      break label$1
    }
    label$17 : {
      label$18 : {
      label$19 : {
        label$20 : {
        label$21 : {
          if ($4_1 & 2 | 0) {
          break label$21
          }
          label$22 : {
          if (($3_1 | 0) != (HEAP32[(0 + 85092 | 0) >> 2] | 0 | 0)) {
            break label$22
          }
          HEAP32[(0 + 85092 | 0) >> 2] = $1_1;
          $0_1 = (HEAP32[(0 + 85080 | 0) >> 2] | 0) + $0_1 | 0;
          HEAP32[(0 + 85080 | 0) >> 2] = $0_1;
          HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
          if (($1_1 | 0) != (HEAP32[(0 + 85088 | 0) >> 2] | 0 | 0)) {
            break label$1
          }
          HEAP32[(0 + 85076 | 0) >> 2] = 0;
          HEAP32[(0 + 85088 | 0) >> 2] = 0;
          return;
          }
          label$23 : {
          if (($3_1 | 0) != (HEAP32[(0 + 85088 | 0) >> 2] | 0 | 0)) {
            break label$23
          }
          HEAP32[(0 + 85088 | 0) >> 2] = $1_1;
          $0_1 = (HEAP32[(0 + 85076 | 0) >> 2] | 0) + $0_1 | 0;
          HEAP32[(0 + 85076 | 0) >> 2] = $0_1;
          HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
          HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
          return;
          }
          $0_1 = ($4_1 & -8 | 0) + $0_1 | 0;
          $2_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
          label$24 : {
          if ($4_1 >>> 0 > 255 >>> 0) {
            break label$24
          }
          label$25 : {
            $5_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
            if (($2_1 | 0) != ($5_1 | 0)) {
            break label$25
            }
            HEAP32[(0 + 85068 | 0) >> 2] = (HEAP32[(0 + 85068 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 >>> 3 | 0 | 0) | 0) | 0;
            break label$18;
          }
          HEAP32[($5_1 + 12 | 0) >> 2] = $2_1;
          HEAP32[($2_1 + 8 | 0) >> 2] = $5_1;
          break label$18;
          }
          $6_1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
          label$26 : {
          if (($2_1 | 0) == ($3_1 | 0)) {
            break label$26
          }
          $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
          HEAP32[($4_1 + 12 | 0) >> 2] = $2_1;
          HEAP32[($2_1 + 8 | 0) >> 2] = $4_1;
          break label$19;
          }
          label$27 : {
          label$28 : {
            $4_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
            if (!$4_1) {
            break label$28
            }
            $5_1 = $3_1 + 20 | 0;
            break label$27;
          }
          $4_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
          if (!$4_1) {
            break label$20
          }
          $5_1 = $3_1 + 16 | 0;
          }
          label$29 : while (1) {
          $7_1 = $5_1;
          $2_1 = $4_1;
          $5_1 = $2_1 + 20 | 0;
          $4_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
          if ($4_1) {
            continue label$29
          }
          $5_1 = $2_1 + 16 | 0;
          $4_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
          if ($4_1) {
            continue label$29
          }
          break label$29;
          };
          HEAP32[$7_1 >> 2] = 0;
          break label$19;
        }
        HEAP32[($3_1 + 4 | 0) >> 2] = $4_1 & -2 | 0;
        HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
        HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
        break label$17;
        }
        $2_1 = 0;
      }
      if (!$6_1) {
        break label$18
      }
      label$30 : {
        label$31 : {
        $5_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
        $4_1 = ($5_1 << 2 | 0) + 85372 | 0;
        if (($3_1 | 0) != (HEAP32[$4_1 >> 2] | 0 | 0)) {
          break label$31
        }
        HEAP32[$4_1 >> 2] = $2_1;
        if ($2_1) {
          break label$30
        }
        HEAP32[(0 + 85072 | 0) >> 2] = (HEAP32[(0 + 85072 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
        break label$18;
        }
        label$32 : {
        label$33 : {
          if ((HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0) != ($3_1 | 0)) {
          break label$33
          }
          HEAP32[($6_1 + 16 | 0) >> 2] = $2_1;
          break label$32;
        }
        HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
        }
        if (!$2_1) {
        break label$18
        }
      }
      HEAP32[($2_1 + 24 | 0) >> 2] = $6_1;
      label$34 : {
        $4_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
        if (!$4_1) {
        break label$34
        }
        HEAP32[($2_1 + 16 | 0) >> 2] = $4_1;
        HEAP32[($4_1 + 24 | 0) >> 2] = $2_1;
      }
      $4_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
      if (!$4_1) {
        break label$18
      }
      HEAP32[($2_1 + 20 | 0) >> 2] = $4_1;
      HEAP32[($4_1 + 24 | 0) >> 2] = $2_1;
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
      HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
      if (($1_1 | 0) != (HEAP32[(0 + 85088 | 0) >> 2] | 0 | 0)) {
      break label$17
      }
      HEAP32[(0 + 85076 | 0) >> 2] = $0_1;
      return;
    }
    label$35 : {
      if ($0_1 >>> 0 > 255 >>> 0) {
      break label$35
      }
      $2_1 = ($0_1 & -8 | 0) + 85108 | 0;
      label$36 : {
      label$37 : {
        $4_1 = HEAP32[(0 + 85068 | 0) >> 2] | 0;
        $0_1 = 1 << ($0_1 >>> 3 | 0) | 0;
        if ($4_1 & $0_1 | 0) {
        break label$37
        }
        HEAP32[(0 + 85068 | 0) >> 2] = $4_1 | $0_1 | 0;
        $0_1 = $2_1;
        break label$36;
      }
      $0_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
      }
      HEAP32[($2_1 + 8 | 0) >> 2] = $1_1;
      HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
      HEAP32[($1_1 + 12 | 0) >> 2] = $2_1;
      HEAP32[($1_1 + 8 | 0) >> 2] = $0_1;
      return;
    }
    $2_1 = 31;
    label$38 : {
      if ($0_1 >>> 0 > 16777215 >>> 0) {
      break label$38
      }
      $2_1 = Math_clz32($0_1 >>> 8 | 0);
      $2_1 = ((($0_1 >>> (38 - $2_1 | 0) | 0) & 1 | 0) - ($2_1 << 1 | 0) | 0) + 62 | 0;
    }
    HEAP32[($1_1 + 28 | 0) >> 2] = $2_1;
    HEAP32[($1_1 + 16 | 0) >> 2] = 0;
    HEAP32[($1_1 + 20 | 0) >> 2] = 0;
    $5_1 = ($2_1 << 2 | 0) + 85372 | 0;
    label$39 : {
      label$40 : {
      label$41 : {
        label$42 : {
        $4_1 = HEAP32[(0 + 85072 | 0) >> 2] | 0;
        $3_1 = 1 << $2_1 | 0;
        if ($4_1 & $3_1 | 0) {
          break label$42
        }
        HEAP32[(0 + 85072 | 0) >> 2] = $4_1 | $3_1 | 0;
        HEAP32[$5_1 >> 2] = $1_1;
        $0_1 = 8;
        $2_1 = 24;
        break label$41;
        }
        $2_1 = $0_1 << (($2_1 | 0) == (31 | 0) ? 0 : 25 - ($2_1 >>> 1 | 0) | 0) | 0;
        $5_1 = HEAP32[$5_1 >> 2] | 0;
        label$43 : while (1) {
        $4_1 = $5_1;
        if (((HEAP32[($4_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($0_1 | 0)) {
          break label$40
        }
        $5_1 = $2_1 >>> 29 | 0;
        $2_1 = $2_1 << 1 | 0;
        $3_1 = $4_1 + ($5_1 & 4 | 0) | 0;
        $5_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
        if ($5_1) {
          continue label$43
        }
        break label$43;
        };
        HEAP32[($3_1 + 16 | 0) >> 2] = $1_1;
        $0_1 = 8;
        $2_1 = 24;
        $5_1 = $4_1;
      }
      $4_1 = $1_1;
      $3_1 = $1_1;
      break label$39;
      }
      $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
      HEAP32[($5_1 + 12 | 0) >> 2] = $1_1;
      HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
      $3_1 = 0;
      $0_1 = 24;
      $2_1 = 8;
    }
    HEAP32[($1_1 + $2_1 | 0) >> 2] = $5_1;
    HEAP32[($1_1 + 12 | 0) >> 2] = $4_1;
    HEAP32[($1_1 + $0_1 | 0) >> 2] = $3_1;
    $1_1 = (HEAP32[(0 + 85100 | 0) >> 2] | 0) + -1 | 0;
    HEAP32[(0 + 85100 | 0) >> 2] = $1_1 ? $1_1 : -1;
    }
  }
  
  function $129($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0, $3_1 = 0;
    label$1 : {
    if ($0_1) {
      break label$1
    }
    return $126($1_1 | 0) | 0 | 0;
    }
    label$2 : {
    if ($1_1 >>> 0 < -64 >>> 0) {
      break label$2
    }
    HEAP32[($124() | 0) >> 2] = 48;
    return 0 | 0;
    }
    label$3 : {
    $2_1 = $130($0_1 + -8 | 0 | 0, ($1_1 >>> 0 < 11 >>> 0 ? 16 : ($1_1 + 11 | 0) & -8 | 0) | 0) | 0;
    if (!$2_1) {
      break label$3
    }
    return $2_1 + 8 | 0 | 0;
    }
    label$4 : {
    $2_1 = $126($1_1 | 0) | 0;
    if ($2_1) {
      break label$4
    }
    return 0 | 0;
    }
    $3_1 = HEAP32[($0_1 + -4 | 0) >> 2] | 0;
    $3_1 = ($3_1 & 3 | 0 ? -4 : -8) + ($3_1 & -8 | 0) | 0;
    $120($2_1 | 0, $0_1 | 0, ($3_1 >>> 0 < $1_1 >>> 0 ? $3_1 : $1_1) | 0) | 0;
    $128($0_1 | 0);
    return $2_1 | 0;
  }
  
  function $130($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $2_1 = 0, $7_1 = 0, $9_1 = 0, $8_1 = 0, $10_1 = 0;
    $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    $3_1 = $2_1 & -8 | 0;
    label$1 : {
    label$2 : {
      if ($2_1 & 3 | 0) {
      break label$2
      }
      $4_1 = 0;
      if ($1_1 >>> 0 < 256 >>> 0) {
      break label$1
      }
      label$3 : {
      if ($3_1 >>> 0 < ($1_1 + 4 | 0) >>> 0) {
        break label$3
      }
      $4_1 = $0_1;
      if (($3_1 - $1_1 | 0) >>> 0 <= ((HEAP32[(0 + 85548 | 0) >> 2] | 0) << 1 | 0) >>> 0) {
        break label$1
      }
      }
      return 0 | 0;
    }
    $5_1 = $0_1 + $3_1 | 0;
    label$4 : {
      label$5 : {
      if ($3_1 >>> 0 < $1_1 >>> 0) {
        break label$5
      }
      $3_1 = $3_1 - $1_1 | 0;
      if ($3_1 >>> 0 < 16 >>> 0) {
        break label$4
      }
      HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | ($2_1 & 1 | 0) | 0 | 2 | 0;
      $1_1 = $0_1 + $1_1 | 0;
      HEAP32[($1_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
      HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 1 | 0;
      $133($1_1 | 0, $3_1 | 0);
      break label$4;
      }
      $4_1 = 0;
      label$6 : {
      if (($5_1 | 0) != (HEAP32[(0 + 85092 | 0) >> 2] | 0 | 0)) {
        break label$6
      }
      $3_1 = (HEAP32[(0 + 85080 | 0) >> 2] | 0) + $3_1 | 0;
      if ($3_1 >>> 0 <= $1_1 >>> 0) {
        break label$1
      }
      HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | ($2_1 & 1 | 0) | 0 | 2 | 0;
      $2_1 = $0_1 + $1_1 | 0;
      $1_1 = $3_1 - $1_1 | 0;
      HEAP32[($2_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
      HEAP32[(0 + 85080 | 0) >> 2] = $1_1;
      HEAP32[(0 + 85092 | 0) >> 2] = $2_1;
      break label$4;
      }
      label$7 : {
      if (($5_1 | 0) != (HEAP32[(0 + 85088 | 0) >> 2] | 0 | 0)) {
        break label$7
      }
      $4_1 = 0;
      $3_1 = (HEAP32[(0 + 85076 | 0) >> 2] | 0) + $3_1 | 0;
      if ($3_1 >>> 0 < $1_1 >>> 0) {
        break label$1
      }
      label$8 : {
        label$9 : {
        $4_1 = $3_1 - $1_1 | 0;
        if ($4_1 >>> 0 < 16 >>> 0) {
          break label$9
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | ($2_1 & 1 | 0) | 0 | 2 | 0;
        $1_1 = $0_1 + $1_1 | 0;
        HEAP32[($1_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
        $3_1 = $0_1 + $3_1 | 0;
        HEAP32[$3_1 >> 2] = $4_1;
        HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) & -2 | 0;
        break label$8;
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $3_1 | 0 | 2 | 0;
        $1_1 = $0_1 + $3_1 | 0;
        HEAP32[($1_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 1 | 0;
        $4_1 = 0;
        $1_1 = 0;
      }
      HEAP32[(0 + 85088 | 0) >> 2] = $1_1;
      HEAP32[(0 + 85076 | 0) >> 2] = $4_1;
      break label$4;
      }
      $4_1 = 0;
      $6_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
      if ($6_1 & 2 | 0) {
      break label$1
      }
      $7_1 = ($6_1 & -8 | 0) + $3_1 | 0;
      if ($7_1 >>> 0 < $1_1 >>> 0) {
      break label$1
      }
      $8_1 = $7_1 - $1_1 | 0;
      $3_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
      label$10 : {
      label$11 : {
        if ($6_1 >>> 0 > 255 >>> 0) {
        break label$11
        }
        label$12 : {
        $4_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
        if (($3_1 | 0) != ($4_1 | 0)) {
          break label$12
        }
        HEAP32[(0 + 85068 | 0) >> 2] = (HEAP32[(0 + 85068 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $6_1 >>> 3 | 0 | 0) | 0) | 0;
        break label$10;
        }
        HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
        HEAP32[($3_1 + 8 | 0) >> 2] = $4_1;
        break label$10;
      }
      $9_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
      label$13 : {
        label$14 : {
        if (($3_1 | 0) == ($5_1 | 0)) {
          break label$14
        }
        $4_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
        HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
        HEAP32[($3_1 + 8 | 0) >> 2] = $4_1;
        break label$13;
        }
        label$15 : {
        label$16 : {
          label$17 : {
          $4_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
          if (!$4_1) {
            break label$17
          }
          $6_1 = $5_1 + 20 | 0;
          break label$16;
          }
          $4_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
          if (!$4_1) {
          break label$15
          }
          $6_1 = $5_1 + 16 | 0;
        }
        label$18 : while (1) {
          $10_1 = $6_1;
          $3_1 = $4_1;
          $6_1 = $3_1 + 20 | 0;
          $4_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
          if ($4_1) {
          continue label$18
          }
          $6_1 = $3_1 + 16 | 0;
          $4_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
          if ($4_1) {
          continue label$18
          }
          break label$18;
        };
        HEAP32[$10_1 >> 2] = 0;
        break label$13;
        }
        $3_1 = 0;
      }
      if (!$9_1) {
        break label$10
      }
      label$19 : {
        label$20 : {
        $6_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
        $4_1 = ($6_1 << 2 | 0) + 85372 | 0;
        if (($5_1 | 0) != (HEAP32[$4_1 >> 2] | 0 | 0)) {
          break label$20
        }
        HEAP32[$4_1 >> 2] = $3_1;
        if ($3_1) {
          break label$19
        }
        HEAP32[(0 + 85072 | 0) >> 2] = (HEAP32[(0 + 85072 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $6_1 | 0) | 0) | 0;
        break label$10;
        }
        label$21 : {
        label$22 : {
          if ((HEAP32[($9_1 + 16 | 0) >> 2] | 0 | 0) != ($5_1 | 0)) {
          break label$22
          }
          HEAP32[($9_1 + 16 | 0) >> 2] = $3_1;
          break label$21;
        }
        HEAP32[($9_1 + 20 | 0) >> 2] = $3_1;
        }
        if (!$3_1) {
        break label$10
        }
      }
      HEAP32[($3_1 + 24 | 0) >> 2] = $9_1;
      label$23 : {
        $4_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
        if (!$4_1) {
        break label$23
        }
        HEAP32[($3_1 + 16 | 0) >> 2] = $4_1;
        HEAP32[($4_1 + 24 | 0) >> 2] = $3_1;
      }
      $4_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
      if (!$4_1) {
        break label$10
      }
      HEAP32[($3_1 + 20 | 0) >> 2] = $4_1;
      HEAP32[($4_1 + 24 | 0) >> 2] = $3_1;
      }
      label$24 : {
      if ($8_1 >>> 0 > 15 >>> 0) {
        break label$24
      }
      HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $7_1 | 0 | 2 | 0;
      $1_1 = $0_1 + $7_1 | 0;
      HEAP32[($1_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 1 | 0;
      break label$4;
      }
      HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | ($2_1 & 1 | 0) | 0 | 2 | 0;
      $1_1 = $0_1 + $1_1 | 0;
      HEAP32[($1_1 + 4 | 0) >> 2] = $8_1 | 3 | 0;
      $3_1 = $0_1 + $7_1 | 0;
      HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 1 | 0;
      $133($1_1 | 0, $8_1 | 0);
    }
    $4_1 = $0_1;
    }
    return $4_1 | 0;
  }
  
  function $131($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0, $3_1 = 0, $6_1 = 0, $4_1 = 0, $5_1 = 0;
    $2_1 = 16;
    label$1 : {
    label$2 : {
      $3_1 = $0_1 >>> 0 > 16 >>> 0 ? $0_1 : 16;
      if ($3_1 & ($3_1 + -1 | 0) | 0) {
      break label$2
      }
      $0_1 = $3_1;
      break label$1;
    }
    label$3 : while (1) {
      $0_1 = $2_1;
      $2_1 = $0_1 << 1 | 0;
      if ($0_1 >>> 0 < $3_1 >>> 0) {
      continue label$3
      }
      break label$3;
    };
    }
    label$4 : {
    if ($1_1 >>> 0 < (-64 - $0_1 | 0) >>> 0) {
      break label$4
    }
    HEAP32[($124() | 0) >> 2] = 48;
    return 0 | 0;
    }
    label$5 : {
    $1_1 = $1_1 >>> 0 < 11 >>> 0 ? 16 : ($1_1 + 11 | 0) & -8 | 0;
    $2_1 = $126(($1_1 + $0_1 | 0) + 12 | 0 | 0) | 0;
    if ($2_1) {
      break label$5
    }
    return 0 | 0;
    }
    $3_1 = $2_1 + -8 | 0;
    label$6 : {
    label$7 : {
      if (($0_1 + -1 | 0) & $2_1 | 0) {
      break label$7
      }
      $0_1 = $3_1;
      break label$6;
    }
    $4_1 = $2_1 + -4 | 0;
    $5_1 = HEAP32[$4_1 >> 2] | 0;
    $2_1 = ((($2_1 + $0_1 | 0) + -1 | 0) & (0 - $0_1 | 0) | 0) + -8 | 0;
    $0_1 = $2_1 + (($2_1 - $3_1 | 0) >>> 0 > 15 >>> 0 ? 0 : $0_1) | 0;
    $2_1 = $0_1 - $3_1 | 0;
    $6_1 = ($5_1 & -8 | 0) - $2_1 | 0;
    label$8 : {
      if ($5_1 & 3 | 0) {
      break label$8
      }
      $3_1 = HEAP32[$3_1 >> 2] | 0;
      HEAP32[($0_1 + 4 | 0) >> 2] = $6_1;
      HEAP32[$0_1 >> 2] = $3_1 + $2_1 | 0;
      break label$6;
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = $6_1 | ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) & 1 | 0) | 0 | 2 | 0;
    $6_1 = $0_1 + $6_1 | 0;
    HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 1 | 0;
    HEAP32[$4_1 >> 2] = $2_1 | ((HEAP32[$4_1 >> 2] | 0) & 1 | 0) | 0 | 2 | 0;
    $6_1 = $3_1 + $2_1 | 0;
    HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 1 | 0;
    $133($3_1 | 0, $2_1 | 0);
    }
    label$9 : {
    $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if (!($2_1 & 3 | 0)) {
      break label$9
    }
    $3_1 = $2_1 & -8 | 0;
    if ($3_1 >>> 0 <= ($1_1 + 16 | 0) >>> 0) {
      break label$9
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | ($2_1 & 1 | 0) | 0 | 2 | 0;
    $2_1 = $0_1 + $1_1 | 0;
    $1_1 = $3_1 - $1_1 | 0;
    HEAP32[($2_1 + 4 | 0) >> 2] = $1_1 | 3 | 0;
    $3_1 = $0_1 + $3_1 | 0;
    HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 1 | 0;
    $133($2_1 | 0, $1_1 | 0);
    }
    return $0_1 + 8 | 0 | 0;
  }
  
  function $132($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0, $4_1 = 0;
    label$1 : {
    label$2 : {
      label$3 : {
      if (($1_1 | 0) != (8 | 0)) {
        break label$3
      }
      $1_1 = $126($2_1 | 0) | 0;
      break label$2;
      }
      $3_1 = 28;
      if ($1_1 >>> 0 < 4 >>> 0) {
      break label$1
      }
      if ($1_1 & 3 | 0) {
      break label$1
      }
      $4_1 = $1_1 >>> 2 | 0;
      if ($4_1 & ($4_1 + -1 | 0) | 0) {
      break label$1
      }
      label$4 : {
      if ($2_1 >>> 0 <= (-64 - $1_1 | 0) >>> 0) {
        break label$4
      }
      return 48 | 0;
      }
      $1_1 = $131(($1_1 >>> 0 > 16 >>> 0 ? $1_1 : 16) | 0, $2_1 | 0) | 0;
    }
    label$5 : {
      if ($1_1) {
      break label$5
      }
      return 48 | 0;
    }
    HEAP32[$0_1 >> 2] = $1_1;
    $3_1 = 0;
    }
    return $3_1 | 0;
  }
  
  function $133($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $3_1 = 0, $4_1 = 0, $5_1 = 0, $2_1 = 0, $6_1 = 0, $7_1 = 0;
    $2_1 = $0_1 + $1_1 | 0;
    label$1 : {
    label$2 : {
      $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
      if ($3_1 & 1 | 0) {
      break label$2
      }
      if (!($3_1 & 2 | 0)) {
      break label$1
      }
      $4_1 = HEAP32[$0_1 >> 2] | 0;
      $1_1 = $4_1 + $1_1 | 0;
      label$3 : {
      label$4 : {
        label$5 : {
        label$6 : {
          $0_1 = $0_1 - $4_1 | 0;
          if (($0_1 | 0) == (HEAP32[(0 + 85088 | 0) >> 2] | 0 | 0)) {
          break label$6
          }
          $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
          label$7 : {
          if ($4_1 >>> 0 > 255 >>> 0) {
            break label$7
          }
          $5_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
          if (($3_1 | 0) != ($5_1 | 0)) {
            break label$5
          }
          HEAP32[(0 + 85068 | 0) >> 2] = (HEAP32[(0 + 85068 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 >>> 3 | 0 | 0) | 0) | 0;
          break label$2;
          }
          $6_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
          label$8 : {
          if (($3_1 | 0) == ($0_1 | 0)) {
            break label$8
          }
          $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
          HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
          HEAP32[($3_1 + 8 | 0) >> 2] = $4_1;
          break label$3;
          }
          label$9 : {
          label$10 : {
            $4_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
            if (!$4_1) {
            break label$10
            }
            $5_1 = $0_1 + 20 | 0;
            break label$9;
          }
          $4_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
          if (!$4_1) {
            break label$4
          }
          $5_1 = $0_1 + 16 | 0;
          }
          label$11 : while (1) {
          $7_1 = $5_1;
          $3_1 = $4_1;
          $5_1 = $3_1 + 20 | 0;
          $4_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
          if ($4_1) {
            continue label$11
          }
          $5_1 = $3_1 + 16 | 0;
          $4_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
          if ($4_1) {
            continue label$11
          }
          break label$11;
          };
          HEAP32[$7_1 >> 2] = 0;
          break label$3;
        }
        $3_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
        if (($3_1 & 3 | 0 | 0) != (3 | 0)) {
          break label$2
        }
        HEAP32[(0 + 85076 | 0) >> 2] = $1_1;
        HEAP32[($2_1 + 4 | 0) >> 2] = $3_1 & -2 | 0;
        HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
        HEAP32[$2_1 >> 2] = $1_1;
        return;
        }
        HEAP32[($5_1 + 12 | 0) >> 2] = $3_1;
        HEAP32[($3_1 + 8 | 0) >> 2] = $5_1;
        break label$2;
      }
      $3_1 = 0;
      }
      if (!$6_1) {
      break label$2
      }
      label$12 : {
      label$13 : {
        $5_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
        $4_1 = ($5_1 << 2 | 0) + 85372 | 0;
        if (($0_1 | 0) != (HEAP32[$4_1 >> 2] | 0 | 0)) {
        break label$13
        }
        HEAP32[$4_1 >> 2] = $3_1;
        if ($3_1) {
        break label$12
        }
        HEAP32[(0 + 85072 | 0) >> 2] = (HEAP32[(0 + 85072 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
        break label$2;
      }
      label$14 : {
        label$15 : {
        if ((HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0) != ($0_1 | 0)) {
          break label$15
        }
        HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
        break label$14;
        }
        HEAP32[($6_1 + 20 | 0) >> 2] = $3_1;
      }
      if (!$3_1) {
        break label$2
      }
      }
      HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
      label$16 : {
      $4_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
      if (!$4_1) {
        break label$16
      }
      HEAP32[($3_1 + 16 | 0) >> 2] = $4_1;
      HEAP32[($4_1 + 24 | 0) >> 2] = $3_1;
      }
      $4_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
      if (!$4_1) {
      break label$2
      }
      HEAP32[($3_1 + 20 | 0) >> 2] = $4_1;
      HEAP32[($4_1 + 24 | 0) >> 2] = $3_1;
    }
    label$17 : {
      label$18 : {
      label$19 : {
        label$20 : {
        label$21 : {
          $4_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
          if ($4_1 & 2 | 0) {
          break label$21
          }
          label$22 : {
          if (($2_1 | 0) != (HEAP32[(0 + 85092 | 0) >> 2] | 0 | 0)) {
            break label$22
          }
          HEAP32[(0 + 85092 | 0) >> 2] = $0_1;
          $1_1 = (HEAP32[(0 + 85080 | 0) >> 2] | 0) + $1_1 | 0;
          HEAP32[(0 + 85080 | 0) >> 2] = $1_1;
          HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
          if (($0_1 | 0) != (HEAP32[(0 + 85088 | 0) >> 2] | 0 | 0)) {
            break label$1
          }
          HEAP32[(0 + 85076 | 0) >> 2] = 0;
          HEAP32[(0 + 85088 | 0) >> 2] = 0;
          return;
          }
          label$23 : {
          if (($2_1 | 0) != (HEAP32[(0 + 85088 | 0) >> 2] | 0 | 0)) {
            break label$23
          }
          HEAP32[(0 + 85088 | 0) >> 2] = $0_1;
          $1_1 = (HEAP32[(0 + 85076 | 0) >> 2] | 0) + $1_1 | 0;
          HEAP32[(0 + 85076 | 0) >> 2] = $1_1;
          HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
          HEAP32[($0_1 + $1_1 | 0) >> 2] = $1_1;
          return;
          }
          $1_1 = ($4_1 & -8 | 0) + $1_1 | 0;
          $3_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
          label$24 : {
          if ($4_1 >>> 0 > 255 >>> 0) {
            break label$24
          }
          label$25 : {
            $5_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
            if (($3_1 | 0) != ($5_1 | 0)) {
            break label$25
            }
            HEAP32[(0 + 85068 | 0) >> 2] = (HEAP32[(0 + 85068 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 >>> 3 | 0 | 0) | 0) | 0;
            break label$18;
          }
          HEAP32[($5_1 + 12 | 0) >> 2] = $3_1;
          HEAP32[($3_1 + 8 | 0) >> 2] = $5_1;
          break label$18;
          }
          $6_1 = HEAP32[($2_1 + 24 | 0) >> 2] | 0;
          label$26 : {
          if (($3_1 | 0) == ($2_1 | 0)) {
            break label$26
          }
          $4_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
          HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
          HEAP32[($3_1 + 8 | 0) >> 2] = $4_1;
          break label$19;
          }
          label$27 : {
          label$28 : {
            $4_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
            if (!$4_1) {
            break label$28
            }
            $5_1 = $2_1 + 20 | 0;
            break label$27;
          }
          $4_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
          if (!$4_1) {
            break label$20
          }
          $5_1 = $2_1 + 16 | 0;
          }
          label$29 : while (1) {
          $7_1 = $5_1;
          $3_1 = $4_1;
          $5_1 = $3_1 + 20 | 0;
          $4_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
          if ($4_1) {
            continue label$29
          }
          $5_1 = $3_1 + 16 | 0;
          $4_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
          if ($4_1) {
            continue label$29
          }
          break label$29;
          };
          HEAP32[$7_1 >> 2] = 0;
          break label$19;
        }
        HEAP32[($2_1 + 4 | 0) >> 2] = $4_1 & -2 | 0;
        HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
        HEAP32[($0_1 + $1_1 | 0) >> 2] = $1_1;
        break label$17;
        }
        $3_1 = 0;
      }
      if (!$6_1) {
        break label$18
      }
      label$30 : {
        label$31 : {
        $5_1 = HEAP32[($2_1 + 28 | 0) >> 2] | 0;
        $4_1 = ($5_1 << 2 | 0) + 85372 | 0;
        if (($2_1 | 0) != (HEAP32[$4_1 >> 2] | 0 | 0)) {
          break label$31
        }
        HEAP32[$4_1 >> 2] = $3_1;
        if ($3_1) {
          break label$30
        }
        HEAP32[(0 + 85072 | 0) >> 2] = (HEAP32[(0 + 85072 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
        break label$18;
        }
        label$32 : {
        label$33 : {
          if ((HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
          break label$33
          }
          HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
          break label$32;
        }
        HEAP32[($6_1 + 20 | 0) >> 2] = $3_1;
        }
        if (!$3_1) {
        break label$18
        }
      }
      HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
      label$34 : {
        $4_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
        if (!$4_1) {
        break label$34
        }
        HEAP32[($3_1 + 16 | 0) >> 2] = $4_1;
        HEAP32[($4_1 + 24 | 0) >> 2] = $3_1;
      }
      $4_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
      if (!$4_1) {
        break label$18
      }
      HEAP32[($3_1 + 20 | 0) >> 2] = $4_1;
      HEAP32[($4_1 + 24 | 0) >> 2] = $3_1;
      }
      HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
      HEAP32[($0_1 + $1_1 | 0) >> 2] = $1_1;
      if (($0_1 | 0) != (HEAP32[(0 + 85088 | 0) >> 2] | 0 | 0)) {
      break label$17
      }
      HEAP32[(0 + 85076 | 0) >> 2] = $1_1;
      return;
    }
    label$35 : {
      if ($1_1 >>> 0 > 255 >>> 0) {
      break label$35
      }
      $3_1 = ($1_1 & -8 | 0) + 85108 | 0;
      label$36 : {
      label$37 : {
        $4_1 = HEAP32[(0 + 85068 | 0) >> 2] | 0;
        $1_1 = 1 << ($1_1 >>> 3 | 0) | 0;
        if ($4_1 & $1_1 | 0) {
        break label$37
        }
        HEAP32[(0 + 85068 | 0) >> 2] = $4_1 | $1_1 | 0;
        $1_1 = $3_1;
        break label$36;
      }
      $1_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
      }
      HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
      HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
      HEAP32[($0_1 + 12 | 0) >> 2] = $3_1;
      HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
      return;
    }
    $3_1 = 31;
    label$38 : {
      if ($1_1 >>> 0 > 16777215 >>> 0) {
      break label$38
      }
      $3_1 = Math_clz32($1_1 >>> 8 | 0);
      $3_1 = ((($1_1 >>> (38 - $3_1 | 0) | 0) & 1 | 0) - ($3_1 << 1 | 0) | 0) + 62 | 0;
    }
    HEAP32[($0_1 + 28 | 0) >> 2] = $3_1;
    HEAP32[($0_1 + 16 | 0) >> 2] = 0;
    HEAP32[($0_1 + 20 | 0) >> 2] = 0;
    $4_1 = ($3_1 << 2 | 0) + 85372 | 0;
    label$39 : {
      label$40 : {
      label$41 : {
        $5_1 = HEAP32[(0 + 85072 | 0) >> 2] | 0;
        $2_1 = 1 << $3_1 | 0;
        if ($5_1 & $2_1 | 0) {
        break label$41
        }
        HEAP32[(0 + 85072 | 0) >> 2] = $5_1 | $2_1 | 0;
        HEAP32[$4_1 >> 2] = $0_1;
        HEAP32[($0_1 + 24 | 0) >> 2] = $4_1;
        break label$40;
      }
      $3_1 = $1_1 << (($3_1 | 0) == (31 | 0) ? 0 : 25 - ($3_1 >>> 1 | 0) | 0) | 0;
      $5_1 = HEAP32[$4_1 >> 2] | 0;
      label$42 : while (1) {
        $4_1 = $5_1;
        if (((HEAP32[($4_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($1_1 | 0)) {
        break label$39
        }
        $5_1 = $3_1 >>> 29 | 0;
        $3_1 = $3_1 << 1 | 0;
        $2_1 = $4_1 + ($5_1 & 4 | 0) | 0;
        $5_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
        if ($5_1) {
        continue label$42
        }
        break label$42;
      };
      HEAP32[($2_1 + 16 | 0) >> 2] = $0_1;
      HEAP32[($0_1 + 24 | 0) >> 2] = $4_1;
      }
      HEAP32[($0_1 + 12 | 0) >> 2] = $0_1;
      HEAP32[($0_1 + 8 | 0) >> 2] = $0_1;
      return;
    }
    $1_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
    HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
    HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
    HEAP32[($0_1 + 24 | 0) >> 2] = 0;
    HEAP32[($0_1 + 12 | 0) >> 2] = $4_1;
    HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
    }
  }
  
  function $134() {
    return ($135() | 0 | 0) > (0 | 0) | 0;
  }
  
  function $135() {
    return $1797() | 0 | 0;
  }
  
  function $136($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $3_1 = 0, $4_1 = 0, $2_1 = 0;
    label$1 : {
    label$2 : {
      label$3 : {
      label$4 : {
        $2_1 = $1_1 & 255 | 0;
        if (!$2_1) {
        break label$4
        }
        label$5 : {
        if (!($0_1 & 3 | 0)) {
          break label$5
        }
        $3_1 = $1_1 & 255 | 0;
        label$6 : while (1) {
          $4_1 = HEAPU8[$0_1 >> 0] | 0;
          if (!$4_1) {
          break label$1
          }
          if (($4_1 | 0) == ($3_1 | 0)) {
          break label$1
          }
          $0_1 = $0_1 + 1 | 0;
          if ($0_1 & 3 | 0) {
          continue label$6
          }
          break label$6;
        };
        }
        $3_1 = HEAP32[$0_1 >> 2] | 0;
        if (((16843008 - $3_1 | 0 | $3_1 | 0) & -2139062144 | 0 | 0) != (-2139062144 | 0)) {
        break label$3
        }
        $2_1 = Math_imul($2_1, 16843009);
        label$7 : while (1) {
        $4_1 = $3_1 ^ $2_1 | 0;
        if (((16843008 - $4_1 | 0 | $4_1 | 0) & -2139062144 | 0 | 0) != (-2139062144 | 0)) {
          break label$3
        }
        $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        $4_1 = $0_1 + 4 | 0;
        $0_1 = $4_1;
        if ((($3_1 | (16843008 - $3_1 | 0) | 0) & -2139062144 | 0 | 0) == (-2139062144 | 0)) {
          continue label$7
        }
        break label$2;
        };
      }
      return $0_1 + ($122($0_1 | 0) | 0) | 0 | 0;
      }
      $4_1 = $0_1;
    }
    label$8 : while (1) {
      $0_1 = $4_1;
      $3_1 = HEAPU8[$0_1 >> 0] | 0;
      if (!$3_1) {
      break label$1
      }
      $4_1 = $0_1 + 1 | 0;
      if (($3_1 | 0) != ($1_1 & 255 | 0 | 0)) {
      continue label$8
      }
      break label$8;
    };
    }
    return $0_1 | 0;
  }
  
  function $137($0_1) {
    $0_1 = $0_1 | 0;
    label$1 : {
    if ($0_1) {
      break label$1
    }
    return 0 | 0;
    }
    HEAP32[($124() | 0) >> 2] = $0_1;
    return -1 | 0;
  }
  
  function $138($0_1, $1_1, $1$hi, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1$hi = $1$hi | 0;
    $2_1 = $2_1 | 0;
    var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $3_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    i64toi32_i32$0 = $1$hi;
    $2_1 = $137($1857($0_1 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 & 255 | 0 | 0, $3_1 + 8 | 0 | 0) | 0 | 0) | 0;
    i64toi32_i32$2 = $3_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
    $1_1 = i64toi32_i32$0;
    $1$hi = i64toi32_i32$1;
    global$0 = i64toi32_i32$2 + 16 | 0;
    i64toi32_i32$1 = -1;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $2_1 ? -1 : $1_1;
    i64toi32_i32$2 = $2_1 ? i64toi32_i32$1 : i64toi32_i32$0;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$2;
    return i64toi32_i32$3 | 0;
  }
  
  function $139($0_1, $1_1, $1$hi, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1$hi = $1$hi | 0;
    $2_1 = $2_1 | 0;
    var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $138(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
    return i64toi32_i32$0 | 0;
  }
  
  function $140($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $4_1 = 0, $3_1 = 0, $5_1 = 0, $8_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0;
    $3_1 = global$0 - 32 | 0;
    global$0 = $3_1;
    $4_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    HEAP32[($3_1 + 16 | 0) >> 2] = $4_1;
    $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
    HEAP32[($3_1 + 28 | 0) >> 2] = $2_1;
    HEAP32[($3_1 + 24 | 0) >> 2] = $1_1;
    $1_1 = $5_1 - $4_1 | 0;
    HEAP32[($3_1 + 20 | 0) >> 2] = $1_1;
    $6_1 = $1_1 + $2_1 | 0;
    $4_1 = $3_1 + 16 | 0;
    $7_1 = 2;
    label$1 : {
    label$2 : {
      label$3 : {
      label$4 : {
        label$5 : {
        if (!($137(fimport$17(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0, $3_1 + 16 | 0 | 0, 2 | 0, $3_1 + 12 | 0 | 0) | 0 | 0) | 0)) {
          break label$5
        }
        $5_1 = $4_1;
        break label$4;
        }
        label$6 : while (1) {
        $1_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
        if (($6_1 | 0) == ($1_1 | 0)) {
          break label$3
        }
        label$7 : {
          if (($1_1 | 0) > (-1 | 0)) {
          break label$7
          }
          $5_1 = $4_1;
          break label$2;
        }
        $8_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
        $9_1 = $1_1 >>> 0 > $8_1 >>> 0;
        $5_1 = $4_1 + ($9_1 << 3 | 0) | 0;
        $8_1 = $1_1 - ($9_1 ? $8_1 : 0) | 0;
        HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + $8_1 | 0;
        $4_1 = $4_1 + ($9_1 ? 12 : 4) | 0;
        HEAP32[$4_1 >> 2] = (HEAP32[$4_1 >> 2] | 0) - $8_1 | 0;
        $6_1 = $6_1 - $1_1 | 0;
        $4_1 = $5_1;
        $7_1 = $7_1 - $9_1 | 0;
        if (!($137(fimport$17(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0, $4_1 | 0, $7_1 | 0, $3_1 + 12 | 0 | 0) | 0 | 0) | 0)) {
          continue label$6
        }
        break label$6;
        };
      }
      if (($6_1 | 0) != (-1 | 0)) {
        break label$2
      }
      }
      $1_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
      HEAP32[($0_1 + 28 | 0) >> 2] = $1_1;
      HEAP32[($0_1 + 20 | 0) >> 2] = $1_1;
      HEAP32[($0_1 + 16 | 0) >> 2] = $1_1 + (HEAP32[($0_1 + 48 | 0) >> 2] | 0) | 0;
      $1_1 = $2_1;
      break label$1;
    }
    $1_1 = 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = 0;
    HEAP32[($0_1 + 16 | 0) >> 2] = 0;
    HEAP32[($0_1 + 20 | 0) >> 2] = 0;
    HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] | 0 | 32 | 0;
    if (($7_1 | 0) == (2 | 0)) {
      break label$1
    }
    $1_1 = $2_1 - (HEAP32[($5_1 + 4 | 0) >> 2] | 0) | 0;
    }
    global$0 = $3_1 + 32 | 0;
    return $1_1 | 0;
  }
  
  function $141($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $5_1 = 0, $3_1 = 0, $4_1 = 0, $6_1 = 0;
    $3_1 = global$0 - 32 | 0;
    global$0 = $3_1;
    HEAP32[($3_1 + 16 | 0) >> 2] = $1_1;
    $4_1 = 0;
    $5_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
    HEAP32[($3_1 + 20 | 0) >> 2] = $2_1 - (($5_1 | 0) != (0 | 0)) | 0;
    $6_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
    HEAP32[($3_1 + 28 | 0) >> 2] = $5_1;
    HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
    $5_1 = 32;
    label$1 : {
    label$2 : {
      label$3 : {
      if ($137(fimport$18(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0, $3_1 + 16 | 0 | 0, 2 | 0, $3_1 + 12 | 0 | 0) | 0 | 0) | 0) {
        break label$3
      }
      $5_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
      if (($5_1 | 0) > (0 | 0)) {
        break label$2
      }
      $5_1 = $5_1 ? 32 : 16;
      }
      HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] | 0 | $5_1 | 0;
      break label$1;
    }
    $4_1 = $5_1;
    $6_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
    if ($5_1 >>> 0 <= $6_1 >>> 0) {
      break label$1
    }
    $4_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = $4_1;
    HEAP32[($0_1 + 8 | 0) >> 2] = $4_1 + ($5_1 - $6_1 | 0) | 0;
    label$4 : {
      if (!(HEAP32[($0_1 + 48 | 0) >> 2] | 0)) {
      break label$4
      }
      HEAP32[($0_1 + 4 | 0) >> 2] = $4_1 + 1 | 0;
      HEAP8[(($1_1 + $2_1 | 0) + -1 | 0) >> 0] = HEAPU8[$4_1 >> 0] | 0;
    }
    $4_1 = $2_1;
    }
    global$0 = $3_1 + 32 | 0;
    return $4_1 | 0;
  }
  
  function $142($0_1) {
    $0_1 = $0_1 | 0;
    return $0_1 | 0;
  }
  
  function $143($0_1) {
    $0_1 = $0_1 | 0;
    return $137(fimport$19($142(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0) | 0 | 0;
  }
  
  function $144($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return 0 | 0;
  }
  
  function $145($0_1) {
    $0_1 = $0_1 | 0;
    return 0 | 0;
  }
  
  function $146($0_1) {
    $0_1 = $0_1 | 0;
    return 0 | 0;
  }
  
  function $147($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return 0 | 0;
  }
  
  function $148($0_1) {
    $0_1 = $0_1 | 0;
    return 0 | 0;
  }
  
  function $149($0_1) {
    $0_1 = $0_1 | 0;
  }
  
  function $150($0_1) {
    $0_1 = $0_1 | 0;
  }
  
  function $151() {
    $149(85564 | 0);
    return 85568 | 0;
  }
  
  function $152() {
    $150(85564 | 0);
  }
  
  function $153($0_1) {
    $0_1 = $0_1 | 0;
    return 1 | 0;
  }
  
  function $154($0_1) {
    $0_1 = $0_1 | 0;
  }
  
  function $155($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0, i64toi32_i32$1 = 0, $2_1 = 0, i64toi32_i32$0 = 0, $3_1 = 0;
    label$1 : {
    if ($0_1) {
      break label$1
    }
    $1_1 = 0;
    label$2 : {
      if (!(HEAP32[(0 + 84656 | 0) >> 2] | 0)) {
      break label$2
      }
      $1_1 = $155(HEAP32[(0 + 84656 | 0) >> 2] | 0 | 0) | 0;
    }
    label$3 : {
      if (!(HEAP32[(0 + 84808 | 0) >> 2] | 0)) {
      break label$3
      }
      $1_1 = $155(HEAP32[(0 + 84808 | 0) >> 2] | 0 | 0) | 0 | $1_1 | 0;
    }
    label$4 : {
      $0_1 = HEAP32[($151() | 0) >> 2] | 0;
      if (!$0_1) {
      break label$4
      }
      label$5 : while (1) {
      label$6 : {
        label$7 : {
        if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) >= (0 | 0)) {
          break label$7
        }
        $2_1 = 1;
        break label$6;
        }
        $2_1 = !($153($0_1 | 0) | 0);
      }
      label$8 : {
        if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) == (HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0)) {
        break label$8
        }
        $1_1 = $155($0_1 | 0) | 0 | $1_1 | 0;
      }
      label$9 : {
        if ($2_1) {
        break label$9
        }
        $154($0_1 | 0);
      }
      $0_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
      if ($0_1) {
        continue label$5
      }
      break label$5;
      };
    }
    $152();
    return $1_1 | 0;
    }
    label$10 : {
    label$11 : {
      if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) >= (0 | 0)) {
      break label$11
      }
      $2_1 = 1;
      break label$10;
    }
    $2_1 = !($153($0_1 | 0) | 0);
    }
    label$12 : {
    label$13 : {
      label$14 : {
      if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) == (HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0)) {
        break label$14
      }
      FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0]($0_1, 0, 0) | 0;
      if (HEAP32[($0_1 + 20 | 0) >> 2] | 0) {
        break label$14
      }
      $1_1 = -1;
      if (!$2_1) {
        break label$13
      }
      break label$12;
      }
      label$15 : {
      $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
      $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
      if (($1_1 | 0) == ($3_1 | 0)) {
        break label$15
      }
      i64toi32_i32$1 = $1_1 - $3_1 | 0;
      i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
      i64toi32_i32$0 = FUNCTION_TABLE[HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0]($0_1, i64toi32_i32$1, i64toi32_i32$0, 1) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      }
      $1_1 = 0;
      HEAP32[($0_1 + 28 | 0) >> 2] = 0;
      i64toi32_i32$0 = $0_1;
      i64toi32_i32$1 = 0;
      HEAP32[($0_1 + 16 | 0) >> 2] = 0;
      HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$0 = $0_1;
      i64toi32_i32$1 = 0;
      HEAP32[($0_1 + 4 | 0) >> 2] = 0;
      HEAP32[($0_1 + 8 | 0) >> 2] = i64toi32_i32$1;
      if ($2_1) {
      break label$12
      }
    }
    $154($0_1 | 0);
    }
    return $1_1 | 0;
  }
  
  function $156($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0, $4_1 = 0;
    label$1 : {
    if (($0_1 | 0) == ($1_1 | 0)) {
      break label$1
    }
    label$2 : {
      $3_1 = $2_1 + $0_1 | 0;
      if (($1_1 - $3_1 | 0) >>> 0 > (0 - ($2_1 << 1 | 0) | 0) >>> 0) {
      break label$2
      }
      return $120($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
    }
    $4_1 = ($1_1 ^ $0_1 | 0) & 3 | 0;
    label$3 : {
      label$4 : {
      label$5 : {
        if ($0_1 >>> 0 >= $1_1 >>> 0) {
        break label$5
        }
        label$6 : {
        if (!$4_1) {
          break label$6
        }
        $3_1 = $0_1;
        break label$3;
        }
        label$7 : {
        if ($0_1 & 3 | 0) {
          break label$7
        }
        $3_1 = $0_1;
        break label$4;
        }
        $3_1 = $0_1;
        label$8 : while (1) {
        if (!$2_1) {
          break label$1
        }
        HEAP8[$3_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
        $1_1 = $1_1 + 1 | 0;
        $2_1 = $2_1 + -1 | 0;
        $3_1 = $3_1 + 1 | 0;
        if (!($3_1 & 3 | 0)) {
          break label$4
        }
        continue label$8;
        };
      }
      label$9 : {
        if ($4_1) {
        break label$9
        }
        label$10 : {
        if (!($3_1 & 3 | 0)) {
          break label$10
        }
        label$11 : while (1) {
          if (!$2_1) {
          break label$1
          }
          $2_1 = $2_1 + -1 | 0;
          $3_1 = $0_1 + $2_1 | 0;
          HEAP8[$3_1 >> 0] = HEAPU8[($1_1 + $2_1 | 0) >> 0] | 0;
          if ($3_1 & 3 | 0) {
          continue label$11
          }
          break label$11;
        };
        }
        if ($2_1 >>> 0 <= 3 >>> 0) {
        break label$9
        }
        label$12 : while (1) {
        $2_1 = $2_1 + -4 | 0;
        HEAP32[($0_1 + $2_1 | 0) >> 2] = HEAP32[($1_1 + $2_1 | 0) >> 2] | 0;
        if ($2_1 >>> 0 > 3 >>> 0) {
          continue label$12
        }
        break label$12;
        };
      }
      if (!$2_1) {
        break label$1
      }
      label$13 : while (1) {
        $2_1 = $2_1 + -1 | 0;
        HEAP8[($0_1 + $2_1 | 0) >> 0] = HEAPU8[($1_1 + $2_1 | 0) >> 0] | 0;
        if ($2_1) {
        continue label$13
        }
        break label$1;
      };
      }
      if ($2_1 >>> 0 <= 3 >>> 0) {
      break label$3
      }
      label$14 : while (1) {
      HEAP32[$3_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
      $1_1 = $1_1 + 4 | 0;
      $3_1 = $3_1 + 4 | 0;
      $2_1 = $2_1 + -4 | 0;
      if ($2_1 >>> 0 > 3 >>> 0) {
        continue label$14
      }
      break label$14;
      };
    }
    if (!$2_1) {
      break label$1
    }
    label$15 : while (1) {
      HEAP8[$3_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
      $3_1 = $3_1 + 1 | 0;
      $1_1 = $1_1 + 1 | 0;
      $2_1 = $2_1 + -1 | 0;
      if ($2_1) {
      continue label$15
      }
      break label$15;
    };
    }
    return $0_1 | 0;
  }
  
  function $157($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0, $2_1 = 0;
    $1_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
    HEAP32[($0_1 + 72 | 0) >> 2] = $1_1 + -1 | 0 | $1_1 | 0;
    label$1 : {
    if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) == (HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0)) {
      break label$1
    }
    FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0]($0_1, 0, 0) | 0;
    }
    HEAP32[($0_1 + 28 | 0) >> 2] = 0;
    HEAP32[($0_1 + 16 | 0) >> 2] = 0;
    HEAP32[($0_1 + 20 | 0) >> 2] = 0;
    label$2 : {
    $1_1 = HEAP32[$0_1 >> 2] | 0;
    if (!($1_1 & 4 | 0)) {
      break label$2
    }
    HEAP32[$0_1 >> 2] = $1_1 | 32 | 0;
    return -1 | 0;
    }
    $2_1 = (HEAP32[($0_1 + 44 | 0) >> 2] | 0) + (HEAP32[($0_1 + 48 | 0) >> 2] | 0) | 0;
    HEAP32[($0_1 + 8 | 0) >> 2] = $2_1;
    HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
    return ($1_1 << 27 | 0) >> 31 | 0 | 0;
  }
  
  function $158() {
    fimport$20();
    wasm2js_trap();
  }
  
  function $159($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0;
    $1_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
    HEAP32[($0_1 + 72 | 0) >> 2] = $1_1 + -1 | 0 | $1_1 | 0;
    label$1 : {
    $1_1 = HEAP32[$0_1 >> 2] | 0;
    if (!($1_1 & 8 | 0)) {
      break label$1
    }
    HEAP32[$0_1 >> 2] = $1_1 | 32 | 0;
    return -1 | 0;
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = 0;
    HEAP32[($0_1 + 8 | 0) >> 2] = 0;
    $1_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $1_1;
    HEAP32[($0_1 + 20 | 0) >> 2] = $1_1;
    HEAP32[($0_1 + 16 | 0) >> 2] = $1_1 + (HEAP32[($0_1 + 48 | 0) >> 2] | 0) | 0;
    return 0 | 0;
  }
  
  function $160($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0, $4_1 = 0, $5_1 = 0;
    label$1 : {
    label$2 : {
      $3_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
      if ($3_1) {
      break label$2
      }
      $4_1 = 0;
      if ($159($2_1 | 0) | 0) {
      break label$1
      }
      $3_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
    }
    label$3 : {
      $4_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
      if ($1_1 >>> 0 <= ($3_1 - $4_1 | 0) >>> 0) {
      break label$3
      }
      return FUNCTION_TABLE[HEAP32[($2_1 + 36 | 0) >> 2] | 0 | 0]($2_1, $0_1, $1_1) | 0 | 0;
    }
    label$4 : {
      label$5 : {
      if ((HEAP32[($2_1 + 80 | 0) >> 2] | 0 | 0) < (0 | 0)) {
        break label$5
      }
      if (!$1_1) {
        break label$5
      }
      $3_1 = $1_1;
      label$6 : {
        label$7 : while (1) {
        $5_1 = $0_1 + $3_1 | 0;
        if ((HEAPU8[($5_1 + -1 | 0) >> 0] | 0 | 0) == (10 | 0)) {
          break label$6
        }
        $3_1 = $3_1 + -1 | 0;
        if (!$3_1) {
          break label$5
        }
        continue label$7;
        };
      }
      $4_1 = FUNCTION_TABLE[HEAP32[($2_1 + 36 | 0) >> 2] | 0 | 0]($2_1, $0_1, $3_1) | 0;
      if ($4_1 >>> 0 < $3_1 >>> 0) {
        break label$1
      }
      $1_1 = $1_1 - $3_1 | 0;
      $4_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
      break label$4;
      }
      $5_1 = $0_1;
      $3_1 = 0;
    }
    $120($4_1 | 0, $5_1 | 0, $1_1 | 0) | 0;
    HEAP32[($2_1 + 20 | 0) >> 2] = (HEAP32[($2_1 + 20 | 0) >> 2] | 0) + $1_1 | 0;
    $4_1 = $3_1 + $1_1 | 0;
    }
    return $4_1 | 0;
  }
  
  function $161($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    var $4_1 = 0, $5_1 = 0;
    $4_1 = Math_imul($2_1, $1_1);
    label$1 : {
    label$2 : {
      if ((HEAP32[($3_1 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
      break label$2
      }
      $0_1 = $160($0_1 | 0, $4_1 | 0, $3_1 | 0) | 0;
      break label$1;
    }
    $5_1 = $153($3_1 | 0) | 0;
    $0_1 = $160($0_1 | 0, $4_1 | 0, $3_1 | 0) | 0;
    if (!$5_1) {
      break label$1
    }
    $154($3_1 | 0);
    }
    label$3 : {
    if (($0_1 | 0) != ($4_1 | 0)) {
      break label$3
    }
    return ($1_1 ? $2_1 : 0) | 0;
    }
    return ($0_1 >>> 0) / ($1_1 >>> 0) | 0 | 0;
  }
  
  function $162($0_1) {
    $0_1 = $0_1 | 0;
    return $443($0_1 | 0) | 0 | 0;
  }
  
  function $163($0_1) {
    $0_1 = $0_1 | 0;
    $162($0_1 | 0) | 0;
    $1747($0_1 | 0, 80 | 0);
  }
  
  function $164($0_1) {
    $0_1 = $0_1 | 0;
    HEAP32[$0_1 >> 2] = 68256;
    $668($0_1 + 4 | 0 | 0) | 0;
    return $0_1 | 0;
  }
  
  function $165($0_1) {
    $0_1 = $0_1 | 0;
    $164($0_1 | 0) | 0;
    $1747($0_1 | 0, 32 | 0);
  }
  
  function $166($0_1) {
    $0_1 = $0_1 | 0;
    var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
    HEAP32[$0_1 >> 2] = 68256;
    $1278($0_1 + 4 | 0 | 0) | 0;
    i64toi32_i32$1 = $0_1 + 24 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $0_1 + 16 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$0 = 0;
    HEAP32[($0_1 + 8 | 0) >> 2] = 0;
    HEAP32[($0_1 + 12 | 0) >> 2] = i64toi32_i32$0;
    return $0_1 | 0;
  }
  
  function $167($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
  }
  
  function $168($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    return $0_1 | 0;
  }
  
  function $169($0_1, $1_1, $2_1, $2$hi, $3_1, $4_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $2$hi = $2$hi | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $170($0_1 | 0, -1 | 0, -1 | 0) | 0;
  }
  
  function $170($0_1, $1_1, $1$hi) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1$hi = $1$hi | 0;
    var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$1 = $0_1;
    HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $1_1;
    HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return i64toi32_i32$1 | 0;
  }
  
  function $171($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $170($0_1 | 0, -1 | 0, -1 | 0) | 0;
  }
  
  function $172($0_1) {
    $0_1 = $0_1 | 0;
    return 0 | 0;
  }
  
  function $173($0_1) {
    $0_1 = $0_1 | 0;
    return 0 | 0;
  }
  
  function $174($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $5_1 = 0, $3_1 = 0, $4_1 = 0, $6_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    $4_1 = 0;
    label$1 : {
    label$2 : while (1) {
      if (($2_1 | 0) <= ($4_1 | 0)) {
      break label$1
      }
      label$3 : {
      label$4 : {
        $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
        $6_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
        if ($5_1 >>> 0 >= $6_1 >>> 0) {
        break label$4
        }
        HEAP32[($3_1 + 12 | 0) >> 2] = 2147483647;
        HEAP32[($3_1 + 8 | 0) >> 2] = $6_1 - $5_1 | 0;
        HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 - $4_1 | 0;
        $5_1 = $175($3_1 + 12 | 0 | 0, $175($3_1 + 8 | 0 | 0, $3_1 + 4 | 0 | 0) | 0 | 0) | 0;
        $5_1 = HEAP32[$5_1 >> 2] | 0;
        $176($1_1 | 0, HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0;
        $177($0_1 | 0, $5_1 | 0);
        break label$3;
      }
      $5_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1) | 0;
      if (($5_1 | 0) == (-1 | 0)) {
        break label$1
      }
      HEAP8[$1_1 >> 0] = $178($5_1 | 0) | 0;
      $5_1 = 1;
      }
      $1_1 = $1_1 + $5_1 | 0;
      $4_1 = $5_1 + $4_1 | 0;
      continue label$2;
    };
    }
    global$0 = $3_1 + 16 | 0;
    return $4_1 | 0;
  }
  
  function $175($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $179($0_1 | 0, $1_1 | 0) | 0 | 0;
  }
  
  function $176($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $180($1_1 | 0, $2_1 | 0, $0_1 | 0) | 0;
    return $0_1 | 0;
  }
  
  function $177($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    HEAP32[($0_1 + 12 | 0) >> 2] = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + $1_1 | 0;
  }
  
  function $178($0_1) {
    $0_1 = $0_1 | 0;
    return $0_1 << 24 >> 24 | 0;
  }
  
  function $179($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0, $3_1 = 0;
    $2_1 = global$0 - 16 | 0;
    global$0 = $2_1;
    $3_1 = $325($2_1 + 15 | 0 | 0, $1_1 | 0, $0_1 | 0) | 0;
    global$0 = $2_1 + 16 | 0;
    return ($3_1 ? $1_1 : $0_1) | 0;
  }
  
  function $180($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    return $326($0_1 | 0, $0_1 + $1_1 | 0 | 0, $2_1 | 0) | 0 | 0;
  }
  
  function $181($0_1) {
    $0_1 = $0_1 | 0;
    return $182() | 0 | 0;
  }
  
  function $182() {
    return -1 | 0;
  }
  
  function $183($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0;
    label$1 : {
    if ((FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0) != ($182() | 0 | 0)) {
      break label$1
    }
    return $182() | 0 | 0;
    }
    $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    HEAP32[($0_1 + 12 | 0) >> 2] = $1_1 + 1 | 0;
    return $184(HEAP8[$1_1 >> 0] | 0 | 0) | 0 | 0;
  }
  
  function $184($0_1) {
    $0_1 = $0_1 | 0;
    return $0_1 & 255 | 0 | 0;
  }
  
  function $185($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $182() | 0 | 0;
  }
  
  function $186($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $6_1 = 0, $4_1 = 0, $3_1 = 0, $7_1 = 0, $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    $4_1 = 0;
    $5_1 = $182() | 0;
    label$1 : {
    label$2 : while (1) {
      if (($2_1 | 0) <= ($4_1 | 0)) {
      break label$1
      }
      label$3 : {
      $6_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
      $7_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
      if ($6_1 >>> 0 < $7_1 >>> 0) {
        break label$3
      }
      if (((((wasm2js_i32$1 = $0_1, wasm2js_i32$2 = $184(HEAP8[$1_1 >> 0] | 0 | 0) | 0), wasm2js_i32$0 = HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0 | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) | 0) == ($5_1 | 0)) {
        break label$1
      }
      $4_1 = $4_1 + 1 | 0;
      $1_1 = $1_1 + 1 | 0;
      continue label$2;
      }
      HEAP32[($3_1 + 12 | 0) >> 2] = $7_1 - $6_1 | 0;
      HEAP32[($3_1 + 8 | 0) >> 2] = $2_1 - $4_1 | 0;
      $6_1 = $175($3_1 + 12 | 0 | 0, $3_1 + 8 | 0 | 0) | 0;
      $6_1 = HEAP32[$6_1 >> 2] | 0;
      $176(HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0, $1_1 | 0, $6_1 | 0) | 0;
      HEAP32[($0_1 + 24 | 0) >> 2] = $6_1 + (HEAP32[($0_1 + 24 | 0) >> 2] | 0) | 0;
      $4_1 = $6_1 + $4_1 | 0;
      $1_1 = $1_1 + $6_1 | 0;
      continue label$2;
    };
    }
    global$0 = $3_1 + 16 | 0;
    return $4_1 | 0;
  }
  
  function $187($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $182() | 0 | 0;
  }
  
  function $188($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $0_1 | 0;
  }
  
  function $189($0_1) {
    $0_1 = $0_1 | 0;
    $0_1 = $188($0_1 | 0, 68352 | 0) | 0;
    $162($0_1 + 8 | 0 | 0) | 0;
    return $0_1 | 0;
  }
  
  function $190($0_1) {
    $0_1 = $0_1 | 0;
    return $189($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0;
  }
  
  function $191($0_1) {
    $0_1 = $0_1 | 0;
    $1747($189($0_1 | 0) | 0 | 0, 88 | 0);
  }
  
  function $192($0_1) {
    $0_1 = $0_1 | 0;
    $191($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0);
  }
  
  function $193($0_1) {
    $0_1 = $0_1 | 0;
    return $203($0_1 | 0) | 0 | 0;
  }
  
  function $194($0_1) {
    $0_1 = $0_1 | 0;
    return HEAP32[($0_1 + 72 | 0) >> 2] | 0 | 0;
  }
  
  function $195($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0;
    $1_1 = global$0 - 16 | 0;
    global$0 = $1_1;
    label$1 : {
    if (!($204($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
      break label$1
    }
    $221($1_1 + 8 | 0 | 0, $0_1 | 0) | 0;
    label$2 : {
      if (!($205($1_1 + 8 | 0 | 0) | 0)) {
      break label$2
      }
      if (($206($204($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0) | 0 | 0) != (-1 | 0)) {
      break label$2
      }
      $202($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, 1 | 0);
    }
    $222($1_1 + 8 | 0 | 0) | 0;
    }
    global$0 = $1_1 + 16 | 0;
    return $0_1 | 0;
  }
  
  function $196($0_1) {
    $0_1 = $0_1 | 0;
    return HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0;
  }
  
  function $197($0_1) {
    $0_1 = $0_1 | 0;
    return $673($0_1 | 0, 89312 | 0) | 0 | 0;
  }
  
  function $198($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $207($0_1 | 0, $1_1 | 0) | 0 | 0;
  }
  
  function $199($0_1) {
    $0_1 = $0_1 | 0;
    return ($208(HEAP32[$0_1 >> 2] | 0 | 0) | 0) << 24 >> 24 | 0;
  }
  
  function $200($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0;
    $3_1 = 0;
    label$1 : {
    if (($2_1 | 0) < (0 | 0)) {
      break label$1
    }
    $3_1 = ((HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + ($2_1 << 2 | 0) | 0) >> 2] | 0) & $1_1 | 0 | 0) != (0 | 0);
    }
    return $3_1 | 0;
  }
  
  function $201($0_1) {
    $0_1 = $0_1 | 0;
    $209(HEAP32[$0_1 >> 2] | 0 | 0) | 0;
    return $0_1 | 0;
  }
  
  function $202($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $210($0_1 | 0, $1_1 | 0);
  }
  
  function $203($0_1) {
    $0_1 = $0_1 | 0;
    return !(HEAP32[($0_1 + 16 | 0) >> 2] | 0) | 0;
  }
  
  function $204($0_1) {
    $0_1 = $0_1 | 0;
    return $213($0_1 | 0) | 0 | 0;
  }
  
  function $205($0_1) {
    $0_1 = $0_1 | 0;
    return HEAPU8[$0_1 >> 0] | 0 | 0;
  }
  
  function $206($0_1) {
    $0_1 = $0_1 | 0;
    return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
  }
  
  function $207($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return (($431($0_1 | 0) | 0) ^ ($431($1_1 | 0) | 0) | 0) ^ 1 | 0 | 0;
  }
  
  function $208($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0;
    label$1 : {
    $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    if (($1_1 | 0) != (HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0)) {
      break label$1
    }
    return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
    }
    return $184(HEAP8[$1_1 >> 0] | 0 | 0) | 0 | 0;
  }
  
  function $209($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0;
    label$1 : {
    $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    if (($1_1 | 0) != (HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0)) {
      break label$1
    }
    return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
    }
    HEAP32[($0_1 + 12 | 0) >> 2] = $1_1 + 1 | 0;
    return $184(HEAP8[$1_1 >> 0] | 0 | 0) | 0 | 0;
  }
  
  function $210($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $441($0_1 | 0, HEAP32[($0_1 + 16 | 0) >> 2] | 0 | $1_1 | 0 | 0);
  }
  
  function $211($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return ($0_1 | 0) == ($1_1 | 0) | 0;
  }
  
  function $212($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
    label$1 : {
    $2_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (($2_1 | 0) != (HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0)) {
      break label$1
    }
    return (((wasm2js_i32$1 = $0_1, wasm2js_i32$2 = $184($1_1 | 0) | 0), wasm2js_i32$0 = HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0 | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) | 0;
    }
    HEAP32[($0_1 + 24 | 0) >> 2] = $2_1 + 1 | 0;
    HEAP8[$2_1 >> 0] = $1_1;
    return $184($1_1 | 0) | 0 | 0;
  }
  
  function $213($0_1) {
    $0_1 = $0_1 | 0;
    return HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0;
  }
  
  function $214() {
    return $215() | 0 | 0;
  }
  
  function $215() {
    return 2147483647 | 0;
  }
  
  function $216($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $0_1 | 0;
  }
  
  function $217($0_1) {
    $0_1 = $0_1 | 0;
    $0_1 = $216($0_1 | 0, 68400 | 0) | 0;
    $162($0_1 + 4 | 0 | 0) | 0;
    return $0_1 | 0;
  }
  
  function $218($0_1) {
    $0_1 = $0_1 | 0;
    return $217($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0;
  }
  
  function $219($0_1) {
    $0_1 = $0_1 | 0;
    $1747($217($0_1 | 0) | 0 | 0, 84 | 0);
  }
  
  function $220($0_1) {
    $0_1 = $0_1 | 0;
    $219($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0);
  }
  
  function $221($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
    HEAP8[$0_1 >> 0] = 0;
    label$1 : {
    if (!($193($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
      break label$1
    }
    label$2 : {
      if (!($194($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
      break label$2
      }
      $195($194($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0) | 0;
    }
    HEAP8[$0_1 >> 0] = 1;
    }
    return $0_1 | 0;
  }
  
  function $222($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0;
    label$1 : {
    $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if (!($204($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
      break label$1
    }
    $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if (!($193($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
      break label$1
    }
    $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if (!(($196($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0) & 8192 | 0)) {
      break label$1
    }
    if ($134() | 0) {
      break label$1
    }
    $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if (($206($204($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0) | 0 | 0) != (-1 | 0)) {
      break label$1
    }
    $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    $202($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, 1 | 0);
    }
    return $0_1 | 0;
  }
  
  function $223($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    HEAP32[$0_1 >> 2] = $204($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0;
    return $0_1 | 0;
  }
  
  function $224($0_1) {
    $0_1 = $0_1 | 0;
    return !(HEAP32[$0_1 >> 2] | 0) | 0;
  }
  
  function $225($0_1) {
    $0_1 = $0_1 | 0;
    return $0_1 | 0;
  }
  
  function $226($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0;
    label$1 : {
    $2_1 = HEAP32[$0_1 >> 2] | 0;
    if (!$2_1) {
      break label$1
    }
    if (!($211($212($2_1 | 0, $1_1 | 0) | 0 | 0, $182() | 0 | 0) | 0)) {
      break label$1
    }
    HEAP32[$0_1 >> 2] = 0;
    }
    return $0_1 | 0;
  }
  
  function $227($0_1) {
    $0_1 = $0_1 | 0;
    return $0_1 | 0;
  }
  
  function $228($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0, $3_1 = 0;
    $2_1 = global$0 - 16 | 0;
    global$0 = $2_1;
    $221($2_1 + 8 | 0 | 0, $0_1 | 0) | 0;
    label$1 : {
    if (!($205($2_1 + 8 | 0 | 0) | 0)) {
      break label$1
    }
    $3_1 = $223($2_1 + 4 | 0 | 0, $0_1 | 0) | 0;
    $226($225($3_1 | 0) | 0 | 0, $1_1 | 0) | 0;
    if (!($224($3_1 | 0) | 0)) {
      break label$1
    }
    $202($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, 1 | 0);
    }
    $222($2_1 + 8 | 0 | 0) | 0;
    global$0 = $2_1 + 16 | 0;
    return $0_1 | 0;
  }
  
  function $229($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1) | 0 | 0;
  }
  
  function $230($0_1) {
    $0_1 = $0_1 | 0;
    return $443($0_1 | 0) | 0 | 0;
  }
  
  function $231($0_1) {
    $0_1 = $0_1 | 0;
    $230($0_1 | 0) | 0;
    $1747($0_1 | 0, 80 | 0);
  }
  
  function $232($0_1) {
    $0_1 = $0_1 | 0;
    HEAP32[$0_1 >> 2] = 68416;
    $668($0_1 + 4 | 0 | 0) | 0;
    return $0_1 | 0;
  }
  
  function $233($0_1) {
    $0_1 = $0_1 | 0;
    $232($0_1 | 0) | 0;
    $1747($0_1 | 0, 32 | 0);
  }
  
  function $234($0_1) {
    $0_1 = $0_1 | 0;
    var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
    HEAP32[$0_1 >> 2] = 68416;
    $1278($0_1 + 4 | 0 | 0) | 0;
    i64toi32_i32$1 = $0_1 + 24 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $0_1 + 16 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$0 = 0;
    HEAP32[($0_1 + 8 | 0) >> 2] = 0;
    HEAP32[($0_1 + 12 | 0) >> 2] = i64toi32_i32$0;
    return $0_1 | 0;
  }
  
  function $235($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
  }
  
  function $236($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    return $0_1 | 0;
  }
  
  function $237($0_1, $1_1, $2_1, $2$hi, $3_1, $4_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $2$hi = $2$hi | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $170($0_1 | 0, -1 | 0, -1 | 0) | 0;
  }
  
  function $238($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $170($0_1 | 0, -1 | 0, -1 | 0) | 0;
  }
  
  function $239($0_1) {
    $0_1 = $0_1 | 0;
    return 0 | 0;
  }
  
  function $240($0_1) {
    $0_1 = $0_1 | 0;
    return 0 | 0;
  }
  
  function $241($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $5_1 = 0, $3_1 = 0, $4_1 = 0, $6_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    $4_1 = 0;
    label$1 : {
    label$2 : while (1) {
      if (($2_1 | 0) <= ($4_1 | 0)) {
      break label$1
      }
      label$3 : {
      label$4 : {
        $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
        $6_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
        if ($5_1 >>> 0 >= $6_1 >>> 0) {
        break label$4
        }
        HEAP32[($3_1 + 12 | 0) >> 2] = 2147483647;
        HEAP32[($3_1 + 8 | 0) >> 2] = ($6_1 - $5_1 | 0) >> 2 | 0;
        HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 - $4_1 | 0;
        $5_1 = $175($3_1 + 12 | 0 | 0, $175($3_1 + 8 | 0 | 0, $3_1 + 4 | 0 | 0) | 0 | 0) | 0;
        $5_1 = HEAP32[$5_1 >> 2] | 0;
        $242($1_1 | 0, HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0;
        $243($0_1 | 0, $5_1 | 0);
        $1_1 = $1_1 + ($5_1 << 2 | 0) | 0;
        break label$3;
      }
      $5_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1) | 0;
      if (($5_1 | 0) == (-1 | 0)) {
        break label$1
      }
      HEAP32[$1_1 >> 2] = $244($5_1 | 0) | 0;
      $1_1 = $1_1 + 4 | 0;
      $5_1 = 1;
      }
      $4_1 = $5_1 + $4_1 | 0;
      continue label$2;
    };
    }
    global$0 = $3_1 + 16 | 0;
    return $4_1 | 0;
  }
  
  function $242($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $245($1_1 | 0, $2_1 | 0, $0_1 | 0) | 0;
    return $0_1 | 0;
  }
  
  function $243($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    HEAP32[($0_1 + 12 | 0) >> 2] = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($1_1 << 2 | 0) | 0;
  }
  
  function $244($0_1) {
    $0_1 = $0_1 | 0;
    return $0_1 | 0;
  }
  
  function $245($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    return $351($0_1 | 0, $0_1 + ($1_1 << 2 | 0) | 0 | 0, $2_1 | 0) | 0 | 0;
  }
  
  function $246($0_1) {
    $0_1 = $0_1 | 0;
    return $247() | 0 | 0;
  }
  
  function $247() {
    return -1 | 0;
  }
  
  function $248($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0;
    label$1 : {
    if ((FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0) != ($247() | 0 | 0)) {
      break label$1
    }
    return $247() | 0 | 0;
    }
    $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    HEAP32[($0_1 + 12 | 0) >> 2] = $1_1 + 4 | 0;
    return $249(HEAP32[$1_1 >> 2] | 0 | 0) | 0 | 0;
  }
  
  function $249($0_1) {
    $0_1 = $0_1 | 0;
    return $0_1 | 0;
  }
  
  function $250($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $247() | 0 | 0;
  }
  
  function $251($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $6_1 = 0, $4_1 = 0, $3_1 = 0, $7_1 = 0, $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    $4_1 = 0;
    $5_1 = $247() | 0;
    label$1 : {
    label$2 : while (1) {
      if (($2_1 | 0) <= ($4_1 | 0)) {
      break label$1
      }
      label$3 : {
      $6_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
      $7_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
      if ($6_1 >>> 0 < $7_1 >>> 0) {
        break label$3
      }
      if (((((wasm2js_i32$1 = $0_1, wasm2js_i32$2 = $249(HEAP32[$1_1 >> 2] | 0 | 0) | 0), wasm2js_i32$0 = HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0 | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) | 0) == ($5_1 | 0)) {
        break label$1
      }
      $4_1 = $4_1 + 1 | 0;
      $1_1 = $1_1 + 4 | 0;
      continue label$2;
      }
      HEAP32[($3_1 + 12 | 0) >> 2] = ($7_1 - $6_1 | 0) >> 2 | 0;
      HEAP32[($3_1 + 8 | 0) >> 2] = $2_1 - $4_1 | 0;
      $6_1 = $175($3_1 + 12 | 0 | 0, $3_1 + 8 | 0 | 0) | 0;
      $6_1 = HEAP32[$6_1 >> 2] | 0;
      $242(HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0, $1_1 | 0, $6_1 | 0) | 0;
      $7_1 = $6_1 << 2 | 0;
      HEAP32[($0_1 + 24 | 0) >> 2] = (HEAP32[($0_1 + 24 | 0) >> 2] | 0) + $7_1 | 0;
      $4_1 = $6_1 + $4_1 | 0;
      $1_1 = $1_1 + $7_1 | 0;
      continue label$2;
    };
    }
    global$0 = $3_1 + 16 | 0;
    return $4_1 | 0;
  }
  
  function $252($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $247() | 0 | 0;
  }
  
  function $253($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $0_1 | 0;
  }
  
  function $254($0_1) {
    $0_1 = $0_1 | 0;
    $0_1 = $253($0_1 | 0, 68512 | 0) | 0;
    $230($0_1 + 8 | 0 | 0) | 0;
    return $0_1 | 0;
  }
  
  function $255($0_1) {
    $0_1 = $0_1 | 0;
    return $254($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0;
  }
  
  function $256($0_1) {
    $0_1 = $0_1 | 0;
    $1747($254($0_1 | 0) | 0 | 0, 88 | 0);
  }
  
  function $257($0_1) {
    $0_1 = $0_1 | 0;
    $256($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0);
  }
  
  function $258($0_1) {
    $0_1 = $0_1 | 0;
    return $203($0_1 | 0) | 0 | 0;
  }
  
  function $259($0_1) {
    $0_1 = $0_1 | 0;
    return HEAP32[($0_1 + 72 | 0) >> 2] | 0 | 0;
  }
  
  function $260($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0;
    $1_1 = global$0 - 16 | 0;
    global$0 = $1_1;
    label$1 : {
    if (!($267($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
      break label$1
    }
    $280($1_1 + 8 | 0 | 0, $0_1 | 0) | 0;
    label$2 : {
      if (!($268($1_1 + 8 | 0 | 0) | 0)) {
      break label$2
      }
      if (($269($267($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0) | 0 | 0) != (-1 | 0)) {
      break label$2
      }
      $266($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, 1 | 0);
    }
    $281($1_1 + 8 | 0 | 0) | 0;
    }
    global$0 = $1_1 + 16 | 0;
    return $0_1 | 0;
  }
  
  function $261($0_1) {
    $0_1 = $0_1 | 0;
    return $673($0_1 | 0, 89304 | 0) | 0 | 0;
  }
  
  function $262($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $270($0_1 | 0, $1_1 | 0) | 0 | 0;
  }
  
  function $263($0_1) {
    $0_1 = $0_1 | 0;
    return $271(HEAP32[$0_1 >> 2] | 0 | 0) | 0 | 0;
  }
  
  function $264($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1) | 0 | 0;
  }
  
  function $265($0_1) {
    $0_1 = $0_1 | 0;
    $272(HEAP32[$0_1 >> 2] | 0 | 0) | 0;
    return $0_1 | 0;
  }
  
  function $266($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $210($0_1 | 0, $1_1 | 0);
  }
  
  function $267($0_1) {
    $0_1 = $0_1 | 0;
    return $213($0_1 | 0) | 0 | 0;
  }
  
  function $268($0_1) {
    $0_1 = $0_1 | 0;
    return HEAPU8[$0_1 >> 0] | 0 | 0;
  }
  
  function $269($0_1) {
    $0_1 = $0_1 | 0;
    return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
  }
  
  function $270($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return (($433($0_1 | 0) | 0) ^ ($433($1_1 | 0) | 0) | 0) ^ 1 | 0 | 0;
  }
  
  function $271($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0;
    label$1 : {
    $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    if (($1_1 | 0) != (HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0)) {
      break label$1
    }
    return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
    }
    return $249(HEAP32[$1_1 >> 2] | 0 | 0) | 0 | 0;
  }
  
  function $272($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0;
    label$1 : {
    $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    if (($1_1 | 0) != (HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0)) {
      break label$1
    }
    return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
    }
    HEAP32[($0_1 + 12 | 0) >> 2] = $1_1 + 4 | 0;
    return $249(HEAP32[$1_1 >> 2] | 0 | 0) | 0 | 0;
  }
  
  function $273($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return ($0_1 | 0) == ($1_1 | 0) | 0;
  }
  
  function $274($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
    label$1 : {
    $2_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (($2_1 | 0) != (HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0)) {
      break label$1
    }
    return (((wasm2js_i32$1 = $0_1, wasm2js_i32$2 = $249($1_1 | 0) | 0), wasm2js_i32$0 = HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0 | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) | 0;
    }
    HEAP32[($0_1 + 24 | 0) >> 2] = $2_1 + 4 | 0;
    HEAP32[$2_1 >> 2] = $1_1;
    return $249($1_1 | 0) | 0 | 0;
  }
  
  function $275($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $0_1 | 0;
  }
  
  function $276($0_1) {
    $0_1 = $0_1 | 0;
    $0_1 = $275($0_1 | 0, 68560 | 0) | 0;
    $230($0_1 + 4 | 0 | 0) | 0;
    return $0_1 | 0;
  }
  
  function $277($0_1) {
    $0_1 = $0_1 | 0;
    return $276($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0;
  }
  
  function $278($0_1) {
    $0_1 = $0_1 | 0;
    $1747($276($0_1 | 0) | 0 | 0, 84 | 0);
  }
  
  function $279($0_1) {
    $0_1 = $0_1 | 0;
    $278($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0);
  }
  
  function $280($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
    HEAP8[$0_1 >> 0] = 0;
    label$1 : {
    if (!($258($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
      break label$1
    }
    label$2 : {
      if (!($259($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
      break label$2
      }
      $260($259($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0) | 0;
    }
    HEAP8[$0_1 >> 0] = 1;
    }
    return $0_1 | 0;
  }
  
  function $281($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0;
    label$1 : {
    $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if (!($267($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
      break label$1
    }
    $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if (!($258($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
      break label$1
    }
    $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if (!(($196($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0) & 8192 | 0)) {
      break label$1
    }
    if ($134() | 0) {
      break label$1
    }
    $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if (($269($267($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0) | 0 | 0) != (-1 | 0)) {
      break label$1
    }
    $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    $266($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, 1 | 0);
    }
    return $0_1 | 0;
  }
  
  function $282($0_1) {
    $0_1 = $0_1 | 0;
    return $0_1 | 0;
  }
  
  function $283($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0;
    label$1 : {
    $2_1 = HEAP32[$0_1 >> 2] | 0;
    if (!$2_1) {
      break label$1
    }
    if (!($273($274($2_1 | 0, $1_1 | 0) | 0 | 0, $247() | 0 | 0) | 0)) {
      break label$1
    }
    HEAP32[$0_1 >> 2] = 0;
    }
    return $0_1 | 0;
  }
  
  function $284($0_1) {
    $0_1 = $0_1 | 0;
    return $0_1 | 0;
  }
  
  function $285($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1) | 0 | 0;
  }
  
  function $286($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0;
    $1_1 = global$0 - 16 | 0;
    global$0 = $1_1;
    $0_1 = $287($0_1 | 0, $1_1 + 15 | 0 | 0, $1_1 + 14 | 0 | 0) | 0;
    $288($0_1 | 0, 0 | 0);
    global$0 = $1_1 + 16 | 0;
    return $0_1 | 0;
  }
  
  function $287($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    return $378($377($0_1 | 0) | 0 | 0) | 0 | 0;
  }
  
  function $288($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
  }
  
  function $289($0_1) {
    $0_1 = $0_1 | 0;
    return $293($292($0_1 | 0) | 0 | 0) | 0 | 0;
  }
  
  function $290($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $294($0_1 | 0, $1_1 | 0);
    return $0_1 | 0;
  }
  
  function $291($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1275($0_1 | 0, $1_1 + 4 | 0 | 0) | 0;
  }
  
  function $292($0_1) {
    $0_1 = $0_1 | 0;
    label$1 : {
    if (!($296($0_1 | 0) | 0)) {
      break label$1
    }
    return $381($0_1 | 0) | 0 | 0;
    }
    return $382($0_1 | 0) | 0 | 0;
  }
  
  function $293($0_1) {
    $0_1 = $0_1 | 0;
    return $0_1 | 0;
  }
  
  function $294($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $5_1 = 0, $2_1 = 0, i64toi32_i32$0 = 0, $6_1 = 0, $3_1 = 0, $4_1 = 0, i64toi32_i32$1 = 0, $37_1 = 0;
    $2_1 = global$0 - 16 | 0;
    global$0 = $2_1;
    $297($0_1 | 0);
    label$1 : {
    if (!($296($0_1 | 0) | 0)) {
      break label$1
    }
    $386($299($0_1 | 0) | 0 | 0, $381($0_1 | 0) | 0 | 0, $313($0_1 | 0) | 0 | 0);
    }
    $3_1 = $309($1_1 | 0) | 0;
    $4_1 = $296($1_1 | 0) | 0;
    $387($0_1 | 0, $1_1 | 0);
    $5_1 = $298($1_1 | 0) | 0;
    $6_1 = $298($0_1 | 0) | 0;
    HEAP32[($6_1 + 8 | 0) >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[$5_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
    $37_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $6_1;
    HEAP32[i64toi32_i32$0 >> 2] = $37_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    $388($1_1 | 0, 0 | 0);
    $5_1 = $382($1_1 | 0) | 0;
    HEAP8[($2_1 + 15 | 0) >> 0] = 0;
    $389($5_1 | 0, $2_1 + 15 | 0 | 0);
    label$2 : {
    label$3 : {
      $5_1 = ($0_1 | 0) == ($1_1 | 0);
      if ($5_1) {
      break label$3
      }
      if ($4_1) {
      break label$3
      }
      $307($1_1 | 0, $3_1 | 0);
      break label$2;
    }
    $288($1_1 | 0, 0 | 0);
    }
    $1_1 = $296($0_1 | 0) | 0;
    label$4 : {
    if ($5_1) {
      break label$4
    }
    if ($1_1) {
      break label$4
    }
    $288($0_1 | 0, $300($0_1 | 0) | 0 | 0);
    }
    global$0 = $2_1 + 16 | 0;
  }
  
  function $295($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0;
    $2_1 = HEAP32[$0_1 >> 2] | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
    HEAP32[$1_1 >> 2] = $2_1;
  }
  
  function $296($0_1) {
    $0_1 = $0_1 | 0;
    return (HEAPU8[(($306($0_1 | 0) | 0) + 11 | 0) >> 0] | 0) >>> 7 | 0 | 0;
  }
  
  function $297($0_1) {
    $0_1 = $0_1 | 0;
  }
  
  function $298($0_1) {
    $0_1 = $0_1 | 0;
    return $385($0_1 | 0) | 0 | 0;
  }
  
  function $299($0_1) {
    $0_1 = $0_1 | 0;
    return $391($0_1 | 0) | 0 | 0;
  }
  
  function $300($0_1) {
    $0_1 = $0_1 | 0;
    return (HEAPU8[(($306($0_1 | 0) | 0) + 11 | 0) >> 0] | 0) & 127 | 0 | 0;
  }
  
  function $301($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    var $4_1 = 0;
    $4_1 = global$0 - 16 | 0;
    global$0 = $4_1;
    $3_1 = $303($0_1 | 0, $4_1 + 15 | 0 | 0, $3_1 | 0) | 0;
    $304($3_1 | 0, $1_1 | 0, $2_1 | 0);
    global$0 = $4_1 + 16 | 0;
    return $3_1 | 0;
  }
  
  function $302($0_1) {
    $0_1 = $0_1 | 0;
    return $400($0_1 | 0) | 0 | 0;
  }
  
  function $303($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    return $403($402($0_1 | 0) | 0 | 0, $2_1 | 0) | 0 | 0;
  }
  
  function $304($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $405($0_1 | 0, $1_1 | 0, $2_1 | 0, $404($1_1 | 0, $2_1 | 0) | 0 | 0);
  }
  
  function $305($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
  }
  
  function $306($0_1) {
    $0_1 = $0_1 | 0;
    return $384($0_1 | 0) | 0 | 0;
  }
  
  function $307($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
  }
  
  function $308($0_1) {
    $0_1 = $0_1 | 0;
    return $345($426($0_1 | 0) | 0 | 0) | 0 | 0;
  }
  
  function $309($0_1) {
    $0_1 = $0_1 | 0;
    label$1 : {
    if (!($296($0_1 | 0) | 0)) {
      break label$1
    }
    return $314($0_1 | 0) | 0 | 0;
    }
    return $300($0_1 | 0) | 0 | 0;
  }
  
  function $310($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0;
    $1_1 = 10;
    label$1 : {
    if (!($296($0_1 | 0) | 0)) {
      break label$1
    }
    $1_1 = ($313($0_1 | 0) | 0) + -1 | 0;
    }
    return $1_1 | 0;
  }
  
  function $311($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1772($0_1 | 0, $1_1 | 0, 0 | 0);
  }
  
  function $312($0_1) {
    $0_1 = $0_1 | 0;
    label$1 : {
    if (!($211($0_1 | 0, $182() | 0 | 0) | 0)) {
      break label$1
    }
    $0_1 = ($182() | 0) ^ -1 | 0;
    }
    return $0_1 | 0;
  }
  
  function $313($0_1) {
    $0_1 = $0_1 | 0;
    return (HEAP32[(($306($0_1 | 0) | 0) + 8 | 0) >> 2] | 0) & 2147483647 | 0 | 0;
  }
  
  function $314($0_1) {
    $0_1 = $0_1 | 0;
    return HEAP32[(($306($0_1 | 0) | 0) + 4 | 0) >> 2] | 0 | 0;
  }
  
  function $315($0_1) {
    $0_1 = $0_1 | 0;
    return $308($0_1 | 0) | 0 | 0;
  }
  
  function $316($0_1) {
    $0_1 = $0_1 | 0;
    return $673($0_1 | 0, 89320 | 0) | 0 | 0;
  }
  
  function $317($0_1) {
    $0_1 = $0_1 | 0;
    return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
  }
  
  function $318($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $321($0_1 | 0, $1_1 | 0) | 0 | 0;
  }
  
  function $319($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $6_1 = $6_1 | 0;
    $7_1 = $7_1 | 0;
    return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) | 0 | 0;
  }
  
  function $320() {
    $158();
    wasm2js_trap();
  }
  
  function $321($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0, $3_1 = 0;
    $2_1 = global$0 - 16 | 0;
    global$0 = $2_1;
    $3_1 = $430($2_1 + 15 | 0 | 0, $1_1 | 0, $0_1 | 0) | 0;
    global$0 = $2_1 + 16 | 0;
    return ($3_1 ? $1_1 : $0_1) | 0;
  }
  
  function $322($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $6_1 = $6_1 | 0;
    $7_1 = $7_1 | 0;
    return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) | 0 | 0;
  }
  
  function $323($0_1) {
    $0_1 = $0_1 | 0;
    return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
  }
  
  function $324($0_1, $1_1, $2_1, $3_1, $4_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1) | 0 | 0;
  }
  
  function $325($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    return (HEAP32[$1_1 >> 2] | 0 | 0) < (HEAP32[$2_1 >> 2] | 0 | 0) | 0;
  }
  
  function $326($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    $327($3_1 + 8 | 0 | 0, $0_1 | 0, $1_1 | 0, $2_1 | 0);
    $2_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
    global$0 = $3_1 + 16 | 0;
    return $2_1 | 0;
  }
  
  function $327($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $328($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
  }
  
  function $328($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $329($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
  }
  
  function $329($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    var $4_1 = 0;
    $4_1 = global$0 - 32 | 0;
    global$0 = $4_1;
    $330($4_1 + 24 | 0 | 0, $1_1 | 0, $2_1 | 0);
    $332($4_1 + 16 | 0 | 0, $4_1 + 12 | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, $331($3_1 | 0) | 0 | 0);
    HEAP32[($4_1 + 12 | 0) >> 2] = $333($1_1 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($4_1 + 8 | 0) >> 2] = $334($3_1 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
    $335($0_1 | 0, $4_1 + 12 | 0 | 0, $4_1 + 8 | 0 | 0);
    global$0 = $4_1 + 32 | 0;
  }
  
  function $330($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $336($0_1 | 0, $1_1 | 0, $2_1 | 0);
  }
  
  function $331($0_1) {
    $0_1 = $0_1 | 0;
    return $338($0_1 | 0) | 0 | 0;
  }
  
  function $332($0_1, $1_1, $2_1, $3_1, $4_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $337($0_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
  }
  
  function $333($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $340($0_1 | 0, $1_1 | 0) | 0 | 0;
  }
  
  function $334($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $341($0_1 | 0, $1_1 | 0) | 0 | 0;
  }
  
  function $335($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $339($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  }
  
  function $336($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    HEAP32[($3_1 + 12 | 0) >> 2] = $342($1_1 | 0) | 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = $342($2_1 | 0) | 0;
    $343($0_1 | 0, $3_1 + 12 | 0 | 0, $3_1 + 8 | 0 | 0) | 0;
    global$0 = $3_1 + 16 | 0;
  }
  
  function $337($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    var $4_1 = 0;
    $4_1 = global$0 - 16 | 0;
    global$0 = $4_1;
    HEAP32[($4_1 + 12 | 0) >> 2] = $2_1;
    $2_1 = $2_1 - $1_1 | 0;
    $346($3_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
    HEAP32[($4_1 + 8 | 0) >> 2] = $3_1 + $2_1 | 0;
    $347($0_1 | 0, $4_1 + 12 | 0 | 0, $4_1 + 8 | 0 | 0);
    global$0 = $4_1 + 16 | 0;
  }
  
  function $338($0_1) {
    $0_1 = $0_1 | 0;
    return $293($0_1 | 0) | 0 | 0;
  }
  
  function $339($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
    return $0_1 | 0;
  }
  
  function $340($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $349($0_1 | 0, $1_1 | 0) | 0 | 0;
  }
  
  function $341($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $0_1 + ($1_1 - ($293($0_1 | 0) | 0) | 0) | 0 | 0;
  }
  
  function $342($0_1) {
    $0_1 = $0_1 | 0;
    return $344($0_1 | 0) | 0 | 0;
  }
  
  function $343($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
    return $0_1 | 0;
  }
  
  function $344($0_1) {
    $0_1 = $0_1 | 0;
    return $345($0_1 | 0) | 0 | 0;
  }
  
  function $345($0_1) {
    $0_1 = $0_1 | 0;
    return $0_1 | 0;
  }
  
  function $346($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    label$1 : {
    if (!$2_1) {
      break label$1
    }
    $156($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
    }
    return $0_1 | 0;
  }
  
  function $347($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $348($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  }
  
  function $348($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
    return $0_1 | 0;
  }
  
  function $349($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $350($0_1 | 0, $1_1 | 0) | 0 | 0;
  }
  
  function $350($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $0_1 + ($1_1 - ($345($0_1 | 0) | 0) | 0) | 0 | 0;
  }
  
  function $351($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    $352($3_1 + 8 | 0 | 0, $0_1 | 0, $1_1 | 0, $2_1 | 0);
    $2_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
    global$0 = $3_1 + 16 | 0;
    return $2_1 | 0;
  }
  
  function $352($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $353($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
  }
  
  function $353($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $354($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
  }
  
  function $354($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    var $4_1 = 0;
    $4_1 = global$0 - 32 | 0;
    global$0 = $4_1;
    $355($4_1 + 24 | 0 | 0, $1_1 | 0, $2_1 | 0);
    $357($4_1 + 16 | 0 | 0, $4_1 + 12 | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, $356($3_1 | 0) | 0 | 0);
    HEAP32[($4_1 + 12 | 0) >> 2] = $358($1_1 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($4_1 + 8 | 0) >> 2] = $359($3_1 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
    $360($0_1 | 0, $4_1 + 12 | 0 | 0, $4_1 + 8 | 0 | 0);
    global$0 = $4_1 + 32 | 0;
  }
  
  function $355($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $361($0_1 | 0, $1_1 | 0, $2_1 | 0);
  }
  
  function $356($0_1) {
    $0_1 = $0_1 | 0;
    return $363($0_1 | 0) | 0 | 0;
  }
  
  function $357($0_1, $1_1, $2_1, $3_1, $4_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $362($0_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
  }
  
  function $358($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $365($0_1 | 0, $1_1 | 0) | 0 | 0;
  }
  
  function $359($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $366($0_1 | 0, $1_1 | 0) | 0 | 0;
  }
  
  function $360($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $364($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  }
  
  function $361($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    HEAP32[($3_1 + 12 | 0) >> 2] = $367($1_1 | 0) | 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = $367($2_1 | 0) | 0;
    $368($0_1 | 0, $3_1 + 12 | 0 | 0, $3_1 + 8 | 0 | 0) | 0;
    global$0 = $3_1 + 16 | 0;
  }
  
  function $362($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    var $4_1 = 0;
    $4_1 = global$0 - 16 | 0;
    global$0 = $4_1;
    HEAP32[($4_1 + 12 | 0) >> 2] = $2_1;
    $2_1 = $2_1 - $1_1 | 0;
    $371($3_1 | 0, $1_1 | 0, $2_1 >> 2 | 0 | 0) | 0;
    HEAP32[($4_1 + 8 | 0) >> 2] = $3_1 + $2_1 | 0;
    $372($0_1 | 0, $4_1 + 12 | 0 | 0, $4_1 + 8 | 0 | 0);
    global$0 = $4_1 + 16 | 0;
  }
  
  function $363($0_1) {
    $0_1 = $0_1 | 0;
    return $374($0_1 | 0) | 0 | 0;
  }
  
  function $364($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
    return $0_1 | 0;
  }
  
  function $365($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $375($0_1 | 0, $1_1 | 0) | 0 | 0;
  }
  
  function $366($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $0_1 + ($1_1 - ($374($0_1 | 0) | 0) | 0) | 0 | 0;
  }
  
  function $367($0_1) {
    $0_1 = $0_1 | 0;
    return $369($0_1 | 0) | 0 | 0;
  }
  
  function $368($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
    return $0_1 | 0;
  }
  
  function $369($0_1) {
    $0_1 = $0_1 | 0;
    return $370($0_1 | 0) | 0 | 0;
  }
  
  function $370($0_1) {
    $0_1 = $0_1 | 0;
    return $0_1 | 0;
  }
  
  function $371($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    label$1 : {
    if (!$2_1) {
      break label$1
    }
    $156($0_1 | 0, $1_1 | 0, $2_1 << 2 | 0 | 0) | 0;
    }
    return $0_1 | 0;
  }
  
  function $372($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $373($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  }
  
  function $373($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
    return $0_1 | 0;
  }
  
  function $374($0_1) {
    $0_1 = $0_1 | 0;
    return $0_1 | 0;
  }
  
  function $375($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $376($0_1 | 0, $1_1 | 0) | 0 | 0;
  }
  
  function $376($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $0_1 + ($1_1 - ($370($0_1 | 0) | 0) | 0) | 0 | 0;
  }
  
  function $377($0_1) {
    $0_1 = $0_1 | 0;
    HEAP32[$0_1 >> 2] = 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = 0;
    HEAP32[($0_1 + 8 | 0) >> 2] = 0;
    return $0_1 | 0;
  }
  
  function $378($0_1) {
    $0_1 = $0_1 | 0;
    return $379($0_1 | 0) | 0 | 0;
  }
  
  function $379($0_1) {
    $0_1 = $0_1 | 0;
    return $380($0_1 | 0) | 0 | 0;
  }
  
  function $380($0_1) {
    $0_1 = $0_1 | 0;
    return $0_1 | 0;
  }
  
  function $381($0_1) {
    $0_1 = $0_1 | 0;
    return HEAP32[($298($0_1 | 0) | 0) >> 2] | 0 | 0;
  }
  
  function $382($0_1) {
    $0_1 = $0_1 | 0;
    return $383($298($0_1 | 0) | 0 | 0) | 0 | 0;
  }
  
  function $383($0_1) {
    $0_1 = $0_1 | 0;
    return $0_1 | 0;
  }
  
  function $384($0_1) {
    $0_1 = $0_1 | 0;
    return $0_1 | 0;
  }
  
  function $385($0_1) {
    $0_1 = $0_1 | 0;
    return $0_1 | 0;
  }
  
  function $386($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $390($0_1 | 0, $1_1 | 0, $2_1 | 0);
  }
  
  function $387($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $392($0_1 | 0, $1_1 | 0);
  }
  
  function $388($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0;
    $2_1 = $298($0_1 | 0) | 0;
    HEAP8[($2_1 + 11 | 0) >> 0] = (HEAPU8[($2_1 + 11 | 0) >> 0] | 0) & 128 | 0 | ($1_1 & 127 | 0) | 0;
    $0_1 = $298($0_1 | 0) | 0;
    HEAP8[($0_1 + 11 | 0) >> 0] = (HEAPU8[($0_1 + 11 | 0) >> 0] | 0) & 127 | 0;
  }
  
  function $389($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    HEAP8[$0_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
  }
  
  function $390($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $393($1_1 | 0, $2_1 | 0, 1 | 0);
  }
  
  function $391($0_1) {
    $0_1 = $0_1 | 0;
    return $399($0_1 | 0) | 0 | 0;
  }
  
  function $392($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $299($1_1 | 0) | 0;
    $299($0_1 | 0) | 0;
  }
  
  function $393($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    label$1 : {
    if (!($394($2_1 | 0) | 0)) {
      break label$1
    }
    $395($0_1 | 0, $1_1 | 0, $2_1 | 0);
    return;
    }
    $396($0_1 | 0, $1_1 | 0);
  }
  
  function $394($0_1) {
    $0_1 = $0_1 | 0;
    return $0_1 >>> 0 > 8 >>> 0 | 0;
  }
  
  function $395($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $397($0_1 | 0, $1_1 | 0, $2_1 | 0);
  }
  
  function $396($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $398($0_1 | 0, $1_1 | 0);
  }
  
  function $397($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $1754($0_1 | 0, $1_1 | 0, $2_1 | 0);
  }
  
  function $398($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1747($0_1 | 0, $1_1 | 0);
  }
  
  function $399($0_1) {
    $0_1 = $0_1 | 0;
    return $0_1 | 0;
  }
  
  function $400($0_1) {
    $0_1 = $0_1 | 0;
    return $401($0_1 | 0) | 0 | 0;
  }
  
  function $401($0_1) {
    $0_1 = $0_1 | 0;
    return $0_1 | 0;
  }
  
  function $402($0_1) {
    $0_1 = $0_1 | 0;
    return $0_1 | 0;
  }
  
  function $403($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $0_1 | 0;
  }
  
  function $404($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $406($0_1 | 0, $1_1 | 0) | 0 | 0;
  }
  
  function $405($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    var $4_1 = 0, $5_1 = 0;
    $4_1 = global$0 - 16 | 0;
    global$0 = $4_1;
    label$1 : {
    if ($3_1 >>> 0 > ($407($0_1 | 0) | 0) >>> 0) {
      break label$1
    }
    label$2 : {
      label$3 : {
      if (!($408($3_1 | 0) | 0)) {
        break label$3
      }
      $388($0_1 | 0, $3_1 | 0);
      $5_1 = $382($0_1 | 0) | 0;
      break label$2;
      }
      $410($4_1 + 8 | 0 | 0, $299($0_1 | 0) | 0 | 0, ($409($3_1 | 0) | 0) + 1 | 0 | 0);
      $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
      $411($5_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
      $412($0_1 | 0, $5_1 | 0);
      $413($0_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
      $414($0_1 | 0, $3_1 | 0);
    }
    label$4 : {
      label$5 : while (1) {
      if (($1_1 | 0) == ($2_1 | 0)) {
        break label$4
      }
      $389($5_1 | 0, $1_1 | 0);
      $5_1 = $5_1 + 1 | 0;
      $1_1 = $1_1 + 1 | 0;
      continue label$5;
      };
    }
    HEAP8[($4_1 + 7 | 0) >> 0] = 0;
    $389($5_1 | 0, $4_1 + 7 | 0 | 0);
    $288($0_1 | 0, $3_1 | 0);
    global$0 = $4_1 + 16 | 0;
    return;
    }
    $415($0_1 | 0);
    wasm2js_trap();
  }
  
  function $406($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $1_1 - $0_1 | 0 | 0;
  }
  
  function $407($0_1) {
    $0_1 = $0_1 | 0;
    $0_1 = $416($302($0_1 | 0) | 0 | 0) | 0;
    return ($0_1 >>> ($0_1 >>> 0 > (($417() | 0) >>> 1 | 0) >>> 0) | 0) + -8 | 0 | 0;
  }
  
  function $408($0_1) {
    $0_1 = $0_1 | 0;
    return $0_1 >>> 0 < 11 >>> 0 | 0;
  }
  
  function $409($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0, $7_1 = 0;
    $1_1 = 10;
    label$1 : {
    if ($0_1 >>> 0 < 11 >>> 0) {
      break label$1
    }
    $0_1 = $420($0_1 + 1 | 0 | 0) | 0;
    $7_1 = $0_1;
    $0_1 = $0_1 + -1 | 0;
    $1_1 = ($0_1 | 0) == (11 | 0) ? $7_1 : $0_1;
    }
    return $1_1 | 0;
  }
  
  function $410($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $1_1 = $419($1_1 | 0, $2_1 | 0) | 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
    HEAP32[$0_1 >> 2] = $1_1;
  }
  
  function $411($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
  }
  
  function $412($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    HEAP32[($298($0_1 | 0) | 0) >> 2] = $1_1;
  }
  
  function $413($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0;
    $2_1 = $298($0_1 | 0) | 0;
    HEAP32[($2_1 + 8 | 0) >> 2] = (HEAP32[($2_1 + 8 | 0) >> 2] | 0) & -2147483648 | 0 | ($1_1 & 2147483647 | 0) | 0;
    $0_1 = $298($0_1 | 0) | 0;
    HEAP32[($0_1 + 8 | 0) >> 2] = HEAP32[($0_1 + 8 | 0) >> 2] | 0 | -2147483648 | 0;
  }
  
  function $414($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    HEAP32[(($298($0_1 | 0) | 0) + 4 | 0) >> 2] = $1_1;
  }
  
  function $415($0_1) {
    $0_1 = $0_1 | 0;
    $418(66084 | 0);
    wasm2js_trap();
  }
  
  function $416($0_1) {
    $0_1 = $0_1 | 0;
    return $417() | 0 | 0;
  }
  
  function $417() {
    return $421() | 0 | 0;
  }
  
  function $418($0_1) {
    $0_1 = $0_1 | 0;
    $158();
    wasm2js_trap();
  }
  
  function $419($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    label$1 : {
    if ($1_1 >>> 0 <= ($416($0_1 | 0) | 0) >>> 0) {
      break label$1
    }
    $422();
    wasm2js_trap();
    }
    return $423($1_1 | 0, 1 | 0) | 0 | 0;
  }
  
  function $420($0_1) {
    $0_1 = $0_1 | 0;
    return ($0_1 + 7 | 0) & -8 | 0 | 0;
  }
  
  function $421() {
    return -1 | 0;
  }
  
  function $422() {
    $158();
    wasm2js_trap();
  }
  
  function $423($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    label$1 : {
    if (!($394($1_1 | 0) | 0)) {
      break label$1
    }
    return $424($0_1 | 0, $1_1 | 0) | 0 | 0;
    }
    return $425($0_1 | 0) | 0 | 0;
  }
  
  function $424($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $1749($0_1 | 0, $1_1 | 0) | 0 | 0;
  }
  
  function $425($0_1) {
    $0_1 = $0_1 | 0;
    return $1743($0_1 | 0) | 0 | 0;
  }
  
  function $426($0_1) {
    $0_1 = $0_1 | 0;
    label$1 : {
    if (!($296($0_1 | 0) | 0)) {
      break label$1
    }
    return $427($0_1 | 0) | 0 | 0;
    }
    return $428($0_1 | 0) | 0 | 0;
  }
  
  function $427($0_1) {
    $0_1 = $0_1 | 0;
    return HEAP32[($306($0_1 | 0) | 0) >> 2] | 0 | 0;
  }
  
  function $428($0_1) {
    $0_1 = $0_1 | 0;
    return $429($306($0_1 | 0) | 0 | 0) | 0 | 0;
  }
  
  function $429($0_1) {
    $0_1 = $0_1 | 0;
    return $0_1 | 0;
  }
  
  function $430($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    return (HEAP32[$1_1 >> 2] | 0) >>> 0 < (HEAP32[$2_1 >> 2] | 0) >>> 0 | 0;
  }
  
  function $431($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0;
    label$1 : {
    $1_1 = HEAP32[$0_1 >> 2] | 0;
    if (!$1_1) {
      break label$1
    }
    label$2 : {
      if ($211($208($1_1 | 0) | 0 | 0, $182() | 0 | 0) | 0) {
      break label$2
      }
      return !(HEAP32[$0_1 >> 2] | 0) | 0;
    }
    HEAP32[$0_1 >> 2] = 0;
    }
    return 1 | 0;
  }
  
  function $432($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1) | 0 | 0;
  }
  
  function $433($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0;
    label$1 : {
    $1_1 = HEAP32[$0_1 >> 2] | 0;
    if (!$1_1) {
      break label$1
    }
    label$2 : {
      if ($273($271($1_1 | 0) | 0 | 0, $247() | 0 | 0) | 0) {
      break label$2
      }
      return !(HEAP32[$0_1 >> 2] | 0) | 0;
    }
    HEAP32[$0_1 >> 2] = 0;
    }
    return 1 | 0;
  }
  
  function $434($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 44 | 0) >> 2] | 0 | 0]($0_1, $1_1) | 0 | 0;
  }
  
  function $435($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0;
    $2_1 = global$0 - 16 | 0;
    global$0 = $2_1;
    $0_1 = $436($0_1 | 0, $2_1 + 15 | 0 | 0, $2_1 + 14 | 0 | 0) | 0;
    $1764($0_1 | 0, $1_1 | 0, $437($1_1 | 0) | 0 | 0);
    global$0 = $2_1 + 16 | 0;
    return $0_1 | 0;
  }
  
  function $436($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    return $378($402($0_1 | 0) | 0 | 0) | 0 | 0;
  }
  
  function $437($0_1) {
    $0_1 = $0_1 | 0;
    return $447($0_1 | 0) | 0 | 0;
  }
  
  function $438($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0, $3_1 = 0;
    $2_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
    label$1 : while (1) {
    label$2 : {
      if ($2_1) {
      break label$2
      }
      return;
    }
    $2_1 = $2_1 + -1 | 0;
    $3_1 = $2_1 << 2 | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 32 | 0) >> 2] | 0) + $3_1 | 0) >> 2] | 0 | 0]($1_1, $0_1, HEAP32[((HEAP32[($0_1 + 36 | 0) >> 2] | 0) + $3_1 | 0) >> 2] | 0);
    continue label$1;
    };
  }
  
  function $439($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1275($0_1 | 0, $1_1 + 28 | 0 | 0) | 0;
  }
  
  function $440($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $442($0_1 | 0, $1_1 | 0) | 0 | 0;
  }
  
  function $441($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1_1 = $1_1 | !(HEAP32[($0_1 + 24 | 0) >> 2] | 0) | 0;
    HEAP32[($0_1 + 16 | 0) >> 2] = $1_1;
    label$1 : {
    if (!((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $1_1 | 0)) {
      break label$1
    }
    $445(65890 | 0);
    wasm2js_trap();
    }
  }
  
  function $442($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0, $3_1 = 0;
    $2_1 = global$0 - 16 | 0;
    global$0 = $2_1;
    $3_1 = $430($2_1 + 15 | 0 | 0, $0_1 | 0, $1_1 | 0) | 0;
    global$0 = $2_1 + 16 | 0;
    return ($3_1 ? $1_1 : $0_1) | 0;
  }
  
  function $443($0_1) {
    $0_1 = $0_1 | 0;
    HEAP32[$0_1 >> 2] = 69128;
    $438($0_1 | 0, 0 | 0);
    $668($0_1 + 28 | 0 | 0) | 0;
    $128(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0);
    $128(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0);
    $128(HEAP32[($0_1 + 48 | 0) >> 2] | 0 | 0);
    $128(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0);
    return $0_1 | 0;
  }
  
  function $444($0_1) {
    $0_1 = $0_1 | 0;
    $1747($443($0_1 | 0) | 0 | 0, 72 | 0);
  }
  
  function $445($0_1) {
    $0_1 = $0_1 | 0;
    $158();
    wasm2js_trap();
  }
  
  function $446($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    HEAP32[($0_1 + 20 | 0) >> 2] = 0;
    HEAP32[($0_1 + 24 | 0) >> 2] = $1_1;
    HEAP32[($0_1 + 12 | 0) >> 2] = 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = 4098;
    HEAP32[($0_1 + 8 | 0) >> 2] = 6;
    HEAP32[($0_1 + 16 | 0) >> 2] = !$1_1;
    $115($0_1 + 32 | 0 | 0, 0 | 0, 40 | 0) | 0;
    $1278($0_1 + 28 | 0 | 0) | 0;
  }
  
  function $447($0_1) {
    $0_1 = $0_1 | 0;
    return $122($0_1 | 0) | 0 | 0;
  }
  
  function $448($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
    return $0_1 | 0;
  }
  
  function $449($0_1) {
    $0_1 = $0_1 | 0;
    return $0_1 | 0;
  }
  
  function $450($0_1) {
    $0_1 = $0_1 | 0;
    return 0 | 0;
  }
  
  function $451($0_1, $1_1, $1$hi, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1$hi = $1$hi | 0;
    $2_1 = $2_1 | 0;
    i64toi32_i32$HIGH_BITS = 0;
    return 0 | 0;
  }
  
  function $452($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    return 0 | 0;
  }
  
  function $453($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0, $4_1 = 0, $3_1 = 0;
    $2_1 = -1;
    label$1 : {
    if (($0_1 | 0) == (-1 | 0)) {
      break label$1
    }
    label$2 : {
      label$3 : {
      if ((HEAP32[($1_1 + 76 | 0) >> 2] | 0 | 0) >= (0 | 0)) {
        break label$3
      }
      $3_1 = 1;
      break label$2;
      }
      $3_1 = !($153($1_1 | 0) | 0);
    }
    label$4 : {
      label$5 : {
      label$6 : {
        $4_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
        if ($4_1) {
        break label$6
        }
        $157($1_1 | 0) | 0;
        $4_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
        if (!$4_1) {
        break label$5
        }
      }
      if ($4_1 >>> 0 > ((HEAP32[($1_1 + 44 | 0) >> 2] | 0) + -8 | 0) >>> 0) {
        break label$4
      }
      }
      if ($3_1) {
      break label$1
      }
      $154($1_1 | 0);
      return -1 | 0;
    }
    $2_1 = $4_1 + -1 | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $2_1;
    HEAP8[$2_1 >> 0] = $0_1;
    HEAP32[$1_1 >> 2] = (HEAP32[$1_1 >> 2] | 0) & -17 | 0;
    label$7 : {
      if ($3_1) {
      break label$7
      }
      $154($1_1 | 0);
    }
    $2_1 = $0_1 & 255 | 0;
    }
    return $2_1 | 0;
  }
  
  function $454($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0, $2_1 = 0;
    $1_1 = global$0 - 16 | 0;
    global$0 = $1_1;
    $2_1 = -1;
    label$1 : {
    if ($157($0_1 | 0) | 0) {
      break label$1
    }
    if ((FUNCTION_TABLE[HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 15 | 0, 1) | 0 | 0) != (1 | 0)) {
      break label$1
    }
    $2_1 = HEAPU8[($1_1 + 15 | 0) >> 0] | 0;
    }
    global$0 = $1_1 + 16 | 0;
    return $2_1 | 0;
  }
  
  function $455($0_1) {
    $0_1 = $0_1 | 0;
    return $456($0_1 | 0) | 0 | 0;
  }
  
  function $456($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0;
    label$1 : {
    label$2 : {
      $1_1 = HEAP32[($0_1 + 76 | 0) >> 2] | 0;
      if (($1_1 | 0) < (0 | 0)) {
      break label$2
      }
      if (!$1_1) {
      break label$1
      }
      if (($1_1 & 1073741823 | 0 | 0) != (HEAP32[(($118() | 0) + 24 | 0) >> 2] | 0 | 0)) {
      break label$1
      }
    }
    label$3 : {
      $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
      if (($1_1 | 0) == (HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0)) {
      break label$3
      }
      HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
      return HEAPU8[$1_1 >> 0] | 0 | 0;
    }
    return $454($0_1 | 0) | 0 | 0;
    }
    return $457($0_1 | 0) | 0 | 0;
  }
  
  function $457($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0, $2_1 = 0;
    label$1 : {
    $1_1 = $0_1 + 76 | 0;
    if (!($458($1_1 | 0) | 0)) {
      break label$1
    }
    $153($0_1 | 0) | 0;
    }
    label$2 : {
    label$3 : {
      $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
      if (($2_1 | 0) == (HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0)) {
      break label$3
      }
      HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
      $0_1 = HEAPU8[$2_1 >> 0] | 0;
      break label$2;
    }
    $0_1 = $454($0_1 | 0) | 0;
    }
    label$4 : {
    if (!(($459($1_1 | 0) | 0) & 1073741824 | 0)) {
      break label$4
    }
    $460($1_1 | 0);
    }
    return $0_1 | 0;
  }
  
  function $458($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0;
    $1_1 = HEAP32[$0_1 >> 2] | 0;
    HEAP32[$0_1 >> 2] = $1_1 ? $1_1 : 1073741823;
    return $1_1 | 0;
  }
  
  function $459($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0;
    $1_1 = HEAP32[$0_1 >> 2] | 0;
    HEAP32[$0_1 >> 2] = 0;
    return $1_1 | 0;
  }
  
  function $460($0_1) {
    $0_1 = $0_1 | 0;
    $144($0_1 | 0, 1 | 0) | 0;
  }
  
  function $461($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $3_1 = 0, $2_1 = 0;
    label$1 : {
    label$2 : {
      if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) >= (0 | 0)) {
      break label$2
      }
      $2_1 = 1;
      break label$1;
    }
    $2_1 = !($153($0_1 | 0) | 0);
    }
    label$3 : {
    label$4 : {
      if ($1_1) {
      break label$4
      }
      $3_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
      break label$3;
    }
    label$5 : {
      if (HEAP32[($0_1 + 136 | 0) >> 2] | 0) {
      break label$5
      }
      HEAP32[($0_1 + 136 | 0) >> 2] = HEAP32[(HEAP32[(($118() | 0) + 96 | 0) >> 2] | 0) >> 2] | 0 ? 69264 : 69240;
    }
    $3_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
    if ($3_1) {
      break label$3
    }
    $3_1 = ($1_1 | 0) < (1 | 0) ? -1 : 1;
    HEAP32[($0_1 + 72 | 0) >> 2] = $3_1;
    }
    label$6 : {
    if ($2_1) {
      break label$6
    }
    $154($0_1 | 0);
    }
    return $3_1 | 0;
  }
  
  function $462($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $4_1 = 0, $3_1 = 0;
    label$1 : {
    if ($1_1) {
      break label$1
    }
    return 0 | 0;
    }
    label$2 : {
    label$3 : {
      if (!$2_1) {
      break label$3
      }
      label$4 : {
      $3_1 = HEAPU8[$1_1 >> 0] | 0;
      $4_1 = $3_1 << 24 >> 24;
      if (($4_1 | 0) < (0 | 0)) {
        break label$4
      }
      label$5 : {
        if (!$0_1) {
        break label$5
        }
        HEAP32[$0_1 >> 2] = $3_1;
      }
      return ($4_1 | 0) != (0 | 0) | 0;
      }
      label$6 : {
      if (HEAP32[(HEAP32[(($118() | 0) + 96 | 0) >> 2] | 0) >> 2] | 0) {
        break label$6
      }
      $1_1 = 1;
      if (!$0_1) {
        break label$2
      }
      HEAP32[$0_1 >> 2] = $4_1 & 57343 | 0;
      return 1 | 0;
      }
      $4_1 = $3_1 + -194 | 0;
      if ($4_1 >>> 0 > 50 >>> 0) {
      break label$3
      }
      $4_1 = HEAP32[(($4_1 << 2 | 0) + 69296 | 0) >> 2] | 0;
      label$7 : {
      if ($2_1 >>> 0 > 3 >>> 0) {
        break label$7
      }
      if (($4_1 << (Math_imul($2_1, 6) + -6 | 0) | 0 | 0) < (0 | 0)) {
        break label$3
      }
      }
      $3_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
      $2_1 = $3_1 >>> 3 | 0;
      if (($2_1 + -16 | 0 | ($2_1 + ($4_1 >> 26 | 0) | 0) | 0) >>> 0 > 7 >>> 0) {
      break label$3
      }
      label$8 : {
      $2_1 = $3_1 + -128 | 0 | ($4_1 << 6 | 0) | 0;
      if (($2_1 | 0) < (0 | 0)) {
        break label$8
      }
      $1_1 = 2;
      if (!$0_1) {
        break label$2
      }
      HEAP32[$0_1 >> 2] = $2_1;
      return 2 | 0;
      }
      $4_1 = (HEAPU8[($1_1 + 2 | 0) >> 0] | 0) + -128 | 0;
      if ($4_1 >>> 0 > 63 >>> 0) {
      break label$3
      }
      $2_1 = $2_1 << 6 | 0;
      $4_1 = $4_1 | $2_1 | 0;
      label$9 : {
      if (($2_1 | 0) < (0 | 0)) {
        break label$9
      }
      $1_1 = 3;
      if (!$0_1) {
        break label$2
      }
      HEAP32[$0_1 >> 2] = $4_1;
      return 3 | 0;
      }
      $2_1 = (HEAPU8[($1_1 + 3 | 0) >> 0] | 0) + -128 | 0;
      if ($2_1 >>> 0 > 63 >>> 0) {
      break label$3
      }
      $1_1 = 4;
      if (!$0_1) {
      break label$2
      }
      HEAP32[$0_1 >> 2] = $2_1 | ($4_1 << 6 | 0) | 0;
      return 4 | 0;
    }
    HEAP32[($124() | 0) >> 2] = 25;
    $1_1 = -1;
    }
    return $1_1 | 0;
  }
  
  function $463($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    var $5_1 = 0, $4_1 = 0, $6_1 = 0, $7_1 = 0;
    $4_1 = $3_1 ? $3_1 : 87664;
    $3_1 = HEAP32[$4_1 >> 2] | 0;
    label$1 : {
    label$2 : {
      label$3 : {
      label$4 : {
        if ($1_1) {
        break label$4
        }
        if ($3_1) {
        break label$3
        }
        return 0 | 0;
      }
      $5_1 = -2;
      if (!$2_1) {
        break label$2
      }
      label$5 : {
        label$6 : {
        if (!$3_1) {
          break label$6
        }
        $5_1 = $2_1;
        break label$5;
        }
        label$7 : {
        $5_1 = HEAPU8[$1_1 >> 0] | 0;
        $3_1 = $5_1 << 24 >> 24;
        if (($3_1 | 0) < (0 | 0)) {
          break label$7
        }
        label$8 : {
          if (!$0_1) {
          break label$8
          }
          HEAP32[$0_1 >> 2] = $5_1;
        }
        return ($3_1 | 0) != (0 | 0) | 0;
        }
        label$9 : {
        if (HEAP32[(HEAP32[(($118() | 0) + 96 | 0) >> 2] | 0) >> 2] | 0) {
          break label$9
        }
        $5_1 = 1;
        if (!$0_1) {
          break label$2
        }
        HEAP32[$0_1 >> 2] = $3_1 & 57343 | 0;
        return 1 | 0;
        }
        $3_1 = $5_1 + -194 | 0;
        if ($3_1 >>> 0 > 50 >>> 0) {
        break label$3
        }
        $3_1 = HEAP32[(($3_1 << 2 | 0) + 69296 | 0) >> 2] | 0;
        $5_1 = $2_1 + -1 | 0;
        if (!$5_1) {
        break label$1
        }
        $1_1 = $1_1 + 1 | 0;
      }
      $6_1 = HEAPU8[$1_1 >> 0] | 0;
      $7_1 = $6_1 >>> 3 | 0;
      if (($7_1 + -16 | 0 | (($3_1 >> 26 | 0) + $7_1 | 0) | 0) >>> 0 > 7 >>> 0) {
        break label$3
      }
      label$10 : while (1) {
        $5_1 = $5_1 + -1 | 0;
        label$11 : {
        $3_1 = ($6_1 & 255 | 0) + -128 | 0 | ($3_1 << 6 | 0) | 0;
        if (($3_1 | 0) < (0 | 0)) {
          break label$11
        }
        HEAP32[$4_1 >> 2] = 0;
        label$12 : {
          if (!$0_1) {
          break label$12
          }
          HEAP32[$0_1 >> 2] = $3_1;
        }
        return $2_1 - $5_1 | 0 | 0;
        }
        if (!$5_1) {
        break label$1
        }
        $1_1 = $1_1 + 1 | 0;
        $6_1 = HEAPU8[$1_1 >> 0] | 0;
        if (($6_1 & 192 | 0 | 0) == (128 | 0)) {
        continue label$10
        }
        break label$10;
      };
      }
      HEAP32[$4_1 >> 2] = 0;
      HEAP32[($124() | 0) >> 2] = 25;
      $5_1 = -1;
    }
    return $5_1 | 0;
    }
    HEAP32[$4_1 >> 2] = $3_1;
    return -2 | 0;
  }
  
  function $464($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0, $2_1 = 0;
    $1_1 = $118() | 0;
    $2_1 = HEAP32[($1_1 + 96 | 0) >> 2] | 0;
    label$1 : {
    if ((HEAP32[($0_1 + 72 | 0) >> 2] | 0 | 0) > (0 | 0)) {
      break label$1
    }
    $461($0_1 | 0, 1 | 0) | 0;
    }
    HEAP32[($1_1 + 96 | 0) >> 2] = HEAP32[($0_1 + 136 | 0) >> 2] | 0;
    $0_1 = $465($0_1 | 0) | 0;
    HEAP32[($1_1 + 96 | 0) >> 2] = $2_1;
    return $0_1 | 0;
  }
  
  function $465($0_1) {
    $0_1 = $0_1 | 0;
    var $2_1 = 0, $1_1 = 0, $3_1 = 0, $4_1 = 0;
    $1_1 = global$0 - 32 | 0;
    global$0 = $1_1;
    label$1 : {
    label$2 : {
      label$3 : {
      $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
      $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
      if (($2_1 | 0) == ($3_1 | 0)) {
        break label$3
      }
      $2_1 = $462($1_1 + 28 | 0 | 0, $2_1 | 0, $3_1 - $2_1 | 0 | 0) | 0;
      if (($2_1 | 0) == (-1 | 0)) {
        break label$3
      }
      HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + ($2_1 >>> 0 > 1 >>> 0 ? $2_1 : 1) | 0;
      break label$2;
      }
      HEAP32[($1_1 + 16 | 0) >> 2] = 0;
      HEAP32[($1_1 + 20 | 0) >> 2] = 0;
      $2_1 = 0;
      label$4 : while (1) {
      $4_1 = $2_1;
      label$5 : {
        label$6 : {
        $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        if (($2_1 | 0) == (HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0)) {
          break label$6
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
        HEAP8[($1_1 + 15 | 0) >> 0] = HEAPU8[$2_1 >> 0] | 0;
        break label$5;
        }
        $2_1 = $454($0_1 | 0) | 0;
        HEAP8[($1_1 + 15 | 0) >> 0] = $2_1;
        if (($2_1 | 0) > (-1 | 0)) {
        break label$5
        }
        $2_1 = -1;
        if (!($4_1 & 1 | 0)) {
        break label$1
        }
        HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] | 0 | 32 | 0;
        HEAP32[($124() | 0) >> 2] = 25;
        break label$1;
      }
      $2_1 = 1;
      $3_1 = $463($1_1 + 28 | 0 | 0, $1_1 + 15 | 0 | 0, 1 | 0, $1_1 + 16 | 0 | 0) | 0;
      if (($3_1 | 0) == (-2 | 0)) {
        continue label$4
      }
      break label$4;
      };
      $2_1 = -1;
      if (($3_1 | 0) != (-1 | 0)) {
      break label$2
      }
      if (!($4_1 & 1 | 0)) {
      break label$1
      }
      HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] | 0 | 32 | 0;
      $453(HEAPU8[($1_1 + 15 | 0) >> 0] | 0 | 0, $0_1 | 0) | 0;
      break label$1;
    }
    $2_1 = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
    }
    global$0 = $1_1 + 32 | 0;
    return $2_1 | 0;
  }
  
  function $466($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0, $2_1 = 0;
    label$1 : {
    if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
      break label$1
    }
    return $464($0_1 | 0) | 0 | 0;
    }
    $1_1 = $153($0_1 | 0) | 0;
    $2_1 = $464($0_1 | 0) | 0;
    label$2 : {
    if (!$1_1) {
      break label$2
    }
    $154($0_1 | 0);
    }
    return $2_1 | 0;
  }
  
  function $467($0_1) {
    $0_1 = $0_1 | 0;
    return $466($0_1 | 0) | 0 | 0;
  }
  
  function $468($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0;
    $3_1 = 1;
    label$1 : {
    label$2 : {
      if (!$0_1) {
      break label$2
      }
      if ($1_1 >>> 0 <= 127 >>> 0) {
      break label$1
      }
      label$3 : {
      label$4 : {
        if (HEAP32[(HEAP32[(($118() | 0) + 96 | 0) >> 2] | 0) >> 2] | 0) {
        break label$4
        }
        if (($1_1 & -128 | 0 | 0) == (57216 | 0)) {
        break label$1
        }
        HEAP32[($124() | 0) >> 2] = 25;
        break label$3;
      }
      label$5 : {
        if ($1_1 >>> 0 > 2047 >>> 0) {
        break label$5
        }
        HEAP8[($0_1 + 1 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
        HEAP8[$0_1 >> 0] = $1_1 >>> 6 | 0 | 192 | 0;
        return 2 | 0;
      }
      label$6 : {
        label$7 : {
        if ($1_1 >>> 0 < 55296 >>> 0) {
          break label$7
        }
        if (($1_1 & -8192 | 0 | 0) != (57344 | 0)) {
          break label$6
        }
        }
        HEAP8[($0_1 + 2 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
        HEAP8[$0_1 >> 0] = $1_1 >>> 12 | 0 | 224 | 0;
        HEAP8[($0_1 + 1 | 0) >> 0] = ($1_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
        return 3 | 0;
      }
      label$8 : {
        if (($1_1 + -65536 | 0) >>> 0 > 1048575 >>> 0) {
        break label$8
        }
        HEAP8[($0_1 + 3 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
        HEAP8[$0_1 >> 0] = $1_1 >>> 18 | 0 | 240 | 0;
        HEAP8[($0_1 + 2 | 0) >> 0] = ($1_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
        HEAP8[($0_1 + 1 | 0) >> 0] = ($1_1 >>> 12 | 0) & 63 | 0 | 128 | 0;
        return 4 | 0;
      }
      HEAP32[($124() | 0) >> 2] = 25;
      }
      $3_1 = -1;
    }
    return $3_1 | 0;
    }
    HEAP8[$0_1 >> 0] = $1_1;
    return 1 | 0;
  }
  
  function $469($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $7_1 = 0, $6_1 = 0, $2_1 = 0, $3_1 = 0, $8_1 = 0, $5_1 = 0, $4_1 = 0;
    $2_1 = global$0 - 16 | 0;
    global$0 = $2_1;
    $3_1 = $118() | 0;
    $4_1 = HEAP32[($3_1 + 96 | 0) >> 2] | 0;
    label$1 : {
    label$2 : {
      if ((HEAP32[($1_1 + 76 | 0) >> 2] | 0 | 0) >= (0 | 0)) {
      break label$2
      }
      $5_1 = 1;
      break label$1;
    }
    $5_1 = !($153($1_1 | 0) | 0);
    }
    label$3 : {
    if ((HEAP32[($1_1 + 72 | 0) >> 2] | 0 | 0) > (0 | 0)) {
      break label$3
    }
    $461($1_1 | 0, 1 | 0) | 0;
    }
    HEAP32[($3_1 + 96 | 0) >> 2] = HEAP32[($1_1 + 136 | 0) >> 2] | 0;
    $6_1 = 0;
    label$4 : {
    if (HEAP32[($1_1 + 4 | 0) >> 2] | 0) {
      break label$4
    }
    $157($1_1 | 0) | 0;
    $6_1 = !(HEAP32[($1_1 + 4 | 0) >> 2] | 0);
    }
    $7_1 = -1;
    label$5 : {
    if (($0_1 | 0) == (-1 | 0)) {
      break label$5
    }
    if ($6_1) {
      break label$5
    }
    $6_1 = $468($2_1 + 12 | 0 | 0, $0_1 | 0, 0 | 0) | 0;
    if (($6_1 | 0) < (0 | 0)) {
      break label$5
    }
    $8_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    if ($8_1 >>> 0 < (((HEAP32[($1_1 + 44 | 0) >> 2] | 0) + $6_1 | 0) + -8 | 0) >>> 0) {
      break label$5
    }
    label$6 : {
      label$7 : {
      if ($0_1 >>> 0 > 127 >>> 0) {
        break label$7
      }
      $7_1 = $8_1 + -1 | 0;
      HEAP32[($1_1 + 4 | 0) >> 2] = $7_1;
      HEAP8[$7_1 >> 0] = $0_1;
      break label$6;
      }
      $7_1 = $8_1 - $6_1 | 0;
      HEAP32[($1_1 + 4 | 0) >> 2] = $7_1;
      $120($7_1 | 0, $2_1 + 12 | 0 | 0, $6_1 | 0) | 0;
    }
    HEAP32[$1_1 >> 2] = (HEAP32[$1_1 >> 2] | 0) & -17 | 0;
    $7_1 = $0_1;
    }
    label$8 : {
    if ($5_1) {
      break label$8
    }
    $154($1_1 | 0);
    }
    HEAP32[($3_1 + 96 | 0) >> 2] = $4_1;
    global$0 = $2_1 + 16 | 0;
    return $7_1 | 0;
  }
  
  function $470($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $3_1 = 0, $2_1 = 0, $4_1 = 0;
    $2_1 = global$0 - 16 | 0;
    global$0 = $2_1;
    HEAP8[($2_1 + 15 | 0) >> 0] = $1_1;
    label$1 : {
    label$2 : {
      $3_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
      if ($3_1) {
      break label$2
      }
      label$3 : {
      if (!($159($0_1 | 0) | 0)) {
        break label$3
      }
      $3_1 = -1;
      break label$1;
      }
      $3_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
    }
    label$4 : {
      $4_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
      if (($4_1 | 0) == ($3_1 | 0)) {
      break label$4
      }
      $3_1 = $1_1 & 255 | 0;
      if ((HEAP32[($0_1 + 80 | 0) >> 2] | 0 | 0) == ($3_1 | 0)) {
      break label$4
      }
      HEAP32[($0_1 + 20 | 0) >> 2] = $4_1 + 1 | 0;
      HEAP8[$4_1 >> 0] = $1_1;
      break label$1;
    }
    label$5 : {
      if ((FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0]($0_1, $2_1 + 15 | 0, 1) | 0 | 0) == (1 | 0)) {
      break label$5
      }
      $3_1 = -1;
      break label$1;
    }
    $3_1 = HEAPU8[($2_1 + 15 | 0) >> 0] | 0;
    }
    global$0 = $2_1 + 16 | 0;
    return $3_1 | 0;
  }
  
  function $471($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    label$1 : {
    if ($0_1) {
      break label$1
    }
    return 0 | 0;
    }
    return $468($0_1 | 0, $1_1 | 0, 0 | 0) | 0 | 0;
  }
  
  function $472($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $5_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0;
    $2_1 = global$0 - 16 | 0;
    global$0 = $2_1;
    $3_1 = $118() | 0;
    $4_1 = HEAP32[($3_1 + 96 | 0) >> 2] | 0;
    label$1 : {
    if ((HEAP32[($1_1 + 72 | 0) >> 2] | 0 | 0) > (0 | 0)) {
      break label$1
    }
    $461($1_1 | 0, 1 | 0) | 0;
    }
    HEAP32[($3_1 + 96 | 0) >> 2] = HEAP32[($1_1 + 136 | 0) >> 2] | 0;
    label$2 : {
    label$3 : {
      label$4 : {
      label$5 : {
        if ($0_1 >>> 0 > 127 >>> 0) {
        break label$5
        }
        label$6 : {
        if (($0_1 | 0) == (HEAP32[($1_1 + 80 | 0) >> 2] | 0 | 0)) {
          break label$6
        }
        $5_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
        if (($5_1 | 0) == (HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0)) {
          break label$6
        }
        HEAP32[($1_1 + 20 | 0) >> 2] = $5_1 + 1 | 0;
        HEAP8[$5_1 >> 0] = $0_1;
        break label$2;
        }
        $0_1 = $470($1_1 | 0, $0_1 | 0) | 0;
        break label$4;
      }
      label$7 : {
        $5_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
        if (($5_1 + 4 | 0) >>> 0 >= (HEAP32[($1_1 + 16 | 0) >> 2] | 0) >>> 0) {
        break label$7
        }
        $5_1 = $471($5_1 | 0, $0_1 | 0) | 0;
        if (($5_1 | 0) < (0 | 0)) {
        break label$3
        }
        HEAP32[($1_1 + 20 | 0) >> 2] = (HEAP32[($1_1 + 20 | 0) >> 2] | 0) + $5_1 | 0;
        break label$4;
      }
      $5_1 = $471($2_1 + 12 | 0 | 0, $0_1 | 0) | 0;
      if (($5_1 | 0) < (0 | 0)) {
        break label$3
      }
      if (($160($2_1 + 12 | 0 | 0, $5_1 | 0, $1_1 | 0) | 0) >>> 0 < $5_1 >>> 0) {
        break label$3
      }
      }
      if (($0_1 | 0) != (-1 | 0)) {
      break label$2
      }
    }
    HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] | 0 | 32 | 0;
    $0_1 = -1;
    }
    HEAP32[($3_1 + 96 | 0) >> 2] = $4_1;
    global$0 = $2_1 + 16 | 0;
    return $0_1 | 0;
  }
  
  function $473($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0;
    label$1 : {
    if ((HEAP32[($1_1 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
      break label$1
    }
    return $472($0_1 | 0, $1_1 | 0) | 0 | 0;
    }
    $2_1 = $153($1_1 | 0) | 0;
    $0_1 = $472($0_1 | 0, $1_1 | 0) | 0;
    label$2 : {
    if (!$2_1) {
      break label$2
    }
    $154($1_1 | 0);
    }
    return $0_1 | 0;
  }
  
  function $474() {
    $475(88348 | 0) | 0;
  }
  
  function $475($0_1) {
    $0_1 = $0_1 | 0;
    label$1 : {
    if (HEAPU8[(0 + 88705 | 0) >> 0] | 0) {
      break label$1
    }
    $476(88704 | 0) | 0;
    $452(69 | 0, 0 | 0, 65536 | 0) | 0;
    HEAP8[(0 + 88705 | 0) >> 0] = 1;
    }
    return $0_1 | 0;
  }
  
  function $476($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0, $2_1 = 0, $3_1 = 0;
    $1_1 = HEAP32[(0 + 69164 | 0) >> 2] | 0;
    $477(88352 | 0, $1_1 | 0, 88408 | 0) | 0;
    $478(87668 | 0, 88352 | 0) | 0;
    $2_1 = HEAP32[(0 + 69168 | 0) >> 2] | 0;
    $479(88416 | 0, $2_1 | 0, 88464 | 0) | 0;
    $480(87844 | 0, 88416 | 0) | 0;
    $3_1 = HEAP32[(0 + 69172 | 0) >> 2] | 0;
    $479(88472 | 0, $3_1 | 0, 88520 | 0) | 0;
    $480(88012 | 0, 88472 | 0) | 0;
    $480(88180 | 0, $204((HEAP32[((HEAP32[(0 + 88012 | 0) >> 2] | 0) + -12 | 0) >> 2] | 0) + 88012 | 0 | 0) | 0 | 0) | 0;
    $481((HEAP32[((HEAP32[(0 + 87668 | 0) >> 2] | 0) + -12 | 0) >> 2] | 0) + 87668 | 0 | 0, 87844 | 0) | 0;
    $482((HEAP32[((HEAP32[(0 + 88012 | 0) >> 2] | 0) + -12 | 0) >> 2] | 0) + 88012 | 0 | 0) | 0;
    $481((HEAP32[((HEAP32[(0 + 88012 | 0) >> 2] | 0) + -12 | 0) >> 2] | 0) + 88012 | 0 | 0, 87844 | 0) | 0;
    $483(88528 | 0, $1_1 | 0, 88584 | 0) | 0;
    $484(87756 | 0, 88528 | 0) | 0;
    $485(88592 | 0, $2_1 | 0, 88640 | 0) | 0;
    $486(87928 | 0, 88592 | 0) | 0;
    $485(88648 | 0, $3_1 | 0, 88696 | 0) | 0;
    $486(88096 | 0, 88648 | 0) | 0;
    $486(88264 | 0, $267((HEAP32[((HEAP32[(0 + 88096 | 0) >> 2] | 0) + -12 | 0) >> 2] | 0) + 88096 | 0 | 0) | 0 | 0) | 0;
    $487((HEAP32[((HEAP32[(0 + 87756 | 0) >> 2] | 0) + -12 | 0) >> 2] | 0) + 87756 | 0 | 0, 87928 | 0) | 0;
    $482((HEAP32[((HEAP32[(0 + 88096 | 0) >> 2] | 0) + -12 | 0) >> 2] | 0) + 88096 | 0 | 0) | 0;
    $487((HEAP32[((HEAP32[(0 + 88096 | 0) >> 2] | 0) + -12 | 0) >> 2] | 0) + 88096 | 0 | 0, 87928 | 0) | 0;
    return $0_1 | 0;
  }
  
  function $477($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    $0_1 = $166($0_1 | 0) | 0;
    HEAP32[($0_1 + 40 | 0) >> 2] = $2_1;
    HEAP32[($0_1 + 32 | 0) >> 2] = $1_1;
    HEAP32[$0_1 >> 2] = 69508;
    $2_1 = $182() | 0;
    HEAP8[($0_1 + 52 | 0) >> 0] = 0;
    HEAP32[($0_1 + 48 | 0) >> 2] = $2_1;
    $291($3_1 + 12 | 0 | 0, $0_1 | 0);
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($0_1, $3_1 + 12 | 0);
    $668($3_1 + 12 | 0 | 0) | 0;
    global$0 = $3_1 + 16 | 0;
    return $0_1 | 0;
  }
  
  function $478($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0;
    $2_1 = $488($0_1 + 8 | 0 | 0) | 0;
    HEAP32[$0_1 >> 2] = 68312 + 12 | 0;
    HEAP32[$2_1 >> 2] = 68312 + 32 | 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = 0;
    $489($0_1 + (HEAP32[(0 + 68312 | 0) >> 2] | 0) | 0 | 0, $1_1 | 0);
    return $0_1 | 0;
  }
  
  function $479($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    $0_1 = $166($0_1 | 0) | 0;
    HEAP32[($0_1 + 32 | 0) >> 2] = $1_1;
    HEAP32[$0_1 >> 2] = 69608;
    $291($3_1 + 12 | 0 | 0, $0_1 | 0);
    $1_1 = $316($3_1 + 12 | 0 | 0) | 0;
    $668($3_1 + 12 | 0 | 0) | 0;
    HEAP32[($0_1 + 40 | 0) >> 2] = $2_1;
    HEAP32[($0_1 + 36 | 0) >> 2] = $1_1;
    HEAP8[($0_1 + 44 | 0) >> 0] = $317($1_1 | 0) | 0;
    global$0 = $3_1 + 16 | 0;
    return $0_1 | 0;
  }
  
  function $480($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0;
    $2_1 = $488($0_1 + 4 | 0 | 0) | 0;
    HEAP32[$0_1 >> 2] = 68360 + 12 | 0;
    HEAP32[$2_1 >> 2] = 68360 + 32 | 0;
    $489($0_1 + (HEAP32[(0 + 68360 | 0) >> 2] | 0) | 0 | 0, $1_1 | 0);
    return $0_1 | 0;
  }
  
  function $481($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0;
    $2_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
    HEAP32[($0_1 + 72 | 0) >> 2] = $1_1;
    return $2_1 | 0;
  }
  
  function $482($0_1) {
    $0_1 = $0_1 | 0;
    $490($0_1 | 0, 8192 | 0) | 0;
    return $0_1 | 0;
  }
  
  function $483($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    $0_1 = $234($0_1 | 0) | 0;
    HEAP32[($0_1 + 40 | 0) >> 2] = $2_1;
    HEAP32[($0_1 + 32 | 0) >> 2] = $1_1;
    HEAP32[$0_1 >> 2] = 69712;
    $2_1 = $247() | 0;
    HEAP8[($0_1 + 52 | 0) >> 0] = 0;
    HEAP32[($0_1 + 48 | 0) >> 2] = $2_1;
    $491($3_1 + 12 | 0 | 0, $0_1 | 0);
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($0_1, $3_1 + 12 | 0);
    $668($3_1 + 12 | 0 | 0) | 0;
    global$0 = $3_1 + 16 | 0;
    return $0_1 | 0;
  }
  
  function $484($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0;
    $2_1 = $492($0_1 + 8 | 0 | 0) | 0;
    HEAP32[$0_1 >> 2] = 68472 + 12 | 0;
    HEAP32[$2_1 >> 2] = 68472 + 32 | 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = 0;
    $493($0_1 + (HEAP32[(0 + 68472 | 0) >> 2] | 0) | 0 | 0, $1_1 | 0);
    return $0_1 | 0;
  }
  
  function $485($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    $0_1 = $234($0_1 | 0) | 0;
    HEAP32[($0_1 + 32 | 0) >> 2] = $1_1;
    HEAP32[$0_1 >> 2] = 69812;
    $491($3_1 + 12 | 0 | 0, $0_1 | 0);
    $1_1 = $494($3_1 + 12 | 0 | 0) | 0;
    $668($3_1 + 12 | 0 | 0) | 0;
    HEAP32[($0_1 + 40 | 0) >> 2] = $2_1;
    HEAP32[($0_1 + 36 | 0) >> 2] = $1_1;
    HEAP8[($0_1 + 44 | 0) >> 0] = $495($1_1 | 0) | 0;
    global$0 = $3_1 + 16 | 0;
    return $0_1 | 0;
  }
  
  function $486($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0;
    $2_1 = $492($0_1 + 4 | 0 | 0) | 0;
    HEAP32[$0_1 >> 2] = 68520 + 12 | 0;
    HEAP32[$2_1 >> 2] = 68520 + 32 | 0;
    $493($0_1 + (HEAP32[(0 + 68520 | 0) >> 2] | 0) | 0 | 0, $1_1 | 0);
    return $0_1 | 0;
  }
  
  function $487($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0;
    $2_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
    HEAP32[($0_1 + 72 | 0) >> 2] = $1_1;
    return $2_1 | 0;
  }
  
  function $488($0_1) {
    $0_1 = $0_1 | 0;
    $0_1 = $509($0_1 | 0) | 0;
    HEAP32[$0_1 >> 2] = 68568 + 8 | 0;
    return $0_1 | 0;
  }
  
  function $489($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $446($0_1 | 0, $1_1 | 0);
    HEAP32[($0_1 + 72 | 0) >> 2] = 0;
    HEAP32[($0_1 + 76 | 0) >> 2] = $182() | 0;
  }
  
  function $490($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0;
    $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 | $1_1 | 0;
    return $2_1 | 0;
  }
  
  function $491($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1275($0_1 | 0, $1_1 + 4 | 0 | 0) | 0;
  }
  
  function $492($0_1) {
    $0_1 = $0_1 | 0;
    $0_1 = $509($0_1 | 0) | 0;
    HEAP32[$0_1 >> 2] = 68844 + 8 | 0;
    return $0_1 | 0;
  }
  
  function $493($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $446($0_1 | 0, $1_1 | 0);
    HEAP32[($0_1 + 72 | 0) >> 2] = 0;
    HEAP32[($0_1 + 76 | 0) >> 2] = $247() | 0;
  }
  
  function $494($0_1) {
    $0_1 = $0_1 | 0;
    return $673($0_1 | 0, 89328 | 0) | 0 | 0;
  }
  
  function $495($0_1) {
    $0_1 = $0_1 | 0;
    return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
  }
  
  function $496($0_1) {
    $0_1 = $0_1 | 0;
    $195(87844 | 0) | 0;
    $195(88180 | 0) | 0;
    $260(87928 | 0) | 0;
    $260(88264 | 0) | 0;
    return $0_1 | 0;
  }
  
  function $497($0_1) {
    $0_1 = $0_1 | 0;
    $496(88704 | 0) | 0;
  }
  
  function $498($0_1) {
    $0_1 = $0_1 | 0;
    $1747($164($0_1 | 0) | 0 | 0, 56 | 0);
  }
  
  function $499($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1_1 = $316($1_1 | 0) | 0;
    HEAP32[($0_1 + 36 | 0) >> 2] = $1_1;
    HEAP32[($0_1 + 44 | 0) >> 2] = $323($1_1 | 0) | 0;
    HEAP8[($0_1 + 53 | 0) >> 0] = $317(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0) | 0;
    label$1 : {
    if ((HEAP32[($0_1 + 44 | 0) >> 2] | 0 | 0) < (9 | 0)) {
      break label$1
    }
    $1756(65717 | 0);
    wasm2js_trap();
    }
  }
  
  function $500($0_1) {
    $0_1 = $0_1 | 0;
    return $501($0_1 | 0, 0 | 0) | 0 | 0;
  }
  
  function $501($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0, $3_1 = 0, $5_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, $6_1 = 0, i64toi32_i32$1 = 0, $7_1 = 0, $7$hi = 0;
    $2_1 = global$0 - 32 | 0;
    global$0 = $2_1;
    label$1 : {
    label$2 : {
      if ((HEAPU8[($0_1 + 52 | 0) >> 0] | 0 | 0) != (1 | 0)) {
      break label$2
      }
      $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
      if (!$1_1) {
      break label$1
      }
      $4_1 = $182() | 0;
      HEAP8[($0_1 + 52 | 0) >> 0] = 0;
      HEAP32[($0_1 + 48 | 0) >> 2] = $4_1;
      break label$1;
    }
    label$3 : {
      label$4 : {
      if ((HEAPU8[($0_1 + 53 | 0) >> 0] | 0 | 0) != (1 | 0)) {
        break label$4
      }
      if (!($505(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0, $2_1 + 24 | 0 | 0) | 0)) {
        break label$3
      }
      $3_1 = $184(HEAP8[($2_1 + 24 | 0) >> 0] | 0 | 0) | 0;
      label$5 : {
        label$6 : {
        if ($1_1) {
          break label$6
        }
        if (!($504($3_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0, HEAP8[($2_1 + 24 | 0) >> 0] | 0 | 0) | 0)) {
          break label$3
        }
        break label$5;
        }
        HEAP32[($0_1 + 48 | 0) >> 2] = $3_1;
      }
      $3_1 = $184(HEAP8[($2_1 + 24 | 0) >> 0] | 0 | 0) | 0;
      break label$1;
      }
      HEAP32[($2_1 + 24 | 0) >> 2] = 1;
      $3_1 = 0;
      $5_1 = HEAP32[($506($2_1 + 24 | 0 | 0, $0_1 + 44 | 0 | 0) | 0) >> 2] | 0;
      $6_1 = ($5_1 | 0) > (0 | 0) ? $5_1 : 0;
      label$7 : {
      label$8 : while (1) {
        if (($3_1 | 0) == ($6_1 | 0)) {
        break label$7
        }
        $4_1 = $455(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0;
        if (($4_1 | 0) == (-1 | 0)) {
        break label$3
        }
        HEAP8[(($2_1 + 24 | 0) + $3_1 | 0) >> 0] = $4_1;
        $3_1 = $3_1 + 1 | 0;
        continue label$8;
      };
      }
      $6_1 = ($2_1 + 23 | 0) + 1 | 0;
      label$9 : {
      label$10 : {
        label$11 : while (1) {
        $3_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[$3_1 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
        $7_1 = i64toi32_i32$0;
        $7$hi = i64toi32_i32$1;
        label$12 : {
          $4_1 = ($2_1 + 24 | 0) + $5_1 | 0;
          switch (($319(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, $3_1 | 0, $2_1 + 24 | 0 | 0, $4_1 | 0, $2_1 + 16 | 0 | 0, $2_1 + 23 | 0 | 0, $6_1 | 0, $2_1 + 12 | 0 | 0) | 0) + -1 | 0 | 0) {
          case 2:
          break label$10;
          case 0:
          break label$12;
          case 1:
          break label$3;
          default:
          break label$9;
          };
        }
        i64toi32_i32$1 = $7$hi;
        i64toi32_i32$0 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
        HEAP32[i64toi32_i32$0 >> 2] = $7_1;
        HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
        if (($5_1 | 0) == (8 | 0)) {
          break label$3
        }
        $3_1 = $455(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0;
        if (($3_1 | 0) == (-1 | 0)) {
          break label$3
        }
        HEAP8[$4_1 >> 0] = $3_1;
        $5_1 = $5_1 + 1 | 0;
        continue label$11;
        };
      }
      HEAP8[($2_1 + 23 | 0) >> 0] = HEAPU8[($2_1 + 24 | 0) >> 0] | 0;
      }
      label$13 : {
      label$14 : {
        if ($1_1) {
        break label$14
        }
        label$15 : while (1) {
        if (($5_1 | 0) < (1 | 0)) {
          break label$13
        }
        $5_1 = $5_1 + -1 | 0;
        if (($453($184(HEAP8[(($2_1 + 24 | 0) + $5_1 | 0) >> 0] | 0 | 0) | 0 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) == (-1 | 0)) {
          break label$3
        }
        continue label$15;
        };
      }
      HEAP32[($0_1 + 48 | 0) >> 2] = $184(HEAP8[($2_1 + 23 | 0) >> 0] | 0 | 0) | 0;
      }
      $3_1 = $184(HEAP8[($2_1 + 23 | 0) >> 0] | 0 | 0) | 0;
      break label$1;
    }
    $3_1 = $182() | 0;
    }
    global$0 = $2_1 + 32 | 0;
    return $3_1 | 0;
  }
  
  function $502($0_1) {
    $0_1 = $0_1 | 0;
    return $501($0_1 | 0, 1 | 0) | 0 | 0;
  }
  
  function $503($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $3_1 = 0, $2_1 = 0;
    $2_1 = global$0 - 32 | 0;
    global$0 = $2_1;
    label$1 : {
    label$2 : {
      if (!($211($1_1 | 0, $182() | 0 | 0) | 0)) {
      break label$2
      }
      if (HEAPU8[($0_1 + 52 | 0) >> 0] | 0) {
      break label$1
      }
      $1_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
      HEAP8[($0_1 + 52 | 0) >> 0] = ($211($1_1 | 0, $182() | 0 | 0) | 0) ^ 1 | 0;
      break label$1;
    }
    $3_1 = HEAPU8[($0_1 + 52 | 0) >> 0] | 0;
    label$3 : {
      label$4 : {
      label$5 : {
        label$6 : {
        if (HEAPU8[($0_1 + 53 | 0) >> 0] | 0) {
          break label$6
        }
        if ($3_1 & 1 | 0) {
          break label$5
        }
        break label$3;
        }
        label$7 : {
        $3_1 = $3_1 & 1 | 0;
        if (!$3_1) {
          break label$7
        }
        $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
        if ($504($3_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0, $178($3_1 | 0) | 0 | 0) | 0) {
          break label$3
        }
        break label$4;
        }
        if (!$3_1) {
        break label$3
        }
      }
      HEAP8[($2_1 + 19 | 0) >> 0] = $178(HEAP32[($0_1 + 48 | 0) >> 2] | 0 | 0) | 0;
      label$8 : {
        switch (($322(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0, $2_1 + 19 | 0 | 0, ($2_1 + 19 | 0) + 1 | 0 | 0, $2_1 + 12 | 0 | 0, $2_1 + 24 | 0 | 0, $2_1 + 32 | 0 | 0, $2_1 + 20 | 0 | 0) | 0) + -1 | 0 | 0) {
        case 2:
        $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
        HEAP32[($2_1 + 20 | 0) >> 2] = ($2_1 + 24 | 0) + 1 | 0;
        HEAP8[($2_1 + 24 | 0) >> 0] = $3_1;
        break;
        case 0:
        case 1:
        break label$4;
        default:
        break label$8;
        };
      }
      label$10 : while (1) {
        $3_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
        if ($3_1 >>> 0 <= ($2_1 + 24 | 0) >>> 0) {
        break label$3
        }
        $3_1 = $3_1 + -1 | 0;
        HEAP32[($2_1 + 20 | 0) >> 2] = $3_1;
        if (($453(HEAP8[$3_1 >> 0] | 0 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) != (-1 | 0)) {
        continue label$10
        }
        break label$10;
      };
      }
      $1_1 = $182() | 0;
      break label$1;
    }
    HEAP8[($0_1 + 52 | 0) >> 0] = 1;
    HEAP32[($0_1 + 48 | 0) >> 2] = $1_1;
    }
    global$0 = $2_1 + 32 | 0;
    return $1_1 | 0;
  }
  
  function $504($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    return ($453($0_1 | 0, $1_1 | 0) | 0 | 0) != (-1 | 0) | 0;
  }
  
  function $505($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    label$1 : {
    $0_1 = $455($0_1 | 0) | 0;
    if (($0_1 | 0) == (-1 | 0)) {
      break label$1
    }
    HEAP8[$1_1 >> 0] = $0_1;
    }
    return ($0_1 | 0) != (-1 | 0) | 0;
  }
  
  function $506($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $507($0_1 | 0, $1_1 | 0) | 0 | 0;
  }
  
  function $507($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0, $3_1 = 0;
    $2_1 = global$0 - 16 | 0;
    global$0 = $2_1;
    $3_1 = $508($2_1 + 15 | 0 | 0, $0_1 | 0, $1_1 | 0) | 0;
    global$0 = $2_1 + 16 | 0;
    return ($3_1 ? $1_1 : $0_1) | 0;
  }
  
  function $508($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    return (HEAP32[$1_1 >> 2] | 0 | 0) < (HEAP32[$2_1 >> 2] | 0 | 0) | 0;
  }
  
  function $509($0_1) {
    $0_1 = $0_1 | 0;
    HEAP32[$0_1 >> 2] = 69120 + 8 | 0;
    return $0_1 | 0;
  }
  
  function $510($0_1) {
    $0_1 = $0_1 | 0;
    $1747($164($0_1 | 0) | 0 | 0, 48 | 0);
  }
  
  function $511($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1) | 0;
    $1_1 = $316($1_1 | 0) | 0;
    HEAP32[($0_1 + 36 | 0) >> 2] = $1_1;
    HEAP8[($0_1 + 44 | 0) >> 0] = $317($1_1 | 0) | 0;
  }
  
  function $512($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0, $4_1 = 0, $5_1 = 0, $2_1 = 0, $3_1 = 0;
    $1_1 = global$0 - 16 | 0;
    global$0 = $1_1;
    $2_1 = $1_1 + 16 | 0;
    label$1 : {
    label$2 : while (1) {
      $3_1 = $324(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0, $1_1 + 8 | 0 | 0, $2_1 | 0, $1_1 + 4 | 0 | 0) | 0;
      $4_1 = -1;
      $5_1 = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) - ($1_1 + 8 | 0) | 0;
      if (($161($1_1 + 8 | 0 | 0, 1 | 0, $5_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) != ($5_1 | 0)) {
      break label$1
      }
      label$3 : {
      switch ($3_1 + -1 | 0 | 0) {
      case 1:
        break label$1;
      case 0:
        continue label$2;
      default:
        break label$3;
      };
      }
      break label$2;
    };
    $4_1 = $155(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 ? -1 : 0;
    }
    global$0 = $1_1 + 16 | 0;
    return $4_1 | 0;
  }
  
  function $513($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
    label$1 : {
    label$2 : {
      if (HEAPU8[($0_1 + 44 | 0) >> 0] | 0) {
      break label$2
      }
      $3_1 = 0;
      $2_1 = ($2_1 | 0) > (0 | 0) ? $2_1 : 0;
      label$3 : while (1) {
      if (($3_1 | 0) == ($2_1 | 0)) {
        break label$1
      }
      label$4 : {
        if (((((wasm2js_i32$1 = $0_1, wasm2js_i32$2 = $184(HEAP8[$1_1 >> 0] | 0 | 0) | 0), wasm2js_i32$0 = HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0 | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) | 0) != ($182() | 0 | 0)) {
        break label$4
        }
        return $3_1 | 0;
      }
      $1_1 = $1_1 + 1 | 0;
      $3_1 = $3_1 + 1 | 0;
      continue label$3;
      };
    }
    $2_1 = $161($1_1 | 0, 1 | 0, $2_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0;
    }
    return $2_1 | 0;
  }
  
  function $514($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0, $6_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
    $2_1 = global$0 - 32 | 0;
    global$0 = $2_1;
    label$1 : {
    label$2 : {
      label$3 : {
      if ($211($1_1 | 0, $182() | 0 | 0) | 0) {
        break label$3
      }
      $3_1 = $178($1_1 | 0) | 0;
      HEAP8[($2_1 + 23 | 0) >> 0] = $3_1;
      label$4 : {
        if ((HEAPU8[($0_1 + 44 | 0) >> 0] | 0 | 0) != (1 | 0)) {
        break label$4
        }
        if (!($515($3_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0)) {
        break label$2
        }
        break label$3;
      }
      HEAP32[($2_1 + 16 | 0) >> 2] = $2_1 + 24 | 0;
      $4_1 = $2_1 + 32 | 0;
      $5_1 = ($2_1 + 23 | 0) + 1 | 0;
      $6_1 = $2_1 + 23 | 0;
      label$5 : while (1) {
        $3_1 = $322(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0, $6_1 | 0, $5_1 | 0, $2_1 + 12 | 0 | 0, $2_1 + 24 | 0 | 0, $4_1 | 0, $2_1 + 16 | 0 | 0) | 0;
        if ((HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0) == ($6_1 | 0)) {
        break label$2
        }
        label$6 : {
        if (($3_1 | 0) != (3 | 0)) {
          break label$6
        }
        if (($161($6_1 | 0, 1 | 0, 1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) == (1 | 0)) {
          break label$3
        }
        break label$2;
        }
        if ($3_1 >>> 0 > 1 >>> 0) {
        break label$2
        }
        $6_1 = (HEAP32[($2_1 + 16 | 0) >> 2] | 0) - ($2_1 + 24 | 0) | 0;
        if (($161($2_1 + 24 | 0 | 0, 1 | 0, $6_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) != ($6_1 | 0)) {
        break label$2
        }
        $6_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
        if (($3_1 | 0) == (1 | 0)) {
        continue label$5
        }
        break label$5;
      };
      }
      $0_1 = $312($1_1 | 0) | 0;
      break label$1;
    }
    $0_1 = $182() | 0;
    }
    global$0 = $2_1 + 32 | 0;
    return $0_1 | 0;
  }
  
  function $515($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0;
    $2_1 = global$0 - 16 | 0;
    global$0 = $2_1;
    HEAP8[($2_1 + 15 | 0) >> 0] = $0_1;
    $0_1 = $161($2_1 + 15 | 0 | 0, 1 | 0, 1 | 0, $1_1 | 0) | 0;
    global$0 = $2_1 + 16 | 0;
    return ($0_1 | 0) == (1 | 0) | 0;
  }
  
  function $516($0_1) {
    $0_1 = $0_1 | 0;
    $1747($232($0_1 | 0) | 0 | 0, 56 | 0);
  }
  
  function $517($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1_1 = $494($1_1 | 0) | 0;
    HEAP32[($0_1 + 36 | 0) >> 2] = $1_1;
    HEAP32[($0_1 + 44 | 0) >> 2] = $518($1_1 | 0) | 0;
    HEAP8[($0_1 + 53 | 0) >> 0] = $495(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0) | 0;
    label$1 : {
    if ((HEAP32[($0_1 + 44 | 0) >> 2] | 0 | 0) < (9 | 0)) {
      break label$1
    }
    $1756(65717 | 0);
    wasm2js_trap();
    }
  }
  
  function $518($0_1) {
    $0_1 = $0_1 | 0;
    return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
  }
  
  function $519($0_1) {
    $0_1 = $0_1 | 0;
    return $520($0_1 | 0, 0 | 0) | 0 | 0;
  }
  
  function $520($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0, $3_1 = 0, $5_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, $6_1 = 0, i64toi32_i32$1 = 0, $7_1 = 0, $7$hi = 0;
    $2_1 = global$0 - 32 | 0;
    global$0 = $2_1;
    label$1 : {
    label$2 : {
      if ((HEAPU8[($0_1 + 52 | 0) >> 0] | 0 | 0) != (1 | 0)) {
      break label$2
      }
      $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
      if (!$1_1) {
      break label$1
      }
      $4_1 = $247() | 0;
      HEAP8[($0_1 + 52 | 0) >> 0] = 0;
      HEAP32[($0_1 + 48 | 0) >> 2] = $4_1;
      break label$1;
    }
    label$3 : {
      label$4 : {
      if ((HEAPU8[($0_1 + 53 | 0) >> 0] | 0 | 0) != (1 | 0)) {
        break label$4
      }
      if (!($525(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0, $2_1 + 24 | 0 | 0) | 0)) {
        break label$3
      }
      $3_1 = $249(HEAP32[($2_1 + 24 | 0) >> 2] | 0 | 0) | 0;
      label$5 : {
        label$6 : {
        if ($1_1) {
          break label$6
        }
        if (!($523($3_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 24 | 0) >> 2] | 0 | 0) | 0)) {
          break label$3
        }
        break label$5;
        }
        HEAP32[($0_1 + 48 | 0) >> 2] = $3_1;
      }
      $3_1 = $249(HEAP32[($2_1 + 24 | 0) >> 2] | 0 | 0) | 0;
      break label$1;
      }
      HEAP32[($2_1 + 24 | 0) >> 2] = 1;
      $3_1 = 0;
      $5_1 = HEAP32[($506($2_1 + 24 | 0 | 0, $0_1 + 44 | 0 | 0) | 0) >> 2] | 0;
      $6_1 = ($5_1 | 0) > (0 | 0) ? $5_1 : 0;
      label$7 : {
      label$8 : while (1) {
        if (($3_1 | 0) == ($6_1 | 0)) {
        break label$7
        }
        $4_1 = $455(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0;
        if (($4_1 | 0) == (-1 | 0)) {
        break label$3
        }
        HEAP8[(($2_1 + 24 | 0) + $3_1 | 0) >> 0] = $4_1;
        $3_1 = $3_1 + 1 | 0;
        continue label$8;
      };
      }
      $6_1 = $2_1 + 24 | 0;
      label$9 : {
      label$10 : {
        label$11 : while (1) {
        $3_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[$3_1 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
        $7_1 = i64toi32_i32$0;
        $7$hi = i64toi32_i32$1;
        label$12 : {
          $4_1 = ($2_1 + 24 | 0) + $5_1 | 0;
          switch (($526(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, $3_1 | 0, $2_1 + 24 | 0 | 0, $4_1 | 0, $2_1 + 16 | 0 | 0, $2_1 + 20 | 0 | 0, $6_1 | 0, $2_1 + 12 | 0 | 0) | 0) + -1 | 0 | 0) {
          case 2:
          break label$10;
          case 0:
          break label$12;
          case 1:
          break label$3;
          default:
          break label$9;
          };
        }
        i64toi32_i32$1 = $7$hi;
        i64toi32_i32$0 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
        HEAP32[i64toi32_i32$0 >> 2] = $7_1;
        HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
        if (($5_1 | 0) == (8 | 0)) {
          break label$3
        }
        $3_1 = $455(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0;
        if (($3_1 | 0) == (-1 | 0)) {
          break label$3
        }
        HEAP8[$4_1 >> 0] = $3_1;
        $5_1 = $5_1 + 1 | 0;
        continue label$11;
        };
      }
      HEAP32[($2_1 + 20 | 0) >> 2] = HEAP8[($2_1 + 24 | 0) >> 0] | 0;
      }
      label$13 : {
      label$14 : {
        if ($1_1) {
        break label$14
        }
        label$15 : while (1) {
        if (($5_1 | 0) < (1 | 0)) {
          break label$13
        }
        $5_1 = $5_1 + -1 | 0;
        if (($453($249(HEAP8[(($2_1 + 24 | 0) + $5_1 | 0) >> 0] | 0 | 0) | 0 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) == (-1 | 0)) {
          break label$3
        }
        continue label$15;
        };
      }
      HEAP32[($0_1 + 48 | 0) >> 2] = $249(HEAP32[($2_1 + 20 | 0) >> 2] | 0 | 0) | 0;
      }
      $3_1 = $249(HEAP32[($2_1 + 20 | 0) >> 2] | 0 | 0) | 0;
      break label$1;
    }
    $3_1 = $247() | 0;
    }
    global$0 = $2_1 + 32 | 0;
    return $3_1 | 0;
  }
  
  function $521($0_1) {
    $0_1 = $0_1 | 0;
    return $520($0_1 | 0, 1 | 0) | 0 | 0;
  }
  
  function $522($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $3_1 = 0, $2_1 = 0;
    $2_1 = global$0 - 32 | 0;
    global$0 = $2_1;
    label$1 : {
    label$2 : {
      if (!($273($1_1 | 0, $247() | 0 | 0) | 0)) {
      break label$2
      }
      if (HEAPU8[($0_1 + 52 | 0) >> 0] | 0) {
      break label$1
      }
      $1_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
      HEAP8[($0_1 + 52 | 0) >> 0] = ($273($1_1 | 0, $247() | 0 | 0) | 0) ^ 1 | 0;
      break label$1;
    }
    $3_1 = HEAPU8[($0_1 + 52 | 0) >> 0] | 0;
    label$3 : {
      label$4 : {
      label$5 : {
        label$6 : {
        if (HEAPU8[($0_1 + 53 | 0) >> 0] | 0) {
          break label$6
        }
        if ($3_1 & 1 | 0) {
          break label$5
        }
        break label$3;
        }
        label$7 : {
        $3_1 = $3_1 & 1 | 0;
        if (!$3_1) {
          break label$7
        }
        $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
        if ($523($3_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0, $244($3_1 | 0) | 0 | 0) | 0) {
          break label$3
        }
        break label$4;
        }
        if (!$3_1) {
        break label$3
        }
      }
      HEAP32[($2_1 + 16 | 0) >> 2] = $244(HEAP32[($0_1 + 48 | 0) >> 2] | 0 | 0) | 0;
      label$8 : {
        switch (($524(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0, $2_1 + 16 | 0 | 0, $2_1 + 20 | 0 | 0, $2_1 + 12 | 0 | 0, $2_1 + 24 | 0 | 0, $2_1 + 32 | 0 | 0, $2_1 + 20 | 0 | 0) | 0) + -1 | 0 | 0) {
        case 2:
        $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
        HEAP32[($2_1 + 20 | 0) >> 2] = $2_1 + 25 | 0;
        HEAP8[($2_1 + 24 | 0) >> 0] = $3_1;
        break;
        case 0:
        case 1:
        break label$4;
        default:
        break label$8;
        };
      }
      label$10 : while (1) {
        $3_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
        if ($3_1 >>> 0 <= ($2_1 + 24 | 0) >>> 0) {
        break label$3
        }
        $3_1 = $3_1 + -1 | 0;
        HEAP32[($2_1 + 20 | 0) >> 2] = $3_1;
        if (($453(HEAP8[$3_1 >> 0] | 0 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) != (-1 | 0)) {
        continue label$10
        }
        break label$10;
      };
      }
      $1_1 = $247() | 0;
      break label$1;
    }
    HEAP8[($0_1 + 52 | 0) >> 0] = 1;
    HEAP32[($0_1 + 48 | 0) >> 2] = $1_1;
    }
    global$0 = $2_1 + 32 | 0;
    return $1_1 | 0;
  }
  
  function $523($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    return ($469($0_1 | 0, $1_1 | 0) | 0 | 0) != (-1 | 0) | 0;
  }
  
  function $524($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $6_1 = $6_1 | 0;
    $7_1 = $7_1 | 0;
    return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) | 0 | 0;
  }
  
  function $525($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    label$1 : {
    $0_1 = $467($0_1 | 0) | 0;
    if (($0_1 | 0) == (-1 | 0)) {
      break label$1
    }
    HEAP32[$1_1 >> 2] = $0_1;
    }
    return ($0_1 | 0) != (-1 | 0) | 0;
  }
  
  function $526($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $6_1 = $6_1 | 0;
    $7_1 = $7_1 | 0;
    return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) | 0 | 0;
  }
  
  function $527($0_1) {
    $0_1 = $0_1 | 0;
    $1747($232($0_1 | 0) | 0 | 0, 48 | 0);
  }
  
  function $528($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1) | 0;
    $1_1 = $494($1_1 | 0) | 0;
    HEAP32[($0_1 + 36 | 0) >> 2] = $1_1;
    HEAP8[($0_1 + 44 | 0) >> 0] = $495($1_1 | 0) | 0;
  }
  
  function $529($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0, $4_1 = 0, $5_1 = 0, $2_1 = 0, $3_1 = 0;
    $1_1 = global$0 - 16 | 0;
    global$0 = $1_1;
    $2_1 = $1_1 + 16 | 0;
    label$1 : {
    label$2 : while (1) {
      $3_1 = $530(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0, $1_1 + 8 | 0 | 0, $2_1 | 0, $1_1 + 4 | 0 | 0) | 0;
      $4_1 = -1;
      $5_1 = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) - ($1_1 + 8 | 0) | 0;
      if (($161($1_1 + 8 | 0 | 0, 1 | 0, $5_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) != ($5_1 | 0)) {
      break label$1
      }
      label$3 : {
      switch ($3_1 + -1 | 0 | 0) {
      case 1:
        break label$1;
      case 0:
        continue label$2;
      default:
        break label$3;
      };
      }
      break label$2;
    };
    $4_1 = $155(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 ? -1 : 0;
    }
    global$0 = $1_1 + 16 | 0;
    return $4_1 | 0;
  }
  
  function $530($0_1, $1_1, $2_1, $3_1, $4_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1) | 0 | 0;
  }
  
  function $531($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
    label$1 : {
    label$2 : {
      if (HEAPU8[($0_1 + 44 | 0) >> 0] | 0) {
      break label$2
      }
      $3_1 = 0;
      $2_1 = ($2_1 | 0) > (0 | 0) ? $2_1 : 0;
      label$3 : while (1) {
      if (($3_1 | 0) == ($2_1 | 0)) {
        break label$1
      }
      label$4 : {
        if (((((wasm2js_i32$1 = $0_1, wasm2js_i32$2 = $249(HEAP32[$1_1 >> 2] | 0 | 0) | 0), wasm2js_i32$0 = HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0 | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) | 0) != ($247() | 0 | 0)) {
        break label$4
        }
        return $3_1 | 0;
      }
      $1_1 = $1_1 + 4 | 0;
      $3_1 = $3_1 + 1 | 0;
      continue label$3;
      };
    }
    $2_1 = $161($1_1 | 0, 4 | 0, $2_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0;
    }
    return $2_1 | 0;
  }
  
  function $532($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0, $6_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
    $2_1 = global$0 - 32 | 0;
    global$0 = $2_1;
    label$1 : {
    label$2 : {
      label$3 : {
      if ($273($1_1 | 0, $247() | 0 | 0) | 0) {
        break label$3
      }
      $3_1 = $244($1_1 | 0) | 0;
      HEAP32[($2_1 + 20 | 0) >> 2] = $3_1;
      label$4 : {
        if ((HEAPU8[($0_1 + 44 | 0) >> 0] | 0 | 0) != (1 | 0)) {
        break label$4
        }
        if (!($533($3_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0)) {
        break label$2
        }
        break label$3;
      }
      HEAP32[($2_1 + 16 | 0) >> 2] = $2_1 + 24 | 0;
      $4_1 = $2_1 + 32 | 0;
      $5_1 = $2_1 + 24 | 0;
      $6_1 = $2_1 + 20 | 0;
      label$5 : while (1) {
        $3_1 = $524(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0, $6_1 | 0, $5_1 | 0, $2_1 + 12 | 0 | 0, $2_1 + 24 | 0 | 0, $4_1 | 0, $2_1 + 16 | 0 | 0) | 0;
        if ((HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0) == ($6_1 | 0)) {
        break label$2
        }
        label$6 : {
        if (($3_1 | 0) != (3 | 0)) {
          break label$6
        }
        if (($161($6_1 | 0, 1 | 0, 1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) == (1 | 0)) {
          break label$3
        }
        break label$2;
        }
        if ($3_1 >>> 0 > 1 >>> 0) {
        break label$2
        }
        $6_1 = (HEAP32[($2_1 + 16 | 0) >> 2] | 0) - ($2_1 + 24 | 0) | 0;
        if (($161($2_1 + 24 | 0 | 0, 1 | 0, $6_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) != ($6_1 | 0)) {
        break label$2
        }
        $6_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
        if (($3_1 | 0) == (1 | 0)) {
        continue label$5
        }
        break label$5;
      };
      }
      $0_1 = $534($1_1 | 0) | 0;
      break label$1;
    }
    $0_1 = $247() | 0;
    }
    global$0 = $2_1 + 32 | 0;
    return $0_1 | 0;
  }
  
  function $533($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return ($473($0_1 | 0, $1_1 | 0) | 0 | 0) != (-1 | 0) | 0;
  }
  
  function $534($0_1) {
    $0_1 = $0_1 | 0;
    label$1 : {
    if (!($273($0_1 | 0, $247() | 0 | 0) | 0)) {
      break label$1
    }
    $0_1 = ($247() | 0) ^ -1 | 0;
    }
    return $0_1 | 0;
  }
  
  function $535() {
    $474();
  }
  
  function $536($0_1, $1_1, $1$hi) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1$hi = $1$hi | 0;
    var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $2_1 = 0, $3_1 = 0, i64toi32_i32$2 = 0, $12_1 = 0, $14_1 = 0, $15_1 = 0, $13_1 = 0, $22_1 = 0, $22$hi = 0, i64toi32_i32$3 = 0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$1 = $0_1;
    HEAP32[(i64toi32_i32$1 + 112 | 0) >> 2] = $1_1;
    HEAP32[(i64toi32_i32$1 + 116 | 0) >> 2] = i64toi32_i32$0;
    $2_1 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    i64toi32_i32$1 = (HEAP32[(i64toi32_i32$1 + 44 | 0) >> 2] | 0) - $2_1 | 0;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $13_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1;
    HEAP32[(i64toi32_i32$1 + 120 | 0) >> 2] = $13_1;
    HEAP32[(i64toi32_i32$1 + 124 | 0) >> 2] = i64toi32_i32$0;
    $3_1 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
    label$1 : {
    i64toi32_i32$0 = $1$hi;
    if (!($1_1 | i64toi32_i32$0 | 0)) {
      break label$1
    }
    i64toi32_i32$1 = $3_1 - $2_1 | 0;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $22_1 = i64toi32_i32$1;
    $22$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$1 = $22$hi;
    i64toi32_i32$3 = $22_1;
    if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
      $12_1 = 1
    } else {
      if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        $14_1 = 0
      } else {
        $14_1 = 1
      }
      $15_1 = $14_1;
      } else {
      $15_1 = 0
      }
      $12_1 = $15_1;
    }
    if ($12_1) {
      break label$1
    }
    i64toi32_i32$2 = $1$hi;
    $3_1 = $2_1 + $1_1 | 0;
    }
    HEAP32[($0_1 + 104 | 0) >> 2] = $3_1;
  }
  
  function $537($0_1) {
    $0_1 = $0_1 | 0;
    var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $1_1 = 0, $4$hi = 0, $2_1 = 0, $5$hi = 0, $3_1 = 0, $5_1 = 0, $4_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $7_1 = 0, $7$hi = 0, $15_1 = 0, $15$hi = 0, $35_1 = 0, $40_1 = 0, $40$hi = 0, $59_1 = 0, $59$hi = 0, $67_1 = 0, $74_1 = 0, $74$hi = 0;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 120 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 124 | 0) >> 2] | 0;
    $7_1 = i64toi32_i32$0;
    $7$hi = i64toi32_i32$1;
    $1_1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $2_1 = HEAP32[(i64toi32_i32$2 + 44 | 0) >> 2] | 0;
    i64toi32_i32$0 = $1_1 - $2_1 | 0;
    i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
    $15_1 = i64toi32_i32$0;
    $15$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $7$hi;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$0 = $15$hi;
    i64toi32_i32$3 = $15_1;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $4_1 = i64toi32_i32$4;
    $4$hi = i64toi32_i32$5;
    label$1 : {
    label$2 : {
      label$3 : {
      i64toi32_i32$1 = $0_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 112 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 116 | 0) >> 2] | 0;
      $5_1 = i64toi32_i32$5;
      $5$hi = i64toi32_i32$2;
      if (!(i64toi32_i32$5 | i64toi32_i32$2 | 0)) {
        break label$3
      }
      i64toi32_i32$2 = $4$hi;
      i64toi32_i32$2 = $5$hi;
      i64toi32_i32$2 = $4$hi;
      i64toi32_i32$1 = i64toi32_i32$4;
      i64toi32_i32$5 = $5$hi;
      i64toi32_i32$3 = $5_1;
      if ((i64toi32_i32$2 | 0) > (i64toi32_i32$5 | 0)) {
        $26_1 = 1
      } else {
        if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$5 | 0)) {
        if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
          $27_1 = 0
        } else {
          $27_1 = 1
        }
        $28_1 = $27_1;
        } else {
        $28_1 = 0
        }
        $26_1 = $28_1;
      }
      if ($26_1) {
        break label$2
      }
      }
      $2_1 = $454($0_1 | 0) | 0;
      if (($2_1 | 0) > (-1 | 0)) {
      break label$1
      }
      $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
      $2_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
    }
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = -1;
    HEAP32[(i64toi32_i32$2 + 112 | 0) >> 2] = -1;
    HEAP32[(i64toi32_i32$2 + 116 | 0) >> 2] = i64toi32_i32$1;
    HEAP32[(i64toi32_i32$2 + 104 | 0) >> 2] = $1_1;
    $35_1 = i64toi32_i32$2;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$2 = $2_1 - $1_1 | 0;
    i64toi32_i32$1 = i64toi32_i32$2 >> 31 | 0;
    $40_1 = i64toi32_i32$2;
    $40$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$3 = $4_1;
    i64toi32_i32$2 = $40$hi;
    i64toi32_i32$5 = $40_1;
    i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    i64toi32_i32$3 = $35_1;
    HEAP32[(i64toi32_i32$3 + 120 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[(i64toi32_i32$3 + 124 | 0) >> 2] = i64toi32_i32$4;
    return -1 | 0;
    }
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 1;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
    i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $4_1 = i64toi32_i32$2;
    $4$hi = i64toi32_i32$0;
    $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    label$4 : {
    i64toi32_i32$4 = $0_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 112 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 116 | 0) >> 2] | 0;
    $5_1 = i64toi32_i32$0;
    $5$hi = i64toi32_i32$1;
    i64toi32_i32$4 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = 0;
    if ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) | 0) {
      break label$4
    }
    i64toi32_i32$4 = i64toi32_i32$1;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$4 = i64toi32_i32$1;
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
    i64toi32_i32$2 = (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) + i64toi32_i32$1 | 0;
    i64toi32_i32$2 = i64toi32_i32$4 - i64toi32_i32$2 | 0;
    $5_1 = i64toi32_i32$3;
    $5$hi = i64toi32_i32$2;
    i64toi32_i32$5 = $3_1 - $1_1 | 0;
    i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
    $59_1 = i64toi32_i32$5;
    $59$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $5$hi;
    i64toi32_i32$4 = i64toi32_i32$3;
    i64toi32_i32$5 = $59$hi;
    i64toi32_i32$0 = $59_1;
    if ((i64toi32_i32$2 | 0) > (i64toi32_i32$5 | 0)) {
      $29_1 = 1
    } else {
      if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$5 | 0)) {
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
        $30_1 = 0
      } else {
        $30_1 = 1
      }
      $31_1 = $30_1;
      } else {
      $31_1 = 0
      }
      $29_1 = $31_1;
    }
    if ($29_1) {
      break label$4
    }
    i64toi32_i32$4 = $5$hi;
    $3_1 = $1_1 + $5_1 | 0;
    }
    HEAP32[($0_1 + 104 | 0) >> 2] = $3_1;
    $67_1 = $0_1;
    i64toi32_i32$4 = $4$hi;
    $3_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
    i64toi32_i32$2 = $3_1 - $1_1 | 0;
    i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
    $74_1 = i64toi32_i32$2;
    $74$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$2 = $74$hi;
    i64toi32_i32$5 = $74_1;
    i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
    i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
    }
    i64toi32_i32$0 = $67_1;
    HEAP32[(i64toi32_i32$0 + 120 | 0) >> 2] = i64toi32_i32$1;
    HEAP32[(i64toi32_i32$0 + 124 | 0) >> 2] = i64toi32_i32$3;
    label$5 : {
    if ($1_1 >>> 0 > $3_1 >>> 0) {
      break label$5
    }
    HEAP8[($1_1 + -1 | 0) >> 0] = $2_1;
    }
    return $2_1 | 0;
  }
  
  function $538($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1$hi = $1$hi | 0;
    $2_1 = $2_1 | 0;
    $2$hi = $2$hi | 0;
    $3_1 = $3_1 | 0;
    var i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $4$hi = 0, $18_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $11$hi = 0, $18$hi = 0, $19_1 = 0, $19$hi = 0, $4_1 = 0, $24$hi = 0;
    label$1 : {
    label$2 : {
      if (!($3_1 & 64 | 0)) {
      break label$2
      }
      i64toi32_i32$0 = $1$hi;
      i64toi32_i32$0 = 0;
      $11$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $1$hi;
      i64toi32_i32$2 = $1_1;
      i64toi32_i32$1 = $11$hi;
      i64toi32_i32$3 = $3_1 + -64 | 0;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
      $18_1 = 0;
      } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
      $18_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
      }
      $2_1 = $18_1;
      $2$hi = i64toi32_i32$1;
      i64toi32_i32$1 = 0;
      $1_1 = 0;
      $1$hi = i64toi32_i32$1;
      break label$1;
    }
    if (!$3_1) {
      break label$1
    }
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = 0;
    $18$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $1_1;
    i64toi32_i32$2 = $18$hi;
    i64toi32_i32$3 = 64 - $3_1 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $20_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
      i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      $20_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $19_1 = $20_1;
    $19$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = 0;
    $4_1 = $3_1;
    $4$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$1 = $2_1;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$3 = $3_1;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      $21_1 = 0;
    } else {
      i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
      $21_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    }
    $24$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $19$hi;
    i64toi32_i32$2 = $19_1;
    i64toi32_i32$1 = $24$hi;
    i64toi32_i32$3 = $21_1;
    i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $2_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $1_1;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$3 = $4_1;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
      $22_1 = 0;
    } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
      $22_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $1_1 = $22_1;
    $1$hi = i64toi32_i32$2;
    }
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$0 = $0_1;
    HEAP32[i64toi32_i32$0 >> 2] = $1_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $2_1;
    HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
  }
  
  function $539($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = Math_fround($1_1);
    var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $4_1 = 0, $2_1 = 0, $7$hi = 0, $7_1 = 0, $8_1 = 0, $8$hi = 0, $3_1 = 0, $5_1 = 0, $6_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $36_1 = 0, $51_1 = 0, $54_1 = 0, $54$hi = 0, $58$hi = 0, $59$hi = 0, $61_1 = 0;
    $2_1 = global$0 - 16 | 0;
    global$0 = $2_1;
    $3_1 = (wasm2js_scratch_store_f32($1_1), wasm2js_scratch_load_i32(2));
    $4_1 = $3_1 & 8388607 | 0;
    label$1 : {
    label$2 : {
      $5_1 = $3_1 >>> 23 | 0;
      $6_1 = $5_1 & 255 | 0;
      if (!$6_1) {
      break label$2
      }
      label$3 : {
      if (($6_1 | 0) == (255 | 0)) {
        break label$3
      }
      i64toi32_i32$0 = 0;
      i64toi32_i32$2 = $4_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = 25;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
        $23_1 = 0;
      } else {
        i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
        $23_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
      }
      $7_1 = $23_1;
      $7$hi = i64toi32_i32$1;
      $4_1 = ($5_1 & 255 | 0) + 16256 | 0;
      i64toi32_i32$1 = 0;
      $8_1 = 0;
      $8$hi = i64toi32_i32$1;
      break label$1;
      }
      i64toi32_i32$1 = 0;
      i64toi32_i32$0 = $4_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = 25;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
      $24_1 = 0;
      } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
      $24_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
      }
      $7_1 = $24_1;
      $7$hi = i64toi32_i32$2;
      i64toi32_i32$2 = 0;
      $8_1 = 0;
      $8$hi = i64toi32_i32$2;
      $4_1 = 32767;
      break label$1;
    }
    label$4 : {
      if ($4_1) {
      break label$4
      }
      i64toi32_i32$2 = 0;
      $8_1 = 0;
      $8$hi = i64toi32_i32$2;
      $4_1 = 0;
      i64toi32_i32$2 = 0;
      $7_1 = 0;
      $7$hi = i64toi32_i32$2;
      break label$1;
    }
    i64toi32_i32$2 = 0;
    $36_1 = $4_1;
    $4_1 = Math_clz32($4_1);
    i64toi32_i32$0 = 0;
    $538($2_1 | 0, $36_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, $4_1 + 81 | 0 | 0);
    $4_1 = 16265 - $4_1 | 0;
    i64toi32_i32$1 = $2_1 + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$0 = 65536;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
    $7_1 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
    $7$hi = i64toi32_i32$0;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $8_1 = i64toi32_i32$0;
    $8$hi = i64toi32_i32$1;
    }
    i64toi32_i32$1 = $8$hi;
    i64toi32_i32$0 = $0_1;
    HEAP32[i64toi32_i32$0 >> 2] = $8_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    $51_1 = i64toi32_i32$0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    $25_1 = 0;
    } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $25_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $54_1 = $25_1;
    $54$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = $3_1 >>> 31 | 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 63;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    $26_1 = 0;
    } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
    $26_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    }
    $58$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $54$hi;
    i64toi32_i32$0 = $54_1;
    i64toi32_i32$1 = $58$hi;
    i64toi32_i32$3 = $26_1;
    i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $59$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $7$hi;
    i64toi32_i32$1 = $59$hi;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
    i64toi32_i32$0 = $7$hi;
    i64toi32_i32$3 = $7_1;
    i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
    $61_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    i64toi32_i32$2 = $51_1;
    HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $61_1;
    HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$0;
    global$0 = $2_1 + 16 | 0;
  }
  
  function $540($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, $3_1 = 0, i64toi32_i32$4 = 0, $2_1 = 0, $4_1 = 0, $4$hi = 0, $5_1 = 0, $5$hi = 0, $21_1 = 0, $22_1 = 0, $19_1 = 0, $27_1 = 0, $27$hi = 0, $31$hi = 0, $32_1 = 0, $32$hi = 0, $36$hi = 0;
    $2_1 = global$0 - 16 | 0;
    global$0 = $2_1;
    label$1 : {
    label$2 : {
      if ($1_1) {
      break label$2
      }
      i64toi32_i32$0 = 0;
      $4_1 = 0;
      $4$hi = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      $5_1 = 0;
      $5$hi = i64toi32_i32$0;
      break label$1;
    }
    $3_1 = $1_1 >> 31 | 0;
    $3_1 = ($1_1 ^ $3_1 | 0) - $3_1 | 0;
    i64toi32_i32$0 = 0;
    $19_1 = $3_1;
    $3_1 = Math_clz32($3_1);
    i64toi32_i32$1 = 0;
    $538($2_1 | 0, $19_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, $3_1 + 81 | 0 | 0);
    i64toi32_i32$2 = $2_1 + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    i64toi32_i32$2 = i64toi32_i32$1;
    i64toi32_i32$1 = 65536;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
    $27_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
    $27$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 16414 - $3_1 | 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
      $21_1 = 0;
    } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
      $21_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $31$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $27$hi;
    i64toi32_i32$1 = $27_1;
    i64toi32_i32$0 = $31$hi;
    i64toi32_i32$3 = $21_1;
    i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $32_1 = i64toi32_i32$4;
    $32$hi = i64toi32_i32$5;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = $1_1 & -2147483648 | 0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
      $22_1 = 0;
    } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
      $22_1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
    }
    $36$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $32$hi;
    i64toi32_i32$5 = $32_1;
    i64toi32_i32$2 = $36$hi;
    i64toi32_i32$3 = $22_1;
    i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
    $5_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $5$hi = i64toi32_i32$2;
    i64toi32_i32$1 = $2_1;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$2;
    $4$hi = i64toi32_i32$5;
    }
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$2 = $0_1;
    HEAP32[i64toi32_i32$2 >> 2] = $4_1;
    HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
    i64toi32_i32$5 = $5$hi;
    HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $5_1;
    HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$5;
    global$0 = $2_1 + 16 | 0;
  }
  
  function $541($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1$hi = $1$hi | 0;
    $2_1 = $2_1 | 0;
    $2$hi = $2$hi | 0;
    $3_1 = $3_1 | 0;
    var i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $4$hi = 0, $18_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $11$hi = 0, $18$hi = 0, $19_1 = 0, $19$hi = 0, $4_1 = 0, $24$hi = 0;
    label$1 : {
    label$2 : {
      if (!($3_1 & 64 | 0)) {
      break label$2
      }
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$0 = 0;
      $11$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$1 = $11$hi;
      i64toi32_i32$3 = $3_1 + -64 | 0;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $18_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      } else {
      i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      $18_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
      }
      $1_1 = $18_1;
      $1$hi = i64toi32_i32$1;
      i64toi32_i32$1 = 0;
      $2_1 = 0;
      $2$hi = i64toi32_i32$1;
      break label$1;
    }
    if (!$3_1) {
      break label$1
    }
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$1 = 0;
    $18$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$2 = $18$hi;
    i64toi32_i32$3 = 64 - $3_1 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
      $20_1 = 0;
    } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
      $20_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $19_1 = $20_1;
    $19$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = 0;
    $4_1 = $3_1;
    $4$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$3 = $3_1;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = 0;
      $21_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
      i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      $21_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
    }
    $24$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $19$hi;
    i64toi32_i32$2 = $19_1;
    i64toi32_i32$1 = $24$hi;
    i64toi32_i32$3 = $21_1;
    i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $1_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $1$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$3 = $4_1;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $22_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
      i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      $22_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $2_1 = $22_1;
    $2$hi = i64toi32_i32$2;
    }
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$0 = $0_1;
    HEAP32[i64toi32_i32$0 >> 2] = $1_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $2_1;
    HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
  }
  
  function $542($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1$hi = $1$hi | 0;
    $2_1 = $2_1 | 0;
    $2$hi = $2$hi | 0;
    $3_1 = $3_1 | 0;
    $3$hi = $3$hi | 0;
    $4_1 = $4_1 | 0;
    $4$hi = $4$hi | 0;
    var i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, $14$hi = 0, $5_1 = 0, $11$hi = 0, $11_1 = 0, $14_1 = 0, $10$hi = 0, $12$hi = 0, $6_1 = 0, $18$hi = 0, $12_1 = 0, $10_1 = 0, $8_1 = 0, $15$hi = 0, $18_1 = 0, $7_1 = 0, $16$hi = 0, $17$hi = 0, $20$hi = 0, $13_1 = 0, $13$hi = 0, $16_1 = 0, $17_1 = 0, $20_1 = 0, $15_1 = 0, $21$hi = 0, $9_1 = 0, $19$hi = 0, $22$hi = 0, $23$hi = 0, $24$hi = 0, $218_1 = 0, $220_1 = 0, $221_1 = 0, $223_1 = 0, $224_1 = 0, $226_1 = 0, $228_1 = 0, $229_1 = 0, $230_1 = 0, $231_1 = 0, $19_1 = 0, $232_1 = 0, $233_1 = 0, $21_1 = 0, $234_1 = 0, $235_1 = 0, $22_1 = 0, $237_1 = 0, $239_1 = 0, $24_1 = 0, $240_1 = 0, $241_1 = 0, $242_1 = 0, $243_1 = 0, $245_1 = 0, $246_1 = 0, $247_1 = 0, $248_1 = 0, $250_1 = 0, $251_1 = 0, $252_1 = 0, $253_1 = 0, $254_1 = 0, $255_1 = 0, $256_1 = 0, $257_1 = 0, $53_1 = 0, $57_1 = 0, $64_1 = 0, $68_1 = 0, $77_1 = 0, $77$hi = 0, $89_1 = 0, $89$hi = 0, $111_1 = 0, $112_1 = 0, $112$hi = 0, $113_1 = 0, $113$hi = 0, $120$hi = 0, $123$hi = 0, $140_1 = 0, $141_1 = 0, $141$hi = 0, $142_1 = 0, $142$hi = 0, $149$hi = 0, $152$hi = 0, $170_1 = 0, $170$hi = 0, $175_1 = 0, $175$hi = 0, $182_1 = 0, $182$hi = 0, $189_1 = 0, $189$hi = 0, $194_1 = 0, $194$hi = 0, $203_1 = 0, $203$hi = 0, $205_1 = 0, $205$hi = 0, $207_1 = 0, $207$hi = 0, $215_1 = 0, $215$hi = 0, $217_1 = 0, $217$hi = 0, $219_1 = 0, $219$hi = 0, $222_1 = 0, $224$hi = 0, $225_1 = 0, $225$hi = 0, $227_1 = 0, $227$hi = 0, $236_1 = 0, $236$hi = 0, $238_1 = 0, $238$hi = 0, $244_1 = 0, $244$hi = 0, $249_1 = 0, $249$hi = 0, $252$hi = 0, $23_1 = 0, $268_1 = 0, $268$hi = 0, $272_1 = 0, $273_1 = 0, $273$hi = 0, $277_1 = 0, $277$hi = 0, $281_1 = 0, $282$hi = 0, $283$hi = 0, $286_1 = 0, $286$hi = 0, $287_1 = 0, $287$hi = 0, $288_1 = 0, $288$hi = 0, $291_1 = 0, $292$hi = 0, $295_1 = 0, $296$hi = 0, $297$hi = 0, $301_1 = 0, $302$hi = 0, $303_1 = 0, $303$hi = 0, $310_1 = 0, $310$hi = 0, $316_1 = 0, $316$hi = 0, $318$hi = 0, $319_1 = 0, $319$hi = 0, $320_1 = 0, $320$hi = 0, $321_1 = 0, $321$hi = 0, $323$hi = 0, $327_1 = 0, $328$hi = 0, $329_1 = 0, $329$hi = 0, $330_1 = 0, $330$hi = 0, $332_1 = 0, $332$hi = 0, $335_1 = 0, $336$hi = 0, $339_1 = 0, $340$hi = 0, $341$hi = 0, $344_1 = 0, $345$hi = 0, $347$hi = 0, $348_1 = 0, $348$hi = 0, $352_1 = 0, $353$hi = 0, $354_1 = 0, $354$hi = 0, $355_1 = 0, $355$hi = 0, $358_1 = 0, $359$hi = 0, $362_1 = 0, $363$hi = 0, $364$hi = 0, $368_1 = 0, $369$hi = 0, $379_1 = 0, $379$hi = 0, $381$hi = 0, $384_1 = 0, $384$hi = 0, $386$hi = 0, $390_1 = 0, $390$hi = 0, $392$hi = 0, $426_1 = 0, $426$hi = 0, $428_1 = 0, $428$hi = 0, $429_1 = 0, $429$hi = 0, $431_1 = 0, $431$hi = 0, $435_1 = 0, $435$hi = 0, $437_1 = 0, $438$hi = 0, $443_1 = 0, $443$hi = 0, $447_1 = 0, $447$hi = 0, $456$hi = 0, $458_1 = 0, $458$hi = 0, $464_1 = 0, $470_1 = 0, $470$hi = 0, $474_1 = 0, $475$hi = 0, $479_1 = 0, $479$hi = 0, $483_1 = 0, $483$hi = 0, $486_1 = 0, $486$hi = 0, $490_1 = 0, $491$hi = 0;
    $5_1 = global$0 - 96 | 0;
    global$0 = $5_1;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = 65535;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $10_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $10$hi = i64toi32_i32$1;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
    i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
    i64toi32_i32$0 = -2147483648;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
    $11_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
    $11$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$1 = 65535;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $12_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $12$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $12_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $218_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $218_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $13_1 = $218_1;
    $13$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $220_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
    i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    $220_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
    }
    $6_1 = $220_1 & 32767 | 0;
    label$1 : {
    label$2 : {
      label$3 : {
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = 48;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = 0;
        $221_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      } else {
        i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
        $221_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
      }
      $7_1 = $221_1 & 32767 | 0;
      if (($7_1 + -32767 | 0) >>> 0 < -32766 >>> 0) {
        break label$3
      }
      $8_1 = 0;
      if (($6_1 + -32767 | 0) >>> 0 > -32767 >>> 0) {
        break label$2
      }
      }
      label$4 : {
      i64toi32_i32$1 = $1$hi;
      $53_1 = !($1_1 | i64toi32_i32$1 | 0);
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$0 = $2_1;
      i64toi32_i32$2 = 2147483647;
      i64toi32_i32$3 = -1;
      i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
      $14_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
      $14$hi = i64toi32_i32$2;
      i64toi32_i32$1 = $14_1;
      i64toi32_i32$0 = 2147418112;
      i64toi32_i32$3 = 0;
      $57_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$2;
      i64toi32_i32$3 = $14_1;
      i64toi32_i32$2 = 2147418112;
      i64toi32_i32$0 = 0;
      if ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) | 0 ? $53_1 : $57_1) {
        break label$4
      }
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$0 = $2_1;
      i64toi32_i32$1 = 32768;
      i64toi32_i32$2 = 0;
      i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
      $11_1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
      $11$hi = i64toi32_i32$1;
      break label$1;
      }
      label$5 : {
      i64toi32_i32$1 = $3$hi;
      $64_1 = !($3_1 | i64toi32_i32$1 | 0);
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$3 = $4_1;
      i64toi32_i32$0 = 2147483647;
      i64toi32_i32$2 = -1;
      i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
      $2_1 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
      $2$hi = i64toi32_i32$0;
      i64toi32_i32$1 = $2_1;
      i64toi32_i32$3 = 2147418112;
      i64toi32_i32$2 = 0;
      $68_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$0;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$0 = 2147418112;
      i64toi32_i32$3 = 0;
      if ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) | 0 ? $64_1 : $68_1) {
        break label$5
      }
      i64toi32_i32$2 = $4$hi;
      i64toi32_i32$3 = $4_1;
      i64toi32_i32$1 = 32768;
      i64toi32_i32$0 = 0;
      i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
      $11_1 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
      $11$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $3$hi;
      $1_1 = $3_1;
      $1$hi = i64toi32_i32$1;
      break label$1;
      }
      label$6 : {
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$1 = $14$hi;
      i64toi32_i32$2 = $14_1;
      i64toi32_i32$3 = 2147418112;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
      $77_1 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
      $77$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $1$hi;
      i64toi32_i32$1 = $1_1;
      i64toi32_i32$2 = $77$hi;
      i64toi32_i32$0 = $77_1;
      i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
      i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
      i64toi32_i32$1 = 0;
      i64toi32_i32$0 = 0;
      if ((i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | 0) {
        break label$6
      }
      label$7 : {
        i64toi32_i32$3 = $3$hi;
        i64toi32_i32$3 = $2$hi;
        i64toi32_i32$3 = $3$hi;
        i64toi32_i32$0 = $3_1;
        i64toi32_i32$2 = $2$hi;
        i64toi32_i32$1 = $2_1;
        i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
        if (!!(i64toi32_i32$0 | i64toi32_i32$1 | 0 | i64toi32_i32$2 | 0)) {
        break label$7
        }
        i64toi32_i32$2 = 2147450880;
        $11_1 = 0;
        $11$hi = i64toi32_i32$2;
        i64toi32_i32$2 = 0;
        $1_1 = 0;
        $1$hi = i64toi32_i32$2;
        break label$1;
      }
      i64toi32_i32$2 = $11$hi;
      i64toi32_i32$3 = $11_1;
      i64toi32_i32$0 = 2147418112;
      i64toi32_i32$1 = 0;
      i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
      $11_1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
      $11$hi = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      $1_1 = 0;
      $1$hi = i64toi32_i32$0;
      break label$1;
      }
      label$8 : {
      i64toi32_i32$0 = $3$hi;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$3 = 2147418112;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
      $89_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
      $89$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$0 = $3_1;
      i64toi32_i32$2 = $89$hi;
      i64toi32_i32$1 = $89_1;
      i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
      i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$1 = 0;
      if ((i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | 0) {
        break label$8
      }
      i64toi32_i32$3 = $1$hi;
      i64toi32_i32$3 = $14$hi;
      i64toi32_i32$3 = $1$hi;
      i64toi32_i32$1 = $1_1;
      i64toi32_i32$2 = $14$hi;
      i64toi32_i32$0 = $14_1;
      i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
      $2_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
      $2$hi = i64toi32_i32$2;
      i64toi32_i32$2 = 0;
      $1_1 = 0;
      $1$hi = i64toi32_i32$2;
      label$9 : {
        i64toi32_i32$2 = $2$hi;
        if (!!($2_1 | i64toi32_i32$2 | 0)) {
        break label$9
        }
        i64toi32_i32$2 = 2147450880;
        $11_1 = 0;
        $11$hi = i64toi32_i32$2;
        break label$1;
      }
      i64toi32_i32$2 = $11$hi;
      i64toi32_i32$3 = $11_1;
      i64toi32_i32$1 = 2147418112;
      i64toi32_i32$0 = 0;
      i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
      $11_1 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
      $11$hi = i64toi32_i32$1;
      break label$1;
      }
      label$10 : {
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$1 = $14$hi;
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$2 = $1_1;
      i64toi32_i32$3 = $14$hi;
      i64toi32_i32$0 = $14_1;
      i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
      i64toi32_i32$2 = 0;
      i64toi32_i32$0 = 0;
      if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0) | 0) {
        break label$10
      }
      i64toi32_i32$1 = 0;
      $1_1 = 0;
      $1$hi = i64toi32_i32$1;
      break label$1;
      }
      label$11 : {
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$0 = $3_1;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$2 = 0;
      if ((i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0) {
        break label$11
      }
      i64toi32_i32$1 = 0;
      $1_1 = 0;
      $1$hi = i64toi32_i32$1;
      break label$1;
      }
      $8_1 = 0;
      label$12 : {
      i64toi32_i32$1 = $14$hi;
      i64toi32_i32$2 = $14_1;
      i64toi32_i32$3 = 65535;
      i64toi32_i32$0 = -1;
      if (i64toi32_i32$1 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0) {
        break label$12
      }
      $111_1 = $5_1 + 80 | 0;
      i64toi32_i32$2 = $1$hi;
      $112_1 = $1_1;
      $112$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $12$hi;
      $113_1 = $12_1;
      $113$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $1$hi;
      i64toi32_i32$2 = $12$hi;
      $8_1 = !($12_1 | i64toi32_i32$2 | 0);
      i64toi32_i32$4 = $8_1;
      i64toi32_i32$2 = $1$hi;
      i64toi32_i32$1 = $12$hi;
      i64toi32_i32$3 = i64toi32_i32$4 ? $1_1 : $12_1;
      i64toi32_i32$0 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$1;
      i64toi32_i32$1 = Math_clz32(i64toi32_i32$0);
      i64toi32_i32$4 = 0;
      if ((i64toi32_i32$1 | 0) == (32 | 0)) {
        $223_1 = Math_clz32(i64toi32_i32$3) + 32 | 0
      } else {
        $223_1 = i64toi32_i32$1
      }
      $120$hi = i64toi32_i32$4;
      i64toi32_i32$4 = 0;
      $123$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $120$hi;
      i64toi32_i32$3 = $223_1;
      i64toi32_i32$0 = $123$hi;
      i64toi32_i32$1 = $8_1 << 6 | 0;
      i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $8_1 = i64toi32_i32$2;
      i64toi32_i32$5 = $112$hi;
      i64toi32_i32$3 = $113$hi;
      $538($111_1 | 0, $112_1 | 0, i64toi32_i32$5 | 0, $113_1 | 0, i64toi32_i32$3 | 0, i64toi32_i32$2 + -15 | 0 | 0);
      $8_1 = 16 - i64toi32_i32$2 | 0;
      i64toi32_i32$4 = $5_1 + 88 | 0;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$4 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
      $12_1 = i64toi32_i32$3;
      $12$hi = i64toi32_i32$5;
      i64toi32_i32$4 = i64toi32_i32$3;
      i64toi32_i32$3 = 0;
      i64toi32_i32$1 = 32;
      i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
        i64toi32_i32$3 = 0;
        $224_1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
      } else {
        i64toi32_i32$3 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
        $224_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
      }
      $13_1 = $224_1;
      $13$hi = i64toi32_i32$3;
      i64toi32_i32$5 = $5_1;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 80 | 0) >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 84 | 0) >> 2] | 0;
      $1_1 = i64toi32_i32$3;
      $1$hi = i64toi32_i32$4;
      }
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$5 = $2_1;
      i64toi32_i32$3 = 65535;
      i64toi32_i32$1 = -1;
      if (i64toi32_i32$4 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
      break label$2
      }
      $140_1 = $5_1 + 64 | 0;
      i64toi32_i32$5 = $3$hi;
      $141_1 = $3_1;
      $141$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $10$hi;
      $142_1 = $10_1;
      $142$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $3$hi;
      i64toi32_i32$5 = $10$hi;
      $9_1 = !($10_1 | i64toi32_i32$5 | 0);
      i64toi32_i32$0 = $9_1;
      i64toi32_i32$5 = $3$hi;
      i64toi32_i32$4 = $10$hi;
      i64toi32_i32$3 = i64toi32_i32$0 ? $3_1 : $10_1;
      i64toi32_i32$1 = i64toi32_i32$0 ? i64toi32_i32$5 : i64toi32_i32$4;
      i64toi32_i32$4 = Math_clz32(i64toi32_i32$1);
      i64toi32_i32$0 = 0;
      if ((i64toi32_i32$4 | 0) == (32 | 0)) {
      $226_1 = Math_clz32(i64toi32_i32$3) + 32 | 0
      } else {
      $226_1 = i64toi32_i32$4
      }
      $149$hi = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      $152$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $149$hi;
      i64toi32_i32$3 = $226_1;
      i64toi32_i32$1 = $152$hi;
      i64toi32_i32$4 = $9_1 << 6 | 0;
      i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $9_1 = i64toi32_i32$5;
      i64toi32_i32$2 = $141$hi;
      i64toi32_i32$3 = $142$hi;
      $538($140_1 | 0, $141_1 | 0, i64toi32_i32$2 | 0, $142_1 | 0, i64toi32_i32$3 | 0, i64toi32_i32$5 + -15 | 0 | 0);
      $8_1 = ($8_1 - i64toi32_i32$5 | 0) + 16 | 0;
      i64toi32_i32$0 = $5_1 + 72 | 0;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $10_1 = i64toi32_i32$3;
      $10$hi = i64toi32_i32$2;
      i64toi32_i32$0 = $5_1;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] | 0;
      $3_1 = i64toi32_i32$2;
      $3$hi = i64toi32_i32$3;
    }
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$0 = $3_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = 15;
    i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
      $228_1 = 0;
    } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$1 | 0) | 0;
      $228_1 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
    }
    $14_1 = $228_1;
    $14$hi = i64toi32_i32$2;
    i64toi32_i32$3 = $14_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = -32768;
    i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
    $2_1 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
    $2$hi = i64toi32_i32$0;
    $170_1 = $2_1;
    $170$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = 32;
    i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $229_1 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
    } else {
      i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
      $229_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$1 | 0) | 0;
    }
    $4_1 = $229_1;
    $4$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $170$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$2 = __wasm_i64_mul($170_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$2 | 0) | 0;
    i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
    $15_1 = i64toi32_i32$2;
    $15$hi = i64toi32_i32$3;
    $175_1 = i64toi32_i32$2;
    $175$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $14$hi;
    i64toi32_i32$0 = $14_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = 32;
    i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $230_1 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
    } else {
      i64toi32_i32$2 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
      $230_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
    }
    $14_1 = $230_1;
    $14$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = -1;
    i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
    $1_1 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
    $1$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $14$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$3 = __wasm_i64_mul($14_1 | 0, i64toi32_i32$0 | 0, $1_1 | 0, i64toi32_i32$3 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $182_1 = i64toi32_i32$3;
    $182$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $175$hi;
    i64toi32_i32$2 = $175_1;
    i64toi32_i32$3 = $182$hi;
    i64toi32_i32$4 = $182_1;
    i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $16_1 = i64toi32_i32$1;
    $16$hi = i64toi32_i32$5;
    i64toi32_i32$0 = i64toi32_i32$1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = 32;
    i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$1 << i64toi32_i32$3 | 0;
      $231_1 = 0;
    } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
      $231_1 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
    }
    $17_1 = $231_1;
    $17$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$2 | 0, $1_1 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $189_1 = i64toi32_i32$0;
    $189$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $17$hi;
    i64toi32_i32$5 = $17_1;
    i64toi32_i32$0 = $189$hi;
    i64toi32_i32$4 = $189_1;
    i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
    i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $18_1 = i64toi32_i32$3;
    $18$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $17$hi;
    i64toi32_i32$1 = $18$hi;
    i64toi32_i32$2 = i64toi32_i32$3;
    i64toi32_i32$5 = $17$hi;
    i64toi32_i32$4 = $17_1;
    i64toi32_i32$2 = 0;
    $194_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
    $194$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $12$hi;
    i64toi32_i32$4 = $12_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$5 = -1;
    i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
    $12_1 = i64toi32_i32$4 & i64toi32_i32$5 | 0;
    $12$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$4 = $12$hi;
    i64toi32_i32$4 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$1 | 0, $12_1 | 0, i64toi32_i32$4 | 0) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $19_1 = i64toi32_i32$4;
    $19$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $14$hi;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$1 = $14$hi;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$4 = __wasm_i64_mul($14_1 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$4 | 0) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $203_1 = i64toi32_i32$4;
    $203$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $19$hi;
    i64toi32_i32$2 = $19_1;
    i64toi32_i32$4 = $203$hi;
    i64toi32_i32$5 = $203_1;
    i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
    i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
    }
    $17_1 = i64toi32_i32$0;
    $17$hi = i64toi32_i32$3;
    $205_1 = i64toi32_i32$0;
    $205$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 49;
    i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $232_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
    } else {
      i64toi32_i32$2 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
      $232_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
    }
    $207_1 = $232_1;
    $207$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $10$hi;
    i64toi32_i32$3 = $10_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$5 = 15;
    i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
      $233_1 = 0;
    } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
      $233_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
    }
    $20_1 = $233_1;
    $20$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $207$hi;
    i64toi32_i32$2 = $207_1;
    i64toi32_i32$3 = $20$hi;
    i64toi32_i32$5 = $20_1;
    i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
    i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = -1;
    i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
    $3_1 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
    $3$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$2 | 0, $1_1 | 0, i64toi32_i32$1 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $215_1 = i64toi32_i32$1;
    $215$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $205$hi;
    i64toi32_i32$3 = $205_1;
    i64toi32_i32$1 = $215$hi;
    i64toi32_i32$5 = $215_1;
    i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $21_1 = i64toi32_i32$4;
    $21$hi = i64toi32_i32$0;
    $217_1 = i64toi32_i32$4;
    $217$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $16$hi;
    i64toi32_i32$2 = $16_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 32;
    i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $234_1 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
    } else {
      i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
      $234_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$1 | 0) | 0;
    }
    $219_1 = $234_1;
    $219$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $16$hi;
    i64toi32_i32$3 = $15$hi;
    i64toi32_i32$3 = $16$hi;
    i64toi32_i32$0 = $16_1;
    i64toi32_i32$2 = $15$hi;
    i64toi32_i32$5 = $15_1;
    $222_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = $222_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = 32;
    i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
      $235_1 = 0;
    } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$1 | 0) | 0;
      $235_1 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
    }
    $224$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $219$hi;
    i64toi32_i32$0 = $219_1;
    i64toi32_i32$5 = $224$hi;
    i64toi32_i32$2 = $235_1;
    i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
    $225_1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    $225$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $217$hi;
    i64toi32_i32$3 = $217_1;
    i64toi32_i32$0 = $225$hi;
    i64toi32_i32$2 = $225_1;
    i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $16_1 = i64toi32_i32$1;
    $16$hi = i64toi32_i32$4;
    $227_1 = i64toi32_i32$1;
    $227$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $2$hi;
    i64toi32_i32$4 = $13$hi;
    i64toi32_i32$5 = $13_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = 65536;
    i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
    $10_1 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    $10$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$5 = $10$hi;
    i64toi32_i32$5 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$5 | 0) | 0;
    i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
    $22_1 = i64toi32_i32$5;
    $22$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $14$hi;
    i64toi32_i32$3 = $12$hi;
    i64toi32_i32$3 = $14$hi;
    i64toi32_i32$5 = $12$hi;
    i64toi32_i32$5 = __wasm_i64_mul($14_1 | 0, i64toi32_i32$3 | 0, $12_1 | 0, i64toi32_i32$5 | 0) | 0;
    i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
    $236_1 = i64toi32_i32$5;
    $236$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $22$hi;
    i64toi32_i32$4 = $22_1;
    i64toi32_i32$5 = $236$hi;
    i64toi32_i32$2 = $236_1;
    i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
    i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $13_1 = i64toi32_i32$0;
    $13$hi = i64toi32_i32$1;
    $238_1 = i64toi32_i32$0;
    $238$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $20$hi;
    i64toi32_i32$3 = $20_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$2 = 32;
    i64toi32_i32$5 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $237_1 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
    } else {
      i64toi32_i32$4 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
      $237_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$5 | 0) | 0;
    }
    i64toi32_i32$1 = $237_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = -2147483648;
    i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
    $2_1 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
    $2$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$3 | 0, $1_1 | 0, i64toi32_i32$1 | 0) | 0;
    i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
    $244_1 = i64toi32_i32$1;
    $244$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $238$hi;
    i64toi32_i32$4 = $238_1;
    i64toi32_i32$1 = $244$hi;
    i64toi32_i32$2 = $244_1;
    i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
    i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $15_1 = i64toi32_i32$5;
    $15$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$4 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$4 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $249_1 = i64toi32_i32$4;
    $249$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $15$hi;
    i64toi32_i32$3 = i64toi32_i32$5;
    i64toi32_i32$4 = $249$hi;
    i64toi32_i32$2 = $249_1;
    i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $20_1 = i64toi32_i32$1;
    $20$hi = i64toi32_i32$5;
    i64toi32_i32$0 = i64toi32_i32$1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = 32;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      $239_1 = 0;
    } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$4 | 0) | 0;
      $239_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $252$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $227$hi;
    i64toi32_i32$5 = $227_1;
    i64toi32_i32$0 = $252$hi;
    i64toi32_i32$2 = $239_1;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
    i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $23_1 = i64toi32_i32$4;
    $23$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $194$hi;
    i64toi32_i32$3 = $194_1;
    i64toi32_i32$5 = $23$hi;
    i64toi32_i32$2 = i64toi32_i32$4;
    i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
    i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $1_1 = i64toi32_i32$0;
    $1$hi = i64toi32_i32$4;
    $6_1 = (($7_1 + $6_1 | 0) + $8_1 | 0) + -16383 | 0;
    label$13 : {
      label$14 : {
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$4 = $4$hi;
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$3 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$4 | 0, $4_1 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $24_1 = i64toi32_i32$3;
      $24$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $14$hi;
      i64toi32_i32$4 = $10$hi;
      i64toi32_i32$4 = $14$hi;
      i64toi32_i32$3 = $10$hi;
      i64toi32_i32$3 = __wasm_i64_mul($14_1 | 0, i64toi32_i32$4 | 0, $10_1 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $268_1 = i64toi32_i32$3;
      $268$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $24$hi;
      i64toi32_i32$1 = $24_1;
      i64toi32_i32$3 = $268$hi;
      i64toi32_i32$2 = $268_1;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
      i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $4_1 = i64toi32_i32$5;
      $4$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $24$hi;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$4 = i64toi32_i32$5;
      i64toi32_i32$1 = $24$hi;
      i64toi32_i32$2 = $24_1;
      $272_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
      i64toi32_i32$4 = 0;
      $273_1 = $272_1;
      $273$hi = i64toi32_i32$4;
      i64toi32_i32$4 = i64toi32_i32$0;
      i64toi32_i32$4 = $3$hi;
      i64toi32_i32$4 = $12$hi;
      i64toi32_i32$4 = $3$hi;
      i64toi32_i32$0 = $12$hi;
      i64toi32_i32$0 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$4 | 0, $12_1 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $277_1 = i64toi32_i32$0;
      $277$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $4$hi;
      i64toi32_i32$2 = i64toi32_i32$5;
      i64toi32_i32$0 = $277$hi;
      i64toi32_i32$1 = $277_1;
      i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $14_1 = i64toi32_i32$3;
      $14$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $4$hi;
      i64toi32_i32$5 = $14$hi;
      i64toi32_i32$4 = i64toi32_i32$3;
      i64toi32_i32$2 = $4$hi;
      i64toi32_i32$1 = $4_1;
      $281_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
      i64toi32_i32$4 = 0;
      $282$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $273$hi;
      i64toi32_i32$1 = $273_1;
      i64toi32_i32$5 = $282$hi;
      i64toi32_i32$2 = $281_1;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
      i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $283$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$3 = $10$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$1 = $10$hi;
      i64toi32_i32$1 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $286_1 = i64toi32_i32$1;
      $286$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $283$hi;
      i64toi32_i32$4 = i64toi32_i32$0;
      i64toi32_i32$1 = $286$hi;
      i64toi32_i32$2 = $286_1;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $287_1 = i64toi32_i32$5;
      $287$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $14$hi;
      $288_1 = $14_1;
      $288$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $17$hi;
      i64toi32_i32$0 = $19$hi;
      i64toi32_i32$0 = $17$hi;
      i64toi32_i32$3 = $17_1;
      i64toi32_i32$4 = $19$hi;
      i64toi32_i32$2 = $19_1;
      $291_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
      i64toi32_i32$3 = 0;
      $292$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $21$hi;
      i64toi32_i32$3 = i64toi32_i32$0;
      i64toi32_i32$3 = $21$hi;
      i64toi32_i32$2 = $21_1;
      i64toi32_i32$4 = $17_1;
      $295_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
      i64toi32_i32$2 = 0;
      $296$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $292$hi;
      i64toi32_i32$4 = $291_1;
      i64toi32_i32$3 = $296$hi;
      i64toi32_i32$0 = $295_1;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $297$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $288$hi;
      i64toi32_i32$2 = $288_1;
      i64toi32_i32$4 = $297$hi;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
      i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $4_1 = i64toi32_i32$3;
      $4$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $14$hi;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$5 = i64toi32_i32$3;
      i64toi32_i32$2 = $14$hi;
      i64toi32_i32$0 = $14_1;
      $301_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
      i64toi32_i32$5 = 0;
      $302$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $287$hi;
      i64toi32_i32$0 = $287_1;
      i64toi32_i32$1 = $302$hi;
      i64toi32_i32$2 = $301_1;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $303_1 = i64toi32_i32$4;
      $303$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$3 = $10$hi;
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$0 = $10$hi;
      i64toi32_i32$0 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $3_1 = i64toi32_i32$0;
      $3$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$3 = $12$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$0 = $12$hi;
      i64toi32_i32$0 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$3 | 0, $12_1 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $310_1 = i64toi32_i32$0;
      $310$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$5 = $3_1;
      i64toi32_i32$0 = $310$hi;
      i64toi32_i32$2 = $310_1;
      i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $2_1 = i64toi32_i32$1;
      $2$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $3$hi;
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$3 = i64toi32_i32$1;
      i64toi32_i32$5 = $3$hi;
      i64toi32_i32$2 = $3_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$2 = i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
      i64toi32_i32$4 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
        $240_1 = 0;
      } else {
        i64toi32_i32$4 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$0 | 0) | 0;
        $240_1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
      }
      $316_1 = $240_1;
      $316$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$3 = $2_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = 0;
        $241_1 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
      } else {
        i64toi32_i32$2 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
        $241_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
      }
      $318$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $316$hi;
      i64toi32_i32$4 = $316_1;
      i64toi32_i32$3 = $318$hi;
      i64toi32_i32$5 = $241_1;
      i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
      $319_1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
      $319$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $303$hi;
      i64toi32_i32$2 = $303_1;
      i64toi32_i32$4 = $319$hi;
      i64toi32_i32$5 = $319_1;
      i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $320_1 = i64toi32_i32$0;
      $320$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $4$hi;
      $321_1 = $4_1;
      $321$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$3 = $2_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
        $242_1 = 0;
      } else {
        i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
        $242_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
      }
      $323$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $321$hi;
      i64toi32_i32$1 = $321_1;
      i64toi32_i32$3 = $323$hi;
      i64toi32_i32$5 = $242_1;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $2_1 = i64toi32_i32$4;
      $2$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$2 = i64toi32_i32$4;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$5 = $4_1;
      $327_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$2 = 0;
      $328$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $320$hi;
      i64toi32_i32$5 = $320_1;
      i64toi32_i32$0 = $328$hi;
      i64toi32_i32$1 = $327_1;
      i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $329_1 = i64toi32_i32$3;
      $329$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $2$hi;
      $330_1 = $2_1;
      $330$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $20$hi;
      i64toi32_i32$2 = $20_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$1 = 32;
      i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
        i64toi32_i32$5 = 0;
        $243_1 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
      } else {
        i64toi32_i32$5 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
        $243_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$0 | 0) | 0;
      }
      $332_1 = $243_1;
      $332$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $13$hi;
      i64toi32_i32$5 = $22$hi;
      i64toi32_i32$5 = $13$hi;
      i64toi32_i32$4 = $13_1;
      i64toi32_i32$2 = $22$hi;
      i64toi32_i32$1 = $22_1;
      $335_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
      i64toi32_i32$4 = 0;
      $336$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $15$hi;
      i64toi32_i32$4 = i64toi32_i32$5;
      i64toi32_i32$4 = $15$hi;
      i64toi32_i32$1 = $15_1;
      i64toi32_i32$2 = $13_1;
      $339_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
      i64toi32_i32$1 = 0;
      $340$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $336$hi;
      i64toi32_i32$2 = $335_1;
      i64toi32_i32$4 = $340$hi;
      i64toi32_i32$5 = $339_1;
      i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $341$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $20$hi;
      i64toi32_i32$3 = $15$hi;
      i64toi32_i32$3 = $20$hi;
      i64toi32_i32$1 = $20_1;
      i64toi32_i32$2 = $15$hi;
      i64toi32_i32$5 = $15_1;
      $344_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$1 = 0;
      $345$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $341$hi;
      i64toi32_i32$5 = i64toi32_i32$0;
      i64toi32_i32$3 = $345$hi;
      i64toi32_i32$2 = $344_1;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      i64toi32_i32$1 = i64toi32_i32$4;
      i64toi32_i32$5 = 0;
      i64toi32_i32$2 = 32;
      i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$1 << i64toi32_i32$3 | 0;
        $245_1 = 0;
      } else {
        i64toi32_i32$5 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$3 | 0) | 0;
        $245_1 = i64toi32_i32$1 << i64toi32_i32$3 | 0;
      }
      $347$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $332$hi;
      i64toi32_i32$0 = $332_1;
      i64toi32_i32$1 = $347$hi;
      i64toi32_i32$2 = $245_1;
      i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
      $348_1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
      $348$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $330$hi;
      i64toi32_i32$5 = $330_1;
      i64toi32_i32$0 = $348$hi;
      i64toi32_i32$2 = $348_1;
      i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $4_1 = i64toi32_i32$3;
      $4$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$4 = $4$hi;
      i64toi32_i32$1 = i64toi32_i32$3;
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$2 = $2_1;
      $352_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
      i64toi32_i32$1 = 0;
      $353$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $329$hi;
      i64toi32_i32$2 = $329_1;
      i64toi32_i32$4 = $353$hi;
      i64toi32_i32$5 = $352_1;
      i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $354_1 = i64toi32_i32$0;
      $354$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $4$hi;
      $355_1 = $4_1;
      $355$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $16$hi;
      i64toi32_i32$3 = $21$hi;
      i64toi32_i32$3 = $16$hi;
      i64toi32_i32$1 = $16_1;
      i64toi32_i32$2 = $21$hi;
      i64toi32_i32$5 = $21_1;
      $358_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$1 = 0;
      $359$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $23$hi;
      i64toi32_i32$1 = i64toi32_i32$3;
      i64toi32_i32$1 = $23$hi;
      i64toi32_i32$5 = $23_1;
      i64toi32_i32$2 = $16_1;
      $362_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
      i64toi32_i32$5 = 0;
      $363$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $359$hi;
      i64toi32_i32$2 = $358_1;
      i64toi32_i32$1 = $363$hi;
      i64toi32_i32$3 = $362_1;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $364$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $355$hi;
      i64toi32_i32$5 = $355_1;
      i64toi32_i32$2 = $364$hi;
      i64toi32_i32$3 = i64toi32_i32$4;
      i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $2_1 = i64toi32_i32$1;
      $2$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $4$hi;
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$5 = $4$hi;
      i64toi32_i32$3 = $4_1;
      $368_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$0 = 0;
      $369$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $354$hi;
      i64toi32_i32$3 = $354_1;
      i64toi32_i32$4 = $369$hi;
      i64toi32_i32$5 = $368_1;
      i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $4_1 = i64toi32_i32$2;
      $4$hi = i64toi32_i32$1;
      i64toi32_i32$0 = i64toi32_i32$2;
      i64toi32_i32$3 = 65536;
      i64toi32_i32$5 = 0;
      i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
      if (!(i64toi32_i32$0 & i64toi32_i32$5 | 0 | i64toi32_i32$3 | 0)) {
        break label$14
      }
      $6_1 = $6_1 + 1 | 0;
      break label$13;
      }
      i64toi32_i32$3 = $18$hi;
      i64toi32_i32$1 = $18_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$5 = 63;
      i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = 0;
      $246_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
      } else {
      i64toi32_i32$0 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
      $246_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
      }
      $3_1 = $246_1;
      $3$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$3 = $4_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$5 = 1;
      i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
      $247_1 = 0;
      } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
      $247_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
      }
      $379_1 = $247_1;
      $379$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$0 = $2_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$5 = 63;
      i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $248_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      } else {
      i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      $248_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
      }
      $381$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $379$hi;
      i64toi32_i32$1 = $379_1;
      i64toi32_i32$0 = $381$hi;
      i64toi32_i32$5 = $248_1;
      i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
      $4_1 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
      $4$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$3 = $2_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$5 = 1;
      i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
      $250_1 = 0;
      } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
      $250_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
      }
      $384_1 = $250_1;
      $384$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$0 = $1_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$5 = 63;
      i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $251_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      } else {
      i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      $251_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
      }
      $386$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $384$hi;
      i64toi32_i32$1 = $384_1;
      i64toi32_i32$0 = $386$hi;
      i64toi32_i32$5 = $251_1;
      i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
      $2_1 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
      $2$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$3 = $18_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$5 = 1;
      i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
      $252_1 = 0;
      } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
      $252_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
      }
      $18_1 = $252_1;
      $18$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $3$hi;
      $390_1 = $3_1;
      $390$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$0 = $1_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$5 = 1;
      i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
      $253_1 = 0;
      } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
      $253_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
      }
      $392$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $390$hi;
      i64toi32_i32$1 = $390_1;
      i64toi32_i32$0 = $392$hi;
      i64toi32_i32$5 = $253_1;
      i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
      $1_1 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
      $1$hi = i64toi32_i32$0;
    }
    label$15 : {
      if (($6_1 | 0) < (32767 | 0)) {
      break label$15
      }
      i64toi32_i32$0 = $11$hi;
      i64toi32_i32$3 = $11_1;
      i64toi32_i32$1 = 2147418112;
      i64toi32_i32$5 = 0;
      i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
      $11_1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
      $11$hi = i64toi32_i32$1;
      i64toi32_i32$1 = 0;
      $1_1 = 0;
      $1$hi = i64toi32_i32$1;
      break label$1;
    }
    label$16 : {
      label$17 : {
      if (($6_1 | 0) > (0 | 0)) {
        break label$17
      }
      label$18 : {
        $7_1 = 1 - $6_1 | 0;
        if ($7_1 >>> 0 > 127 >>> 0) {
        break label$18
        }
        i64toi32_i32$1 = $18$hi;
        i64toi32_i32$1 = $1$hi;
        $6_1 = $6_1 + 127 | 0;
        i64toi32_i32$1 = $18$hi;
        i64toi32_i32$3 = $1$hi;
        $538($5_1 + 48 | 0 | 0, $18_1 | 0, i64toi32_i32$1 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $6_1 | 0);
        i64toi32_i32$3 = $2$hi;
        i64toi32_i32$3 = $4$hi;
        i64toi32_i32$3 = $2$hi;
        i64toi32_i32$1 = $4$hi;
        $538($5_1 + 32 | 0 | 0, $2_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$1 | 0, $6_1 | 0);
        i64toi32_i32$1 = $18$hi;
        i64toi32_i32$1 = $1$hi;
        i64toi32_i32$1 = $18$hi;
        i64toi32_i32$3 = $1$hi;
        $541($5_1 + 16 | 0 | 0, $18_1 | 0, i64toi32_i32$1 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $7_1 | 0);
        i64toi32_i32$3 = $2$hi;
        i64toi32_i32$3 = $4$hi;
        i64toi32_i32$3 = $2$hi;
        i64toi32_i32$1 = $4$hi;
        $541($5_1 | 0, $2_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$1 | 0, $7_1 | 0);
        i64toi32_i32$0 = $5_1;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] | 0;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
        $426_1 = i64toi32_i32$1;
        $426$hi = i64toi32_i32$3;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
        $428_1 = i64toi32_i32$3;
        $428$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $426$hi;
        i64toi32_i32$0 = $426_1;
        i64toi32_i32$3 = $428$hi;
        i64toi32_i32$5 = $428_1;
        i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
        $429_1 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
        $429$hi = i64toi32_i32$3;
        i64toi32_i32$1 = $5_1;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 52 | 0) >> 2] | 0;
        $431_1 = i64toi32_i32$3;
        $431$hi = i64toi32_i32$0;
        i64toi32_i32$1 = (i64toi32_i32$1 + 48 | 0) + 8 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
        $435_1 = i64toi32_i32$0;
        $435$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $431$hi;
        i64toi32_i32$1 = $431_1;
        i64toi32_i32$0 = $435$hi;
        i64toi32_i32$5 = $435_1;
        i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
        i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
        i64toi32_i32$1 = 0;
        i64toi32_i32$5 = 0;
        $437_1 = (i64toi32_i32$3 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$3 = 0;
        $438$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $429$hi;
        i64toi32_i32$5 = $429_1;
        i64toi32_i32$0 = $438$hi;
        i64toi32_i32$1 = $437_1;
        i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
        $18_1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
        $18$hi = i64toi32_i32$0;
        i64toi32_i32$3 = ($5_1 + 32 | 0) + 8 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
        $443_1 = i64toi32_i32$0;
        $443$hi = i64toi32_i32$5;
        i64toi32_i32$3 = ($5_1 + 16 | 0) + 8 | 0;
        i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
        $447_1 = i64toi32_i32$5;
        $447$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $443$hi;
        i64toi32_i32$3 = $443_1;
        i64toi32_i32$5 = $447$hi;
        i64toi32_i32$1 = $447_1;
        i64toi32_i32$5 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
        $1_1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
        $1$hi = i64toi32_i32$5;
        i64toi32_i32$0 = $5_1 + 8 | 0;
        i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
        $4_1 = i64toi32_i32$5;
        $4$hi = i64toi32_i32$3;
        i64toi32_i32$0 = $5_1;
        i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
        $2_1 = i64toi32_i32$3;
        $2$hi = i64toi32_i32$5;
        break label$16;
      }
      i64toi32_i32$5 = 0;
      $1_1 = 0;
      $1$hi = i64toi32_i32$5;
      break label$1;
      }
      i64toi32_i32$5 = 0;
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$1 = 48;
      i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
      $254_1 = 0;
      } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$4 | 0) | 0;
      $254_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
      }
      $456$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$5 = $4_1;
      i64toi32_i32$0 = 65535;
      i64toi32_i32$1 = -1;
      i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
      $458_1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
      $458$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $456$hi;
      i64toi32_i32$3 = $254_1;
      i64toi32_i32$5 = $458$hi;
      i64toi32_i32$1 = $458_1;
      i64toi32_i32$5 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
      $4_1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
      $4$hi = i64toi32_i32$5;
    }
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$5 = $11$hi;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$3 = $11$hi;
    i64toi32_i32$1 = $11_1;
    i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $11_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $11$hi = i64toi32_i32$3;
    label$19 : {
      i64toi32_i32$3 = $18$hi;
      $464_1 = !($18_1 | i64toi32_i32$3 | 0);
      i64toi32_i32$3 = $1$hi;
      i64toi32_i32$5 = $1_1;
      i64toi32_i32$0 = -1;
      i64toi32_i32$1 = -1;
      if ((i64toi32_i32$3 | 0) > (i64toi32_i32$0 | 0)) {
      $255_1 = 1
      } else {
      if ((i64toi32_i32$3 | 0) >= (i64toi32_i32$0 | 0)) {
        if (i64toi32_i32$5 >>> 0 <= i64toi32_i32$1 >>> 0) {
        $256_1 = 0
        } else {
        $256_1 = 1
        }
        $257_1 = $256_1;
      } else {
        $257_1 = 0
      }
      $255_1 = $257_1;
      }
      i64toi32_i32$5 = $1$hi;
      i64toi32_i32$1 = $1_1;
      i64toi32_i32$3 = -2147483648;
      i64toi32_i32$0 = 0;
      if ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) | 0 ? $464_1 : $255_1) {
      break label$19
      }
      i64toi32_i32$1 = $11$hi;
      $470_1 = $11_1;
      $470$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$0 = $2_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$3 = 1;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $1_1 = i64toi32_i32$4;
      $1$hi = i64toi32_i32$2;
      $474_1 = !(i64toi32_i32$4 | i64toi32_i32$2 | 0);
      i64toi32_i32$2 = 0;
      $475$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $470$hi;
      i64toi32_i32$1 = $470_1;
      i64toi32_i32$0 = $475$hi;
      i64toi32_i32$3 = $474_1;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $11_1 = i64toi32_i32$5;
      $11$hi = i64toi32_i32$4;
      break label$1;
    }
    label$20 : {
      i64toi32_i32$4 = $18$hi;
      i64toi32_i32$4 = $1$hi;
      i64toi32_i32$2 = $1_1;
      i64toi32_i32$1 = -2147483648;
      i64toi32_i32$3 = 0;
      i64toi32_i32$1 = i64toi32_i32$4 ^ i64toi32_i32$1 | 0;
      $479_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
      $479$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$4 = $18_1;
      i64toi32_i32$2 = $479$hi;
      i64toi32_i32$3 = $479_1;
      i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
      i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
      i64toi32_i32$4 = 0;
      i64toi32_i32$3 = 0;
      if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$4 | 0) | 0) {
      break label$20
      }
      i64toi32_i32$1 = $2$hi;
      $1_1 = $2_1;
      $1$hi = i64toi32_i32$1;
      break label$1;
    }
    i64toi32_i32$1 = $11$hi;
    $483_1 = $11_1;
    $483$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = 1;
    i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
    $486_1 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
    $486$hi = i64toi32_i32$2;
    i64toi32_i32$2 = i64toi32_i32$1;
    i64toi32_i32$1 = i64toi32_i32$3;
    i64toi32_i32$3 = $486$hi;
    i64toi32_i32$4 = $486_1;
    i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $1_1 = i64toi32_i32$0;
    $1$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $2$hi;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$4 = $2_1;
    $490_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
    i64toi32_i32$2 = 0;
    $491$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $483$hi;
    i64toi32_i32$4 = $483_1;
    i64toi32_i32$5 = $491$hi;
    i64toi32_i32$1 = $490_1;
    i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $11_1 = i64toi32_i32$3;
    $11$hi = i64toi32_i32$0;
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$4 = $0_1;
    HEAP32[i64toi32_i32$4 >> 2] = $1_1;
    HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = $11$hi;
    HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = $11_1;
    HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$0;
    global$0 = $5_1 + 96 | 0;
  }
  
  function $543() {
    return 0 | 0;
  }
  
  function $544() {
    return 0 | 0;
  }
  
  function $545($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1$hi = $1$hi | 0;
    $2_1 = $2_1 | 0;
    $2$hi = $2$hi | 0;
    $3_1 = $3_1 | 0;
    $3$hi = $3$hi | 0;
    $4_1 = $4_1 | 0;
    $4$hi = $4$hi | 0;
    var i64toi32_i32$5 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, $10$hi = 0, $10_1 = 0, $6_1 = 0, $9$hi = 0, $7_1 = 0, $5_1 = 0, $9_1 = 0, $12$hi = 0, $12_1 = 0, i64toi32_i32$6 = 0, $8_1 = 0, $11_1 = 0, $11$hi = 0, $139_1 = 0, $140_1 = 0, $141_1 = 0, $142_1 = 0, $143_1 = 0, $144_1 = 0, $145_1 = 0, $146_1 = 0, $147_1 = 0, $148_1 = 0, $149_1 = 0, $150_1 = 0, $151_1 = 0, $152_1 = 0, $153_1 = 0, $154_1 = 0, $155_1 = 0, $156_1 = 0, $157_1 = 0, $158_1 = 0, $159_1 = 0, $20_1 = 0, $25_1 = 0, $30_1 = 0, $34_1 = 0, $40_1 = 0, $48_1 = 0, $50_1 = 0, $58_1 = 0, $58$hi = 0, $64_1 = 0, $64$hi = 0, $68_1 = 0, $68$hi = 0, $78_1 = 0, $78$hi = 0, $106_1 = 0, $109_1 = 0, $136_1 = 0, $137_1 = 0, $137$hi = 0, $138_1 = 0, $138$hi = 0, $145$hi = 0, $148$hi = 0, $168_1 = 0, $169_1 = 0, $169$hi = 0, $170_1 = 0, $170$hi = 0, $177$hi = 0, $180$hi = 0, $193_1 = 0, $193$hi = 0, $195$hi = 0, $199_1 = 0, $199$hi = 0, $201$hi = 0, $228_1 = 0, $228$hi = 0, $230_1 = 0, $230$hi = 0, $234_1 = 0, $234$hi = 0, $236_1 = 0, $237$hi = 0, $251_1 = 0, $251$hi = 0, $254_1 = 0, $254$hi = 0, $262$hi = 0, $265_1 = 0, $266$hi = 0, $271_1 = 0, $272_1 = 0, $272$hi = 0, $273_1 = 0, $273$hi = 0, $280$hi = 0, $283$hi = 0, $298_1 = 0, $298$hi = 0, $304_1 = 0, $305$hi = 0, $311_1 = 0, $311$hi = 0, $313$hi = 0, $314_1 = 0, $314$hi = 0, $316_1 = 0, $316$hi = 0, $343_1 = 0, $343$hi = 0, $345_1 = 0, $345$hi = 0, $349_1 = 0, $349$hi = 0, $351_1 = 0, $352$hi = 0, $358_1 = 0, $358$hi = 0, $360$hi = 0, $364_1 = 0, $364$hi = 0, $367_1 = 0, $367$hi = 0, $368$hi = 0, $377_1 = 0, $377$hi = 0, $381$hi = 0, $385_1 = 0, $386$hi = 0, $389_1 = 0, $389$hi = 0, $392_1 = 0, $392$hi = 0, $396_1 = 0, $397$hi = 0, $400_1 = 0, $400$hi = 0, $406_1 = 0, $407$hi = 0, $411_1 = 0, $412$hi = 0, $415_1 = 0, $415$hi = 0, $421_1 = 0, $422$hi = 0, $426_1 = 0, $427$hi = 0;
    $5_1 = global$0 - 112 | 0;
    global$0 = $5_1;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $9_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $9$hi = i64toi32_i32$1;
    label$1 : {
    label$2 : {
      label$3 : {
      i64toi32_i32$1 = $1$hi;
      $6_1 = !($1_1 | i64toi32_i32$1 | 0);
      $20_1 = $6_1;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$0 = $2_1;
      i64toi32_i32$2 = 2147483647;
      i64toi32_i32$3 = -1;
      i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
      $10_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
      $10$hi = i64toi32_i32$2;
      i64toi32_i32$1 = $10_1;
      i64toi32_i32$0 = -2147418112;
      i64toi32_i32$3 = 0;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      i64toi32_i32$2 = i64toi32_i32$4;
      i64toi32_i32$1 = -2147418112;
      i64toi32_i32$3 = 0;
      $25_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$2 = $10$hi;
      if (!($10_1 | i64toi32_i32$2 | 0) ? $20_1 : $25_1) {
        break label$3
      }
      i64toi32_i32$2 = $3$hi;
      i64toi32_i32$3 = $3_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$1 = 0;
      $30_1 = (i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$3 = $9$hi;
      i64toi32_i32$1 = $9_1;
      i64toi32_i32$2 = -2147418112;
      i64toi32_i32$5 = 0;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $11_1 = i64toi32_i32$0;
      $11$hi = i64toi32_i32$4;
      i64toi32_i32$3 = i64toi32_i32$0;
      i64toi32_i32$1 = -2147418112;
      i64toi32_i32$5 = 0;
      $34_1 = i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$4;
      i64toi32_i32$3 = i64toi32_i32$4;
      i64toi32_i32$5 = i64toi32_i32$0;
      i64toi32_i32$4 = -2147418112;
      i64toi32_i32$1 = 0;
      if ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) | 0 ? $30_1 : $34_1) {
        break label$2
      }
      }
      label$4 : {
      i64toi32_i32$5 = $10$hi;
      i64toi32_i32$1 = $10_1;
      i64toi32_i32$3 = 2147418112;
      i64toi32_i32$4 = 0;
      $40_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$5;
      i64toi32_i32$1 = i64toi32_i32$5;
      i64toi32_i32$4 = $10_1;
      i64toi32_i32$5 = 2147418112;
      i64toi32_i32$3 = 0;
      if ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) | 0 ? $6_1 : $40_1) {
        break label$4
      }
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$3 = $2_1;
      i64toi32_i32$1 = 32768;
      i64toi32_i32$5 = 0;
      i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
      $4_1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
      $4$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $1$hi;
      $3_1 = $1_1;
      $3$hi = i64toi32_i32$1;
      break label$1;
      }
      label$5 : {
      i64toi32_i32$1 = $3$hi;
      $48_1 = !($3_1 | i64toi32_i32$1 | 0);
      i64toi32_i32$1 = $9$hi;
      i64toi32_i32$4 = $9_1;
      i64toi32_i32$3 = 2147418112;
      i64toi32_i32$5 = 0;
      $50_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$1;
      i64toi32_i32$4 = i64toi32_i32$1;
      i64toi32_i32$5 = $9_1;
      i64toi32_i32$1 = 2147418112;
      i64toi32_i32$3 = 0;
      if ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) | 0 ? $48_1 : $50_1) {
        break label$5
      }
      i64toi32_i32$5 = $4$hi;
      i64toi32_i32$3 = $4_1;
      i64toi32_i32$4 = 32768;
      i64toi32_i32$1 = 0;
      i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
      $4_1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
      $4$hi = i64toi32_i32$4;
      break label$1;
      }
      label$6 : {
      i64toi32_i32$4 = $1$hi;
      i64toi32_i32$4 = $10$hi;
      i64toi32_i32$5 = $10_1;
      i64toi32_i32$3 = 2147418112;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = i64toi32_i32$4 ^ i64toi32_i32$3 | 0;
      $58_1 = i64toi32_i32$5 ^ i64toi32_i32$1 | 0;
      $58$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $1$hi;
      i64toi32_i32$4 = $1_1;
      i64toi32_i32$5 = $58$hi;
      i64toi32_i32$1 = $58_1;
      i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
      i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
      i64toi32_i32$4 = 0;
      i64toi32_i32$1 = 0;
      if ((i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$4 | 0) | 0) {
        break label$6
      }
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$3 = $1$hi;
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$1 = $3_1;
      i64toi32_i32$5 = $1$hi;
      i64toi32_i32$4 = $1_1;
      i64toi32_i32$5 = i64toi32_i32$3 ^ i64toi32_i32$5 | 0;
      $64_1 = i64toi32_i32$1 ^ i64toi32_i32$4 | 0;
      $64$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $4$hi;
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$5 = $4$hi;
      i64toi32_i32$3 = $4_1;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$4 = $2_1;
      i64toi32_i32$1 = i64toi32_i32$5 ^ i64toi32_i32$1 | 0;
      i64toi32_i32$5 = i64toi32_i32$3 ^ i64toi32_i32$4 | 0;
      i64toi32_i32$3 = -2147483648;
      i64toi32_i32$4 = 0;
      i64toi32_i32$3 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
      $68_1 = i64toi32_i32$5 ^ i64toi32_i32$4 | 0;
      $68$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $64$hi;
      i64toi32_i32$1 = $64_1;
      i64toi32_i32$5 = $68$hi;
      i64toi32_i32$4 = $68_1;
      i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
      $6_1 = !(i64toi32_i32$1 | i64toi32_i32$4 | 0 | i64toi32_i32$5 | 0);
      i64toi32_i32$2 = $6_1;
      i64toi32_i32$5 = 2147450880;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$4 = i64toi32_i32$2 ? 0 : $2_1;
      i64toi32_i32$3 = i64toi32_i32$2 ? i64toi32_i32$5 : i64toi32_i32$1;
      $4_1 = i64toi32_i32$4;
      $4$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $1$hi;
      i64toi32_i32$5 = i64toi32_i32$2;
      i64toi32_i32$3 = 0;
      i64toi32_i32$4 = $1$hi;
      i64toi32_i32$1 = i64toi32_i32$5 ? 0 : $1_1;
      i64toi32_i32$2 = i64toi32_i32$5 ? i64toi32_i32$3 : i64toi32_i32$4;
      $3_1 = i64toi32_i32$1;
      $3$hi = i64toi32_i32$2;
      break label$1;
      }
      i64toi32_i32$2 = $3$hi;
      i64toi32_i32$2 = $9$hi;
      i64toi32_i32$5 = $9_1;
      i64toi32_i32$1 = 2147418112;
      i64toi32_i32$4 = 0;
      i64toi32_i32$1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
      $78_1 = i64toi32_i32$5 ^ i64toi32_i32$4 | 0;
      $78$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$2 = $3_1;
      i64toi32_i32$5 = $78$hi;
      i64toi32_i32$4 = $78_1;
      i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
      if (!(i64toi32_i32$2 | i64toi32_i32$4 | 0 | i64toi32_i32$5 | 0)) {
      break label$1
      }
      label$7 : {
      i64toi32_i32$5 = $1$hi;
      i64toi32_i32$5 = $10$hi;
      i64toi32_i32$5 = $1$hi;
      i64toi32_i32$1 = $1_1;
      i64toi32_i32$2 = $10$hi;
      i64toi32_i32$4 = $10_1;
      i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
      i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
      i64toi32_i32$1 = 0;
      i64toi32_i32$4 = 0;
      if ((i64toi32_i32$5 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | 0) {
        break label$7
      }
      i64toi32_i32$5 = $3$hi;
      i64toi32_i32$5 = $9$hi;
      i64toi32_i32$5 = $3$hi;
      i64toi32_i32$4 = $3_1;
      i64toi32_i32$2 = $9$hi;
      i64toi32_i32$1 = $9_1;
      i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
      i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
      i64toi32_i32$4 = 0;
      i64toi32_i32$1 = 0;
      if ((i64toi32_i32$5 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$4 | 0) | 0) {
        break label$1
      }
      i64toi32_i32$5 = $3$hi;
      i64toi32_i32$5 = $1$hi;
      i64toi32_i32$5 = $3$hi;
      i64toi32_i32$1 = $3_1;
      i64toi32_i32$2 = $1$hi;
      i64toi32_i32$4 = $1_1;
      i64toi32_i32$2 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
      $3_1 = i64toi32_i32$1 & i64toi32_i32$4 | 0;
      $3$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $4$hi;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$2 = $4$hi;
      i64toi32_i32$5 = $4_1;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$4 = $2_1;
      i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
      $4_1 = i64toi32_i32$5 & i64toi32_i32$4 | 0;
      $4$hi = i64toi32_i32$1;
      break label$1;
      }
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$1 = $9$hi;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$2 = $3_1;
      i64toi32_i32$5 = $9$hi;
      i64toi32_i32$4 = $9_1;
      i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
      if (!!(i64toi32_i32$2 | i64toi32_i32$4 | 0 | i64toi32_i32$5 | 0)) {
      break label$2
      }
      i64toi32_i32$5 = $1$hi;
      $3_1 = $1_1;
      $3$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $2$hi;
      $4_1 = $2_1;
      $4$hi = i64toi32_i32$5;
      break label$1;
    }
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$4 = $1_1;
    $106_1 = i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0;
    i64toi32_i32$1 = $9$hi;
    i64toi32_i32$1 = $10$hi;
    i64toi32_i32$1 = $9$hi;
    i64toi32_i32$4 = $9_1;
    i64toi32_i32$5 = $10$hi;
    i64toi32_i32$2 = $10_1;
    $109_1 = i64toi32_i32$1 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
    i64toi32_i32$4 = i64toi32_i32$1;
    i64toi32_i32$4 = i64toi32_i32$5;
    i64toi32_i32$4 = i64toi32_i32$1;
    i64toi32_i32$2 = $9_1;
    i64toi32_i32$1 = i64toi32_i32$5;
    i64toi32_i32$5 = $10_1;
    $7_1 = (i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) | 0 ? $106_1 : $109_1;
    i64toi32_i32$3 = $7_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$1 = i64toi32_i32$3 ? $3_1 : $1_1;
    i64toi32_i32$5 = i64toi32_i32$3 ? i64toi32_i32$2 : i64toi32_i32$4;
    $9_1 = i64toi32_i32$1;
    $9$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$5 = $2$hi;
    i64toi32_i32$2 = i64toi32_i32$3;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$4 = i64toi32_i32$2 ? $4_1 : $2_1;
    i64toi32_i32$3 = i64toi32_i32$2 ? i64toi32_i32$5 : i64toi32_i32$1;
    $11_1 = i64toi32_i32$4;
    $11$hi = i64toi32_i32$3;
    i64toi32_i32$2 = i64toi32_i32$4;
    i64toi32_i32$4 = 65535;
    i64toi32_i32$1 = -1;
    i64toi32_i32$4 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
    $10_1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
    $10$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $2$hi;
    i64toi32_i32$4 = i64toi32_i32$5;
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$4 = $2$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$1 = i64toi32_i32$5 ? $2_1 : $4_1;
    i64toi32_i32$3 = i64toi32_i32$5 ? i64toi32_i32$4 : i64toi32_i32$2;
    $12_1 = i64toi32_i32$1;
    $12$hi = i64toi32_i32$3;
    i64toi32_i32$5 = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$2 = 48;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $139_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
    } else {
      i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
      $139_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$4 | 0) | 0;
    }
    $8_1 = $139_1 & 32767 | 0;
    label$8 : {
      i64toi32_i32$1 = $11$hi;
      i64toi32_i32$3 = $11_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$2 = 48;
      i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = 0;
      $140_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      } else {
      i64toi32_i32$5 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      $140_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
      }
      $6_1 = $140_1 & 32767 | 0;
      if ($6_1) {
      break label$8
      }
      $136_1 = $5_1 + 96 | 0;
      i64toi32_i32$5 = $9$hi;
      $137_1 = $9_1;
      $137$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $10$hi;
      $138_1 = $10_1;
      $138$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $9$hi;
      i64toi32_i32$5 = $10$hi;
      $6_1 = !($10_1 | i64toi32_i32$5 | 0);
      i64toi32_i32$4 = $6_1;
      i64toi32_i32$5 = $9$hi;
      i64toi32_i32$3 = $10$hi;
      i64toi32_i32$2 = i64toi32_i32$4 ? $9_1 : $10_1;
      i64toi32_i32$1 = i64toi32_i32$4 ? i64toi32_i32$5 : i64toi32_i32$3;
      i64toi32_i32$3 = Math_clz32(i64toi32_i32$1);
      i64toi32_i32$4 = 0;
      if ((i64toi32_i32$3 | 0) == (32 | 0)) {
      $141_1 = Math_clz32(i64toi32_i32$2) + 32 | 0
      } else {
      $141_1 = i64toi32_i32$3
      }
      $145$hi = i64toi32_i32$4;
      i64toi32_i32$4 = 0;
      $148$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $145$hi;
      i64toi32_i32$2 = $141_1;
      i64toi32_i32$1 = $148$hi;
      i64toi32_i32$3 = $6_1 << 6 | 0;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $6_1 = i64toi32_i32$5;
      i64toi32_i32$0 = $137$hi;
      i64toi32_i32$2 = $138$hi;
      $538($136_1 | 0, $137_1 | 0, i64toi32_i32$0 | 0, $138_1 | 0, i64toi32_i32$2 | 0, i64toi32_i32$5 + -15 | 0 | 0);
      $6_1 = 16 - i64toi32_i32$5 | 0;
      i64toi32_i32$4 = $5_1 + 104 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
      $10_1 = i64toi32_i32$2;
      $10$hi = i64toi32_i32$0;
      i64toi32_i32$4 = $5_1;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 96 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 100 | 0) >> 2] | 0;
      $9_1 = i64toi32_i32$0;
      $9$hi = i64toi32_i32$2;
    }
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$3 = i64toi32_i32$1 ? $1_1 : $3_1;
    i64toi32_i32$4 = i64toi32_i32$1 ? i64toi32_i32$2 : i64toi32_i32$0;
    $3_1 = i64toi32_i32$3;
    $3$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $12$hi;
    i64toi32_i32$1 = $12_1;
    i64toi32_i32$3 = 65535;
    i64toi32_i32$0 = -1;
    i64toi32_i32$3 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
    $1_1 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
    $1$hi = i64toi32_i32$3;
    label$9 : {
      if ($8_1) {
      break label$9
      }
      $168_1 = $5_1 + 80 | 0;
      i64toi32_i32$3 = $3$hi;
      $169_1 = $3_1;
      $169$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $1$hi;
      $170_1 = $1_1;
      $170$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$3 = $1$hi;
      $7_1 = !($1_1 | i64toi32_i32$3 | 0);
      i64toi32_i32$2 = $7_1;
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$0 = i64toi32_i32$2 ? $3_1 : $1_1;
      i64toi32_i32$4 = i64toi32_i32$2 ? i64toi32_i32$3 : i64toi32_i32$1;
      i64toi32_i32$1 = Math_clz32(i64toi32_i32$4);
      i64toi32_i32$2 = 0;
      if ((i64toi32_i32$1 | 0) == (32 | 0)) {
      $142_1 = Math_clz32(i64toi32_i32$0) + 32 | 0
      } else {
      $142_1 = i64toi32_i32$1
      }
      $177$hi = i64toi32_i32$2;
      i64toi32_i32$2 = 0;
      $180$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $177$hi;
      i64toi32_i32$0 = $142_1;
      i64toi32_i32$4 = $180$hi;
      i64toi32_i32$1 = $7_1 << 6 | 0;
      i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $7_1 = i64toi32_i32$3;
      i64toi32_i32$5 = $169$hi;
      i64toi32_i32$0 = $170$hi;
      $538($168_1 | 0, $169_1 | 0, i64toi32_i32$5 | 0, $170_1 | 0, i64toi32_i32$0 | 0, i64toi32_i32$3 + -15 | 0 | 0);
      $8_1 = 16 - i64toi32_i32$3 | 0;
      i64toi32_i32$2 = $5_1 + 88 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $1_1 = i64toi32_i32$0;
      $1$hi = i64toi32_i32$5;
      i64toi32_i32$2 = $5_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 80 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 84 | 0) >> 2] | 0;
      $3_1 = i64toi32_i32$5;
      $3$hi = i64toi32_i32$0;
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = 3;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
      $143_1 = 0;
    } else {
      i64toi32_i32$5 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
      $143_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $193_1 = $143_1;
    $193$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$0 = $3_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 61;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $144_1 = i64toi32_i32$5 >>> i64toi32_i32$4 | 0;
    } else {
      i64toi32_i32$2 = i64toi32_i32$5 >>> i64toi32_i32$4 | 0;
      $144_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $195$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $193$hi;
    i64toi32_i32$5 = $193_1;
    i64toi32_i32$0 = $195$hi;
    i64toi32_i32$1 = $144_1;
    i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    i64toi32_i32$5 = 524288;
    i64toi32_i32$1 = 0;
    i64toi32_i32$5 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
    $1_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $1$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $10$hi;
    i64toi32_i32$0 = $10_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 3;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
      $145_1 = 0;
    } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$4 | 0) | 0;
      $145_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $199_1 = $145_1;
    $199$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $9$hi;
    i64toi32_i32$5 = $9_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 61;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = 0;
      $146_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
      i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      $146_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$4 | 0) | 0;
    }
    $201$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $199$hi;
    i64toi32_i32$2 = $199_1;
    i64toi32_i32$5 = $201$hi;
    i64toi32_i32$1 = $146_1;
    i64toi32_i32$5 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
    $12_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $12$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$0 = $3_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 3;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
      $147_1 = 0;
    } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$4 | 0) | 0;
      $147_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $10_1 = $147_1;
    $10$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$5 = $4_1;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = $2_1;
    i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
    $3_1 = i64toi32_i32$5 ^ i64toi32_i32$1 | 0;
    $3$hi = i64toi32_i32$0;
    label$10 : {
      if (($6_1 | 0) == ($8_1 | 0)) {
      break label$10
      }
      label$11 : {
      $7_1 = $6_1 - $8_1 | 0;
      if ($7_1 >>> 0 <= 127 >>> 0) {
        break label$11
      }
      i64toi32_i32$0 = 0;
      $1_1 = 0;
      $1$hi = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      $10_1 = 1;
      $10$hi = i64toi32_i32$0;
      break label$10;
      }
      i64toi32_i32$0 = $10$hi;
      i64toi32_i32$0 = $1$hi;
      i64toi32_i32$0 = $10$hi;
      i64toi32_i32$5 = $1$hi;
      $538($5_1 + 64 | 0 | 0, $10_1 | 0, i64toi32_i32$0 | 0, $1_1 | 0, i64toi32_i32$5 | 0, 128 - $7_1 | 0 | 0);
      i64toi32_i32$5 = i64toi32_i32$0;
      i64toi32_i32$5 = $1$hi;
      i64toi32_i32$5 = i64toi32_i32$0;
      i64toi32_i32$0 = $1$hi;
      $541($5_1 + 48 | 0 | 0, $10_1 | 0, i64toi32_i32$5 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $7_1 | 0);
      i64toi32_i32$2 = $5_1;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
      $228_1 = i64toi32_i32$0;
      $228$hi = i64toi32_i32$5;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 64 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 68 | 0) >> 2] | 0;
      $230_1 = i64toi32_i32$5;
      $230$hi = i64toi32_i32$0;
      i64toi32_i32$2 = (i64toi32_i32$2 + 64 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $234_1 = i64toi32_i32$0;
      $234$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $230$hi;
      i64toi32_i32$2 = $230_1;
      i64toi32_i32$0 = $234$hi;
      i64toi32_i32$1 = $234_1;
      i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
      i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
      i64toi32_i32$2 = 0;
      i64toi32_i32$1 = 0;
      $236_1 = (i64toi32_i32$5 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$5 = 0;
      $237$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $228$hi;
      i64toi32_i32$1 = $228_1;
      i64toi32_i32$0 = $237$hi;
      i64toi32_i32$2 = $236_1;
      i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
      $10_1 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
      $10$hi = i64toi32_i32$0;
      i64toi32_i32$5 = ($5_1 + 48 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $1_1 = i64toi32_i32$0;
      $1$hi = i64toi32_i32$1;
    }
    i64toi32_i32$1 = $12$hi;
    i64toi32_i32$5 = $12_1;
    i64toi32_i32$0 = 524288;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
    $12_1 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    $12$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $9$hi;
    i64toi32_i32$1 = $9_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 3;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      $148_1 = 0;
    } else {
      i64toi32_i32$5 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
      $148_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    }
    $9_1 = $148_1;
    $9$hi = i64toi32_i32$5;
    label$12 : {
      label$13 : {
      i64toi32_i32$5 = $3$hi;
      i64toi32_i32$0 = $3_1;
      i64toi32_i32$1 = -1;
      i64toi32_i32$2 = -1;
      if ((i64toi32_i32$5 | 0) > (i64toi32_i32$1 | 0)) {
        $149_1 = 1
      } else {
        if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$1 | 0)) {
        if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$2 >>> 0) {
          $150_1 = 0
        } else {
          $150_1 = 1
        }
        $151_1 = $150_1;
        } else {
        $151_1 = 0
        }
        $149_1 = $151_1;
      }
      if ($149_1) {
        break label$13
      }
      i64toi32_i32$0 = 0;
      $3_1 = 0;
      $3$hi = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      $4_1 = 0;
      $4$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $9$hi;
      i64toi32_i32$0 = $10$hi;
      i64toi32_i32$0 = $9$hi;
      i64toi32_i32$2 = $9_1;
      i64toi32_i32$5 = $10$hi;
      i64toi32_i32$1 = $10_1;
      i64toi32_i32$5 = i64toi32_i32$0 ^ i64toi32_i32$5 | 0;
      $251_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
      $251$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $12$hi;
      i64toi32_i32$5 = $1$hi;
      i64toi32_i32$5 = $12$hi;
      i64toi32_i32$0 = $12_1;
      i64toi32_i32$2 = $1$hi;
      i64toi32_i32$1 = $1_1;
      i64toi32_i32$2 = i64toi32_i32$5 ^ i64toi32_i32$2 | 0;
      $254_1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
      $254$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $251$hi;
      i64toi32_i32$5 = $251_1;
      i64toi32_i32$0 = $254$hi;
      i64toi32_i32$1 = $254_1;
      i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
      if (!(i64toi32_i32$5 | i64toi32_i32$1 | 0 | i64toi32_i32$0 | 0)) {
        break label$1
      }
      i64toi32_i32$0 = $9$hi;
      i64toi32_i32$0 = $10$hi;
      i64toi32_i32$0 = $9$hi;
      i64toi32_i32$2 = $9_1;
      i64toi32_i32$5 = $10$hi;
      i64toi32_i32$1 = $10_1;
      i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$1 | 0;
      i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0;
      i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
      i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
      $2_1 = i64toi32_i32$4;
      $2$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $12$hi;
      i64toi32_i32$3 = $1$hi;
      i64toi32_i32$3 = $12$hi;
      i64toi32_i32$0 = $12_1;
      i64toi32_i32$2 = $1$hi;
      i64toi32_i32$1 = $1_1;
      i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$1 | 0;
      i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0;
      i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
      i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$4 | 0;
      $262$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $9$hi;
      i64toi32_i32$4 = $10$hi;
      i64toi32_i32$4 = $9$hi;
      i64toi32_i32$3 = $9_1;
      i64toi32_i32$0 = $10$hi;
      i64toi32_i32$1 = $10_1;
      $265_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
      i64toi32_i32$3 = 0;
      $266$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $262$hi;
      i64toi32_i32$1 = i64toi32_i32$5;
      i64toi32_i32$4 = $266$hi;
      i64toi32_i32$0 = $265_1;
      i64toi32_i32$2 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
      i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0;
      i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
      i64toi32_i32$5 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
      $4_1 = i64toi32_i32$2;
      $4$hi = i64toi32_i32$5;
      i64toi32_i32$3 = i64toi32_i32$2;
      i64toi32_i32$1 = 524287;
      i64toi32_i32$0 = -1;
      if (i64toi32_i32$5 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0) {
        break label$12
      }
      $271_1 = $5_1 + 32 | 0;
      i64toi32_i32$3 = $2$hi;
      $272_1 = $2_1;
      $272$hi = i64toi32_i32$3;
      i64toi32_i32$3 = i64toi32_i32$5;
      $273_1 = i64toi32_i32$2;
      $273$hi = i64toi32_i32$5;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$3 = i64toi32_i32$5;
      i64toi32_i32$3 = i64toi32_i32$5;
      i64toi32_i32$3 = i64toi32_i32$5;
      $7_1 = !(i64toi32_i32$2 | i64toi32_i32$5 | 0);
      i64toi32_i32$4 = $7_1;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$1 = i64toi32_i32$4 ? $2_1 : i64toi32_i32$2;
      i64toi32_i32$0 = i64toi32_i32$4 ? i64toi32_i32$3 : i64toi32_i32$5;
      i64toi32_i32$5 = Math_clz32(i64toi32_i32$0);
      i64toi32_i32$4 = 0;
      if ((i64toi32_i32$5 | 0) == (32 | 0)) {
        $152_1 = Math_clz32(i64toi32_i32$1) + 32 | 0
      } else {
        $152_1 = i64toi32_i32$5
      }
      $280$hi = i64toi32_i32$4;
      i64toi32_i32$4 = 0;
      $283$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $280$hi;
      i64toi32_i32$1 = $152_1;
      i64toi32_i32$0 = $283$hi;
      i64toi32_i32$5 = $7_1 << 6 | 0;
      i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $7_1 = i64toi32_i32$3 + -12 | 0;
      i64toi32_i32$2 = $272$hi;
      i64toi32_i32$1 = $273$hi;
      $538($271_1 | 0, $272_1 | 0, i64toi32_i32$2 | 0, $273_1 | 0, i64toi32_i32$1 | 0, $7_1 | 0);
      $6_1 = $6_1 - $7_1 | 0;
      i64toi32_i32$4 = $5_1 + 40 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
      $4_1 = i64toi32_i32$1;
      $4$hi = i64toi32_i32$2;
      i64toi32_i32$4 = $5_1;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 32 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 36 | 0) >> 2] | 0;
      $2_1 = i64toi32_i32$2;
      $2$hi = i64toi32_i32$1;
      break label$12;
      }
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$1 = $12$hi;
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$4 = $1_1;
      i64toi32_i32$2 = $12$hi;
      i64toi32_i32$5 = $12_1;
      i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
      i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $298_1 = i64toi32_i32$0;
      $298$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $10$hi;
      i64toi32_i32$3 = $9$hi;
      i64toi32_i32$3 = $10$hi;
      i64toi32_i32$1 = $10_1;
      i64toi32_i32$4 = $9$hi;
      i64toi32_i32$5 = $9_1;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $2_1 = i64toi32_i32$2;
      $2$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $10$hi;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$3 = i64toi32_i32$2;
      i64toi32_i32$1 = $10$hi;
      i64toi32_i32$5 = $10_1;
      $304_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$3 = 0;
      $305$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $298$hi;
      i64toi32_i32$5 = $298_1;
      i64toi32_i32$0 = $305$hi;
      i64toi32_i32$1 = $304_1;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
      i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $4_1 = i64toi32_i32$4;
      $4$hi = i64toi32_i32$2;
      i64toi32_i32$3 = i64toi32_i32$4;
      i64toi32_i32$5 = 1048576;
      i64toi32_i32$1 = 0;
      i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
      if (!(i64toi32_i32$4 & i64toi32_i32$1 | 0 | i64toi32_i32$5 | 0)) {
      break label$12
      }
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$1 = 1;
      i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $153_1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
      } else {
      i64toi32_i32$3 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
      $153_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$0 | 0) | 0;
      }
      $311_1 = $153_1;
      $311$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$5 = $4_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$1 = 63;
      i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
      $154_1 = 0;
      } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$0 | 0) | 0;
      $154_1 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
      }
      $313$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $311$hi;
      i64toi32_i32$3 = $311_1;
      i64toi32_i32$5 = $313$hi;
      i64toi32_i32$1 = $154_1;
      i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
      $314_1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
      $314$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $10$hi;
      i64toi32_i32$2 = $10_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$1 = 1;
      i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
      $316_1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
      $316$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $314$hi;
      i64toi32_i32$5 = $314_1;
      i64toi32_i32$2 = $316$hi;
      i64toi32_i32$1 = $316_1;
      i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
      $2_1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
      $2$hi = i64toi32_i32$2;
      $6_1 = $6_1 + 1 | 0;
      i64toi32_i32$2 = $4$hi;
      i64toi32_i32$3 = $4_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$1 = 1;
      i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = 0;
      $155_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
      } else {
      i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
      $155_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
      }
      $4_1 = $155_1;
      $4$hi = i64toi32_i32$5;
    }
    i64toi32_i32$5 = $11$hi;
    i64toi32_i32$2 = $11_1;
    i64toi32_i32$3 = -2147483648;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
    $10_1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
    $10$hi = i64toi32_i32$3;
    label$14 : {
      if (($6_1 | 0) < (32767 | 0)) {
      break label$14
      }
      i64toi32_i32$5 = $10_1;
      i64toi32_i32$2 = 2147418112;
      i64toi32_i32$1 = 0;
      i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
      $4_1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
      $4$hi = i64toi32_i32$2;
      i64toi32_i32$2 = 0;
      $3_1 = 0;
      $3$hi = i64toi32_i32$2;
      break label$1;
    }
    $7_1 = 0;
    label$15 : {
      label$16 : {
      if (($6_1 | 0) <= (0 | 0)) {
        break label$16
      }
      $7_1 = $6_1;
      break label$15;
      }
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$2 = $4$hi;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$5 = $4$hi;
      $538($5_1 + 16 | 0 | 0, $2_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$5 | 0, $6_1 + 127 | 0 | 0);
      i64toi32_i32$5 = i64toi32_i32$2;
      i64toi32_i32$5 = $4$hi;
      i64toi32_i32$5 = i64toi32_i32$2;
      i64toi32_i32$2 = $4$hi;
      $541($5_1 | 0, $2_1 | 0, i64toi32_i32$5 | 0, $4_1 | 0, i64toi32_i32$2 | 0, 1 - $6_1 | 0 | 0);
      i64toi32_i32$3 = $5_1;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
      $343_1 = i64toi32_i32$2;
      $343$hi = i64toi32_i32$5;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 16 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 20 | 0) >> 2] | 0;
      $345_1 = i64toi32_i32$5;
      $345$hi = i64toi32_i32$2;
      i64toi32_i32$3 = (i64toi32_i32$3 + 16 | 0) + 8 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
      $349_1 = i64toi32_i32$2;
      $349$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $345$hi;
      i64toi32_i32$3 = $345_1;
      i64toi32_i32$2 = $349$hi;
      i64toi32_i32$1 = $349_1;
      i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
      i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
      i64toi32_i32$3 = 0;
      i64toi32_i32$1 = 0;
      $351_1 = (i64toi32_i32$5 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$5 = 0;
      $352$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $343$hi;
      i64toi32_i32$1 = $343_1;
      i64toi32_i32$2 = $352$hi;
      i64toi32_i32$3 = $351_1;
      i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
      $2_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
      $2$hi = i64toi32_i32$2;
      i64toi32_i32$5 = $5_1 + 8 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $4_1 = i64toi32_i32$2;
      $4$hi = i64toi32_i32$1;
    }
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$5 = $2_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 3;
    i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $156_1 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
    } else {
      i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
      $156_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
    }
    $358_1 = $156_1;
    $358$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 61;
    i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
      $157_1 = 0;
    } else {
      i64toi32_i32$5 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$0 | 0) | 0;
      $157_1 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
    }
    $360$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $358$hi;
    i64toi32_i32$2 = $358_1;
    i64toi32_i32$1 = $360$hi;
    i64toi32_i32$3 = $157_1;
    i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    $3_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $3$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
      $158_1 = 0;
    } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
      $158_1 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
    }
    $364_1 = $158_1;
    $364$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 3;
    i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = 0;
      $159_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    } else {
      i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
      $159_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
    }
    i64toi32_i32$2 = $159_1;
    i64toi32_i32$1 = 65535;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
    $367_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $367$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $364$hi;
    i64toi32_i32$5 = $364_1;
    i64toi32_i32$2 = $367$hi;
    i64toi32_i32$3 = $367_1;
    i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
    $368$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $10$hi;
    i64toi32_i32$2 = $368$hi;
    i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    i64toi32_i32$5 = $10$hi;
    i64toi32_i32$3 = $10_1;
    i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
    $4_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
    $4$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $2$hi;
    $6_1 = $2_1 & 7 | 0;
    label$17 : {
      label$18 : {
      label$19 : {
        switch ($543() | 0 | 0) {
        case 0:
        label$22 : {
          if (($6_1 | 0) == (4 | 0)) {
          break label$22
          }
          i64toi32_i32$5 = $4$hi;
          $377_1 = $4_1;
          $377$hi = i64toi32_i32$5;
          i64toi32_i32$5 = $3$hi;
          i64toi32_i32$5 = 0;
          $381$hi = i64toi32_i32$5;
          i64toi32_i32$5 = $3$hi;
          i64toi32_i32$2 = $3_1;
          i64toi32_i32$1 = $381$hi;
          i64toi32_i32$3 = $6_1 >>> 0 > 4 >>> 0;
          i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
          i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
          if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
          i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
          }
          $10_1 = i64toi32_i32$0;
          $10$hi = i64toi32_i32$4;
          i64toi32_i32$4 = $3$hi;
          i64toi32_i32$4 = $10$hi;
          i64toi32_i32$5 = i64toi32_i32$0;
          i64toi32_i32$2 = $3$hi;
          i64toi32_i32$3 = $3_1;
          $385_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
          i64toi32_i32$5 = 0;
          $386$hi = i64toi32_i32$5;
          i64toi32_i32$5 = $377$hi;
          i64toi32_i32$3 = $377_1;
          i64toi32_i32$4 = $386$hi;
          i64toi32_i32$2 = $385_1;
          i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
          i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
          if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
          i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
          }
          $4_1 = i64toi32_i32$1;
          $4$hi = i64toi32_i32$0;
          i64toi32_i32$0 = $10$hi;
          $3_1 = $10_1;
          $3$hi = i64toi32_i32$0;
          break label$18;
        }
        i64toi32_i32$0 = $4$hi;
        $389_1 = $4_1;
        $389$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $3$hi;
        i64toi32_i32$5 = $3_1;
        i64toi32_i32$3 = 0;
        i64toi32_i32$2 = 1;
        i64toi32_i32$3 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
        $392_1 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
        $392$hi = i64toi32_i32$3;
        i64toi32_i32$3 = i64toi32_i32$0;
        i64toi32_i32$0 = i64toi32_i32$5;
        i64toi32_i32$5 = $392$hi;
        i64toi32_i32$2 = $392_1;
        i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
        i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
          i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
        }
        $10_1 = i64toi32_i32$4;
        $10$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $3$hi;
        i64toi32_i32$1 = $10$hi;
        i64toi32_i32$3 = i64toi32_i32$4;
        i64toi32_i32$0 = $3$hi;
        i64toi32_i32$2 = $3_1;
        $396_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
        i64toi32_i32$3 = 0;
        $397$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $389$hi;
        i64toi32_i32$2 = $389_1;
        i64toi32_i32$1 = $397$hi;
        i64toi32_i32$0 = $396_1;
        i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
        i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
        if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
          i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
        }
        $4_1 = i64toi32_i32$5;
        $4$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $10$hi;
        $3_1 = $10_1;
        $3$hi = i64toi32_i32$4;
        break label$17;
        case 1:
        i64toi32_i32$4 = $4$hi;
        $400_1 = $4_1;
        $400$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $3$hi;
        i64toi32_i32$4 = $10$hi;
        i64toi32_i32$3 = $10_1;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 0;
        $406_1 = ((i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$4 | 0) != (i64toi32_i32$2 | 0) | 0) & ($6_1 | 0) != (0 | 0) | 0;
        i64toi32_i32$3 = 0;
        $407$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $3$hi;
        i64toi32_i32$0 = $3_1;
        i64toi32_i32$4 = $407$hi;
        i64toi32_i32$2 = $406_1;
        i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
        i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
        if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
          i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
        }
        $10_1 = i64toi32_i32$1;
        $10$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $3$hi;
        i64toi32_i32$5 = $10$hi;
        i64toi32_i32$3 = i64toi32_i32$1;
        i64toi32_i32$0 = $3$hi;
        i64toi32_i32$2 = $3_1;
        $411_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
        i64toi32_i32$3 = 0;
        $412$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $400$hi;
        i64toi32_i32$2 = $400_1;
        i64toi32_i32$5 = $412$hi;
        i64toi32_i32$0 = $411_1;
        i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
        i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
          i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
        }
        $4_1 = i64toi32_i32$4;
        $4$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $10$hi;
        $3_1 = $10_1;
        $3$hi = i64toi32_i32$1;
        break label$18;
        case 2:
        break label$19;
        default:
        break label$18;
        };
      }
      i64toi32_i32$1 = $4$hi;
      $415_1 = $4_1;
      $415$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$1 = $10$hi;
      $421_1 = !($10_1 | i64toi32_i32$1 | 0) & ($6_1 | 0) != (0 | 0) | 0;
      i64toi32_i32$1 = 0;
      $422$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$3 = $3_1;
      i64toi32_i32$2 = $422$hi;
      i64toi32_i32$0 = $421_1;
      i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $10_1 = i64toi32_i32$5;
      $10$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $3$hi;
      i64toi32_i32$4 = $10$hi;
      i64toi32_i32$1 = i64toi32_i32$5;
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$0 = $3_1;
      $426_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
      i64toi32_i32$1 = 0;
      $427$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $415$hi;
      i64toi32_i32$0 = $415_1;
      i64toi32_i32$4 = $427$hi;
      i64toi32_i32$3 = $426_1;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $4_1 = i64toi32_i32$2;
      $4$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $10$hi;
      $3_1 = $10_1;
      $3$hi = i64toi32_i32$5;
      }
      if (!$6_1) {
      break label$1
      }
    }
    $544() | 0;
    }
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$0 = $0_1;
    HEAP32[i64toi32_i32$0 >> 2] = $3_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $4_1;
    HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$5;
    global$0 = $5_1 + 112 | 0;
  }
  
  function $546($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = +$1_1;
    var i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, $5_1 = 0, $5$hi = 0, $6_1 = 0, $6$hi = 0, $2_1 = 0, $7$hi = 0, $7_1 = 0, $4_1 = 0, $4$hi = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $3_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $36$hi = 0, $40_1 = 0, $61_1 = 0, $63$hi = 0, $65_1 = 0, $65$hi = 0, $66$hi = 0, $68_1 = 0;
    $2_1 = global$0 - 16 | 0;
    global$0 = $2_1;
    wasm2js_scratch_store_f64(+$1_1);
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    $4_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = 1048575;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $5_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $5$hi = i64toi32_i32$1;
    label$1 : {
    label$2 : {
      i64toi32_i32$1 = i64toi32_i32$0;
      i64toi32_i32$0 = i64toi32_i32$2;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = 52;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $28_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      } else {
      i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      $28_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
      }
      i64toi32_i32$1 = $28_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 2047;
      i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
      $6_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
      $6$hi = i64toi32_i32$0;
      if (!($6_1 | i64toi32_i32$0 | 0)) {
      break label$2
      }
      label$3 : {
      i64toi32_i32$2 = $6_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = 2047;
      if ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0) {
        break label$3
      }
      i64toi32_i32$2 = $5$hi;
      i64toi32_i32$3 = $5_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$1 = 4;
      i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
        i64toi32_i32$0 = 0;
        $29_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      } else {
        i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
        $29_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
      }
      $7_1 = $29_1;
      $7$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $5$hi;
      i64toi32_i32$2 = $5_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$1 = 60;
      i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
        $30_1 = 0;
      } else {
        i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
        $30_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
      }
      $5_1 = $30_1;
      $5$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $6$hi;
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$1 = 15360;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $6_1 = i64toi32_i32$4;
      $6$hi = i64toi32_i32$5;
      break label$1;
      }
      i64toi32_i32$5 = $5$hi;
      i64toi32_i32$3 = $5_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$1 = 4;
      i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = 0;
      $31_1 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
      } else {
      i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
      $31_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$2 | 0) | 0;
      }
      $7_1 = $31_1;
      $7$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $5$hi;
      i64toi32_i32$5 = $5_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$1 = 60;
      i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
      $32_1 = 0;
      } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$2 | 0) | 0;
      $32_1 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
      }
      $5_1 = $32_1;
      $5$hi = i64toi32_i32$3;
      i64toi32_i32$3 = 0;
      $6_1 = 32767;
      $6$hi = i64toi32_i32$3;
      break label$1;
    }
    label$4 : {
      i64toi32_i32$3 = $5$hi;
      if (!!($5_1 | i64toi32_i32$3 | 0)) {
      break label$4
      }
      i64toi32_i32$3 = 0;
      $5_1 = 0;
      $5$hi = i64toi32_i32$3;
      i64toi32_i32$3 = 0;
      $7_1 = 0;
      $7$hi = i64toi32_i32$3;
      i64toi32_i32$3 = 0;
      $6_1 = 0;
      $6$hi = i64toi32_i32$3;
      break label$1;
    }
    $35_1 = $2_1;
    i64toi32_i32$3 = $5$hi;
    $36_1 = $5_1;
    $36$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $4$hi;
    $40_1 = Math_clz32($4_1) | 32 | 0;
    i64toi32_i32$3 = $5$hi;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = 32;
    i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = 0;
      $33_1 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
    } else {
      i64toi32_i32$5 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
      $33_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$2 | 0) | 0;
    }
    i64toi32_i32$5 = $5$hi;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$0 = 1;
    i64toi32_i32$1 = 0;
    $3_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0 ? $40_1 : Math_clz32($33_1);
    i64toi32_i32$3 = $36$hi;
    i64toi32_i32$5 = 0;
    $538($35_1 | 0, $36_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$5 | 0, $3_1 + 49 | 0 | 0);
    i64toi32_i32$5 = 0;
    $6_1 = 15372 - $3_1 | 0;
    $6$hi = i64toi32_i32$5;
    i64toi32_i32$1 = $2_1 + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    i64toi32_i32$1 = i64toi32_i32$5;
    i64toi32_i32$5 = 65536;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = i64toi32_i32$3 ^ i64toi32_i32$5 | 0;
    $7_1 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
    $7$hi = i64toi32_i32$5;
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $5_1 = i64toi32_i32$5;
    $5$hi = i64toi32_i32$1;
    }
    i64toi32_i32$1 = $5$hi;
    i64toi32_i32$5 = $0_1;
    HEAP32[i64toi32_i32$5 >> 2] = $5_1;
    HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$1;
    $61_1 = i64toi32_i32$5;
    i64toi32_i32$1 = $6$hi;
    i64toi32_i32$3 = $6_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
    $34_1 = 0;
    } else {
    i64toi32_i32$5 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$2 | 0) | 0;
    $34_1 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
    }
    $63$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$3 = -2147483648;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
    $65_1 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
    $65$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $63$hi;
    i64toi32_i32$5 = $34_1;
    i64toi32_i32$1 = $65$hi;
    i64toi32_i32$0 = $65_1;
    i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
    $66$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $7$hi;
    i64toi32_i32$1 = $66$hi;
    i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    i64toi32_i32$5 = $7$hi;
    i64toi32_i32$0 = $7_1;
    i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
    $68_1 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    i64toi32_i32$3 = $61_1;
    HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] = $68_1;
    HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] = i64toi32_i32$5;
    global$0 = $2_1 + 16 | 0;
  }
  
  function $547($0_1, $0$hi, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi) {
    $0_1 = $0_1 | 0;
    $0$hi = $0$hi | 0;
    $1_1 = $1_1 | 0;
    $1$hi = $1$hi | 0;
    $2_1 = $2_1 | 0;
    $2$hi = $2$hi | 0;
    $3_1 = $3_1 | 0;
    $3$hi = $3$hi | 0;
    var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $6_1 = 0, $4_1 = 0, $5$hi = 0, $6$hi = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, $8_1 = 0, $12_1 = 0, $17_1 = 0, $21_1 = 0, $27_1 = 0, $27$hi = 0, $30_1 = 0, $30$hi = 0, $40_1 = 0, $51_1 = 0, $51$hi = 0, $54_1 = 0, $54$hi = 0, $59_1 = 0, $70_1 = 0, $70$hi = 0, $73_1 = 0, $73$hi = 0;
    $4_1 = 1;
    label$1 : {
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 0;
    $8_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$0 = 2147483647;
    i64toi32_i32$1 = -1;
    i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
    $5_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
    $5$hi = i64toi32_i32$0;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$3 = 2147418112;
    i64toi32_i32$1 = 0;
    $12_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = 2147418112;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0 ? $8_1 : $12_1) {
      break label$1
    }
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 0;
    $17_1 = (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$0 = $3_1;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$2 = -1;
    i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
    $6_1 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
    $6$hi = i64toi32_i32$1;
    i64toi32_i32$3 = $6_1;
    i64toi32_i32$0 = 2147418112;
    i64toi32_i32$2 = 0;
    $21_1 = i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
    i64toi32_i32$3 = i64toi32_i32$1;
    i64toi32_i32$2 = $6_1;
    i64toi32_i32$1 = 2147418112;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) | 0 ? $17_1 : $21_1) {
      break label$1
    }
    label$2 : {
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$2 = $0$hi;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$0 = $2_1;
      i64toi32_i32$3 = $0$hi;
      i64toi32_i32$1 = $0_1;
      i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
      $27_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
      $27$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $6$hi;
      i64toi32_i32$3 = $5$hi;
      i64toi32_i32$3 = $6$hi;
      i64toi32_i32$2 = $6_1;
      i64toi32_i32$0 = $5$hi;
      i64toi32_i32$1 = $5_1;
      i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
      $30_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
      $30$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $27$hi;
      i64toi32_i32$3 = $27_1;
      i64toi32_i32$2 = $30$hi;
      i64toi32_i32$1 = $30_1;
      i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
      if (!!(i64toi32_i32$3 | i64toi32_i32$1 | 0 | i64toi32_i32$2 | 0)) {
      break label$2
      }
      return 0 | 0;
    }
    label$3 : {
      i64toi32_i32$2 = $3$hi;
      i64toi32_i32$2 = $1$hi;
      i64toi32_i32$2 = $3$hi;
      i64toi32_i32$0 = $3_1;
      i64toi32_i32$3 = $1$hi;
      i64toi32_i32$1 = $1_1;
      i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$1 = 0;
      if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
      $35_1 = 1
      } else {
      if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
        if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$1 >>> 0) {
        $36_1 = 0
        } else {
        $36_1 = 1
        }
        $37_1 = $36_1;
      } else {
        $37_1 = 0
      }
      $35_1 = $37_1;
      }
      if ($35_1) {
      break label$3
      }
      label$4 : {
      i64toi32_i32$2 = $0$hi;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$2 = $0$hi;
      i64toi32_i32$1 = $0_1;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$0 = $2_1;
      $40_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$0 = $1_1;
      i64toi32_i32$2 = $3$hi;
      i64toi32_i32$3 = $3_1;
      if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
        $38_1 = 1
      } else {
        if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
        if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
          $39_1 = 0
        } else {
          $39_1 = 1
        }
        $41_1 = $39_1;
        } else {
        $41_1 = 0
        }
        $38_1 = $41_1;
      }
      i64toi32_i32$0 = $1$hi;
      i64toi32_i32$0 = $3$hi;
      i64toi32_i32$0 = $1$hi;
      i64toi32_i32$3 = $1_1;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$2 = $3_1;
      if (!((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $40_1 : $38_1)) {
        break label$4
      }
      return -1 | 0;
      }
      i64toi32_i32$3 = $0$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$3 = $0$hi;
      i64toi32_i32$2 = $0_1;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$1 = $2_1;
      i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
      $51_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
      $51$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $1$hi;
      i64toi32_i32$0 = $3$hi;
      i64toi32_i32$0 = $1$hi;
      i64toi32_i32$3 = $1_1;
      i64toi32_i32$2 = $3$hi;
      i64toi32_i32$1 = $3_1;
      i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
      $54_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
      $54$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $51$hi;
      i64toi32_i32$0 = $51_1;
      i64toi32_i32$3 = $54$hi;
      i64toi32_i32$1 = $54_1;
      i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$1 = 0;
      return (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0 | 0;
    }
    label$5 : {
      i64toi32_i32$2 = $0$hi;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$2 = $0$hi;
      i64toi32_i32$1 = $0_1;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$0 = $2_1;
      $59_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$0 = $1_1;
      i64toi32_i32$2 = $3$hi;
      i64toi32_i32$3 = $3_1;
      if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
      $42_1 = 1
      } else {
      if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
        if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
        $43_1 = 0
        } else {
        $43_1 = 1
        }
        $44_1 = $43_1;
      } else {
        $44_1 = 0
      }
      $42_1 = $44_1;
      }
      i64toi32_i32$0 = $1$hi;
      i64toi32_i32$0 = $3$hi;
      i64toi32_i32$0 = $1$hi;
      i64toi32_i32$3 = $1_1;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$2 = $3_1;
      if (!((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $59_1 : $42_1)) {
      break label$5
      }
      return -1 | 0;
    }
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = $2_1;
    i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
    $70_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
    $70$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
    $73_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
    $73$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $70$hi;
    i64toi32_i32$0 = $70_1;
    i64toi32_i32$3 = $73$hi;
    i64toi32_i32$1 = $73_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    $4_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0;
    }
    return $4_1 | 0;
  }
  
  function $548($0_1, $0$hi, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi) {
    $0_1 = $0_1 | 0;
    $0$hi = $0$hi | 0;
    $1_1 = $1_1 | 0;
    $1$hi = $1$hi | 0;
    $2_1 = $2_1 | 0;
    $2$hi = $2$hi | 0;
    $3_1 = $3_1 | 0;
    $3$hi = $3$hi | 0;
    var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $6_1 = 0, $4_1 = 0, $5$hi = 0, $6$hi = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, $8_1 = 0, $12_1 = 0, $17_1 = 0, $21_1 = 0, $27_1 = 0, $27$hi = 0, $30_1 = 0, $30$hi = 0, $40_1 = 0, $50_1 = 0, $50$hi = 0, $53_1 = 0, $53$hi = 0, $58_1 = 0, $68_1 = 0, $68$hi = 0, $71_1 = 0, $71$hi = 0;
    $4_1 = -1;
    label$1 : {
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 0;
    $8_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$0 = 2147483647;
    i64toi32_i32$1 = -1;
    i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
    $5_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
    $5$hi = i64toi32_i32$0;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$3 = 2147418112;
    i64toi32_i32$1 = 0;
    $12_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = 2147418112;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0 ? $8_1 : $12_1) {
      break label$1
    }
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 0;
    $17_1 = (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$0 = $3_1;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$2 = -1;
    i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
    $6_1 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
    $6$hi = i64toi32_i32$1;
    i64toi32_i32$3 = $6_1;
    i64toi32_i32$0 = 2147418112;
    i64toi32_i32$2 = 0;
    $21_1 = i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
    i64toi32_i32$3 = i64toi32_i32$1;
    i64toi32_i32$2 = $6_1;
    i64toi32_i32$1 = 2147418112;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) | 0 ? $17_1 : $21_1) {
      break label$1
    }
    label$2 : {
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$2 = $0$hi;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$0 = $2_1;
      i64toi32_i32$3 = $0$hi;
      i64toi32_i32$1 = $0_1;
      i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
      $27_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
      $27$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $6$hi;
      i64toi32_i32$3 = $5$hi;
      i64toi32_i32$3 = $6$hi;
      i64toi32_i32$2 = $6_1;
      i64toi32_i32$0 = $5$hi;
      i64toi32_i32$1 = $5_1;
      i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
      $30_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
      $30$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $27$hi;
      i64toi32_i32$3 = $27_1;
      i64toi32_i32$2 = $30$hi;
      i64toi32_i32$1 = $30_1;
      i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
      if (!!(i64toi32_i32$3 | i64toi32_i32$1 | 0 | i64toi32_i32$2 | 0)) {
      break label$2
      }
      return 0 | 0;
    }
    label$3 : {
      i64toi32_i32$2 = $3$hi;
      i64toi32_i32$2 = $1$hi;
      i64toi32_i32$2 = $3$hi;
      i64toi32_i32$0 = $3_1;
      i64toi32_i32$3 = $1$hi;
      i64toi32_i32$1 = $1_1;
      i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$1 = 0;
      if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
      $35_1 = 1
      } else {
      if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
        if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$1 >>> 0) {
        $36_1 = 0
        } else {
        $36_1 = 1
        }
        $37_1 = $36_1;
      } else {
        $37_1 = 0
      }
      $35_1 = $37_1;
      }
      if ($35_1) {
      break label$3
      }
      i64toi32_i32$2 = $0$hi;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$2 = $0$hi;
      i64toi32_i32$1 = $0_1;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$0 = $2_1;
      $40_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$0 = $1_1;
      i64toi32_i32$2 = $3$hi;
      i64toi32_i32$3 = $3_1;
      if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
      $38_1 = 1
      } else {
      if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
        if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
        $39_1 = 0
        } else {
        $39_1 = 1
        }
        $41_1 = $39_1;
      } else {
        $41_1 = 0
      }
      $38_1 = $41_1;
      }
      i64toi32_i32$0 = $1$hi;
      i64toi32_i32$0 = $3$hi;
      i64toi32_i32$0 = $1$hi;
      i64toi32_i32$3 = $1_1;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$2 = $3_1;
      if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $40_1 : $38_1) {
      break label$1
      }
      i64toi32_i32$3 = $0$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$3 = $0$hi;
      i64toi32_i32$2 = $0_1;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$1 = $2_1;
      i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
      $50_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
      $50$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $1$hi;
      i64toi32_i32$0 = $3$hi;
      i64toi32_i32$0 = $1$hi;
      i64toi32_i32$3 = $1_1;
      i64toi32_i32$2 = $3$hi;
      i64toi32_i32$1 = $3_1;
      i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
      $53_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
      $53$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $50$hi;
      i64toi32_i32$0 = $50_1;
      i64toi32_i32$3 = $53$hi;
      i64toi32_i32$1 = $53_1;
      i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$1 = 0;
      return (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0 | 0;
    }
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$0 = $2_1;
    $58_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $1_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$3 = $3_1;
    if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
      $42_1 = 1
    } else {
      if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
        $43_1 = 0
      } else {
        $43_1 = 1
      }
      $44_1 = $43_1;
      } else {
      $44_1 = 0
      }
      $42_1 = $44_1;
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$2 = $3_1;
    if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $58_1 : $42_1) {
      break label$1
    }
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = $2_1;
    i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
    $68_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
    $68$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
    $71_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
    $71$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $68$hi;
    i64toi32_i32$0 = $68_1;
    i64toi32_i32$3 = $71$hi;
    i64toi32_i32$1 = $71_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    $4_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0;
    }
    return $4_1 | 0;
  }
  
  function $549($0_1, $1_1) {
    $0_1 = +$0_1;
    $1_1 = $1_1 | 0;
    var i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $8_1 = 0, $32_1 = 0.0, i64toi32_i32$0 = 0;
    label$1 : {
    label$2 : {
      if (($1_1 | 0) < (1024 | 0)) {
      break label$2
      }
      $0_1 = $0_1 * 8988465674311579538646525.0e283;
      label$3 : {
      if ($1_1 >>> 0 >= 2047 >>> 0) {
        break label$3
      }
      $1_1 = $1_1 + -1023 | 0;
      break label$1;
      }
      $0_1 = $0_1 * 8988465674311579538646525.0e283;
      $1_1 = ($1_1 >>> 0 < 3069 >>> 0 ? $1_1 : 3069) + -2046 | 0;
      break label$1;
    }
    if (($1_1 | 0) > (-1023 | 0)) {
      break label$1
    }
    $0_1 = $0_1 * 2.004168360008973e-292;
    label$4 : {
      if ($1_1 >>> 0 <= -1992 >>> 0) {
      break label$4
      }
      $1_1 = $1_1 + 969 | 0;
      break label$1;
    }
    $0_1 = $0_1 * 2.004168360008973e-292;
    $1_1 = ($1_1 >>> 0 > -2960 >>> 0 ? $1_1 : -2960) + 1938 | 0;
    }
    $32_1 = $0_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = $1_1 + 1023 | 0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 52;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    $8_1 = 0;
    } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
    $8_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    wasm2js_scratch_store_i32(0 | 0, $8_1 | 0);
    wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$1 | 0);
    return +($32_1 * +wasm2js_scratch_load_f64());
  }
  
  function $550($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1$hi = $1$hi | 0;
    $2_1 = $2_1 | 0;
    $2$hi = $2$hi | 0;
    $3_1 = $3_1 | 0;
    $3$hi = $3$hi | 0;
    $4_1 = $4_1 | 0;
    $4$hi = $4$hi | 0;
    var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $7_1 = 0, $11_1 = 0, $18$hi = 0, $20_1 = 0, $20$hi = 0, $21_1 = 0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$1 = $0_1;
    HEAP32[i64toi32_i32$1 >> 2] = $1_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $7_1 = i64toi32_i32$1;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $22_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $22_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $11_1 = $22_1 & 32768 | 0;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$2 = 2147418112;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $23_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
    i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    $23_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
    }
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = $11_1 | $23_1 | 0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    $24_1 = 0;
    } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
    $24_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $18$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$2 = 65535;
    i64toi32_i32$3 = -1;
    i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
    $20_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
    $20$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $18$hi;
    i64toi32_i32$1 = $24_1;
    i64toi32_i32$0 = $20$hi;
    i64toi32_i32$3 = $20_1;
    i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $21_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
    i64toi32_i32$1 = $7_1;
    HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $21_1;
    HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  }
  
  function $551($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $2_1 = 0, $3_1 = 0, $3$hi = 0, $4_1 = 0, $4$hi = 0, $17_1 = 0, $11_1 = 0, $20_1 = 0, $20$hi = 0, $24$hi = 0;
    $2_1 = global$0 - 16 | 0;
    global$0 = $2_1;
    label$1 : {
    label$2 : {
      if ($1_1) {
      break label$2
      }
      i64toi32_i32$0 = 0;
      $3_1 = 0;
      $3$hi = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      $4_1 = 0;
      $4$hi = i64toi32_i32$0;
      break label$1;
    }
    i64toi32_i32$0 = 0;
    $11_1 = $1_1;
    $1_1 = Math_clz32($1_1);
    i64toi32_i32$1 = 0;
    $538($2_1 | 0, $11_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, 112 - ($1_1 ^ 31 | 0) | 0 | 0);
    i64toi32_i32$2 = $2_1 + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    i64toi32_i32$2 = i64toi32_i32$1;
    i64toi32_i32$1 = 65536;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
    $20_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
    $20$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 16414 - $1_1 | 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
      $17_1 = 0;
    } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
      $17_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $24$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $20$hi;
    i64toi32_i32$1 = $20_1;
    i64toi32_i32$0 = $24$hi;
    i64toi32_i32$3 = $17_1;
    i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $4_1 = i64toi32_i32$4;
    $4$hi = i64toi32_i32$5;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$5;
    $3$hi = i64toi32_i32$1;
    }
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$5 = $0_1;
    HEAP32[i64toi32_i32$5 >> 2] = $3_1;
    HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$1 = $4$hi;
    HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $4_1;
    HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$1;
    global$0 = $2_1 + 16 | 0;
  }
  
  function $552($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1$hi = $1$hi | 0;
    $2_1 = $2_1 | 0;
    $2$hi = $2$hi | 0;
    $3_1 = $3_1 | 0;
    $3$hi = $3$hi | 0;
    $4_1 = $4_1 | 0;
    $4$hi = $4$hi | 0;
    var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $14_1 = 0, $14$hi = 0, $20_1 = 0;
    $5_1 = global$0 - 16 | 0;
    global$0 = $5_1;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = -2147483648;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
    $14_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
    $14$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$3 = $14$hi;
    $545($5_1 | 0, $1_1 | 0, i64toi32_i32$1 | 0, $2_1 | 0, i64toi32_i32$2 | 0, $3_1 | 0, i64toi32_i32$0 | 0, $14_1 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$3;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $20_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1;
    HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $20_1;
    HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$3;
    i64toi32_i32$3 = $4$hi;
    HEAP32[i64toi32_i32$0 >> 2] = $4_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$3;
    global$0 = $5_1 + 16 | 0;
  }
  
  function $553($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1$hi = $1$hi | 0;
    $2_1 = $2_1 | 0;
    $2$hi = $2$hi | 0;
    $3_1 = $3_1 | 0;
    var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $4_1 = 0, i64toi32_i32$4 = 0, $20_1 = 0, $70_1 = 0, $71_1 = 0, $71$hi = 0, $72_1 = 0, $72$hi = 0, $76$hi = 0, $80_1 = 0, $83_1 = 0;
    $4_1 = global$0 - 80 | 0;
    global$0 = $4_1;
    label$1 : {
    label$2 : {
      if (($3_1 | 0) < (16384 | 0)) {
      break label$2
      }
      i64toi32_i32$0 = $1$hi;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$0 = $1$hi;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = 2147352576;
      $542($4_1 + 32 | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$1 = ($4_1 + 32 | 0) + 8 | 0;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $2_1 = i64toi32_i32$3;
      $2$hi = i64toi32_i32$2;
      i64toi32_i32$1 = $4_1;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] | 0;
      $1_1 = i64toi32_i32$2;
      $1$hi = i64toi32_i32$3;
      label$3 : {
      if ($3_1 >>> 0 >= 32767 >>> 0) {
        break label$3
      }
      $3_1 = $3_1 + -16383 | 0;
      break label$1;
      }
      i64toi32_i32$3 = $1$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$3 = $1$hi;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$1 = 0;
      i64toi32_i32$0 = 2147352576;
      $542($4_1 + 16 | 0 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0);
      $3_1 = ($3_1 >>> 0 < 49149 >>> 0 ? $3_1 : 49149) + -32766 | 0;
      i64toi32_i32$2 = ($4_1 + 16 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $2_1 = i64toi32_i32$0;
      $2$hi = i64toi32_i32$1;
      i64toi32_i32$2 = $4_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
      $1_1 = i64toi32_i32$1;
      $1$hi = i64toi32_i32$0;
      break label$1;
    }
    if (($3_1 | 0) > (-16383 | 0)) {
      break label$1
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 7471104;
    $542($4_1 + 64 | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$1 = ($4_1 + 64 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] | 0;
    $1_1 = i64toi32_i32$2;
    $1$hi = i64toi32_i32$3;
    label$4 : {
      if ($3_1 >>> 0 <= -32652 >>> 0) {
      break label$4
      }
      $3_1 = $3_1 + 16269 | 0;
      break label$1;
    }
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 7471104;
    $542($4_1 + 48 | 0 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0);
    $3_1 = ($3_1 >>> 0 > -48920 >>> 0 ? $3_1 : -48920) + 32538 | 0;
    i64toi32_i32$2 = ($4_1 + 48 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
    $1_1 = i64toi32_i32$1;
    $1$hi = i64toi32_i32$0;
    }
    $70_1 = $4_1;
    i64toi32_i32$0 = $1$hi;
    $71_1 = $1_1;
    $71$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    $72_1 = $2_1;
    $72$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = $3_1 + 16383 | 0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    $20_1 = 0;
    } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
    $20_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $76$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $71$hi;
    i64toi32_i32$2 = $72$hi;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = $76$hi;
    $542($70_1 | 0, $71_1 | 0, i64toi32_i32$1 | 0, $72_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, $20_1 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$2 = $4_1 + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $80_1 = i64toi32_i32$3;
    i64toi32_i32$3 = $0_1;
    HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] = $80_1;
    HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $83_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1;
    HEAP32[i64toi32_i32$0 >> 2] = $83_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$3;
    global$0 = i64toi32_i32$2 + 80 | 0;
  }
  
  function $554($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1$hi = $1$hi | 0;
    $2_1 = $2_1 | 0;
    $2$hi = $2$hi | 0;
    $3_1 = $3_1 | 0;
    $3$hi = $3$hi | 0;
    $4_1 = $4_1 | 0;
    $4$hi = $4$hi | 0;
    var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $46_1 = 0, $48_1 = 0, $49_1 = 0, $50_1 = 0, $53_1 = 0, $54_1 = 0, $6_1 = 0, $9_1 = 0, $9$hi = 0, $12_1 = 0, $12$hi = 0, $13_1 = 0, $13$hi = 0, $16_1 = 0, $16$hi = 0, $20_1 = 0, $20$hi = 0, $21_1 = 0, $21$hi = 0, $5_1 = 0, $5$hi = 0, $30$hi = 0, $33_1 = 0, $33$hi = 0, $36$hi = 0, $37_1 = 0, $37$hi = 0, $39_1 = 0, $39$hi = 0, $42_1 = 0, $42$hi = 0, $45$hi = 0, $47_1 = 0, $49$hi = 0, $51_1 = 0, $51$hi = 0, $52_1 = 0;
    $6_1 = $0_1;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$0 | 0, $1_1 | 0, i64toi32_i32$1 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $9_1 = i64toi32_i32$1;
    $9$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$1 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $12_1 = i64toi32_i32$1;
    $12$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $9$hi;
    i64toi32_i32$2 = $9_1;
    i64toi32_i32$1 = $12$hi;
    i64toi32_i32$3 = $12_1;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $13_1 = i64toi32_i32$4;
    $13$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$0 = $3_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $46_1 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
    } else {
    i64toi32_i32$2 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
    $46_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
    }
    $2_1 = $46_1;
    $2$hi = i64toi32_i32$2;
    $16_1 = $2_1;
    $16$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$5 = $1_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $48_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
    } else {
    i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
    $48_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
    }
    $4_1 = $48_1;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $16$hi;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$5 = __wasm_i64_mul($16_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$5 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $20_1 = i64toi32_i32$5;
    $20$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $13$hi;
    i64toi32_i32$2 = $13_1;
    i64toi32_i32$5 = $20$hi;
    i64toi32_i32$3 = $20_1;
    i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $21_1 = i64toi32_i32$1;
    $21$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$0 = $3_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = -1;
    i64toi32_i32$2 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
    $3_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
    $3$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$4 = $1_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = -1;
    i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
    $1_1 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
    $1$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$4 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$0 | 0, $1_1 | 0, i64toi32_i32$4 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $5_1 = i64toi32_i32$4;
    $5$hi = i64toi32_i32$0;
    i64toi32_i32$2 = i64toi32_i32$4;
    i64toi32_i32$4 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = 0;
    $49_1 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
    } else {
    i64toi32_i32$4 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
    $49_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
    }
    $30$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$2 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$4 | 0, $4_1 | 0, i64toi32_i32$2 | 0) | 0;
    i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
    $33_1 = i64toi32_i32$2;
    $33$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $30$hi;
    i64toi32_i32$0 = $49_1;
    i64toi32_i32$2 = $33$hi;
    i64toi32_i32$3 = $33_1;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $3_1 = i64toi32_i32$5;
    $3$hi = i64toi32_i32$1;
    i64toi32_i32$4 = i64toi32_i32$5;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $50_1 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
    } else {
    i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
    $50_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$2 | 0) | 0;
    }
    $36$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $21$hi;
    i64toi32_i32$1 = $21_1;
    i64toi32_i32$4 = $36$hi;
    i64toi32_i32$3 = $50_1;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $37_1 = i64toi32_i32$2;
    $37$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$0 = $3_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
    $39_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
    $39$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$1 | 0, $1_1 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $42_1 = i64toi32_i32$0;
    $42$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $39$hi;
    i64toi32_i32$5 = $39_1;
    i64toi32_i32$0 = $42$hi;
    i64toi32_i32$3 = $42_1;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
    }
    $1_1 = i64toi32_i32$4;
    $1$hi = i64toi32_i32$2;
    i64toi32_i32$1 = i64toi32_i32$4;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = 0;
    $53_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    } else {
    i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    $53_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
    }
    $45$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $37$hi;
    i64toi32_i32$2 = $37_1;
    i64toi32_i32$1 = $45$hi;
    i64toi32_i32$3 = $53_1;
    i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    i64toi32_i32$2 = $6_1;
    HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$4;
    $47_1 = $0_1;
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$5 = $1_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
    $54_1 = 0;
    } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
    $54_1 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
    }
    $49$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $5$hi;
    i64toi32_i32$4 = $5_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = -1;
    i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
    $51_1 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
    $51$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $49$hi;
    i64toi32_i32$2 = $54_1;
    i64toi32_i32$4 = $51$hi;
    i64toi32_i32$3 = $51_1;
    i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
    $52_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    i64toi32_i32$2 = $47_1;
    HEAP32[i64toi32_i32$2 >> 2] = $52_1;
    HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$4;
  }
  
  function $555($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1$hi = $1$hi | 0;
    $2_1 = $2_1 | 0;
    $2$hi = $2$hi | 0;
    $3_1 = $3_1 | 0;
    $3$hi = $3$hi | 0;
    $4_1 = $4_1 | 0;
    $4$hi = $4$hi | 0;
    var i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, $5_1 = 0, $11$hi = 0, i64toi32_i32$6 = 0, $11_1 = 0, $10$hi = 0, $13$hi = 0, $10_1 = 0, $16$hi = 0, $12$hi = 0, $13_1 = 0, $17$hi = 0, $21$hi = 0, $12_1 = 0, $6_1 = 0, $16_1 = 0, $21_1 = 0, $14$hi = 0, $15$hi = 0, $8_1 = 0, $17_1 = 0, $18$hi = 0, $14_1 = 0, $15_1 = 0, $18_1 = 0, $22_1 = 0, $22$hi = 0, $24$hi = 0, $9_1 = 0, $19_1 = 0, $19$hi = 0, $322_1 = 0, $323_1 = 0, $7_1 = 0, $324_1 = 0, $325_1 = 0, $326_1 = 0, $327_1 = 0, $328_1 = 0, $329_1 = 0, $331_1 = 0, $332_1 = 0, $333_1 = 0, $334_1 = 0, $336_1 = 0, $337_1 = 0, $338_1 = 0, $339_1 = 0, $341_1 = 0, $342_1 = 0, $344_1 = 0, $345_1 = 0, $20_1 = 0, $20$hi = 0, $346_1 = 0, $347_1 = 0, $348_1 = 0, $350_1 = 0, $351_1 = 0, $352_1 = 0, $353_1 = 0, $355_1 = 0, $23_1 = 0, $23$hi = 0, $356_1 = 0, $357_1 = 0, $358_1 = 0, $359_1 = 0, $24_1 = 0, $360_1 = 0, $362_1 = 0, $363_1 = 0, $364_1 = 0, $365_1 = 0, $368_1 = 0, $369_1 = 0, $371_1 = 0, $372_1 = 0, $374_1 = 0, $375_1 = 0, $376_1 = 0, $377_1 = 0, $378_1 = 0, $380_1 = 0, $381_1 = 0, $382_1 = 0, $51_1 = 0, $55_1 = 0, $62_1 = 0, $66_1 = 0, $75_1 = 0, $75$hi = 0, $80_1 = 0, $80$hi = 0, $88_1 = 0, $88$hi = 0, $110_1 = 0, $111_1 = 0, $111$hi = 0, $112_1 = 0, $112$hi = 0, $119$hi = 0, $122$hi = 0, $137_1 = 0, $138_1 = 0, $138$hi = 0, $139_1 = 0, $139$hi = 0, $146$hi = 0, $149$hi = 0, $164_1 = 0, $166_1 = 0, $166$hi = 0, $170$hi = 0, $181_1 = 0, $181$hi = 0, $182$hi = 0, $185_1 = 0, $188_1 = 0, $188$hi = 0, $193$hi = 0, $203_1 = 0, $203$hi = 0, $204$hi = 0, $206_1 = 0, $209_1 = 0, $209$hi = 0, $214$hi = 0, $224_1 = 0, $224$hi = 0, $225$hi = 0, $227_1 = 0, $230_1 = 0, $230$hi = 0, $235$hi = 0, $245_1 = 0, $245$hi = 0, $246$hi = 0, $248_1 = 0, $249_1 = 0, $249$hi = 0, $252_1 = 0, $252$hi = 0, $257$hi = 0, $262_1 = 0, $264$hi = 0, $267_1 = 0, $268_1 = 0, $268$hi = 0, $272_1 = 0, $272$hi = 0, $279_1 = 0, $279$hi = 0, $283_1 = 0, $284$hi = 0, $285$hi = 0, $287_1 = 0, $288$hi = 0, $289$hi = 0, $290$hi = 0, $294$hi = 0, $305_1 = 0, $305$hi = 0, $308_1 = 0, $308$hi = 0, $314$hi = 0, $315_1 = 0, $315$hi = 0, $321_1 = 0, $321$hi = 0, $330_1 = 0, $330$hi = 0, $335_1 = 0, $335$hi = 0, $340_1 = 0, $340$hi = 0, $342$hi = 0, $343_1 = 0, $343$hi = 0, $345$hi = 0, $346$hi = 0, $349_1 = 0, $350$hi = 0, $351$hi = 0, $354_1 = 0, $355$hi = 0, $361_1 = 0, $361$hi = 0, $366_1 = 0, $366$hi = 0, $367_1 = 0, $367$hi = 0, $370_1 = 0, $370$hi = 0, $373_1 = 0, $373$hi = 0, $375$hi = 0, $379_1 = 0, $379$hi = 0, $383_1 = 0, $384$hi = 0, $385$hi = 0, $388_1 = 0, $388$hi = 0, $389_1 = 0, $389$hi = 0, $396_1 = 0, $396$hi = 0, $402_1 = 0, $402$hi = 0, $404$hi = 0, $405_1 = 0, $405$hi = 0, $406_1 = 0, $406$hi = 0, $407_1 = 0, $407$hi = 0, $409$hi = 0, $413_1 = 0, $414$hi = 0, $415_1 = 0, $415$hi = 0, $416_1 = 0, $416$hi = 0, $425_1 = 0, $425$hi = 0, $429_1 = 0, $430_1 = 0, $430$hi = 0, $436_1 = 0, $436$hi = 0, $440_1 = 0, $441$hi = 0, $442$hi = 0, $446_1 = 0, $447$hi = 0, $448_1 = 0, $448$hi = 0, $449_1 = 0, $449$hi = 0, $456_1 = 0, $456$hi = 0, $461_1 = 0, $461$hi = 0, $466_1 = 0, $466$hi = 0, $469_1 = 0, $469$hi = 0, $472_1 = 0, $473$hi = 0, $476_1 = 0, $477$hi = 0, $478$hi = 0, $481_1 = 0, $482$hi = 0, $484$hi = 0, $485_1 = 0, $485$hi = 0, $489_1 = 0, $490$hi = 0, $491_1 = 0, $491$hi = 0, $492_1 = 0, $492$hi = 0, $493_1 = 0, $493$hi = 0, $500_1 = 0, $500$hi = 0, $503_1 = 0, $503$hi = 0, $506_1 = 0, $508$hi = 0, $509_1 = 0, $509$hi = 0, $514_1 = 0, $514$hi = 0, $515_1 = 0, $515$hi = 0, $517$hi = 0, $518$hi = 0, $520_1 = 0, $521$hi = 0, $522$hi = 0, $526_1 = 0, $527$hi = 0, $541$hi = 0, $545_1 = 0, $545$hi = 0, $546$hi = 0, $550_1 = 0, $551$hi = 0, $558_1 = 0, $560_1 = 0, $560$hi = 0, $562$hi = 0, $564_1 = 0, $564$hi = 0, $571$hi = 0, $575_1 = 0, $575$hi = 0, $576$hi = 0, $580_1 = 0, $581$hi = 0, $595_1 = 0, $595$hi = 0, $597$hi = 0, $601$hi = 0, $603_1 = 0, $603$hi = 0, $636_1 = 0, $636$hi = 0, $641_1 = 0, $641$hi = 0, $645$hi = 0, $646_1 = 0, $646$hi = 0, $647_1 = 0, $647$hi = 0, $650_1 = 0, $650$hi = 0, $654_1 = 0, $655$hi = 0, $667_1 = 0, $667$hi = 0, $668_1 = 0, $668$hi = 0, $676_1 = 0, $680_1 = 0, $681$hi = 0, $685_1 = 0, $689_1 = 0, $690$hi = 0, $694_1 = 0, $695$hi = 0, $697_1 = 0, $697$hi = 0, $700_1 = 0, $703_1 = 0, $703$hi = 0, $704_1 = 0, $711_1 = 0, $716_1 = 0, $717$hi = 0, $721_1 = 0, $722$hi = 0, $724_1 = 0, $724$hi = 0, $727_1 = 0, $730_1 = 0, $730$hi = 0, $731_1 = 0, $737_1 = 0, $742_1 = 0, $743$hi = 0, $747_1 = 0, $748$hi = 0, $749$hi = 0;
    $5_1 = global$0 - 336 | 0;
    global$0 = $5_1;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = 65535;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $10_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $10$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$2 = 65535;
    i64toi32_i32$3 = -1;
    i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
    $11_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
    $11$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$2 = i64toi32_i32$1;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
    i64toi32_i32$1 = -2147483648;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $12_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $12$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $322_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $322_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $6_1 = $322_1 & 32767 | 0;
    label$1 : {
    label$2 : {
      label$3 : {
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$1 = $2_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 48;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$0 = 0;
        $323_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      } else {
        i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
        $323_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
      }
      $7_1 = $323_1 & 32767 | 0;
      if (($7_1 + -32767 | 0) >>> 0 < -32766 >>> 0) {
        break label$3
      }
      $8_1 = 0;
      if (($6_1 + -32767 | 0) >>> 0 > -32767 >>> 0) {
        break label$2
      }
      }
      label$4 : {
      i64toi32_i32$0 = $1$hi;
      $51_1 = !($1_1 | i64toi32_i32$0 | 0);
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$1 = 2147483647;
      i64toi32_i32$3 = -1;
      i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
      $13_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
      $13$hi = i64toi32_i32$1;
      i64toi32_i32$0 = $13_1;
      i64toi32_i32$2 = 2147418112;
      i64toi32_i32$3 = 0;
      $55_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$3 = $13_1;
      i64toi32_i32$1 = 2147418112;
      i64toi32_i32$2 = 0;
      if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $51_1 : $55_1) {
        break label$4
      }
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$0 = 32768;
      i64toi32_i32$1 = 0;
      i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
      $12_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
      $12$hi = i64toi32_i32$0;
      break label$1;
      }
      label$5 : {
      i64toi32_i32$0 = $3$hi;
      $62_1 = !($3_1 | i64toi32_i32$0 | 0);
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$3 = $4_1;
      i64toi32_i32$2 = 2147483647;
      i64toi32_i32$1 = -1;
      i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
      $2_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
      $2$hi = i64toi32_i32$2;
      i64toi32_i32$0 = $2_1;
      i64toi32_i32$3 = 2147418112;
      i64toi32_i32$1 = 0;
      $66_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$2;
      i64toi32_i32$0 = i64toi32_i32$2;
      i64toi32_i32$1 = $2_1;
      i64toi32_i32$2 = 2147418112;
      i64toi32_i32$3 = 0;
      if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) | 0 ? $62_1 : $66_1) {
        break label$5
      }
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$3 = $4_1;
      i64toi32_i32$0 = 32768;
      i64toi32_i32$2 = 0;
      i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
      $12_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
      $12$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $3$hi;
      $1_1 = $3_1;
      $1$hi = i64toi32_i32$0;
      break label$1;
      }
      label$6 : {
      i64toi32_i32$0 = $1$hi;
      i64toi32_i32$0 = $13$hi;
      i64toi32_i32$1 = $13_1;
      i64toi32_i32$3 = 2147418112;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
      $75_1 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
      $75$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $1$hi;
      i64toi32_i32$0 = $1_1;
      i64toi32_i32$1 = $75$hi;
      i64toi32_i32$2 = $75_1;
      i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
      i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$2 = 0;
      if ((i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0) {
        break label$6
      }
      label$7 : {
        i64toi32_i32$3 = $3$hi;
        i64toi32_i32$3 = $2$hi;
        i64toi32_i32$2 = $2_1;
        i64toi32_i32$1 = 2147418112;
        i64toi32_i32$0 = 0;
        i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
        $80_1 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
        $80$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $3$hi;
        i64toi32_i32$3 = $3_1;
        i64toi32_i32$2 = $80$hi;
        i64toi32_i32$0 = $80_1;
        i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
        if (!!(i64toi32_i32$3 | i64toi32_i32$0 | 0 | i64toi32_i32$2 | 0)) {
        break label$7
        }
        i64toi32_i32$2 = 0;
        $1_1 = 0;
        $1$hi = i64toi32_i32$2;
        i64toi32_i32$2 = 2147450880;
        $12_1 = 0;
        $12$hi = i64toi32_i32$2;
        break label$1;
      }
      i64toi32_i32$2 = $12$hi;
      i64toi32_i32$1 = $12_1;
      i64toi32_i32$3 = 2147418112;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
      $12_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
      $12$hi = i64toi32_i32$3;
      i64toi32_i32$3 = 0;
      $1_1 = 0;
      $1$hi = i64toi32_i32$3;
      break label$1;
      }
      label$8 : {
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$1 = 2147418112;
      i64toi32_i32$0 = 0;
      i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
      $88_1 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
      $88$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$3 = $3_1;
      i64toi32_i32$2 = $88$hi;
      i64toi32_i32$0 = $88_1;
      i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
      i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = 0;
      if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
        break label$8
      }
      i64toi32_i32$1 = 0;
      $1_1 = 0;
      $1$hi = i64toi32_i32$1;
      break label$1;
      }
      label$9 : {
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$1 = $13$hi;
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$0 = $1_1;
      i64toi32_i32$2 = $13$hi;
      i64toi32_i32$3 = $13_1;
      i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
      i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 0;
      if ((i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | 0) {
        break label$9
      }
      i64toi32_i32$1 = $12$hi;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$3 = $3_1;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$0 = $2_1;
      i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
      i64toi32_i32$4 = !(i64toi32_i32$3 | i64toi32_i32$0 | 0 | i64toi32_i32$2 | 0);
      i64toi32_i32$2 = 2147450880;
      i64toi32_i32$3 = $12$hi;
      i64toi32_i32$0 = i64toi32_i32$4 ? 0 : $12_1;
      i64toi32_i32$1 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$3;
      $12_1 = i64toi32_i32$0;
      $12$hi = i64toi32_i32$1;
      i64toi32_i32$1 = 0;
      $1_1 = 0;
      $1$hi = i64toi32_i32$1;
      break label$1;
      }
      label$10 : {
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$4 = $3_1;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$3 = $2_1;
      i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
      i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
      i64toi32_i32$4 = 0;
      i64toi32_i32$3 = 0;
      if ((i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$4 | 0) | 0) {
        break label$10
      }
      i64toi32_i32$1 = $12$hi;
      i64toi32_i32$3 = $12_1;
      i64toi32_i32$0 = 2147418112;
      i64toi32_i32$4 = 0;
      i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
      $12_1 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
      $12$hi = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      $1_1 = 0;
      $1$hi = i64toi32_i32$0;
      break label$1;
      }
      $8_1 = 0;
      label$11 : {
      i64toi32_i32$0 = $13$hi;
      i64toi32_i32$1 = $13_1;
      i64toi32_i32$3 = 65535;
      i64toi32_i32$4 = -1;
      if (i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
        break label$11
      }
      $110_1 = $5_1 + 320 | 0;
      i64toi32_i32$1 = $1$hi;
      $111_1 = $1_1;
      $111$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $11$hi;
      $112_1 = $11_1;
      $112$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$1 = $11$hi;
      $8_1 = !($11_1 | i64toi32_i32$1 | 0);
      i64toi32_i32$2 = $8_1;
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$0 = $11$hi;
      i64toi32_i32$3 = i64toi32_i32$2 ? $1_1 : $11_1;
      i64toi32_i32$4 = i64toi32_i32$2 ? i64toi32_i32$1 : i64toi32_i32$0;
      i64toi32_i32$0 = Math_clz32(i64toi32_i32$4);
      i64toi32_i32$2 = 0;
      if ((i64toi32_i32$0 | 0) == (32 | 0)) {
        $324_1 = Math_clz32(i64toi32_i32$3) + 32 | 0
      } else {
        $324_1 = i64toi32_i32$0
      }
      $119$hi = i64toi32_i32$2;
      i64toi32_i32$2 = 0;
      $122$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $119$hi;
      i64toi32_i32$3 = $324_1;
      i64toi32_i32$4 = $122$hi;
      i64toi32_i32$0 = $8_1 << 6 | 0;
      i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $8_1 = i64toi32_i32$1;
      i64toi32_i32$5 = $111$hi;
      i64toi32_i32$3 = $112$hi;
      $538($110_1 | 0, $111_1 | 0, i64toi32_i32$5 | 0, $112_1 | 0, i64toi32_i32$3 | 0, i64toi32_i32$1 + -15 | 0 | 0);
      $8_1 = 16 - i64toi32_i32$1 | 0;
      i64toi32_i32$2 = $5_1 + 328 | 0;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $11_1 = i64toi32_i32$3;
      $11$hi = i64toi32_i32$5;
      i64toi32_i32$2 = $5_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 320 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 324 | 0) >> 2] | 0;
      $1_1 = i64toi32_i32$5;
      $1$hi = i64toi32_i32$3;
      }
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$5 = 65535;
      i64toi32_i32$0 = -1;
      if (i64toi32_i32$3 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0) {
      break label$2
      }
      $137_1 = $5_1 + 304 | 0;
      i64toi32_i32$2 = $3$hi;
      $138_1 = $3_1;
      $138$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $10$hi;
      $139_1 = $10_1;
      $139$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $3$hi;
      i64toi32_i32$2 = $10$hi;
      $9_1 = !($10_1 | i64toi32_i32$2 | 0);
      i64toi32_i32$4 = $9_1;
      i64toi32_i32$2 = $3$hi;
      i64toi32_i32$3 = $10$hi;
      i64toi32_i32$5 = i64toi32_i32$4 ? $3_1 : $10_1;
      i64toi32_i32$0 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$3;
      i64toi32_i32$3 = Math_clz32(i64toi32_i32$0);
      i64toi32_i32$4 = 0;
      if ((i64toi32_i32$3 | 0) == (32 | 0)) {
      $325_1 = Math_clz32(i64toi32_i32$5) + 32 | 0
      } else {
      $325_1 = i64toi32_i32$3
      }
      $146$hi = i64toi32_i32$4;
      i64toi32_i32$4 = 0;
      $149$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $146$hi;
      i64toi32_i32$5 = $325_1;
      i64toi32_i32$0 = $149$hi;
      i64toi32_i32$3 = $9_1 << 6 | 0;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $9_1 = i64toi32_i32$2;
      i64toi32_i32$1 = $138$hi;
      i64toi32_i32$5 = $139$hi;
      $538($137_1 | 0, $138_1 | 0, i64toi32_i32$1 | 0, $139_1 | 0, i64toi32_i32$5 | 0, i64toi32_i32$2 + -15 | 0 | 0);
      $8_1 = (i64toi32_i32$2 + $8_1 | 0) + -16 | 0;
      i64toi32_i32$4 = $5_1 + 312 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
      $10_1 = i64toi32_i32$5;
      $10$hi = i64toi32_i32$1;
      i64toi32_i32$4 = $5_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 304 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 308 | 0) >> 2] | 0;
      $3_1 = i64toi32_i32$1;
      $3$hi = i64toi32_i32$5;
    }
    $164_1 = $5_1 + 288 | 0;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$4 = $3_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 49;
    i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $326_1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
    } else {
      i64toi32_i32$1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
      $326_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
    }
    $166_1 = $326_1;
    $166$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $10$hi;
    i64toi32_i32$5 = $10_1;
    i64toi32_i32$4 = 65536;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
    $14_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $14$hi = i64toi32_i32$4;
    i64toi32_i32$1 = $14_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 15;
    i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
      $327_1 = 0;
    } else {
      i64toi32_i32$5 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$0 | 0) | 0;
      $327_1 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
    }
    $170$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $166$hi;
    i64toi32_i32$4 = $166_1;
    i64toi32_i32$1 = $170$hi;
    i64toi32_i32$3 = $327_1;
    i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    $2_1 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 1963258675;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = $2$hi;
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$0 = i64toi32_i32$5 - i64toi32_i32$3 | 0;
    i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0;
    i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
    $4_1 = i64toi32_i32$0;
    $4$hi = i64toi32_i32$2;
    i64toi32_i32$2 = i64toi32_i32$4;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$3 = 0;
    $554($164_1 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$5 = ($5_1 + 288 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $181_1 = i64toi32_i32$3;
    $181$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = $181$hi;
    i64toi32_i32$2 = $181_1;
    i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
    i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0;
    i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
    i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
    $182$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$0 = $182$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$2 = 0;
    $554($5_1 + 272 | 0 | 0, i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0, $4_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0);
    $185_1 = $5_1 + 256 | 0;
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 272 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 276 | 0) >> 2] | 0;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 63;
    i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $328_1 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
    } else {
      i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
      $328_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
    }
    $188_1 = $328_1;
    $188$hi = i64toi32_i32$2;
    i64toi32_i32$1 = ($5_1 + 272 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    i64toi32_i32$1 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 1;
    i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$1 << i64toi32_i32$3 | 0;
      $329_1 = 0;
    } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
      $329_1 = i64toi32_i32$1 << i64toi32_i32$3 | 0;
    }
    $193$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $188$hi;
    i64toi32_i32$5 = $188_1;
    i64toi32_i32$1 = $193$hi;
    i64toi32_i32$0 = $329_1;
    i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $4_1 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    $4$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$0 = 0;
    $554($185_1 | 0, $4_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$0 = i64toi32_i32$1;
    i64toi32_i32$5 = ($5_1 + 256 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $203_1 = i64toi32_i32$0;
    $203$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = $203$hi;
    i64toi32_i32$1 = $203_1;
    i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$1 | 0;
    i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0;
    i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
    i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
    $204$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = $204$hi;
    i64toi32_i32$1 = 0;
    $554($5_1 + 240 | 0 | 0, $4_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$3 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
    $206_1 = $5_1 + 224 | 0;
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 240 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 244 | 0) >> 2] | 0;
    i64toi32_i32$5 = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$4 = 63;
    i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $331_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    } else {
      i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
      $331_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
    }
    $209_1 = $331_1;
    $209$hi = i64toi32_i32$1;
    i64toi32_i32$2 = ($5_1 + 240 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    i64toi32_i32$2 = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$4 = 1;
    i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
      $332_1 = 0;
    } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
      $332_1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
    }
    $214$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $209$hi;
    i64toi32_i32$5 = $209_1;
    i64toi32_i32$2 = $214$hi;
    i64toi32_i32$4 = $332_1;
    i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
    $4_1 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
    $4$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$4 = 0;
    $554($206_1 | 0, $4_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$4 = i64toi32_i32$2;
    i64toi32_i32$5 = ($5_1 + 224 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $224_1 = i64toi32_i32$4;
    $224$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = $224$hi;
    i64toi32_i32$2 = $224_1;
    i64toi32_i32$0 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
    i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0;
    i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
    i64toi32_i32$3 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
    $225$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = $225$hi;
    i64toi32_i32$2 = 0;
    $554($5_1 + 208 | 0 | 0, $4_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0);
    $227_1 = $5_1 + 192 | 0;
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 208 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 212 | 0) >> 2] | 0;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 63;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $333_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
      i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      $333_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$4 | 0) | 0;
    }
    $230_1 = $333_1;
    $230$hi = i64toi32_i32$2;
    i64toi32_i32$1 = ($5_1 + 208 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    i64toi32_i32$1 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 1;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      $334_1 = 0;
    } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$4 | 0) | 0;
      $334_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    }
    $235$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $230$hi;
    i64toi32_i32$5 = $230_1;
    i64toi32_i32$1 = $235$hi;
    i64toi32_i32$3 = $334_1;
    i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $4_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $4$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$3 = 0;
    $554($227_1 | 0, $4_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$3 = i64toi32_i32$1;
    i64toi32_i32$5 = ($5_1 + 192 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $245_1 = i64toi32_i32$3;
    $245$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = $245$hi;
    i64toi32_i32$1 = $245_1;
    i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$1 | 0;
    i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0;
    i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
    $246$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = $246$hi;
    i64toi32_i32$1 = 0;
    $554($5_1 + 176 | 0 | 0, $4_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$4 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
    $248_1 = $5_1 + 160 | 0;
    i64toi32_i32$1 = $2$hi;
    $249_1 = $2_1;
    $249$hi = i64toi32_i32$1;
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 176 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 180 | 0) >> 2] | 0;
    i64toi32_i32$5 = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 63;
    i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $336_1 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
    } else {
      i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
      $336_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
    }
    $252_1 = $336_1;
    $252$hi = i64toi32_i32$1;
    i64toi32_i32$2 = ($5_1 + 176 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    i64toi32_i32$2 = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 1;
    i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
      $337_1 = 0;
    } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
      $337_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
    }
    $257$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $252$hi;
    i64toi32_i32$5 = $252_1;
    i64toi32_i32$2 = $257$hi;
    i64toi32_i32$0 = $337_1;
    i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
    i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    i64toi32_i32$5 = -1;
    i64toi32_i32$0 = -1;
    i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $4_1 = i64toi32_i32$3;
    $4$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $249$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$0 = 0;
    $554($248_1 | 0, $249_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$1 | 0, i64toi32_i32$3 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
    $262_1 = $5_1 + 144 | 0;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = 15;
    i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
      $338_1 = 0;
    } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$5 | 0) | 0;
      $338_1 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
    }
    $264$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$2 = $264$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$4 = 0;
    $554($262_1 | 0, $338_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$4 | 0);
    $267_1 = $5_1 + 112 | 0;
    i64toi32_i32$4 = i64toi32_i32$0;
    $268_1 = $4_1;
    $268$hi = i64toi32_i32$0;
    i64toi32_i32$1 = ($5_1 + 160 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $272_1 = i64toi32_i32$4;
    $272$hi = i64toi32_i32$0;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 160 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 164 | 0) >> 2] | 0;
    $10_1 = i64toi32_i32$0;
    $10$hi = i64toi32_i32$4;
    i64toi32_i32$1 = (i64toi32_i32$1 + 144 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $279_1 = i64toi32_i32$4;
    $279$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $10$hi;
    i64toi32_i32$1 = $10_1;
    i64toi32_i32$4 = $279$hi;
    i64toi32_i32$2 = $279_1;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
    }
    $2_1 = i64toi32_i32$5;
    $2$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $10$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$0 = i64toi32_i32$5;
    i64toi32_i32$1 = $10$hi;
    i64toi32_i32$2 = $10_1;
    $283_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
    i64toi32_i32$0 = 0;
    $284$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $272$hi;
    i64toi32_i32$2 = $272_1;
    i64toi32_i32$3 = $284$hi;
    i64toi32_i32$1 = $283_1;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $285$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 1;
    $287_1 = i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
    i64toi32_i32$0 = 0;
    $288$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $285$hi;
    i64toi32_i32$1 = i64toi32_i32$4;
    i64toi32_i32$5 = $288$hi;
    i64toi32_i32$2 = $287_1;
    i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $289$hi = i64toi32_i32$4;
    i64toi32_i32$4 = 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = $289$hi;
    i64toi32_i32$2 = i64toi32_i32$3;
    i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
    i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0;
    i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
    i64toi32_i32$3 = i64toi32_i32$4 - i64toi32_i32$3 | 0;
    $290$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $268$hi;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = $290$hi;
    i64toi32_i32$2 = 0;
    $554($267_1 | 0, $268_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$2 | 0);
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 1;
    i64toi32_i32$4 = $2$hi;
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
    i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0;
    i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
    $294$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$5 = $294$hi;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$3 = 0;
    $554($5_1 + 128 | 0 | 0, i64toi32_i32$1 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
    $6_1 = $8_1 + ($7_1 - $6_1 | 0) | 0;
    label$12 : {
      label$13 : {
      i64toi32_i32$0 = $5_1;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 112 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 116 | 0) >> 2] | 0;
      $15_1 = i64toi32_i32$3;
      $15$hi = i64toi32_i32$2;
      i64toi32_i32$0 = i64toi32_i32$3;
      i64toi32_i32$3 = 0;
      i64toi32_i32$5 = 1;
      i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
        $339_1 = 0;
      } else {
        i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
        $339_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
      }
      $16_1 = $339_1;
      $16$hi = i64toi32_i32$3;
      $305_1 = $16_1;
      $305$hi = i64toi32_i32$3;
      i64toi32_i32$2 = $5_1;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 128 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 132 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$3;
      i64toi32_i32$3 = 0;
      i64toi32_i32$5 = 63;
      i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
        i64toi32_i32$3 = 0;
        $341_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      } else {
        i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
        $341_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
      }
      $308_1 = $341_1;
      $308$hi = i64toi32_i32$3;
      i64toi32_i32$0 = ($5_1 + 128 | 0) + 8 | 0;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $17_1 = i64toi32_i32$3;
      $17$hi = i64toi32_i32$2;
      i64toi32_i32$0 = i64toi32_i32$3;
      i64toi32_i32$3 = 0;
      i64toi32_i32$5 = 1;
      i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
        $342_1 = 0;
      } else {
        i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
        $342_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
      }
      $314$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $308$hi;
      i64toi32_i32$2 = $308_1;
      i64toi32_i32$0 = $314$hi;
      i64toi32_i32$5 = $342_1;
      i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
      $315_1 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
      $315$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $305$hi;
      i64toi32_i32$3 = $305_1;
      i64toi32_i32$2 = $315$hi;
      i64toi32_i32$5 = $315_1;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $13_1 = i64toi32_i32$4;
      $13$hi = i64toi32_i32$1;
      i64toi32_i32$0 = i64toi32_i32$4;
      i64toi32_i32$3 = -1;
      i64toi32_i32$5 = -13927;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $18_1 = i64toi32_i32$2;
      $18$hi = i64toi32_i32$4;
      i64toi32_i32$1 = i64toi32_i32$2;
      i64toi32_i32$0 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
        i64toi32_i32$0 = 0;
        $344_1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
      } else {
        i64toi32_i32$0 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
        $344_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$3 | 0) | 0;
      }
      $2_1 = $344_1;
      $2$hi = i64toi32_i32$0;
      $321_1 = $2_1;
      $321$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $11$hi;
      i64toi32_i32$4 = $11_1;
      i64toi32_i32$1 = 65536;
      i64toi32_i32$5 = 0;
      i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
      $19_1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
      $19$hi = i64toi32_i32$1;
      i64toi32_i32$0 = $19_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$5 = 1;
      i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
        $345_1 = 0;
      } else {
        i64toi32_i32$4 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$3 | 0) | 0;
        $345_1 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
      }
      $20_1 = $345_1;
      $20$hi = i64toi32_i32$4;
      i64toi32_i32$1 = $20_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
        i64toi32_i32$0 = 0;
        $346_1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
      } else {
        i64toi32_i32$0 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
        $346_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$3 | 0) | 0;
      }
      $4_1 = $346_1;
      $4$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $321$hi;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$1 = __wasm_i64_mul($321_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $21_1 = i64toi32_i32$1;
      $21$hi = i64toi32_i32$0;
      $330_1 = i64toi32_i32$1;
      $330$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $1$hi;
      i64toi32_i32$4 = $1_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$5 = 1;
      i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$4 << i64toi32_i32$3 | 0;
        $347_1 = 0;
      } else {
        i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$3 | 0) | 0;
        $347_1 = i64toi32_i32$4 << i64toi32_i32$3 | 0;
      }
      $22_1 = $347_1;
      $22$hi = i64toi32_i32$1;
      i64toi32_i32$0 = $22_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
        i64toi32_i32$4 = 0;
        $348_1 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
      } else {
        i64toi32_i32$4 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
        $348_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
      }
      $10_1 = $348_1;
      $10$hi = i64toi32_i32$4;
      $335_1 = $10_1;
      $335$hi = i64toi32_i32$4;
      i64toi32_i32$1 = ($5_1 + 112 | 0) + 8 | 0;
      i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$4;
      i64toi32_i32$4 = 0;
      i64toi32_i32$5 = 1;
      i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$1 << i64toi32_i32$3 | 0;
        $350_1 = 0;
      } else {
        i64toi32_i32$4 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$3 | 0) | 0;
        $350_1 = i64toi32_i32$1 << i64toi32_i32$3 | 0;
      }
      $340_1 = $350_1;
      $340$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $15$hi;
      i64toi32_i32$0 = $15_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$5 = 63;
      i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = 0;
        $351_1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
      } else {
        i64toi32_i32$1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
        $351_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
      }
      $342$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $340$hi;
      i64toi32_i32$4 = $340_1;
      i64toi32_i32$0 = $342$hi;
      i64toi32_i32$5 = $351_1;
      i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
      $343_1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
      $343$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $17$hi;
      i64toi32_i32$1 = $17_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$5 = 63;
      i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
        i64toi32_i32$4 = 0;
        $352_1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
      } else {
        i64toi32_i32$4 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
        $352_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$3 | 0) | 0;
      }
      $345$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $343$hi;
      i64toi32_i32$0 = $343_1;
      i64toi32_i32$1 = $345$hi;
      i64toi32_i32$5 = $352_1;
      i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
      i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $346$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $13$hi;
      i64toi32_i32$2 = $16$hi;
      i64toi32_i32$2 = $13$hi;
      i64toi32_i32$4 = $13_1;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$5 = $16_1;
      $349_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$4 = 0;
      $350$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $346$hi;
      i64toi32_i32$5 = i64toi32_i32$3;
      i64toi32_i32$2 = $350$hi;
      i64toi32_i32$0 = $349_1;
      i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
      i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $351$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $18$hi;
      i64toi32_i32$3 = $13$hi;
      i64toi32_i32$3 = $18$hi;
      i64toi32_i32$4 = $18_1;
      i64toi32_i32$5 = $13$hi;
      i64toi32_i32$0 = $13_1;
      $354_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
      i64toi32_i32$4 = 0;
      $355$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $351$hi;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$3 = $355$hi;
      i64toi32_i32$5 = $354_1;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      i64toi32_i32$4 = i64toi32_i32$2;
      i64toi32_i32$0 = -1;
      i64toi32_i32$5 = -1;
      i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $15_1 = i64toi32_i32$3;
      $15$hi = i64toi32_i32$2;
      i64toi32_i32$1 = i64toi32_i32$3;
      i64toi32_i32$4 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
        i64toi32_i32$4 = 0;
        $353_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
      } else {
        i64toi32_i32$4 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
        $353_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
      }
      $13_1 = $353_1;
      $13$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $335$hi;
      i64toi32_i32$1 = $13$hi;
      i64toi32_i32$1 = __wasm_i64_mul($335_1 | 0, i64toi32_i32$4 | 0, $13_1 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $361_1 = i64toi32_i32$1;
      $361$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $330$hi;
      i64toi32_i32$2 = $330_1;
      i64toi32_i32$1 = $361$hi;
      i64toi32_i32$5 = $361_1;
      i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $16_1 = i64toi32_i32$0;
      $16$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $21$hi;
      i64toi32_i32$3 = $16$hi;
      i64toi32_i32$4 = i64toi32_i32$0;
      i64toi32_i32$2 = $21$hi;
      i64toi32_i32$5 = $21_1;
      i64toi32_i32$4 = 0;
      $366_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      $366$hi = i64toi32_i32$4;
      i64toi32_i32$4 = i64toi32_i32$3;
      $367_1 = i64toi32_i32$0;
      $367$hi = i64toi32_i32$3;
      i64toi32_i32$4 = $15$hi;
      i64toi32_i32$5 = $15_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$2 = -1;
      i64toi32_i32$3 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
      $15_1 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
      $15$hi = i64toi32_i32$3;
      $370_1 = $15_1;
      $370$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $1$hi;
      i64toi32_i32$4 = $1_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$2 = 63;
      i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
        i64toi32_i32$5 = 0;
        $355_1 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
      } else {
        i64toi32_i32$5 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
        $355_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
      }
      $23_1 = $355_1;
      $23$hi = i64toi32_i32$5;
      $373_1 = $23_1;
      $373$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $11$hi;
      i64toi32_i32$3 = $11_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$2 = 1;
      i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
        $356_1 = 0;
      } else {
        i64toi32_i32$4 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$1 | 0) | 0;
        $356_1 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
      }
      $375$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $373$hi;
      i64toi32_i32$5 = $373_1;
      i64toi32_i32$3 = $375$hi;
      i64toi32_i32$2 = $356_1;
      i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
      i64toi32_i32$5 = 0;
      i64toi32_i32$2 = -1;
      i64toi32_i32$5 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
      $11_1 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
      $11$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $370$hi;
      i64toi32_i32$4 = $11$hi;
      i64toi32_i32$4 = __wasm_i64_mul($370_1 | 0, i64toi32_i32$5 | 0, $11_1 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $379_1 = i64toi32_i32$4;
      $379$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $367$hi;
      i64toi32_i32$3 = $367_1;
      i64toi32_i32$4 = $379$hi;
      i64toi32_i32$2 = $379_1;
      i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
      i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $17_1 = i64toi32_i32$1;
      $17$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$0 = $17$hi;
      i64toi32_i32$5 = i64toi32_i32$1;
      i64toi32_i32$3 = $16$hi;
      i64toi32_i32$2 = $16_1;
      $383_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
      i64toi32_i32$5 = 0;
      $384$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $366$hi;
      i64toi32_i32$2 = $366_1;
      i64toi32_i32$0 = $384$hi;
      i64toi32_i32$3 = $383_1;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $385$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $13$hi;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$1 = $13$hi;
      i64toi32_i32$2 = $4$hi;
      i64toi32_i32$2 = __wasm_i64_mul($13_1 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $388_1 = i64toi32_i32$2;
      $388$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $385$hi;
      i64toi32_i32$5 = i64toi32_i32$4;
      i64toi32_i32$2 = $388$hi;
      i64toi32_i32$3 = $388_1;
      i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $389_1 = i64toi32_i32$0;
      $389$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $15$hi;
      i64toi32_i32$4 = $4$hi;
      i64toi32_i32$4 = $15$hi;
      i64toi32_i32$5 = $4$hi;
      i64toi32_i32$5 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$4 | 0, $4_1 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $21_1 = i64toi32_i32$5;
      $21$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $11$hi;
      i64toi32_i32$4 = $13$hi;
      i64toi32_i32$4 = $11$hi;
      i64toi32_i32$5 = $13$hi;
      i64toi32_i32$5 = __wasm_i64_mul($11_1 | 0, i64toi32_i32$4 | 0, $13_1 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $396_1 = i64toi32_i32$5;
      $396$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $21$hi;
      i64toi32_i32$1 = $21_1;
      i64toi32_i32$5 = $396$hi;
      i64toi32_i32$3 = $396_1;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $16_1 = i64toi32_i32$2;
      $16$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $21$hi;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$4 = i64toi32_i32$2;
      i64toi32_i32$1 = $21$hi;
      i64toi32_i32$3 = $21_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$3 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$1 = 32;
      i64toi32_i32$5 = i64toi32_i32$1 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
        $357_1 = 0;
      } else {
        i64toi32_i32$0 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$5 | 0) | 0;
        $357_1 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
      }
      $402_1 = $357_1;
      $402$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$4 = $16_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$1 = 32;
      i64toi32_i32$5 = i64toi32_i32$1 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
        i64toi32_i32$3 = 0;
        $358_1 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
      } else {
        i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
        $358_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$5 | 0) | 0;
      }
      $404$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $402$hi;
      i64toi32_i32$0 = $402_1;
      i64toi32_i32$4 = $404$hi;
      i64toi32_i32$1 = $358_1;
      i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
      $405_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
      $405$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $389$hi;
      i64toi32_i32$3 = $389_1;
      i64toi32_i32$0 = $405$hi;
      i64toi32_i32$1 = $405_1;
      i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
      i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $406_1 = i64toi32_i32$5;
      $406$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $17$hi;
      $407_1 = $17_1;
      $407$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $16$hi;
      i64toi32_i32$4 = $16_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$1 = 32;
      i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$4 << i64toi32_i32$0 | 0;
        $359_1 = 0;
      } else {
        i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$0 | 0) | 0;
        $359_1 = i64toi32_i32$4 << i64toi32_i32$0 | 0;
      }
      $409$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $407$hi;
      i64toi32_i32$2 = $407_1;
      i64toi32_i32$4 = $409$hi;
      i64toi32_i32$1 = $359_1;
      i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
      i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $16_1 = i64toi32_i32$0;
      $16$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $17$hi;
      i64toi32_i32$5 = $16$hi;
      i64toi32_i32$3 = i64toi32_i32$0;
      i64toi32_i32$2 = $17$hi;
      i64toi32_i32$1 = $17_1;
      $413_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
      i64toi32_i32$3 = 0;
      $414$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $406$hi;
      i64toi32_i32$1 = $406_1;
      i64toi32_i32$5 = $414$hi;
      i64toi32_i32$2 = $413_1;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
      i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $415_1 = i64toi32_i32$4;
      $415$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $16$hi;
      $416_1 = $16_1;
      $416$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$3 = $18_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$2 = -1;
      i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
      $18_1 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
      $18$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $11$hi;
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$3 = $11$hi;
      i64toi32_i32$3 = __wasm_i64_mul($18_1 | 0, i64toi32_i32$1 | 0, $11_1 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $21_1 = i64toi32_i32$3;
      $21$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$1 = $10$hi;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$3 = $10$hi;
      i64toi32_i32$3 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$1 | 0, $10_1 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $425_1 = i64toi32_i32$3;
      $425$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $21$hi;
      i64toi32_i32$0 = $21_1;
      i64toi32_i32$3 = $425$hi;
      i64toi32_i32$2 = $425_1;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $17_1 = i64toi32_i32$5;
      $17$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $21$hi;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$1 = i64toi32_i32$5;
      i64toi32_i32$0 = $21$hi;
      i64toi32_i32$2 = $21_1;
      $429_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
      i64toi32_i32$1 = 0;
      $430_1 = $429_1;
      $430$hi = i64toi32_i32$1;
      i64toi32_i32$1 = i64toi32_i32$4;
      i64toi32_i32$1 = $15$hi;
      i64toi32_i32$1 = $22$hi;
      i64toi32_i32$2 = $22_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$0 = -2;
      i64toi32_i32$4 = i64toi32_i32$1 & i64toi32_i32$4 | 0;
      $21_1 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
      $21$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $15$hi;
      i64toi32_i32$2 = $21$hi;
      i64toi32_i32$2 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$4 | 0, $21_1 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $436_1 = i64toi32_i32$2;
      $436$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$1 = i64toi32_i32$5;
      i64toi32_i32$2 = $436$hi;
      i64toi32_i32$0 = $436_1;
      i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $24_1 = i64toi32_i32$3;
      $24$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $17$hi;
      i64toi32_i32$5 = $24$hi;
      i64toi32_i32$4 = i64toi32_i32$3;
      i64toi32_i32$1 = $17$hi;
      i64toi32_i32$0 = $17_1;
      $440_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
      i64toi32_i32$4 = 0;
      $441$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $430$hi;
      i64toi32_i32$0 = $430_1;
      i64toi32_i32$5 = $441$hi;
      i64toi32_i32$1 = $440_1;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $442$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $416$hi;
      i64toi32_i32$4 = $416_1;
      i64toi32_i32$0 = $442$hi;
      i64toi32_i32$1 = i64toi32_i32$2;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
      i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $17_1 = i64toi32_i32$5;
      $17$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $16$hi;
      i64toi32_i32$2 = $17$hi;
      i64toi32_i32$3 = i64toi32_i32$5;
      i64toi32_i32$4 = $16$hi;
      i64toi32_i32$1 = $16_1;
      $446_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
      i64toi32_i32$3 = 0;
      $447$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $415$hi;
      i64toi32_i32$1 = $415_1;
      i64toi32_i32$2 = $447$hi;
      i64toi32_i32$4 = $446_1;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
      i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $448_1 = i64toi32_i32$0;
      $448$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $17$hi;
      $449_1 = $17_1;
      $449$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$5 = $4$hi;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$1 = __wasm_i64_mul($18_1 | 0, i64toi32_i32$5 | 0, $4_1 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $16_1 = i64toi32_i32$1;
      $16$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $21$hi;
      i64toi32_i32$5 = $13$hi;
      i64toi32_i32$5 = $21$hi;
      i64toi32_i32$1 = $13$hi;
      i64toi32_i32$1 = __wasm_i64_mul($21_1 | 0, i64toi32_i32$5 | 0, $13_1 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $456_1 = i64toi32_i32$1;
      $456$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $16$hi;
      i64toi32_i32$3 = $16_1;
      i64toi32_i32$1 = $456$hi;
      i64toi32_i32$4 = $456_1;
      i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
      i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $4_1 = i64toi32_i32$2;
      $4$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$0 = $11$hi;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$3 = $11$hi;
      i64toi32_i32$3 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$0 | 0, $11_1 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $461_1 = i64toi32_i32$3;
      $461$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$5 = i64toi32_i32$2;
      i64toi32_i32$3 = $461$hi;
      i64toi32_i32$4 = $461_1;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $11_1 = i64toi32_i32$1;
      $11$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $15$hi;
      i64toi32_i32$2 = $10$hi;
      i64toi32_i32$2 = $15$hi;
      i64toi32_i32$5 = $10$hi;
      i64toi32_i32$5 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$2 | 0, $10_1 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $466_1 = i64toi32_i32$5;
      $466$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $11$hi;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$5 = $466$hi;
      i64toi32_i32$4 = $466_1;
      i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $13_1 = i64toi32_i32$3;
      $13$hi = i64toi32_i32$1;
      i64toi32_i32$2 = i64toi32_i32$3;
      i64toi32_i32$0 = 0;
      i64toi32_i32$4 = 32;
      i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$0 = 0;
        $360_1 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
      } else {
        i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
        $360_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
      }
      $469_1 = $360_1;
      $469$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$1 = $4_1;
      i64toi32_i32$2 = $16$hi;
      i64toi32_i32$4 = $16_1;
      $472_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
      i64toi32_i32$1 = 0;
      $473$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $11$hi;
      i64toi32_i32$1 = i64toi32_i32$0;
      i64toi32_i32$1 = $11$hi;
      i64toi32_i32$4 = $11_1;
      i64toi32_i32$2 = $4_1;
      $476_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
      i64toi32_i32$4 = 0;
      $477$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $473$hi;
      i64toi32_i32$2 = $472_1;
      i64toi32_i32$1 = $477$hi;
      i64toi32_i32$0 = $476_1;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $478$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $13$hi;
      i64toi32_i32$3 = $11$hi;
      i64toi32_i32$3 = $13$hi;
      i64toi32_i32$4 = $13_1;
      i64toi32_i32$2 = $11$hi;
      i64toi32_i32$0 = $11_1;
      $481_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
      i64toi32_i32$4 = 0;
      $482$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $478$hi;
      i64toi32_i32$0 = i64toi32_i32$5;
      i64toi32_i32$3 = $482$hi;
      i64toi32_i32$2 = $481_1;
      i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      i64toi32_i32$4 = i64toi32_i32$1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$2 = 32;
      i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$3 | 0;
        $362_1 = 0;
      } else {
        i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
        $362_1 = i64toi32_i32$4 << i64toi32_i32$3 | 0;
      }
      $484$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $469$hi;
      i64toi32_i32$5 = $469_1;
      i64toi32_i32$4 = $484$hi;
      i64toi32_i32$2 = $362_1;
      i64toi32_i32$4 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
      $485_1 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
      $485$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $449$hi;
      i64toi32_i32$0 = $449_1;
      i64toi32_i32$5 = $485$hi;
      i64toi32_i32$2 = $485_1;
      i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $4_1 = i64toi32_i32$3;
      $4$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $17$hi;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$4 = i64toi32_i32$3;
      i64toi32_i32$0 = $17$hi;
      i64toi32_i32$2 = $17_1;
      $489_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
      i64toi32_i32$4 = 0;
      $490$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $448$hi;
      i64toi32_i32$2 = $448_1;
      i64toi32_i32$1 = $490$hi;
      i64toi32_i32$0 = $489_1;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $491_1 = i64toi32_i32$5;
      $491$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $4$hi;
      $492_1 = $4_1;
      $492$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $24$hi;
      $493_1 = $24_1;
      $493$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$3 = $21$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$2 = $21$hi;
      i64toi32_i32$2 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$3 | 0, $21_1 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $2_1 = i64toi32_i32$2;
      $2$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $18$hi;
      i64toi32_i32$3 = $10$hi;
      i64toi32_i32$3 = $18$hi;
      i64toi32_i32$2 = $10$hi;
      i64toi32_i32$2 = __wasm_i64_mul($18_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $500_1 = i64toi32_i32$2;
      $500$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$4 = $2_1;
      i64toi32_i32$2 = $500$hi;
      i64toi32_i32$0 = $500_1;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
      i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $11_1 = i64toi32_i32$1;
      $11$hi = i64toi32_i32$5;
      i64toi32_i32$3 = i64toi32_i32$1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$0 = 32;
      i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$4 = 0;
        $363_1 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
      } else {
        i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
        $363_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$2 | 0) | 0;
      }
      $503_1 = $363_1;
      $503$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $11$hi;
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$4 = $11$hi;
      i64toi32_i32$5 = $11_1;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$0 = $2_1;
      $506_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
      i64toi32_i32$5 = 0;
      i64toi32_i32$0 = $506_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
        $364_1 = 0;
      } else {
        i64toi32_i32$4 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
        $364_1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
      }
      $508$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $503$hi;
      i64toi32_i32$5 = $503_1;
      i64toi32_i32$0 = $508$hi;
      i64toi32_i32$3 = $364_1;
      i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
      $509_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
      $509$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $493$hi;
      i64toi32_i32$4 = $493_1;
      i64toi32_i32$5 = $509$hi;
      i64toi32_i32$3 = $509_1;
      i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $2_1 = i64toi32_i32$2;
      $2$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $24$hi;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$0 = i64toi32_i32$2;
      i64toi32_i32$4 = $24$hi;
      i64toi32_i32$3 = $24_1;
      i64toi32_i32$0 = 0;
      $514_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      $514$hi = i64toi32_i32$0;
      i64toi32_i32$0 = i64toi32_i32$1;
      $515_1 = i64toi32_i32$2;
      $515$hi = i64toi32_i32$1;
      i64toi32_i32$0 = $13$hi;
      i64toi32_i32$3 = $13_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$4 = 32;
      i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
        $365_1 = 0;
      } else {
        i64toi32_i32$1 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$5 | 0) | 0;
        $365_1 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
      }
      $517$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $515$hi;
      i64toi32_i32$0 = $515_1;
      i64toi32_i32$3 = $517$hi;
      i64toi32_i32$4 = $365_1;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $518$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$2 = $518$hi;
      i64toi32_i32$1 = i64toi32_i32$5;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$4 = $2_1;
      $520_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
      i64toi32_i32$1 = 0;
      $521$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $514$hi;
      i64toi32_i32$4 = $514_1;
      i64toi32_i32$2 = $521$hi;
      i64toi32_i32$0 = $520_1;
      i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $522$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $492$hi;
      i64toi32_i32$1 = $492_1;
      i64toi32_i32$4 = $522$hi;
      i64toi32_i32$0 = i64toi32_i32$3;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $2_1 = i64toi32_i32$2;
      $2$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$5 = i64toi32_i32$2;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$0 = $4_1;
      $526_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
      i64toi32_i32$5 = 0;
      $527$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $491$hi;
      i64toi32_i32$0 = $491_1;
      i64toi32_i32$3 = $527$hi;
      i64toi32_i32$1 = $526_1;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $4_1 = i64toi32_i32$4;
      $4$hi = i64toi32_i32$2;
      i64toi32_i32$5 = i64toi32_i32$4;
      i64toi32_i32$0 = 131071;
      i64toi32_i32$1 = -1;
      if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
        break label$13
      }
      i64toi32_i32$5 = $20$hi;
      i64toi32_i32$5 = $23$hi;
      i64toi32_i32$5 = $20$hi;
      i64toi32_i32$1 = $20_1;
      i64toi32_i32$2 = $23$hi;
      i64toi32_i32$0 = $23_1;
      i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
      $19_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
      $19$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$2 = $4$hi;
      i64toi32_i32$2 = $3$hi;
      i64toi32_i32$2 = $14$hi;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$5 = $3$hi;
      i64toi32_i32$0 = $14$hi;
      $554($5_1 + 80 | 0 | 0, $2_1 | 0, i64toi32_i32$2 | 0, i64toi32_i32$4 | 0, i64toi32_i32$1 | 0, $3_1 | 0, i64toi32_i32$5 | 0, $14_1 | 0, i64toi32_i32$0 | 0);
      i64toi32_i32$0 = $1$hi;
      i64toi32_i32$1 = $1_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$2 = 49;
      i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$1 << i64toi32_i32$3 | 0;
        $368_1 = 0;
      } else {
        i64toi32_i32$5 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$3 | 0) | 0;
        $368_1 = i64toi32_i32$1 << i64toi32_i32$3 | 0;
      }
      $541$hi = i64toi32_i32$5;
      i64toi32_i32$0 = ($5_1 + 80 | 0) + 8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $545_1 = i64toi32_i32$5;
      $545$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $541$hi;
      i64toi32_i32$0 = $368_1;
      i64toi32_i32$5 = $545$hi;
      i64toi32_i32$2 = $545_1;
      i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
      i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0;
      i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
      i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$4 | 0;
      $546$hi = i64toi32_i32$4;
      i64toi32_i32$1 = $5_1;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 80 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 84 | 0) >> 2] | 0;
      $1_1 = i64toi32_i32$4;
      $1$hi = i64toi32_i32$0;
      i64toi32_i32$1 = i64toi32_i32$4;
      i64toi32_i32$4 = 0;
      i64toi32_i32$2 = 0;
      $550_1 = (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$1 = 0;
      $551$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $546$hi;
      i64toi32_i32$2 = i64toi32_i32$3;
      i64toi32_i32$0 = $551$hi;
      i64toi32_i32$4 = $550_1;
      i64toi32_i32$5 = i64toi32_i32$3 - i64toi32_i32$4 | 0;
      i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0;
      i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
      i64toi32_i32$3 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
      $10_1 = i64toi32_i32$5;
      $10$hi = i64toi32_i32$3;
      $6_1 = $6_1 + 16382 | 0;
      i64toi32_i32$3 = $1$hi;
      i64toi32_i32$3 = 0;
      i64toi32_i32$1 = 0;
      i64toi32_i32$2 = $1$hi;
      i64toi32_i32$4 = $1_1;
      i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$4 | 0;
      i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0;
      i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
      i64toi32_i32$5 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
      $11_1 = i64toi32_i32$0;
      $11$hi = i64toi32_i32$5;
      break label$12;
      }
      $558_1 = $5_1 + 96 | 0;
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$3 = $2_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$4 = 1;
      i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $369_1 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
      } else {
      i64toi32_i32$1 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
      $369_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$2 | 0) | 0;
      }
      $560_1 = $369_1;
      $560$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$5 = $4_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$4 = 63;
      i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
      $371_1 = 0;
      } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$2 | 0) | 0;
      $371_1 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
      }
      $562$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $560$hi;
      i64toi32_i32$1 = $560_1;
      i64toi32_i32$5 = $562$hi;
      i64toi32_i32$4 = $371_1;
      i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
      $2_1 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
      $2$hi = i64toi32_i32$5;
      $564_1 = $2_1;
      $564$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $4$hi;
      i64toi32_i32$3 = $4_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$4 = 1;
      i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $372_1 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
      } else {
      i64toi32_i32$1 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
      $372_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$2 | 0) | 0;
      }
      $4_1 = $372_1;
      $4$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$1 = $14$hi;
      i64toi32_i32$1 = $564$hi;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$5 = $3$hi;
      i64toi32_i32$4 = $14$hi;
      $554($558_1 | 0, $564_1 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$3 | 0, $3_1 | 0, i64toi32_i32$5 | 0, $14_1 | 0, i64toi32_i32$4 | 0);
      i64toi32_i32$4 = $1$hi;
      i64toi32_i32$3 = $1_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$1 = 48;
      i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
      $374_1 = 0;
      } else {
      i64toi32_i32$5 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$2 | 0) | 0;
      $374_1 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
      }
      $571$hi = i64toi32_i32$5;
      i64toi32_i32$4 = ($5_1 + 96 | 0) + 8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
      $575_1 = i64toi32_i32$5;
      $575$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $571$hi;
      i64toi32_i32$4 = $374_1;
      i64toi32_i32$5 = $575$hi;
      i64toi32_i32$1 = $575_1;
      i64toi32_i32$2 = i64toi32_i32$4 - i64toi32_i32$1 | 0;
      i64toi32_i32$6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0;
      i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
      i64toi32_i32$0 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
      $576$hi = i64toi32_i32$0;
      i64toi32_i32$3 = $5_1;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 96 | 0) >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 100 | 0) >> 2] | 0;
      $11_1 = i64toi32_i32$0;
      $11$hi = i64toi32_i32$4;
      i64toi32_i32$3 = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$1 = 0;
      $580_1 = (i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$4 | 0) != (i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$3 = 0;
      $581$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $576$hi;
      i64toi32_i32$1 = i64toi32_i32$2;
      i64toi32_i32$4 = $581$hi;
      i64toi32_i32$0 = $580_1;
      i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
      i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0;
      i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
      i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
      $10_1 = i64toi32_i32$5;
      $10$hi = i64toi32_i32$2;
      $6_1 = $6_1 + 16383 | 0;
      i64toi32_i32$2 = $11$hi;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = 0;
      i64toi32_i32$1 = $11$hi;
      i64toi32_i32$0 = $11_1;
      i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
      i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0;
      i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
      i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
      $11_1 = i64toi32_i32$4;
      $11$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $1$hi;
      $22_1 = $1_1;
      $22$hi = i64toi32_i32$5;
    }
    label$14 : {
      if (($6_1 | 0) < (32767 | 0)) {
      break label$14
      }
      i64toi32_i32$5 = $12$hi;
      i64toi32_i32$2 = $12_1;
      i64toi32_i32$3 = 2147418112;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
      $12_1 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
      $12$hi = i64toi32_i32$3;
      i64toi32_i32$3 = 0;
      $1_1 = 0;
      $1$hi = i64toi32_i32$3;
      break label$1;
    }
    label$15 : {
      label$16 : {
      if (($6_1 | 0) < (1 | 0)) {
        break label$16
      }
      i64toi32_i32$3 = $10$hi;
      i64toi32_i32$5 = $10_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$0 = 1;
      i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
        $375_1 = 0;
      } else {
        i64toi32_i32$2 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$1 | 0) | 0;
        $375_1 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
      }
      $595_1 = $375_1;
      $595$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $11$hi;
      i64toi32_i32$3 = $11_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$0 = 63;
      i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$5 = 0;
        $376_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
      } else {
        i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
        $376_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
      }
      $597$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $595$hi;
      i64toi32_i32$2 = $595_1;
      i64toi32_i32$3 = $597$hi;
      i64toi32_i32$0 = $376_1;
      i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
      $1_1 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
      $1$hi = i64toi32_i32$3;
      i64toi32_i32$3 = 0;
      i64toi32_i32$5 = $6_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$0 = 48;
      i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
        $377_1 = 0;
      } else {
        i64toi32_i32$2 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$1 | 0) | 0;
        $377_1 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
      }
      $601$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $4$hi;
      i64toi32_i32$3 = $4_1;
      i64toi32_i32$5 = 65535;
      i64toi32_i32$0 = -1;
      i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
      $603_1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
      $603$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $601$hi;
      i64toi32_i32$2 = $377_1;
      i64toi32_i32$3 = $603$hi;
      i64toi32_i32$0 = $603_1;
      i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
      $10_1 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
      $10$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $11$hi;
      i64toi32_i32$5 = $11_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$0 = 1;
      i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
        $378_1 = 0;
      } else {
        i64toi32_i32$2 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$1 | 0) | 0;
        $378_1 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
      }
      $4_1 = $378_1;
      $4$hi = i64toi32_i32$2;
      break label$15;
      }
      label$17 : {
      if (($6_1 | 0) > (-113 | 0)) {
        break label$17
      }
      i64toi32_i32$2 = 0;
      $1_1 = 0;
      $1$hi = i64toi32_i32$2;
      break label$1;
      }
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$2 = $4$hi;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$5 = $4$hi;
      $541($5_1 + 64 | 0 | 0, $2_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$5 | 0, 1 - $6_1 | 0 | 0);
      i64toi32_i32$5 = $22$hi;
      i64toi32_i32$5 = $19$hi;
      i64toi32_i32$5 = $22$hi;
      i64toi32_i32$2 = $19$hi;
      $538($5_1 + 48 | 0 | 0, $22_1 | 0, i64toi32_i32$5 | 0, $19_1 | 0, i64toi32_i32$2 | 0, $6_1 + 112 | 0 | 0);
      i64toi32_i32$2 = $3$hi;
      i64toi32_i32$2 = $14$hi;
      i64toi32_i32$3 = $5_1;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 64 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 68 | 0) >> 2] | 0;
      $2_1 = i64toi32_i32$2;
      $2$hi = i64toi32_i32$5;
      i64toi32_i32$3 = (i64toi32_i32$3 + 64 | 0) + 8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
      $10_1 = i64toi32_i32$5;
      $10$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $3$hi;
      i64toi32_i32$5 = $14$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$0 = $10$hi;
      $554($5_1 + 32 | 0 | 0, $3_1 | 0, i64toi32_i32$2 | 0, $14_1 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$0 | 0);
      i64toi32_i32$5 = ($5_1 + 48 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $636_1 = i64toi32_i32$0;
      $636$hi = i64toi32_i32$3;
      i64toi32_i32$5 = ($5_1 + 32 | 0) + 8 | 0;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      i64toi32_i32$5 = i64toi32_i32$3;
      i64toi32_i32$3 = 0;
      i64toi32_i32$2 = 1;
      i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
      $380_1 = 0;
      } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$1 | 0) | 0;
      $380_1 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
      }
      $641_1 = $380_1;
      $641$hi = i64toi32_i32$3;
      i64toi32_i32$0 = $5_1;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
      $1_1 = i64toi32_i32$3;
      $1$hi = i64toi32_i32$5;
      i64toi32_i32$0 = i64toi32_i32$3;
      i64toi32_i32$3 = 0;
      i64toi32_i32$2 = 63;
      i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $381_1 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
      } else {
      i64toi32_i32$3 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
      $381_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
      }
      $645$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $641$hi;
      i64toi32_i32$5 = $641_1;
      i64toi32_i32$0 = $645$hi;
      i64toi32_i32$2 = $381_1;
      i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
      $646_1 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
      $646$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $636$hi;
      i64toi32_i32$3 = $636_1;
      i64toi32_i32$5 = $646$hi;
      i64toi32_i32$2 = $646_1;
      i64toi32_i32$1 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
      i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0;
      i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
      i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
      $647_1 = i64toi32_i32$1;
      $647$hi = i64toi32_i32$4;
      i64toi32_i32$0 = $5_1;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 52 | 0) >> 2] | 0;
      $4_1 = i64toi32_i32$4;
      $4$hi = i64toi32_i32$3;
      $650_1 = i64toi32_i32$4;
      $650$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $1$hi;
      i64toi32_i32$0 = $1_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$2 = 1;
      i64toi32_i32$5 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
      $382_1 = 0;
      } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$5 | 0) | 0;
      $382_1 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
      }
      $11_1 = $382_1;
      $11$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $650$hi;
      i64toi32_i32$3 = $650_1;
      i64toi32_i32$0 = $11$hi;
      i64toi32_i32$2 = $11_1;
      $654_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
      i64toi32_i32$3 = 0;
      $655$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $647$hi;
      i64toi32_i32$2 = $647_1;
      i64toi32_i32$4 = $655$hi;
      i64toi32_i32$0 = $654_1;
      i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
      i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
      i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
      i64toi32_i32$1 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
      $1_1 = i64toi32_i32$5;
      $1$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$1 = $11$hi;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$3 = $4_1;
      i64toi32_i32$2 = $11$hi;
      i64toi32_i32$0 = $11_1;
      i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
      i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0;
      i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
      i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
      $4_1 = i64toi32_i32$4;
      $4$hi = i64toi32_i32$5;
    }
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $14$hi;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$3 = $14$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 0;
    $554($5_1 + 16 | 0 | 0, $3_1 | 0, i64toi32_i32$5 | 0, $14_1 | 0, i64toi32_i32$3 | 0, 3 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$0 = i64toi32_i32$5;
    i64toi32_i32$0 = i64toi32_i32$3;
    i64toi32_i32$0 = i64toi32_i32$5;
    i64toi32_i32$1 = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 0;
    $554($5_1 | 0, $3_1 | 0, i64toi32_i32$0 | 0, $14_1 | 0, i64toi32_i32$1 | 0, 5 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$5 = $10$hi;
    $667_1 = $10_1;
    $667$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $2$hi;
    $668_1 = $2_1;
    $668$hi = i64toi32_i32$5;
    i64toi32_i32$1 = $2_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = 1;
    i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
    $11_1 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
    $11$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$3 = $11$hi;
    i64toi32_i32$5 = $11_1;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $4_1 = i64toi32_i32$2;
    $4$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$3 = i64toi32_i32$2;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$0 = $3_1;
    $676_1 = i64toi32_i32$4 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$3 = i64toi32_i32$4;
    i64toi32_i32$3 = $11$hi;
    i64toi32_i32$3 = i64toi32_i32$4;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$4 = $11$hi;
    i64toi32_i32$5 = $11_1;
    $680_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
    i64toi32_i32$0 = 0;
    $681$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$5 = $1_1;
    i64toi32_i32$3 = $681$hi;
    i64toi32_i32$4 = $680_1;
    i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
    }
    $1_1 = i64toi32_i32$1;
    $1$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $14$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$0 = i64toi32_i32$1;
    i64toi32_i32$5 = $14$hi;
    i64toi32_i32$4 = $14_1;
    $685_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$0 = i64toi32_i32$5;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$4 = i64toi32_i32$1;
    i64toi32_i32$2 = i64toi32_i32$5;
    i64toi32_i32$5 = $14_1;
    $689_1 = (i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) | 0 ? $676_1 : $685_1;
    i64toi32_i32$4 = 0;
    $690$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $668$hi;
    i64toi32_i32$5 = $668_1;
    i64toi32_i32$0 = $690$hi;
    i64toi32_i32$2 = $689_1;
    i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
    i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $3_1 = i64toi32_i32$3;
    $3$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$4 = i64toi32_i32$3;
    i64toi32_i32$5 = $2$hi;
    i64toi32_i32$2 = $2_1;
    $694_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
    i64toi32_i32$4 = 0;
    $695$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $667$hi;
    i64toi32_i32$2 = $667_1;
    i64toi32_i32$1 = $695$hi;
    i64toi32_i32$5 = $694_1;
    i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
    i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
    }
    $2_1 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$3;
    $697_1 = i64toi32_i32$0;
    $697$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$4 = i64toi32_i32$0;
    i64toi32_i32$2 = 2147418112;
    i64toi32_i32$5 = 0;
    $700_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 16 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 20 | 0) >> 2] | 0;
    $703_1 = i64toi32_i32$4;
    $703$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$5 = $4_1;
    i64toi32_i32$4 = $703$hi;
    i64toi32_i32$2 = $703_1;
    $704_1 = i64toi32_i32$3 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$2 = ($5_1 + 16 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$5;
    $2$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$5 = $2$hi;
    i64toi32_i32$4 = $2_1;
    $711_1 = i64toi32_i32$3 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$3;
    i64toi32_i32$2 = i64toi32_i32$5;
    i64toi32_i32$2 = i64toi32_i32$3;
    i64toi32_i32$4 = $1_1;
    i64toi32_i32$3 = i64toi32_i32$5;
    i64toi32_i32$5 = $2_1;
    $716_1 = $700_1 & ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) | 0 ? $704_1 : $711_1) | 0;
    i64toi32_i32$4 = 0;
    $717$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$5 = $3_1;
    i64toi32_i32$2 = $717$hi;
    i64toi32_i32$3 = $716_1;
    i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $2_1 = i64toi32_i32$1;
    $2$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$4 = i64toi32_i32$1;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$3 = $3_1;
    $721_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
    i64toi32_i32$4 = 0;
    $722$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $697$hi;
    i64toi32_i32$3 = $697_1;
    i64toi32_i32$0 = $722$hi;
    i64toi32_i32$5 = $721_1;
    i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
    i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $3_1 = i64toi32_i32$2;
    $3$hi = i64toi32_i32$1;
    $724_1 = i64toi32_i32$2;
    $724$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$4 = i64toi32_i32$2;
    i64toi32_i32$3 = 2147418112;
    i64toi32_i32$5 = 0;
    $727_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $730_1 = i64toi32_i32$4;
    $730$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$5 = $4_1;
    i64toi32_i32$4 = $730$hi;
    i64toi32_i32$3 = $730_1;
    $731_1 = i64toi32_i32$1 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$3 = $5_1 + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$5;
    $4$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$4 = $4_1;
    $737_1 = i64toi32_i32$1 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0;
    i64toi32_i32$3 = i64toi32_i32$1;
    i64toi32_i32$3 = i64toi32_i32$5;
    i64toi32_i32$3 = i64toi32_i32$1;
    i64toi32_i32$4 = $1_1;
    i64toi32_i32$1 = i64toi32_i32$5;
    i64toi32_i32$5 = $4_1;
    $742_1 = $727_1 & ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) | 0 ? $731_1 : $737_1) | 0;
    i64toi32_i32$4 = 0;
    $743$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $2$hi;
    i64toi32_i32$5 = $2_1;
    i64toi32_i32$3 = $743$hi;
    i64toi32_i32$1 = $742_1;
    i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
    i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
    }
    $1_1 = i64toi32_i32$0;
    $1$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$4 = i64toi32_i32$0;
    i64toi32_i32$5 = $2$hi;
    i64toi32_i32$1 = $2_1;
    $747_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
    i64toi32_i32$4 = 0;
    $748$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $724$hi;
    i64toi32_i32$1 = $724_1;
    i64toi32_i32$2 = $748$hi;
    i64toi32_i32$5 = $747_1;
    i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
    i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $749$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $12$hi;
    i64toi32_i32$0 = $749$hi;
    i64toi32_i32$4 = i64toi32_i32$3;
    i64toi32_i32$1 = $12$hi;
    i64toi32_i32$5 = $12_1;
    i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $12_1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
    $12$hi = i64toi32_i32$1;
    }
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$4 = $0_1;
    HEAP32[i64toi32_i32$4 >> 2] = $1_1;
    HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$1 = $12$hi;
    HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = $12_1;
    HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$1;
    global$0 = $5_1 + 336 | 0;
  }
  
  function $556($0_1, $0$hi, $1_1, $1$hi) {
    $0_1 = $0_1 | 0;
    $0$hi = $0$hi | 0;
    $1_1 = $1_1 | 0;
    $1$hi = $1$hi | 0;
    var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $2$hi = 0, $2_1 = 0, $13_1 = 0, $3_1 = 0, $4_1 = 0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$1 = 65535;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $2_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $2$hi = i64toi32_i32$1;
    label$1 : {
    label$2 : {
      i64toi32_i32$1 = i64toi32_i32$0;
      i64toi32_i32$0 = i64toi32_i32$2;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = 48;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $13_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      } else {
      i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      $13_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
      }
      $3_1 = $13_1 & 32767 | 0;
      if (($3_1 | 0) == (32767 | 0)) {
      break label$2
      }
      $4_1 = 4;
      if ($3_1) {
      break label$1
      }
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$2 = $0$hi;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$1 = $2_1;
      i64toi32_i32$0 = $0$hi;
      i64toi32_i32$3 = $0_1;
      i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
      return (!(i64toi32_i32$1 | i64toi32_i32$3 | 0 | i64toi32_i32$0 | 0) ? 2 : 3) | 0;
    }
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$1 = $0$hi;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $4_1 = !(i64toi32_i32$2 | i64toi32_i32$3 | 0 | i64toi32_i32$1 | 0);
    }
    return $4_1 | 0;
  }
  
  function $557($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1$hi = $1$hi | 0;
    $2_1 = $2_1 | 0;
    $2$hi = $2$hi | 0;
    $3_1 = $3_1 | 0;
    $3$hi = $3$hi | 0;
    $4_1 = $4_1 | 0;
    $4$hi = $4$hi | 0;
    var i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, $5_1 = 0, i64toi32_i32$5 = 0, $10$hi = 0, $10_1 = 0, $9$hi = 0, $7_1 = 0, $9_1 = 0, i64toi32_i32$6 = 0, $8_1 = 0, $11$hi = 0, $52_1 = 0, $6_1 = 0, $53_1 = 0, $54_1 = 0, $55_1 = 0, $11_1 = 0, $56_1 = 0, $57_1 = 0, $58_1 = 0, $59_1 = 0, $60_1 = 0, $61_1 = 0, $62_1 = 0, $63_1 = 0, $64_1 = 0, $65_1 = 0, $66_1 = 0, $67_1 = 0, $68_1 = 0, $69_1 = 0, $70_1 = 0, $71_1 = 0, $123$hi = 0, $126_1 = 0, $127$hi = 0, $148_1 = 0, $148$hi = 0, $150$hi = 0, $153_1 = 0, $153$hi = 0, $155$hi = 0, $167$hi = 0, $170_1 = 0, $171$hi = 0, $200_1 = 0, $200$hi = 0, $202$hi = 0, $211_1 = 0, $212_1 = 0, $212$hi = 0, $214_1 = 0, $214$hi = 0, $220$hi = 0, $221_1 = 0, $221$hi = 0, $228_1 = 0, $228$hi = 0, $233$hi = 0;
    $5_1 = global$0 - 128 | 0;
    global$0 = $5_1;
    label$1 : {
    label$2 : {
      label$3 : {
      i64toi32_i32$0 = $3$hi;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$0 = $3$hi;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = 0;
      if (!($547($3_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0) | 0)) {
        break label$3
      }
      i64toi32_i32$3 = i64toi32_i32$0;
      i64toi32_i32$3 = i64toi32_i32$1;
      i64toi32_i32$3 = i64toi32_i32$0;
      i64toi32_i32$2 = i64toi32_i32$1;
      if (!($556($3_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$1 | 0) | 0)) {
        break label$3
      }
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$1 = $2_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = 48;
      i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$3 = 0;
        $52_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      } else {
        i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
        $52_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
      }
      $6_1 = $52_1;
      $7_1 = $6_1 & 32767 | 0;
      if (($7_1 | 0) != (32767 | 0)) {
        break label$2
      }
      }
      i64toi32_i32$3 = $1$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$3 = $1$hi;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$2 = $3$hi;
      i64toi32_i32$0 = $4$hi;
      $542($5_1 + 16 | 0 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $2_1 | 0, i64toi32_i32$1 | 0, $3_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$0 | 0);
      i64toi32_i32$1 = $5_1;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] | 0;
      $4_1 = i64toi32_i32$0;
      $4$hi = i64toi32_i32$2;
      i64toi32_i32$1 = (i64toi32_i32$1 + 16 | 0) + 8 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $3_1 = i64toi32_i32$2;
      $3$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$0 = $3$hi;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$2 = $3$hi;
      i64toi32_i32$1 = i64toi32_i32$0;
      i64toi32_i32$3 = i64toi32_i32$2;
      $555($5_1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$2 | 0);
      i64toi32_i32$2 = $5_1 + 8 | 0;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $2_1 = i64toi32_i32$3;
      $2$hi = i64toi32_i32$1;
      i64toi32_i32$2 = $5_1;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $4_1 = i64toi32_i32$1;
      $4$hi = i64toi32_i32$3;
      break label$1;
    }
    label$4 : {
      i64toi32_i32$3 = $1$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$1 = 2147483647;
      i64toi32_i32$0 = -1;
      i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
      $9_1 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
      $9$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$3 = $4_1;
      i64toi32_i32$2 = 2147483647;
      i64toi32_i32$0 = -1;
      i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
      $10_1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
      $10$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $1$hi;
      i64toi32_i32$3 = $9$hi;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$0 = $10$hi;
      if (($547($1_1 | 0, i64toi32_i32$2 | 0, $9_1 | 0, i64toi32_i32$3 | 0, $3_1 | 0, i64toi32_i32$1 | 0, $10_1 | 0, i64toi32_i32$0 | 0) | 0 | 0) > (0 | 0)) {
      break label$4
      }
      label$5 : {
      i64toi32_i32$0 = i64toi32_i32$2;
      i64toi32_i32$0 = i64toi32_i32$3;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$0 = $10$hi;
      i64toi32_i32$0 = i64toi32_i32$2;
      i64toi32_i32$1 = i64toi32_i32$3;
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$2 = $10$hi;
      if (!($547($1_1 | 0, i64toi32_i32$0 | 0, $9_1 | 0, i64toi32_i32$1 | 0, $3_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$2 | 0) | 0)) {
        break label$5
      }
      i64toi32_i32$2 = i64toi32_i32$0;
      i64toi32_i32$2 = i64toi32_i32$0;
      $4_1 = $1_1;
      $4$hi = i64toi32_i32$0;
      break label$1;
      }
      i64toi32_i32$2 = $1$hi;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$2 = $1$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$1 = 0;
      i64toi32_i32$0 = 0;
      $542($5_1 + 112 | 0 | 0, $1_1 | 0, i64toi32_i32$2 | 0, $2_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0);
      i64toi32_i32$3 = $5_1 + 120 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
      $2_1 = i64toi32_i32$0;
      $2$hi = i64toi32_i32$1;
      i64toi32_i32$3 = $5_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 112 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 116 | 0) >> 2] | 0;
      $4_1 = i64toi32_i32$1;
      $4$hi = i64toi32_i32$0;
      break label$1;
    }
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$3 = $4_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$2 = 48;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $53_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
      i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      $53_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
    }
    $8_1 = $53_1 & 32767 | 0;
    label$6 : {
      label$7 : {
      if (!$7_1) {
        break label$7
      }
      i64toi32_i32$1 = $1$hi;
      $4_1 = $1_1;
      $4$hi = i64toi32_i32$1;
      break label$6;
      }
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$1 = $9$hi;
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$3 = $9$hi;
      i64toi32_i32$0 = 0;
      i64toi32_i32$2 = 1081540608;
      $542($5_1 + 96 | 0 | 0, $1_1 | 0, i64toi32_i32$1 | 0, $9_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0);
      i64toi32_i32$3 = $5_1 + 104 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
      $9_1 = i64toi32_i32$2;
      $9$hi = i64toi32_i32$0;
      i64toi32_i32$3 = i64toi32_i32$2;
      i64toi32_i32$2 = 0;
      i64toi32_i32$1 = 48;
      i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $54_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      } else {
      i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      $54_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
      }
      $7_1 = $54_1 + -120 | 0;
      i64toi32_i32$0 = $5_1;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 96 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 100 | 0) >> 2] | 0;
      $4_1 = i64toi32_i32$2;
      $4$hi = i64toi32_i32$3;
    }
    label$8 : {
      if ($8_1) {
      break label$8
      }
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$3 = $10$hi;
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$2 = $10$hi;
      i64toi32_i32$0 = 0;
      i64toi32_i32$1 = 1081540608;
      $542($5_1 + 80 | 0 | 0, $3_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0);
      i64toi32_i32$2 = $5_1 + 88 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $10_1 = i64toi32_i32$1;
      $10$hi = i64toi32_i32$0;
      i64toi32_i32$2 = i64toi32_i32$1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = 48;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $55_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      } else {
      i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      $55_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
      }
      $8_1 = $55_1 + -120 | 0;
      i64toi32_i32$0 = $5_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 80 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 84 | 0) >> 2] | 0;
      $3_1 = i64toi32_i32$1;
      $3$hi = i64toi32_i32$2;
    }
    i64toi32_i32$2 = $10$hi;
    i64toi32_i32$0 = $10_1;
    i64toi32_i32$1 = 65535;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
    i64toi32_i32$0 = 65536;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
    $11_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $11$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $9$hi;
    i64toi32_i32$1 = $9_1;
    i64toi32_i32$2 = 65535;
    i64toi32_i32$3 = -1;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
    i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
    i64toi32_i32$1 = 65536;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $9_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
    $9$hi = i64toi32_i32$1;
    label$9 : {
      if (($7_1 | 0) <= ($8_1 | 0)) {
      break label$9
      }
      label$10 : while (1) {
      label$11 : {
        label$12 : {
        i64toi32_i32$1 = $9$hi;
        i64toi32_i32$1 = $11$hi;
        i64toi32_i32$1 = $9$hi;
        i64toi32_i32$2 = $9_1;
        i64toi32_i32$0 = $11$hi;
        i64toi32_i32$3 = $11_1;
        i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
        i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0;
        i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
        i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
        $123$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $4$hi;
        i64toi32_i32$5 = $3$hi;
        i64toi32_i32$5 = $4$hi;
        i64toi32_i32$1 = $4_1;
        i64toi32_i32$2 = $3$hi;
        i64toi32_i32$3 = $3_1;
        $126_1 = $4$hi >>> 0 < i64toi32_i32$2 >>> 0 | (($4$hi | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
        i64toi32_i32$1 = 0;
        $127$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $123$hi;
        i64toi32_i32$3 = i64toi32_i32$4;
        i64toi32_i32$5 = $127$hi;
        i64toi32_i32$2 = $126_1;
        i64toi32_i32$0 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
        i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0;
        i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
        i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$4 | 0;
        $10_1 = i64toi32_i32$0;
        $10$hi = i64toi32_i32$4;
        i64toi32_i32$1 = i64toi32_i32$0;
        i64toi32_i32$3 = 0;
        i64toi32_i32$2 = 0;
        if ((i64toi32_i32$4 | 0) < (i64toi32_i32$3 | 0)) {
          $56_1 = 1
        } else {
          if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$3 | 0)) {
          if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$2 >>> 0) {
            $57_1 = 0
          } else {
            $57_1 = 1
          }
          $58_1 = $57_1;
          } else {
          $58_1 = 0
          }
          $56_1 = $58_1;
        }
        if ($56_1) {
          break label$12
        }
        label$13 : {
          i64toi32_i32$1 = $10$hi;
          i64toi32_i32$1 = $4$hi;
          i64toi32_i32$1 = $3$hi;
          i64toi32_i32$1 = $4$hi;
          i64toi32_i32$2 = $4_1;
          i64toi32_i32$4 = $3$hi;
          i64toi32_i32$3 = $3_1;
          i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
          i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0;
          i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
          i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
          $4_1 = i64toi32_i32$5;
          $4$hi = i64toi32_i32$0;
          i64toi32_i32$0 = $10$hi;
          i64toi32_i32$1 = $10_1;
          i64toi32_i32$2 = $4$hi;
          i64toi32_i32$3 = $4_1;
          i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
          i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
          i64toi32_i32$1 = 0;
          i64toi32_i32$3 = 0;
          if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | 0) {
          break label$13
          }
          i64toi32_i32$0 = $1$hi;
          i64toi32_i32$0 = $2$hi;
          i64toi32_i32$0 = $1$hi;
          i64toi32_i32$2 = $2$hi;
          i64toi32_i32$3 = 0;
          i64toi32_i32$1 = 0;
          $542($5_1 + 32 | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$1 | 0);
          i64toi32_i32$2 = $5_1 + 40 | 0;
          i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
          i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
          $2_1 = i64toi32_i32$1;
          $2$hi = i64toi32_i32$3;
          i64toi32_i32$2 = $5_1;
          i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
          $4_1 = i64toi32_i32$3;
          $4$hi = i64toi32_i32$1;
          break label$1;
        }
        i64toi32_i32$1 = $10$hi;
        i64toi32_i32$2 = $10_1;
        i64toi32_i32$3 = 0;
        i64toi32_i32$0 = 1;
        i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
          i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
          $59_1 = 0;
        } else {
          i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
          $59_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
        }
        $148_1 = $59_1;
        $148$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $4$hi;
        i64toi32_i32$1 = $4_1;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 63;
        i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
          i64toi32_i32$2 = 0;
          $60_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
        } else {
          i64toi32_i32$2 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
          $60_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
        }
        $150$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $148$hi;
        i64toi32_i32$3 = $148_1;
        i64toi32_i32$1 = $150$hi;
        i64toi32_i32$0 = $60_1;
        i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
        $9_1 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
        $9$hi = i64toi32_i32$1;
        break label$11;
        }
        i64toi32_i32$1 = $9$hi;
        i64toi32_i32$2 = $9_1;
        i64toi32_i32$3 = 0;
        i64toi32_i32$0 = 1;
        i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
        $61_1 = 0;
        } else {
        i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
        $61_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
        }
        $153_1 = $61_1;
        $153$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $4$hi;
        i64toi32_i32$1 = $4_1;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 63;
        i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = 0;
        $62_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
        } else {
        i64toi32_i32$2 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
        $62_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
        }
        $155$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $153$hi;
        i64toi32_i32$3 = $153_1;
        i64toi32_i32$1 = $155$hi;
        i64toi32_i32$0 = $62_1;
        i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
        $9_1 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
        $9$hi = i64toi32_i32$1;
      }
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$2 = $4_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = 1;
      i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
        $63_1 = 0;
      } else {
        i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
        $63_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
      }
      $4_1 = $63_1;
      $4$hi = i64toi32_i32$3;
      $7_1 = $7_1 + -1 | 0;
      if (($7_1 | 0) > ($8_1 | 0)) {
        continue label$10
      }
      break label$10;
      };
      $7_1 = $8_1;
    }
    label$14 : {
      label$15 : {
      i64toi32_i32$3 = $9$hi;
      i64toi32_i32$3 = $11$hi;
      i64toi32_i32$3 = $9$hi;
      i64toi32_i32$1 = $9_1;
      i64toi32_i32$2 = $11$hi;
      i64toi32_i32$0 = $11_1;
      i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
      i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0;
      i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
      i64toi32_i32$5 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
      $167$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $4$hi;
      i64toi32_i32$5 = $3$hi;
      i64toi32_i32$5 = $4$hi;
      i64toi32_i32$3 = $4_1;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$0 = $3_1;
      $170_1 = $4$hi >>> 0 < i64toi32_i32$1 >>> 0 | (($4$hi | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
      i64toi32_i32$3 = 0;
      $171$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $167$hi;
      i64toi32_i32$0 = i64toi32_i32$4;
      i64toi32_i32$5 = $171$hi;
      i64toi32_i32$1 = $170_1;
      i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$1 | 0;
      i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0;
      i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
      i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$4 | 0;
      $10_1 = i64toi32_i32$2;
      $10$hi = i64toi32_i32$4;
      i64toi32_i32$3 = i64toi32_i32$2;
      i64toi32_i32$0 = 0;
      i64toi32_i32$1 = 0;
      if ((i64toi32_i32$4 | 0) > (i64toi32_i32$0 | 0)) {
        $64_1 = 1
      } else {
        if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$0 | 0)) {
        if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
          $65_1 = 0
        } else {
          $65_1 = 1
        }
        $66_1 = $65_1;
        } else {
        $66_1 = 0
        }
        $64_1 = $66_1;
      }
      if ($64_1) {
        break label$15
      }
      i64toi32_i32$3 = $9$hi;
      $10_1 = $9_1;
      $10$hi = i64toi32_i32$3;
      break label$14;
      }
      i64toi32_i32$3 = $10$hi;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$1 = $4_1;
      i64toi32_i32$4 = $3$hi;
      i64toi32_i32$0 = $3_1;
      i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
      i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0;
      i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
      i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
      $4_1 = i64toi32_i32$5;
      $4$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $10$hi;
      i64toi32_i32$3 = $10_1;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$0 = $4_1;
      i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
      i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = 0;
      if ((i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | 0) {
      break label$14
      }
      i64toi32_i32$2 = $1$hi;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$2 = $1$hi;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 0;
      $542($5_1 + 48 | 0 | 0, $1_1 | 0, i64toi32_i32$2 | 0, $2_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$1 = $5_1 + 56 | 0;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $2_1 = i64toi32_i32$3;
      $2$hi = i64toi32_i32$0;
      i64toi32_i32$1 = $5_1;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 52 | 0) >> 2] | 0;
      $4_1 = i64toi32_i32$0;
      $4$hi = i64toi32_i32$3;
      break label$1;
    }
    label$16 : {
      i64toi32_i32$3 = $10$hi;
      i64toi32_i32$1 = $10_1;
      i64toi32_i32$0 = 65535;
      i64toi32_i32$2 = -1;
      if (i64toi32_i32$3 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0) {
      break label$16
      }
      label$17 : while (1) {
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$2 = $4_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = 63;
      i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$3 = 0;
        $67_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      } else {
        i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
        $67_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
      }
      $3_1 = $67_1;
      $3$hi = i64toi32_i32$3;
      $7_1 = $7_1 + -1 | 0;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$1 = $4_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$0 = 1;
      i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
        $68_1 = 0;
      } else {
        i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
        $68_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      }
      $4_1 = $68_1;
      $4$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $3$hi;
      $200_1 = $3_1;
      $200$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $10$hi;
      i64toi32_i32$3 = $10_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$0 = 1;
      i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
        $69_1 = 0;
      } else {
        i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
        $69_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
      }
      $202$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $200$hi;
      i64toi32_i32$2 = $200_1;
      i64toi32_i32$3 = $202$hi;
      i64toi32_i32$0 = $69_1;
      i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
      $10_1 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
      $10$hi = i64toi32_i32$3;
      i64toi32_i32$1 = $10_1;
      i64toi32_i32$2 = 65536;
      i64toi32_i32$0 = 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0) {
        continue label$17
      }
      break label$17;
      };
    }
    $8_1 = $6_1 & 32768 | 0;
    label$18 : {
      if (($7_1 | 0) > (0 | 0)) {
      break label$18
      }
      $211_1 = $5_1 + 64 | 0;
      i64toi32_i32$1 = $4$hi;
      $212_1 = $4_1;
      $212$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $10$hi;
      i64toi32_i32$0 = $10_1;
      i64toi32_i32$3 = 65535;
      i64toi32_i32$2 = -1;
      i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
      $214_1 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
      $214$hi = i64toi32_i32$3;
      i64toi32_i32$3 = 0;
      i64toi32_i32$1 = $7_1 + 120 | 0 | $8_1 | 0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$2 = 48;
      i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      $70_1 = 0;
      } else {
      i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
      $70_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      }
      $220$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $214$hi;
      i64toi32_i32$3 = $214_1;
      i64toi32_i32$1 = $220$hi;
      i64toi32_i32$2 = $70_1;
      i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
      $221_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
      $221$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $212$hi;
      i64toi32_i32$3 = $221$hi;
      i64toi32_i32$0 = 0;
      i64toi32_i32$2 = 1065811968;
      $542($211_1 | 0, $212_1 | 0, i64toi32_i32$1 | 0, $221_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0);
      i64toi32_i32$3 = $5_1 + 72 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
      $2_1 = i64toi32_i32$2;
      $2$hi = i64toi32_i32$0;
      i64toi32_i32$3 = $5_1;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 64 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 68 | 0) >> 2] | 0;
      $4_1 = i64toi32_i32$0;
      $4$hi = i64toi32_i32$2;
      break label$1;
    }
    i64toi32_i32$2 = $10$hi;
    i64toi32_i32$3 = $10_1;
    i64toi32_i32$0 = 65535;
    i64toi32_i32$1 = -1;
    i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
    $228_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
    $228$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = $7_1 | $8_1 | 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = 48;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
      $71_1 = 0;
    } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
      $71_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $233$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $228$hi;
    i64toi32_i32$0 = $228_1;
    i64toi32_i32$2 = $233$hi;
    i64toi32_i32$1 = $71_1;
    i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
    $2_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $2$hi = i64toi32_i32$2;
    }
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$0 = $0_1;
    HEAP32[i64toi32_i32$0 >> 2] = $4_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $2_1;
    HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
    global$0 = $5_1 + 128 | 0;
  }
  
  function $558($0_1, $1_1, $1$hi, $2_1, $2$hi) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1$hi = $1$hi | 0;
    $2_1 = $2_1 | 0;
    $2$hi = $2$hi | 0;
    var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $5_1 = 0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $5_1 = i64toi32_i32$2 & -1 | 0;
    i64toi32_i32$2 = $0_1;
    HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $5_1;
    HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$1 = $1$hi;
    HEAP32[i64toi32_i32$2 >> 2] = $1_1;
    HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
  }
  
  function $559($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $8_1 = 0, $10_1 = 0, $10$hi = 0, $4_1 = 0, $9_1 = 0, $11_1 = 0, $11$hi = 0, $7_1 = 0, $5_1 = 0, $6_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $12_1 = 0, $12$hi = 0;
    $4_1 = global$0 - 48 | 0;
    global$0 = $4_1;
    i64toi32_i32$0 = 0;
    $10_1 = 0;
    $10$hi = i64toi32_i32$0;
    label$1 : {
    label$2 : {
      if ($2_1 >>> 0 > 2 >>> 0) {
      break label$2
      }
      $2_1 = $2_1 << 2 | 0;
      $5_1 = HEAP32[($2_1 + 69980 | 0) >> 2] | 0;
      $6_1 = HEAP32[($2_1 + 69968 | 0) >> 2] | 0;
      label$3 : while (1) {
      label$4 : {
        label$5 : {
        $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
        if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
          break label$5
        }
        HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
        $2_1 = HEAPU8[$2_1 >> 0] | 0;
        break label$4;
        }
        $2_1 = $537($1_1 | 0) | 0;
      }
      if ($560($2_1 | 0) | 0) {
        continue label$3
      }
      break label$3;
      };
      $7_1 = 1;
      label$6 : {
      label$7 : {
        switch ($2_1 + -43 | 0 | 0) {
        case 0:
        case 2:
        break label$7;
        default:
        break label$6;
        };
      }
      $7_1 = ($2_1 | 0) == (45 | 0) ? -1 : 1;
      label$8 : {
        $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
        if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
        break label$8
        }
        HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
        $2_1 = HEAPU8[$2_1 >> 0] | 0;
        break label$6;
      }
      $2_1 = $537($1_1 | 0) | 0;
      }
      $8_1 = 0;
      label$9 : {
      label$10 : {
        label$11 : {
        if (($2_1 & -33 | 0 | 0) != (73 | 0)) {
          break label$11
        }
        label$12 : while (1) {
          if (($8_1 | 0) == (7 | 0)) {
          break label$10
          }
          label$13 : {
          label$14 : {
            $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
            if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
            break label$14
            }
            HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
            $2_1 = HEAPU8[$2_1 >> 0] | 0;
            break label$13;
          }
          $2_1 = $537($1_1 | 0) | 0;
          }
          $9_1 = $8_1 + 65580 | 0;
          $8_1 = $8_1 + 1 | 0;
          if (($2_1 | 32 | 0 | 0) == (HEAP8[$9_1 >> 0] | 0 | 0)) {
          continue label$12
          }
          break label$12;
        };
        }
        label$15 : {
        if (($8_1 | 0) == (3 | 0)) {
          break label$15
        }
        if (($8_1 | 0) == (8 | 0)) {
          break label$10
        }
        if (!$3_1) {
          break label$9
        }
        if ($8_1 >>> 0 < 4 >>> 0) {
          break label$9
        }
        if (($8_1 | 0) == (8 | 0)) {
          break label$10
        }
        }
        label$16 : {
        i64toi32_i32$2 = $1_1;
        i64toi32_i32$0 = HEAP32[($1_1 + 112 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[($1_1 + 116 | 0) >> 2] | 0;
        $10_1 = i64toi32_i32$0;
        $10$hi = i64toi32_i32$1;
        i64toi32_i32$2 = i64toi32_i32$0;
        i64toi32_i32$0 = 0;
        i64toi32_i32$3 = 0;
        if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
          $20_1 = 1
        } else {
          if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
          if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
            $21_1 = 0
          } else {
            $21_1 = 1
          }
          $22_1 = $21_1;
          } else {
          $22_1 = 0
          }
          $20_1 = $22_1;
        }
        if ($20_1) {
          break label$16
        }
        HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
        }
        if (!$3_1) {
        break label$10
        }
        if ($8_1 >>> 0 < 4 >>> 0) {
        break label$10
        }
        i64toi32_i32$2 = $10$hi;
        i64toi32_i32$3 = $10_1;
        i64toi32_i32$1 = 0;
        i64toi32_i32$0 = 0;
        if ((i64toi32_i32$2 | 0) < (i64toi32_i32$1 | 0)) {
        $23_1 = 1
        } else {
        if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$1 | 0)) {
          if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0) {
          $24_1 = 0
          } else {
          $24_1 = 1
          }
          $25_1 = $24_1;
        } else {
          $25_1 = 0
        }
        $23_1 = $25_1;
        }
        $2_1 = $23_1;
        label$17 : while (1) {
        label$18 : {
          if ($2_1) {
          break label$18
          }
          HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
        }
        $8_1 = $8_1 + -1 | 0;
        if ($8_1 >>> 0 > 3 >>> 0) {
          continue label$17
        }
        break label$17;
        };
      }
      $539($4_1 | 0, Math_fround(Math_fround(Math_fround($7_1 | 0) * Math_fround(Infinity))));
      i64toi32_i32$0 = $4_1 + 8 | 0;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $11_1 = i64toi32_i32$3;
      $11$hi = i64toi32_i32$2;
      i64toi32_i32$0 = $4_1;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $10_1 = i64toi32_i32$2;
      $10$hi = i64toi32_i32$3;
      break label$1;
      }
      label$19 : {
      label$20 : {
        label$21 : {
        label$22 : {
          label$23 : {
          if ($8_1) {
            break label$23
          }
          $8_1 = 0;
          if (($2_1 & -33 | 0 | 0) != (78 | 0)) {
            break label$23
          }
          label$24 : while (1) {
            if (($8_1 | 0) == (2 | 0)) {
            break label$22
            }
            label$25 : {
            label$26 : {
              $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
              if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
              break label$26
              }
              HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
              $2_1 = HEAPU8[$2_1 >> 0] | 0;
              break label$25;
            }
            $2_1 = $537($1_1 | 0) | 0;
            }
            $9_1 = $8_1 + 66008 | 0;
            $8_1 = $8_1 + 1 | 0;
            if (($2_1 | 32 | 0 | 0) == (HEAP8[$9_1 >> 0] | 0 | 0)) {
            continue label$24
            }
            break label$24;
          };
          }
          switch ($8_1 | 0) {
          case 0:
          break label$19;
          case 3:
          break label$22;
          default:
          break label$21;
          };
        }
        label$27 : {
          label$28 : {
          $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
          if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
            break label$28
          }
          HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
          $2_1 = HEAPU8[$2_1 >> 0] | 0;
          break label$27;
          }
          $2_1 = $537($1_1 | 0) | 0;
        }
        label$29 : {
          label$30 : {
          if (($2_1 | 0) != (40 | 0)) {
            break label$30
          }
          $8_1 = 1;
          break label$29;
          }
          i64toi32_i32$3 = 0;
          $10_1 = 0;
          $10$hi = i64toi32_i32$3;
          i64toi32_i32$3 = 2147450880;
          $11_1 = 0;
          $11$hi = i64toi32_i32$3;
          i64toi32_i32$0 = $1_1;
          i64toi32_i32$3 = HEAP32[($1_1 + 112 | 0) >> 2] | 0;
          i64toi32_i32$2 = HEAP32[($1_1 + 116 | 0) >> 2] | 0;
          i64toi32_i32$0 = i64toi32_i32$3;
          i64toi32_i32$3 = 0;
          i64toi32_i32$1 = 0;
          if ((i64toi32_i32$2 | 0) < (i64toi32_i32$3 | 0)) {
          $26_1 = 1
          } else {
          if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$3 | 0)) {
            if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$1 >>> 0) {
            $27_1 = 0
            } else {
            $27_1 = 1
            }
            $28_1 = $27_1;
          } else {
            $28_1 = 0
          }
          $26_1 = $28_1;
          }
          if ($26_1) {
          break label$1
          }
          HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
          break label$1;
        }
        label$31 : while (1) {
          label$32 : {
          label$33 : {
            $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
            if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
            break label$33
            }
            HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
            $2_1 = HEAPU8[$2_1 >> 0] | 0;
            break label$32;
          }
          $2_1 = $537($1_1 | 0) | 0;
          }
          $9_1 = $2_1 + -65 | 0;
          label$34 : {
          label$35 : {
            if (($2_1 + -48 | 0) >>> 0 < 10 >>> 0) {
            break label$35
            }
            if ($9_1 >>> 0 < 26 >>> 0) {
            break label$35
            }
            $9_1 = $2_1 + -97 | 0;
            if (($2_1 | 0) == (95 | 0)) {
            break label$35
            }
            if ($9_1 >>> 0 >= 26 >>> 0) {
            break label$34
            }
          }
          $8_1 = $8_1 + 1 | 0;
          continue label$31;
          }
          break label$31;
        };
        i64toi32_i32$0 = 2147450880;
        $11_1 = 0;
        $11$hi = i64toi32_i32$0;
        if (($2_1 | 0) == (41 | 0)) {
          break label$1
        }
        label$36 : {
          i64toi32_i32$1 = $1_1;
          i64toi32_i32$0 = HEAP32[($1_1 + 112 | 0) >> 2] | 0;
          i64toi32_i32$2 = HEAP32[($1_1 + 116 | 0) >> 2] | 0;
          $12_1 = i64toi32_i32$0;
          $12$hi = i64toi32_i32$2;
          i64toi32_i32$1 = i64toi32_i32$0;
          i64toi32_i32$0 = 0;
          i64toi32_i32$3 = 0;
          if ((i64toi32_i32$2 | 0) < (i64toi32_i32$0 | 0)) {
          $29_1 = 1
          } else {
          if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$0 | 0)) {
            if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0) {
            $30_1 = 0
            } else {
            $30_1 = 1
            }
            $31_1 = $30_1;
          } else {
            $31_1 = 0
          }
          $29_1 = $31_1;
          }
          if ($29_1) {
          break label$36
          }
          HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
        }
        label$37 : {
          label$38 : {
          if (!$3_1) {
            break label$38
          }
          if ($8_1) {
            break label$37
          }
          i64toi32_i32$1 = 0;
          $10_1 = 0;
          $10$hi = i64toi32_i32$1;
          break label$1;
          }
          HEAP32[($124() | 0) >> 2] = 28;
          i64toi32_i32$1 = 0;
          $10_1 = 0;
          $10$hi = i64toi32_i32$1;
          break label$20;
        }
        label$39 : while (1) {
          label$40 : {
          i64toi32_i32$1 = $12$hi;
          i64toi32_i32$3 = $12_1;
          i64toi32_i32$2 = 0;
          i64toi32_i32$0 = 0;
          if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
            $32_1 = 1
          } else {
            if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
            if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0) {
              $33_1 = 0
            } else {
              $33_1 = 1
            }
            $34_1 = $33_1;
            } else {
            $34_1 = 0
            }
            $32_1 = $34_1;
          }
          if ($32_1) {
            break label$40
          }
          HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
          }
          i64toi32_i32$3 = 0;
          $10_1 = 0;
          $10$hi = i64toi32_i32$3;
          $8_1 = $8_1 + -1 | 0;
          if ($8_1) {
          continue label$39
          }
          break label$1;
        };
        }
        i64toi32_i32$3 = 0;
        $10_1 = 0;
        $10$hi = i64toi32_i32$3;
        label$41 : {
        i64toi32_i32$0 = $1_1;
        i64toi32_i32$3 = HEAP32[($1_1 + 112 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[($1_1 + 116 | 0) >> 2] | 0;
        i64toi32_i32$0 = i64toi32_i32$3;
        i64toi32_i32$3 = 0;
        i64toi32_i32$2 = 0;
        if ((i64toi32_i32$1 | 0) < (i64toi32_i32$3 | 0)) {
          $35_1 = 1
        } else {
          if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$3 | 0)) {
          if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$2 >>> 0) {
            $36_1 = 0
          } else {
            $36_1 = 1
          }
          $37_1 = $36_1;
          } else {
          $37_1 = 0
          }
          $35_1 = $37_1;
        }
        if ($35_1) {
          break label$41
        }
        HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
        }
        HEAP32[($124() | 0) >> 2] = 28;
      }
      i64toi32_i32$0 = $10$hi;
      $536($1_1 | 0, $10_1 | 0, i64toi32_i32$0 | 0);
      break label$2;
      }
      label$42 : {
      if (($2_1 | 0) != (48 | 0)) {
        break label$42
      }
      label$43 : {
        label$44 : {
        $8_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
        if (($8_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
          break label$44
        }
        HEAP32[($1_1 + 4 | 0) >> 2] = $8_1 + 1 | 0;
        $8_1 = HEAPU8[$8_1 >> 0] | 0;
        break label$43;
        }
        $8_1 = $537($1_1 | 0) | 0;
      }
      label$45 : {
        if (($8_1 & -33 | 0 | 0) != (88 | 0)) {
        break label$45
        }
        $561($4_1 + 16 | 0 | 0, $1_1 | 0, $6_1 | 0, $5_1 | 0, $7_1 | 0, $3_1 | 0);
        i64toi32_i32$2 = $4_1 + 24 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $11_1 = i64toi32_i32$0;
        $11$hi = i64toi32_i32$1;
        i64toi32_i32$2 = $4_1;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
        $10_1 = i64toi32_i32$1;
        $10$hi = i64toi32_i32$0;
        break label$1;
      }
      i64toi32_i32$2 = $1_1;
      i64toi32_i32$0 = HEAP32[($1_1 + 112 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($1_1 + 116 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 0;
      if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
        $38_1 = 1
      } else {
        if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
        if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
          $39_1 = 0
        } else {
          $39_1 = 1
        }
        $40_1 = $39_1;
        } else {
        $40_1 = 0
        }
        $38_1 = $40_1;
      }
      if ($38_1) {
        break label$42
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
      }
      $562($4_1 + 32 | 0 | 0, $1_1 | 0, $2_1 | 0, $6_1 | 0, $5_1 | 0, $7_1 | 0, $3_1 | 0);
      i64toi32_i32$3 = $4_1 + 40 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
      $11_1 = i64toi32_i32$2;
      $11$hi = i64toi32_i32$1;
      i64toi32_i32$3 = $4_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 32 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 36 | 0) >> 2] | 0;
      $10_1 = i64toi32_i32$1;
      $10$hi = i64toi32_i32$2;
      break label$1;
    }
    i64toi32_i32$2 = 0;
    $11_1 = 0;
    $11$hi = i64toi32_i32$2;
    }
    i64toi32_i32$2 = $10$hi;
    i64toi32_i32$1 = $0_1;
    HEAP32[i64toi32_i32$1 >> 2] = $10_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$2;
    i64toi32_i32$2 = $11$hi;
    HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $11_1;
    HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$2;
    global$0 = $4_1 + 48 | 0;
  }
  
  function $560($0_1) {
    $0_1 = $0_1 | 0;
    return ($0_1 | 0) == (32 | 0) | ($0_1 + -9 | 0) >>> 0 < 5 >>> 0 | 0 | 0;
  }
  
  function $561($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    var i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $6_1 = 0, $7_1 = 0, $16$hi = 0, $19$hi = 0, $16_1 = 0, $19_1 = 0, $15$hi = 0, $17$hi = 0, $14$hi = 0, $15_1 = 0, $17_1 = 0, $18$hi = 0, $14_1 = 0, $10_1 = 0, $18_1 = 0, $8_1 = 0, $9_1 = 0, $20$hi = 0, $12_1 = 0, $20_1 = 0, $11_1 = 0, $13_1 = 0, $112_1 = 0, $113_1 = 0, $114_1 = 0, $115_1 = 0, $116_1 = 0, $117_1 = 0, $118_1 = 0, $119_1 = 0, $120_1 = 0, $121_1 = 0, $122_1 = 0, $123_1 = 0, $124_1 = 0, $125_1 = 0, $127_1 = 0, $128_1 = 0, $129_1 = 0, $131_1 = 0, $132_1 = 0, $133_1 = 0, $134_1 = 0, $135_1 = 0, $136_1 = 0, $137_1 = 0, $138_1 = 0, $126_1 = 0, $126$hi = 0, $130_1 = 0, $130$hi = 0, $141_1 = 0, $141$hi = 0, $145_1 = 0, $145$hi = 0, $163_1 = 0, $163$hi = 0, $167_1 = 0, $167$hi = 0, $215_1 = 0, $215$hi = 0, $219_1 = 0, $219$hi = 0, $261_1 = 0, $261$hi = 0, $265_1 = 0, $265$hi = 0, $277$hi = 0, $284$hi = 0, $293_1 = 0, $293$hi = 0, $297_1 = 0, $297$hi = 0, $301_1 = 0, $301$hi = 0, $305_1 = 0, $305$hi = 0, $315_1 = 0, $315$hi = 0, $331$hi = 0, $139_1 = 0, $336_1 = 0, $336$hi = 0, $340$hi = 0, $140_1 = 0, $343_1 = 0, $343$hi = 0, $362$hi = 0, $369_1 = 0, $370_1 = 0, $373$hi = 0, $397_1 = 0, $397$hi = 0, $401_1 = 0, $401$hi = 0, $437_1 = 0, $437$hi = 0, $441_1 = 0, $441$hi = 0, $445_1 = 0, $445$hi = 0, $449_1 = 0, $449$hi = 0, $458_1 = 0, $458$hi = 0, $461_1 = 0, $461$hi = 0, $465_1 = 0, $465$hi = 0, $469_1 = 0, $469$hi = 0, $471_1 = 0, $471$hi = 0, $475_1 = 0, $475$hi = 0, $479_1 = 0, $479$hi = 0, $483_1 = 0, $483$hi = 0, $515_1 = 0, $515$hi = 0, $519_1 = 0, $519$hi = 0, $523_1 = 0, $523$hi = 0, $527_1 = 0, $527$hi = 0;
    $6_1 = global$0 - 432 | 0;
    global$0 = $6_1;
    label$1 : {
    label$2 : {
      $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if (($7_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
      break label$2
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
      $7_1 = HEAPU8[$7_1 >> 0] | 0;
      break label$1;
    }
    $7_1 = $537($1_1 | 0) | 0;
    }
    $8_1 = 0;
    i64toi32_i32$0 = 0;
    $14_1 = 0;
    $14$hi = i64toi32_i32$0;
    $9_1 = 0;
    label$3 : {
    label$4 : {
      label$5 : {
      label$6 : while (1) {
        label$7 : {
        if (($7_1 | 0) == (48 | 0)) {
          break label$7
        }
        if (($7_1 | 0) != (46 | 0)) {
          break label$3
        }
        $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
        if (($7_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
          break label$5
        }
        HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
        $7_1 = HEAPU8[$7_1 >> 0] | 0;
        break label$4;
        }
        label$8 : {
        $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
        if (($7_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
          break label$8
        }
        $9_1 = 1;
        HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
        $7_1 = HEAPU8[$7_1 >> 0] | 0;
        continue label$6;
        }
        $9_1 = 1;
        $7_1 = $537($1_1 | 0) | 0;
        continue label$6;
      };
      }
      $7_1 = $537($1_1 | 0) | 0;
    }
    i64toi32_i32$0 = 0;
    $14_1 = 0;
    $14$hi = i64toi32_i32$0;
    label$9 : {
      if (($7_1 | 0) == (48 | 0)) {
      break label$9
      }
      $8_1 = 1;
      break label$3;
    }
    label$10 : while (1) {
      label$11 : {
      label$12 : {
        $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
        if (($7_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
        break label$12
        }
        HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
        $7_1 = HEAPU8[$7_1 >> 0] | 0;
        break label$11;
      }
      $7_1 = $537($1_1 | 0) | 0;
      }
      i64toi32_i32$0 = $14$hi;
      i64toi32_i32$2 = $14_1;
      i64toi32_i32$1 = -1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $14_1 = i64toi32_i32$4;
      $14$hi = i64toi32_i32$5;
      if (($7_1 | 0) == (48 | 0)) {
      continue label$10
      }
      break label$10;
    };
    $8_1 = 1;
    $9_1 = 1;
    }
    i64toi32_i32$5 = 1073676288;
    $15_1 = 0;
    $15$hi = i64toi32_i32$5;
    $10_1 = 0;
    i64toi32_i32$5 = 0;
    $16_1 = 0;
    $16$hi = i64toi32_i32$5;
    i64toi32_i32$5 = 0;
    $17_1 = 0;
    $17$hi = i64toi32_i32$5;
    i64toi32_i32$5 = 0;
    $18_1 = 0;
    $18$hi = i64toi32_i32$5;
    $11_1 = 0;
    i64toi32_i32$5 = 0;
    $19_1 = 0;
    $19$hi = i64toi32_i32$5;
    label$13 : {
    label$14 : while (1) {
      $12_1 = $7_1;
      label$15 : {
      label$16 : {
        $13_1 = $7_1 + -48 | 0;
        if ($13_1 >>> 0 < 10 >>> 0) {
        break label$16
        }
        $12_1 = $7_1 | 32 | 0;
        label$17 : {
        if (($7_1 | 0) == (46 | 0)) {
          break label$17
        }
        if (($12_1 + -97 | 0) >>> 0 > 5 >>> 0) {
          break label$13
        }
        }
        if (($7_1 | 0) != (46 | 0)) {
        break label$16
        }
        if ($8_1) {
        break label$13
        }
        $8_1 = 1;
        i64toi32_i32$5 = $19$hi;
        $14_1 = $19_1;
        $14$hi = i64toi32_i32$5;
        break label$15;
      }
      $7_1 = ($7_1 | 0) > (57 | 0) ? $12_1 + -87 | 0 : $13_1;
      label$18 : {
        label$19 : {
        i64toi32_i32$5 = $19$hi;
        i64toi32_i32$0 = $19_1;
        i64toi32_i32$2 = 0;
        i64toi32_i32$3 = 7;
        if ((i64toi32_i32$5 | 0) > (i64toi32_i32$2 | 0)) {
          $112_1 = 1
        } else {
          if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$2 | 0)) {
          if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
            $113_1 = 0
          } else {
            $113_1 = 1
          }
          $114_1 = $113_1;
          } else {
          $114_1 = 0
          }
          $112_1 = $114_1;
        }
        if ($112_1) {
          break label$19
        }
        $10_1 = $7_1 + ($10_1 << 4 | 0) | 0;
        break label$18;
        }
        label$20 : {
        i64toi32_i32$0 = $19$hi;
        i64toi32_i32$3 = $19_1;
        i64toi32_i32$5 = 0;
        i64toi32_i32$2 = 28;
        if (i64toi32_i32$0 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0) {
          break label$20
        }
        $540($6_1 + 48 | 0 | 0, $7_1 | 0);
        i64toi32_i32$3 = $18$hi;
        i64toi32_i32$3 = $15$hi;
        i64toi32_i32$3 = $18$hi;
        i64toi32_i32$0 = $15$hi;
        i64toi32_i32$2 = 0;
        i64toi32_i32$5 = 1073414144;
        $542($6_1 + 32 | 0 | 0, $18_1 | 0, i64toi32_i32$3 | 0, $15_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0);
        i64toi32_i32$0 = $6_1;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 52 | 0) >> 2] | 0;
        $126_1 = i64toi32_i32$5;
        $126$hi = i64toi32_i32$2;
        i64toi32_i32$0 = (i64toi32_i32$0 + 48 | 0) + 8 | 0;
        i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
        $130_1 = i64toi32_i32$2;
        $130$hi = i64toi32_i32$5;
        i64toi32_i32$0 = $6_1;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
        $18_1 = i64toi32_i32$5;
        $18$hi = i64toi32_i32$2;
        i64toi32_i32$0 = (i64toi32_i32$0 + 32 | 0) + 8 | 0;
        i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
        $15_1 = i64toi32_i32$2;
        $15$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $126$hi;
        i64toi32_i32$2 = $130$hi;
        i64toi32_i32$0 = $18$hi;
        i64toi32_i32$3 = $15$hi;
        $542($6_1 + 16 | 0 | 0, $126_1 | 0, i64toi32_i32$5 | 0, $130_1 | 0, i64toi32_i32$2 | 0, $18_1 | 0, i64toi32_i32$0 | 0, $15_1 | 0, i64toi32_i32$3 | 0);
        i64toi32_i32$2 = $6_1;
        i64toi32_i32$3 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
        $141_1 = i64toi32_i32$3;
        $141$hi = i64toi32_i32$0;
        i64toi32_i32$2 = ($6_1 + 16 | 0) + 8 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $145_1 = i64toi32_i32$0;
        $145$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $16$hi;
        i64toi32_i32$3 = $17$hi;
        i64toi32_i32$3 = $141$hi;
        i64toi32_i32$0 = $145$hi;
        i64toi32_i32$2 = $16$hi;
        i64toi32_i32$5 = $17$hi;
        $545($6_1 | 0, $141_1 | 0, i64toi32_i32$3 | 0, $145_1 | 0, i64toi32_i32$0 | 0, $16_1 | 0, i64toi32_i32$2 | 0, $17_1 | 0, i64toi32_i32$5 | 0);
        i64toi32_i32$0 = $6_1 + 8 | 0;
        i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
        $17_1 = i64toi32_i32$5;
        $17$hi = i64toi32_i32$2;
        i64toi32_i32$0 = $6_1;
        i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
        $16_1 = i64toi32_i32$2;
        $16$hi = i64toi32_i32$5;
        break label$18;
        }
        if (!$7_1) {
        break label$18
        }
        if ($11_1) {
        break label$18
        }
        i64toi32_i32$5 = $18$hi;
        i64toi32_i32$5 = $15$hi;
        i64toi32_i32$5 = $18$hi;
        i64toi32_i32$2 = $15$hi;
        i64toi32_i32$0 = 0;
        i64toi32_i32$3 = 1073610752;
        $542($6_1 + 80 | 0 | 0, $18_1 | 0, i64toi32_i32$5 | 0, $15_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$3 | 0);
        i64toi32_i32$2 = $6_1;
        i64toi32_i32$3 = HEAP32[($6_1 + 80 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[($6_1 + 84 | 0) >> 2] | 0;
        $163_1 = i64toi32_i32$3;
        $163$hi = i64toi32_i32$0;
        i64toi32_i32$2 = ($6_1 + 80 | 0) + 8 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $167_1 = i64toi32_i32$0;
        $167$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $16$hi;
        i64toi32_i32$3 = $17$hi;
        i64toi32_i32$3 = $163$hi;
        i64toi32_i32$0 = $167$hi;
        i64toi32_i32$2 = $16$hi;
        i64toi32_i32$5 = $17$hi;
        $545($6_1 + 64 | 0 | 0, $163_1 | 0, i64toi32_i32$3 | 0, $167_1 | 0, i64toi32_i32$0 | 0, $16_1 | 0, i64toi32_i32$2 | 0, $17_1 | 0, i64toi32_i32$5 | 0);
        i64toi32_i32$0 = ($6_1 + 64 | 0) + 8 | 0;
        i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
        $17_1 = i64toi32_i32$5;
        $17$hi = i64toi32_i32$2;
        $11_1 = 1;
        i64toi32_i32$0 = $6_1;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] | 0;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] | 0;
        $16_1 = i64toi32_i32$2;
        $16$hi = i64toi32_i32$5;
      }
      i64toi32_i32$5 = $19$hi;
      i64toi32_i32$0 = $19_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = 1;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $19_1 = i64toi32_i32$1;
      $19$hi = i64toi32_i32$4;
      $9_1 = 1;
      }
      label$21 : {
      $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if (($7_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
        break label$21
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
      $7_1 = HEAPU8[$7_1 >> 0] | 0;
      continue label$14;
      }
      $7_1 = $537($1_1 | 0) | 0;
      continue label$14;
    };
    }
    label$22 : {
    label$23 : {
      if ($9_1) {
      break label$23
      }
      label$24 : {
      label$25 : {
        label$26 : {
        i64toi32_i32$5 = $1_1;
        i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 112 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 116 | 0) >> 2] | 0;
        i64toi32_i32$5 = i64toi32_i32$4;
        i64toi32_i32$4 = 0;
        i64toi32_i32$3 = 0;
        if ((i64toi32_i32$0 | 0) < (i64toi32_i32$4 | 0)) {
          $115_1 = 1
        } else {
          if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$4 | 0)) {
          if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0) {
            $116_1 = 0
          } else {
            $116_1 = 1
          }
          $117_1 = $116_1;
          } else {
          $117_1 = 0
          }
          $115_1 = $117_1;
        }
        if ($115_1) {
          break label$26
        }
        $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
        HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + -1 | 0;
        if (!$5_1) {
          break label$25
        }
        HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + -2 | 0;
        if (!$8_1) {
          break label$24
        }
        HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + -3 | 0;
        break label$24;
        }
        if ($5_1) {
        break label$24
        }
      }
      i64toi32_i32$5 = 0;
      $536($1_1 | 0, 0 | 0, i64toi32_i32$5 | 0);
      }
      wasm2js_scratch_store_f64(+(0.0));
      i64toi32_i32$5 = wasm2js_scratch_load_i32(1 | 0) | 0;
      i64toi32_i32$3 = wasm2js_scratch_load_i32(0 | 0) | 0;
      i64toi32_i32$0 = 2147483647;
      i64toi32_i32$4 = -1;
      i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
      $215_1 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
      $215$hi = i64toi32_i32$0;
      wasm2js_scratch_store_f64(+(+($4_1 | 0)));
      i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
      i64toi32_i32$5 = wasm2js_scratch_load_i32(0 | 0) | 0;
      i64toi32_i32$3 = -2147483648;
      i64toi32_i32$4 = 0;
      i64toi32_i32$3 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
      $219_1 = i64toi32_i32$5 & i64toi32_i32$4 | 0;
      $219$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $215$hi;
      i64toi32_i32$0 = $215_1;
      i64toi32_i32$5 = $219$hi;
      i64toi32_i32$4 = $219_1;
      i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
      wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$0 | i64toi32_i32$4 | 0 | 0);
      wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$5 | 0);
      $546($6_1 + 96 | 0 | 0, +(+wasm2js_scratch_load_f64()));
      i64toi32_i32$3 = $6_1 + 104 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
      $19_1 = i64toi32_i32$5;
      $19$hi = i64toi32_i32$0;
      i64toi32_i32$3 = $6_1;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 96 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 100 | 0) >> 2] | 0;
      $16_1 = i64toi32_i32$0;
      $16$hi = i64toi32_i32$5;
      break label$22;
    }
    label$27 : {
      i64toi32_i32$5 = $19$hi;
      i64toi32_i32$3 = $19_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$4 = 7;
      if ((i64toi32_i32$5 | 0) > (i64toi32_i32$0 | 0)) {
      $118_1 = 1
      } else {
      if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$0 | 0)) {
        if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$4 >>> 0) {
        $119_1 = 0
        } else {
        $119_1 = 1
        }
        $120_1 = $119_1;
      } else {
        $120_1 = 0
      }
      $118_1 = $120_1;
      }
      if ($118_1) {
      break label$27
      }
      i64toi32_i32$3 = $19$hi;
      $15_1 = $19_1;
      $15$hi = i64toi32_i32$3;
      label$28 : while (1) {
      $10_1 = $10_1 << 4 | 0;
      i64toi32_i32$3 = $15$hi;
      i64toi32_i32$4 = $15_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$0 = 1;
      i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
      i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $15_1 = i64toi32_i32$2;
      $15$hi = i64toi32_i32$1;
      i64toi32_i32$3 = i64toi32_i32$2;
      i64toi32_i32$4 = 0;
      i64toi32_i32$0 = 8;
      if ((i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$4 | 0) | 0) {
        continue label$28
      }
      break label$28;
      };
    }
    label$29 : {
      label$30 : {
      label$31 : {
        label$32 : {
        if (($7_1 & -33 | 0 | 0) != (80 | 0)) {
          break label$32
        }
        i64toi32_i32$3 = $563($1_1 | 0, $5_1 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $15_1 = i64toi32_i32$3;
        $15$hi = i64toi32_i32$1;
        i64toi32_i32$0 = i64toi32_i32$3;
        i64toi32_i32$3 = -2147483648;
        i64toi32_i32$4 = 0;
        if ((i64toi32_i32$0 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | 0) {
          break label$29
        }
        label$33 : {
          if (!$5_1) {
          break label$33
          }
          i64toi32_i32$4 = $1_1;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 112 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 116 | 0) >> 2] | 0;
          i64toi32_i32$4 = i64toi32_i32$0;
          i64toi32_i32$0 = -1;
          i64toi32_i32$3 = -1;
          if ((i64toi32_i32$1 | 0) > (i64toi32_i32$0 | 0)) {
          $121_1 = 1
          } else {
          if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$0 | 0)) {
            if (i64toi32_i32$4 >>> 0 <= i64toi32_i32$3 >>> 0) {
            $122_1 = 0
            } else {
            $122_1 = 1
            }
            $123_1 = $122_1;
          } else {
            $123_1 = 0
          }
          $121_1 = $123_1;
          }
          if ($121_1) {
          break label$31
          }
          break label$30;
        }
        i64toi32_i32$4 = 0;
        $16_1 = 0;
        $16$hi = i64toi32_i32$4;
        i64toi32_i32$4 = 0;
        $536($1_1 | 0, 0 | 0, i64toi32_i32$4 | 0);
        i64toi32_i32$4 = 0;
        $19_1 = 0;
        $19$hi = i64toi32_i32$4;
        break label$22;
        }
        i64toi32_i32$4 = 0;
        $15_1 = 0;
        $15$hi = i64toi32_i32$4;
        i64toi32_i32$3 = $1_1;
        i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 112 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 116 | 0) >> 2] | 0;
        i64toi32_i32$3 = i64toi32_i32$4;
        i64toi32_i32$4 = 0;
        i64toi32_i32$0 = 0;
        if ((i64toi32_i32$1 | 0) < (i64toi32_i32$4 | 0)) {
        $124_1 = 1
        } else {
        if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$4 | 0)) {
          if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0) {
          $125_1 = 0
          } else {
          $125_1 = 1
          }
          $127_1 = $125_1;
        } else {
          $127_1 = 0
        }
        $124_1 = $127_1;
        }
        if ($124_1) {
        break label$29
        }
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
      }
      i64toi32_i32$3 = 0;
      $15_1 = 0;
      $15$hi = i64toi32_i32$3;
    }
    label$34 : {
      if ($10_1) {
      break label$34
      }
      wasm2js_scratch_store_f64(+(0.0));
      i64toi32_i32$3 = wasm2js_scratch_load_i32(1 | 0) | 0;
      i64toi32_i32$0 = wasm2js_scratch_load_i32(0 | 0) | 0;
      i64toi32_i32$1 = 2147483647;
      i64toi32_i32$4 = -1;
      i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
      $261_1 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
      $261$hi = i64toi32_i32$1;
      wasm2js_scratch_store_f64(+(+($4_1 | 0)));
      i64toi32_i32$1 = wasm2js_scratch_load_i32(1 | 0) | 0;
      i64toi32_i32$3 = wasm2js_scratch_load_i32(0 | 0) | 0;
      i64toi32_i32$0 = -2147483648;
      i64toi32_i32$4 = 0;
      i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
      $265_1 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
      $265$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $261$hi;
      i64toi32_i32$1 = $261_1;
      i64toi32_i32$3 = $265$hi;
      i64toi32_i32$4 = $265_1;
      i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
      wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 | i64toi32_i32$4 | 0 | 0);
      wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$3 | 0);
      $546($6_1 + 112 | 0 | 0, +(+wasm2js_scratch_load_f64()));
      i64toi32_i32$0 = $6_1 + 120 | 0;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $19_1 = i64toi32_i32$3;
      $19$hi = i64toi32_i32$1;
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 112 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 116 | 0) >> 2] | 0;
      $16_1 = i64toi32_i32$1;
      $16$hi = i64toi32_i32$3;
      break label$22;
    }
    label$35 : {
      i64toi32_i32$3 = $14$hi;
      i64toi32_i32$3 = $19$hi;
      i64toi32_i32$5 = $8_1;
      i64toi32_i32$3 = $14$hi;
      i64toi32_i32$1 = $19$hi;
      i64toi32_i32$4 = i64toi32_i32$5 ? $14_1 : $19_1;
      i64toi32_i32$0 = i64toi32_i32$5 ? i64toi32_i32$3 : i64toi32_i32$1;
      i64toi32_i32$5 = i64toi32_i32$4;
      i64toi32_i32$4 = 0;
      i64toi32_i32$1 = 2;
      i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$5 << i64toi32_i32$3 | 0;
      $128_1 = 0;
      } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$3 | 0) | 0;
      $128_1 = i64toi32_i32$5 << i64toi32_i32$3 | 0;
      }
      $277$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $15$hi;
      i64toi32_i32$4 = $277$hi;
      i64toi32_i32$0 = $128_1;
      i64toi32_i32$5 = $15$hi;
      i64toi32_i32$1 = $15_1;
      i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      i64toi32_i32$4 = i64toi32_i32$3;
      i64toi32_i32$0 = -1;
      i64toi32_i32$1 = -32;
      i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
      i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $19_1 = i64toi32_i32$5;
      $19$hi = i64toi32_i32$3;
      i64toi32_i32$3 = 0;
      $284$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $19$hi;
      i64toi32_i32$2 = i64toi32_i32$5;
      i64toi32_i32$4 = $284$hi;
      i64toi32_i32$1 = 0 - $3_1 | 0;
      if ((i64toi32_i32$3 | 0) < (i64toi32_i32$4 | 0)) {
      $129_1 = 1
      } else {
      if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$4 | 0)) {
        if (i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0) {
        $131_1 = 0
        } else {
        $131_1 = 1
        }
        $132_1 = $131_1;
      } else {
        $132_1 = 0
      }
      $129_1 = $132_1;
      }
      if ($129_1) {
      break label$35
      }
      HEAP32[($124() | 0) >> 2] = 68;
      $540($6_1 + 160 | 0 | 0, $4_1 | 0);
      i64toi32_i32$1 = $6_1;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 160 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 164 | 0) >> 2] | 0;
      $293_1 = i64toi32_i32$2;
      $293$hi = i64toi32_i32$3;
      i64toi32_i32$1 = (i64toi32_i32$1 + 160 | 0) + 8 | 0;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $297_1 = i64toi32_i32$3;
      $297$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $293$hi;
      i64toi32_i32$3 = $297$hi;
      i64toi32_i32$1 = -1;
      i64toi32_i32$4 = 2147418111;
      $542($6_1 + 144 | 0 | 0, $293_1 | 0, i64toi32_i32$2 | 0, $297_1 | 0, i64toi32_i32$3 | 0, -1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$4 | 0);
      i64toi32_i32$3 = $6_1;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 144 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 148 | 0) >> 2] | 0;
      $301_1 = i64toi32_i32$4;
      $301$hi = i64toi32_i32$1;
      i64toi32_i32$3 = (i64toi32_i32$3 + 144 | 0) + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
      $305_1 = i64toi32_i32$1;
      $305$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $301$hi;
      i64toi32_i32$1 = $305$hi;
      i64toi32_i32$3 = -1;
      i64toi32_i32$2 = 2147418111;
      $542($6_1 + 128 | 0 | 0, $301_1 | 0, i64toi32_i32$4 | 0, $305_1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$3 | 0, -1 | 0, i64toi32_i32$2 | 0);
      i64toi32_i32$1 = ($6_1 + 128 | 0) + 8 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $19_1 = i64toi32_i32$2;
      $19$hi = i64toi32_i32$3;
      i64toi32_i32$1 = $6_1;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 128 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 132 | 0) >> 2] | 0;
      $16_1 = i64toi32_i32$3;
      $16$hi = i64toi32_i32$2;
      break label$22;
    }
    label$36 : {
      i64toi32_i32$2 = $19$hi;
      i64toi32_i32$3 = $3_1 + -226 | 0;
      i64toi32_i32$2 = i64toi32_i32$3 >> 31 | 0;
      $315_1 = i64toi32_i32$3;
      $315$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $19$hi;
      i64toi32_i32$1 = $19_1;
      i64toi32_i32$3 = $315$hi;
      i64toi32_i32$4 = $315_1;
      if ((i64toi32_i32$2 | 0) < (i64toi32_i32$3 | 0)) {
      $133_1 = 1
      } else {
      if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$3 | 0)) {
        if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$4 >>> 0) {
        $134_1 = 0
        } else {
        $134_1 = 1
        }
        $135_1 = $134_1;
      } else {
        $135_1 = 0
      }
      $133_1 = $135_1;
      }
      if ($133_1) {
      break label$36
      }
      label$37 : {
      if (($10_1 | 0) <= (-1 | 0)) {
        break label$37
      }
      label$38 : while (1) {
        i64toi32_i32$1 = $16$hi;
        i64toi32_i32$1 = $17$hi;
        i64toi32_i32$1 = $16$hi;
        i64toi32_i32$2 = $17$hi;
        i64toi32_i32$4 = 0;
        i64toi32_i32$3 = -1073807360;
        $545($6_1 + 416 | 0 | 0, $16_1 | 0, i64toi32_i32$1 | 0, $17_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$3 | 0);
        i64toi32_i32$3 = i64toi32_i32$1;
        i64toi32_i32$3 = i64toi32_i32$2;
        i64toi32_i32$3 = i64toi32_i32$1;
        i64toi32_i32$4 = i64toi32_i32$2;
        i64toi32_i32$2 = 0;
        i64toi32_i32$1 = 1073610752;
        $7_1 = $548($16_1 | 0, i64toi32_i32$3 | 0, $17_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$3;
        i64toi32_i32$1 = i64toi32_i32$4;
        i64toi32_i32$4 = $6_1;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 416 | 0) >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 420 | 0) >> 2] | 0;
        $331$hi = i64toi32_i32$2;
        i64toi32_i32$2 = i64toi32_i32$3;
        $7_1 = ($7_1 | 0) > (-1 | 0);
        i64toi32_i32$0 = $7_1;
        i64toi32_i32$2 = $331$hi;
        $139_1 = i64toi32_i32$1;
        i64toi32_i32$1 = i64toi32_i32$3;
        i64toi32_i32$3 = i64toi32_i32$0 ? $139_1 : $16_1;
        i64toi32_i32$4 = i64toi32_i32$0 ? i64toi32_i32$2 : i64toi32_i32$1;
        $336_1 = i64toi32_i32$3;
        $336$hi = i64toi32_i32$4;
        i64toi32_i32$0 = ($6_1 + 416 | 0) + 8 | 0;
        i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
        $340$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $17$hi;
        i64toi32_i32$2 = $7_1;
        i64toi32_i32$3 = $340$hi;
        $140_1 = i64toi32_i32$4;
        i64toi32_i32$4 = $17$hi;
        i64toi32_i32$1 = i64toi32_i32$2 ? $140_1 : $17_1;
        i64toi32_i32$0 = i64toi32_i32$2 ? i64toi32_i32$3 : i64toi32_i32$4;
        $343_1 = i64toi32_i32$1;
        $343$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $16$hi;
        i64toi32_i32$1 = i64toi32_i32$4;
        i64toi32_i32$2 = $336$hi;
        i64toi32_i32$4 = $343$hi;
        $545($6_1 + 400 | 0 | 0, $16_1 | 0, i64toi32_i32$0 | 0, $17_1 | 0, i64toi32_i32$1 | 0, $336_1 | 0, i64toi32_i32$2 | 0, $343_1 | 0, i64toi32_i32$4 | 0);
        $1_1 = $10_1 << 1 | 0;
        $10_1 = $1_1 | $7_1 | 0;
        i64toi32_i32$4 = $19$hi;
        i64toi32_i32$1 = $19_1;
        i64toi32_i32$2 = -1;
        i64toi32_i32$0 = -1;
        i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
        i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
        if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
        }
        $19_1 = i64toi32_i32$3;
        $19$hi = i64toi32_i32$5;
        i64toi32_i32$4 = ($6_1 + 400 | 0) + 8 | 0;
        i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
        $17_1 = i64toi32_i32$5;
        $17$hi = i64toi32_i32$1;
        i64toi32_i32$4 = $6_1;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 400 | 0) >> 2] | 0;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 404 | 0) >> 2] | 0;
        $16_1 = i64toi32_i32$1;
        $16$hi = i64toi32_i32$5;
        if (($1_1 | 0) > (-1 | 0)) {
        continue label$38
        }
        break label$38;
      };
      }
      label$39 : {
      label$40 : {
        i64toi32_i32$5 = $19$hi;
        i64toi32_i32$5 = 0;
        $362$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $19$hi;
        i64toi32_i32$4 = $19_1;
        i64toi32_i32$1 = $362$hi;
        i64toi32_i32$0 = 32 - $3_1 | 0;
        i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
        i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
        if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
        }
        $14_1 = i64toi32_i32$2;
        $14$hi = i64toi32_i32$3;
        $7_1 = i64toi32_i32$2;
        $369_1 = (i64toi32_i32$2 | 0) > (0 | 0) ? i64toi32_i32$2 : 0;
        $370_1 = $2_1;
        i64toi32_i32$3 = 0;
        $373$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $14$hi;
        i64toi32_i32$5 = i64toi32_i32$2;
        i64toi32_i32$4 = $373$hi;
        i64toi32_i32$0 = $2_1;
        if ((i64toi32_i32$3 | 0) < (i64toi32_i32$4 | 0)) {
        $136_1 = 1
        } else {
        if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$4 | 0)) {
          if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$0 >>> 0) {
          $137_1 = 0
          } else {
          $137_1 = 1
          }
          $138_1 = $137_1;
        } else {
          $138_1 = 0
        }
        $136_1 = $138_1;
        }
        $7_1 = $136_1 ? $369_1 : $370_1;
        if ($7_1 >>> 0 < 113 >>> 0) {
        break label$40
        }
        $540($6_1 + 384 | 0 | 0, $4_1 | 0);
        i64toi32_i32$0 = $6_1 + 392 | 0;
        i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
        $14_1 = i64toi32_i32$5;
        $14$hi = i64toi32_i32$3;
        i64toi32_i32$3 = 0;
        $15_1 = 0;
        $15$hi = i64toi32_i32$3;
        i64toi32_i32$0 = $6_1;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 384 | 0) >> 2] | 0;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 388 | 0) >> 2] | 0;
        $18_1 = i64toi32_i32$3;
        $18$hi = i64toi32_i32$5;
        i64toi32_i32$5 = 0;
        $20_1 = 0;
        $20$hi = i64toi32_i32$5;
        break label$39;
      }
      $546($6_1 + 352 | 0 | 0, +(+$549(+(1.0), 144 - $7_1 | 0 | 0)));
      $540($6_1 + 336 | 0 | 0, $4_1 | 0);
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 352 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 356 | 0) >> 2] | 0;
      $397_1 = i64toi32_i32$5;
      $397$hi = i64toi32_i32$3;
      i64toi32_i32$0 = (i64toi32_i32$0 + 352 | 0) + 8 | 0;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $401_1 = i64toi32_i32$3;
      $401$hi = i64toi32_i32$5;
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 336 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 340 | 0) >> 2] | 0;
      $18_1 = i64toi32_i32$5;
      $18$hi = i64toi32_i32$3;
      i64toi32_i32$0 = (i64toi32_i32$0 + 336 | 0) + 8 | 0;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $14_1 = i64toi32_i32$3;
      $14$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $397$hi;
      i64toi32_i32$3 = $401$hi;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$4 = $14$hi;
      $550($6_1 + 368 | 0 | 0, $397_1 | 0, i64toi32_i32$5 | 0, $401_1 | 0, i64toi32_i32$3 | 0, $18_1 | 0, i64toi32_i32$0 | 0, $14_1 | 0, i64toi32_i32$4 | 0);
      i64toi32_i32$3 = ($6_1 + 368 | 0) + 8 | 0;
      i64toi32_i32$4 = HEAP32[i64toi32_i32$3 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
      $20_1 = i64toi32_i32$4;
      $20$hi = i64toi32_i32$0;
      i64toi32_i32$3 = $6_1;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 368 | 0) >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 372 | 0) >> 2] | 0;
      $15_1 = i64toi32_i32$0;
      $15$hi = i64toi32_i32$4;
      }
      i64toi32_i32$4 = $16$hi;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$4 = $16$hi;
      i64toi32_i32$0 = $17$hi;
      i64toi32_i32$3 = 0;
      i64toi32_i32$5 = 0;
      $7_1 = !($10_1 & 1 | 0) & ($7_1 >>> 0 < 32 >>> 0 & ($547($16_1 | 0, i64toi32_i32$4 | 0, $17_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$5 | 0) | 0 | 0) != (0 | 0) | 0) | 0;
      $551($6_1 + 320 | 0 | 0, $10_1 | $7_1 | 0 | 0);
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$5 = $14$hi;
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 320 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 324 | 0) >> 2] | 0;
      $437_1 = i64toi32_i32$5;
      $437$hi = i64toi32_i32$3;
      i64toi32_i32$0 = (i64toi32_i32$0 + 320 | 0) + 8 | 0;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $441_1 = i64toi32_i32$3;
      $441$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$3 = $14$hi;
      i64toi32_i32$0 = $437$hi;
      i64toi32_i32$4 = $441$hi;
      $542($6_1 + 304 | 0 | 0, $18_1 | 0, i64toi32_i32$5 | 0, $14_1 | 0, i64toi32_i32$3 | 0, $437_1 | 0, i64toi32_i32$0 | 0, $441_1 | 0, i64toi32_i32$4 | 0);
      i64toi32_i32$3 = $6_1;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 304 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 308 | 0) >> 2] | 0;
      $445_1 = i64toi32_i32$4;
      $445$hi = i64toi32_i32$0;
      i64toi32_i32$3 = (i64toi32_i32$3 + 304 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
      $449_1 = i64toi32_i32$0;
      $449$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $15$hi;
      i64toi32_i32$4 = $20$hi;
      i64toi32_i32$4 = $445$hi;
      i64toi32_i32$0 = $449$hi;
      i64toi32_i32$3 = $15$hi;
      i64toi32_i32$5 = $20$hi;
      $545($6_1 + 272 | 0 | 0, $445_1 | 0, i64toi32_i32$4 | 0, $449_1 | 0, i64toi32_i32$0 | 0, $15_1 | 0, i64toi32_i32$3 | 0, $20_1 | 0, i64toi32_i32$5 | 0);
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$5 = $14$hi;
      i64toi32_i32$5 = $16$hi;
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$3 = $16$hi;
      i64toi32_i32$4 = i64toi32_i32$1 ? 0 : $16_1;
      i64toi32_i32$0 = i64toi32_i32$1 ? i64toi32_i32$5 : i64toi32_i32$3;
      $458_1 = i64toi32_i32$4;
      $458$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $17$hi;
      i64toi32_i32$5 = i64toi32_i32$1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$3 = i64toi32_i32$5 ? 0 : $17_1;
      i64toi32_i32$1 = i64toi32_i32$5 ? i64toi32_i32$0 : i64toi32_i32$4;
      $461_1 = i64toi32_i32$3;
      $461$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$3 = $14$hi;
      i64toi32_i32$5 = $458$hi;
      i64toi32_i32$4 = $461$hi;
      $542($6_1 + 288 | 0 | 0, $18_1 | 0, i64toi32_i32$1 | 0, $14_1 | 0, i64toi32_i32$3 | 0, $458_1 | 0, i64toi32_i32$5 | 0, $461_1 | 0, i64toi32_i32$4 | 0);
      i64toi32_i32$3 = $6_1;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 288 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 292 | 0) >> 2] | 0;
      $465_1 = i64toi32_i32$4;
      $465$hi = i64toi32_i32$5;
      i64toi32_i32$3 = (i64toi32_i32$3 + 288 | 0) + 8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
      $469_1 = i64toi32_i32$5;
      $469$hi = i64toi32_i32$4;
      i64toi32_i32$3 = $6_1;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 272 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 276 | 0) >> 2] | 0;
      $471_1 = i64toi32_i32$4;
      $471$hi = i64toi32_i32$5;
      i64toi32_i32$3 = (i64toi32_i32$3 + 272 | 0) + 8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
      $475_1 = i64toi32_i32$5;
      $475$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $465$hi;
      i64toi32_i32$5 = $469$hi;
      i64toi32_i32$3 = $471$hi;
      i64toi32_i32$1 = $475$hi;
      $545($6_1 + 256 | 0 | 0, $465_1 | 0, i64toi32_i32$4 | 0, $469_1 | 0, i64toi32_i32$5 | 0, $471_1 | 0, i64toi32_i32$3 | 0, $475_1 | 0, i64toi32_i32$1 | 0);
      i64toi32_i32$5 = $6_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 256 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 260 | 0) >> 2] | 0;
      $479_1 = i64toi32_i32$1;
      $479$hi = i64toi32_i32$3;
      i64toi32_i32$5 = (i64toi32_i32$5 + 256 | 0) + 8 | 0;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $483_1 = i64toi32_i32$3;
      $483$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $15$hi;
      i64toi32_i32$1 = $20$hi;
      i64toi32_i32$1 = $479$hi;
      i64toi32_i32$3 = $483$hi;
      i64toi32_i32$5 = $15$hi;
      i64toi32_i32$4 = $20$hi;
      $552($6_1 + 240 | 0 | 0, $479_1 | 0, i64toi32_i32$1 | 0, $483_1 | 0, i64toi32_i32$3 | 0, $15_1 | 0, i64toi32_i32$5 | 0, $20_1 | 0, i64toi32_i32$4 | 0);
      label$41 : {
      i64toi32_i32$3 = $6_1;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 240 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 244 | 0) >> 2] | 0;
      $16_1 = i64toi32_i32$4;
      $16$hi = i64toi32_i32$5;
      i64toi32_i32$3 = (i64toi32_i32$3 + 240 | 0) + 8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
      $17_1 = i64toi32_i32$5;
      $17$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $16$hi;
      i64toi32_i32$5 = $17$hi;
      i64toi32_i32$3 = 0;
      i64toi32_i32$1 = 0;
      if ($547($16_1 | 0, i64toi32_i32$4 | 0, $17_1 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$1 | 0) | 0) {
        break label$41
      }
      HEAP32[($124() | 0) >> 2] = 68;
      }
      i64toi32_i32$1 = $16$hi;
      i64toi32_i32$1 = $17$hi;
      i64toi32_i32$1 = $19$hi;
      i64toi32_i32$1 = $16$hi;
      i64toi32_i32$3 = $17$hi;
      $553($6_1 + 224 | 0 | 0, $16_1 | 0, i64toi32_i32$1 | 0, $17_1 | 0, i64toi32_i32$3 | 0, $19_1 | 0);
      i64toi32_i32$5 = ($6_1 + 224 | 0) + 8 | 0;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $19_1 = i64toi32_i32$3;
      $19$hi = i64toi32_i32$1;
      i64toi32_i32$5 = $6_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 224 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 228 | 0) >> 2] | 0;
      $16_1 = i64toi32_i32$1;
      $16$hi = i64toi32_i32$3;
      break label$22;
    }
    HEAP32[($124() | 0) >> 2] = 68;
    $540($6_1 + 208 | 0 | 0, $4_1 | 0);
    i64toi32_i32$5 = $6_1;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 208 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 212 | 0) >> 2] | 0;
    $515_1 = i64toi32_i32$3;
    $515$hi = i64toi32_i32$1;
    i64toi32_i32$5 = (i64toi32_i32$5 + 208 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $519_1 = i64toi32_i32$1;
    $519$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $515$hi;
    i64toi32_i32$1 = $519$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = 65536;
    $542($6_1 + 192 | 0 | 0, $515_1 | 0, i64toi32_i32$3 | 0, $519_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$1 = $6_1;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 192 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 196 | 0) >> 2] | 0;
    $523_1 = i64toi32_i32$4;
    $523$hi = i64toi32_i32$5;
    i64toi32_i32$1 = (i64toi32_i32$1 + 192 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $527_1 = i64toi32_i32$5;
    $527$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $523$hi;
    i64toi32_i32$5 = $527$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 65536;
    $542($6_1 + 176 | 0 | 0, $523_1 | 0, i64toi32_i32$4 | 0, $527_1 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$5 = ($6_1 + 176 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$3;
    $19$hi = i64toi32_i32$1;
    i64toi32_i32$5 = $6_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 176 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 180 | 0) >> 2] | 0;
    $16_1 = i64toi32_i32$1;
    $16$hi = i64toi32_i32$3;
    }
    i64toi32_i32$3 = $16$hi;
    i64toi32_i32$1 = $0_1;
    HEAP32[i64toi32_i32$1 >> 2] = $16_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$3;
    i64toi32_i32$3 = $19$hi;
    HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $19_1;
    HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$3;
    global$0 = $6_1 + 432 | 0;
  }
  
  function $562($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $6_1 = $6_1 | 0;
    var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, $7_1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $18$hi = 0, $18_1 = 0, $14_1 = 0, $19$hi = 0, i64toi32_i32$4 = 0, $19_1 = 0, $13_1 = 0, $11_1 = 0, $15_1 = 0, $16_1 = 0, $21$hi = 0, $20$hi = 0, $8_1 = 0, $12_1 = 0, $21_1 = 0, $20_1 = 0, $9_1 = 0, $22$hi = 0, $23$hi = 0, $22_1 = 0, $23_1 = 0, $10_1 = 0, $171_1 = 0, $172_1 = 0, $173_1 = 0, $174_1 = 0, $175_1 = 0, $176_1 = 0, $177_1 = 0, $178_1 = 0, $179_1 = 0, $180_1 = 0, $181_1 = 0, $182_1 = 0, $183_1 = 0, $184_1 = 0, $185_1 = 0, $186_1 = 0, $187_1 = 0, $188_1 = 0, $189_1 = 0, $190_1 = 0, $191_1 = 0, $192_1 = 0, $193_1 = 0, $194_1 = 0, $195_1 = 0, $17_1 = 0, $24_1 = 0.0, $124_1 = 0, $204_1 = 0, $204$hi = 0, $208_1 = 0, $208$hi = 0, $235_1 = 0, $235$hi = 0, $239_1 = 0, $239$hi = 0, $241_1 = 0, $241$hi = 0, $245_1 = 0, $245$hi = 0, $255$hi = 0, $264_1 = 0, $264$hi = 0, $268_1 = 0, $268$hi = 0, $272_1 = 0, $272$hi = 0, $276_1 = 0, $276$hi = 0, $286_1 = 0, $286$hi = 0, $295_1 = 0, $295$hi = 0, $299_1 = 0, $299$hi = 0, $303_1 = 0, $303$hi = 0, $307_1 = 0, $307$hi = 0, $356_1 = 0, $356$hi = 0, $360_1 = 0, $360$hi = 0, $362_1 = 0, $362$hi = 0, $366_1 = 0, $366$hi = 0, $385_1 = 0, $385$hi = 0, $389_1 = 0, $389$hi = 0, $391_1 = 0, $391$hi = 0, $395_1 = 0, $395$hi = 0, $406_1 = 0, $406$hi = 0, $410_1 = 0, $410$hi = 0, $412_1 = 0, $412$hi = 0, $416_1 = 0, $416$hi = 0, $444_1 = 0, $444$hi = 0, $448_1 = 0, $448$hi = 0, $450_1 = 0, $450$hi = 0, $454_1 = 0, $454$hi = 0, $464_1 = 0, $464$hi = 0, $468_1 = 0, $468$hi = 0, $470_1 = 0, $470$hi = 0, $474_1 = 0, $474$hi = 0, $495_1 = 0, $496_1 = 0, $513_1 = 0, $591$hi = 0, $593$hi = 0, $601_1 = 0, $601$hi = 0, $742_1 = 0, $742$hi = 0, $746_1 = 0, $746$hi = 0, $748_1 = 0, $748$hi = 0, $752_1 = 0, $752$hi = 0, $771_1 = 0, $771$hi = 0, $775_1 = 0, $775$hi = 0, $817_1 = 0, $878_1 = 0, $878$hi = 0, $882_1 = 0, $882$hi = 0, $901_1 = 0, $901$hi = 0, $905_1 = 0, $905$hi = 0, $923_1 = 0, $923$hi = 0, $927_1 = 0, $927$hi = 0, $964_1 = 0, $964$hi = 0, $968_1 = 0, $968$hi = 0, $987_1 = 0, $987$hi = 0, $991_1 = 0, $991$hi = 0, $1014_1 = 0, $1014$hi = 0, $1018_1 = 0, $1018$hi = 0, $1034_1 = 0, $1034$hi = 0, $1038_1 = 0, $1038$hi = 0, $1052_1 = 0, $1052$hi = 0, $1056_1 = 0, $1056$hi = 0, $1077_1 = 0, $1077$hi = 0, $1081_1 = 0, $1081$hi = 0, $1104_1 = 0, $1104$hi = 0, $1108_1 = 0, $1108$hi = 0, $1113$hi = 0, $196_1 = 0, $1120$hi = 0, $197_1 = 0;
    $7_1 = global$0 - 8976 | 0;
    global$0 = $7_1;
    $8_1 = 0;
    $9_1 = 0 - $4_1 | 0;
    $10_1 = $9_1 - $3_1 | 0;
    i64toi32_i32$0 = 0;
    $18_1 = 0;
    $18$hi = i64toi32_i32$0;
    $11_1 = 0;
    label$1 : {
    label$2 : {
      label$3 : {
      label$4 : while (1) {
        label$5 : {
        if (($2_1 | 0) == (48 | 0)) {
          break label$5
        }
        if (($2_1 | 0) != (46 | 0)) {
          break label$1
        }
        $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
        if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
          break label$3
        }
        HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
        $2_1 = HEAPU8[$2_1 >> 0] | 0;
        break label$2;
        }
        label$6 : {
        $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
        if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
          break label$6
        }
        $11_1 = 1;
        HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
        $2_1 = HEAPU8[$2_1 >> 0] | 0;
        continue label$4;
        }
        $11_1 = 1;
        $2_1 = $537($1_1 | 0) | 0;
        continue label$4;
      };
      }
      $2_1 = $537($1_1 | 0) | 0;
    }
    i64toi32_i32$0 = 0;
    $18_1 = 0;
    $18$hi = i64toi32_i32$0;
    label$7 : {
      if (($2_1 | 0) != (48 | 0)) {
      break label$7
      }
      label$8 : while (1) {
      label$9 : {
        label$10 : {
        $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
        if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
          break label$10
        }
        HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
        $2_1 = HEAPU8[$2_1 >> 0] | 0;
        break label$9;
        }
        $2_1 = $537($1_1 | 0) | 0;
      }
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$2 = $18_1;
      i64toi32_i32$1 = -1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $18_1 = i64toi32_i32$4;
      $18$hi = i64toi32_i32$5;
      if (($2_1 | 0) == (48 | 0)) {
        continue label$8
      }
      break label$8;
      };
      $11_1 = 1;
    }
    $8_1 = 1;
    }
    $12_1 = 0;
    HEAP32[($7_1 + 784 | 0) >> 2] = 0;
    $13_1 = $2_1 + -48 | 0;
    label$11 : {
    label$12 : {
      label$13 : {
      label$14 : {
        label$15 : {
        label$16 : {
          label$17 : {
          $14_1 = ($2_1 | 0) == (46 | 0);
          if ($14_1) {
            break label$17
          }
          i64toi32_i32$5 = 0;
          $19_1 = 0;
          $19$hi = i64toi32_i32$5;
          if ($13_1 >>> 0 <= 9 >>> 0) {
            break label$17
          }
          $15_1 = 0;
          $16_1 = 0;
          break label$16;
          }
          i64toi32_i32$5 = 0;
          $19_1 = 0;
          $19$hi = i64toi32_i32$5;
          $16_1 = 0;
          $15_1 = 0;
          $12_1 = 0;
          label$18 : while (1) {
          label$19 : {
            label$20 : {
            if (!($14_1 & 1 | 0)) {
              break label$20
            }
            label$21 : {
              if ($8_1) {
              break label$21
              }
              i64toi32_i32$5 = $19$hi;
              $18_1 = $19_1;
              $18$hi = i64toi32_i32$5;
              $8_1 = 1;
              break label$19;
            }
            $14_1 = !$11_1;
            break label$15;
            }
            i64toi32_i32$5 = $19$hi;
            i64toi32_i32$0 = $19_1;
            i64toi32_i32$2 = 0;
            i64toi32_i32$3 = 1;
            i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
            i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
            if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
            i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
            }
            $19_1 = i64toi32_i32$1;
            $19$hi = i64toi32_i32$4;
            label$22 : {
            if (($15_1 | 0) > (2044 | 0)) {
              break label$22
            }
            $14_1 = ($7_1 + 784 | 0) + ($15_1 << 2 | 0) | 0;
            label$23 : {
              if (!$16_1) {
              break label$23
              }
              $13_1 = ($2_1 + Math_imul(HEAP32[$14_1 >> 2] | 0, 10) | 0) + -48 | 0;
            }
            i64toi32_i32$4 = $19$hi;
            $12_1 = ($2_1 | 0) == (48 | 0) ? $12_1 : $19_1;
            HEAP32[$14_1 >> 2] = $13_1;
            $11_1 = 1;
            $2_1 = $16_1 + 1 | 0;
            $124_1 = $2_1;
            $2_1 = ($2_1 | 0) == (9 | 0);
            $16_1 = $2_1 ? 0 : $124_1;
            $15_1 = $15_1 + $2_1 | 0;
            break label$19;
            }
            if (($2_1 | 0) == (48 | 0)) {
            break label$19
            }
            HEAP32[($7_1 + 8960 | 0) >> 2] = HEAP32[($7_1 + 8960 | 0) >> 2] | 0 | 1 | 0;
            $12_1 = 18396;
          }
          label$24 : {
            label$25 : {
            $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
            if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
              break label$25
            }
            HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
            $2_1 = HEAPU8[$2_1 >> 0] | 0;
            break label$24;
            }
            $2_1 = $537($1_1 | 0) | 0;
          }
          $13_1 = $2_1 + -48 | 0;
          $14_1 = ($2_1 | 0) == (46 | 0);
          if ($14_1) {
            continue label$18
          }
          if ($13_1 >>> 0 < 10 >>> 0) {
            continue label$18
          }
          break label$18;
          };
        }
        i64toi32_i32$4 = $18$hi;
        i64toi32_i32$4 = $19$hi;
        i64toi32_i32$2 = $8_1;
        i64toi32_i32$4 = $18$hi;
        i64toi32_i32$0 = $19$hi;
        i64toi32_i32$3 = i64toi32_i32$2 ? $18_1 : $19_1;
        i64toi32_i32$5 = i64toi32_i32$2 ? i64toi32_i32$4 : i64toi32_i32$0;
        $18_1 = i64toi32_i32$3;
        $18$hi = i64toi32_i32$5;
        label$26 : {
          if (!$11_1) {
          break label$26
          }
          if (($2_1 & -33 | 0 | 0) != (69 | 0)) {
          break label$26
          }
          label$27 : {
          i64toi32_i32$5 = $563($1_1 | 0, $6_1 | 0) | 0;
          i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
          $20_1 = i64toi32_i32$5;
          $20$hi = i64toi32_i32$3;
          i64toi32_i32$2 = i64toi32_i32$5;
          i64toi32_i32$5 = -2147483648;
          i64toi32_i32$0 = 0;
          if ((i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$5 | 0) | 0) {
            break label$27
          }
          if (!$6_1) {
            break label$13
          }
          i64toi32_i32$2 = 0;
          $20_1 = 0;
          $20$hi = i64toi32_i32$2;
          i64toi32_i32$0 = $1_1;
          i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 112 | 0) >> 2] | 0;
          i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 116 | 0) >> 2] | 0;
          i64toi32_i32$0 = i64toi32_i32$2;
          i64toi32_i32$2 = 0;
          i64toi32_i32$5 = 0;
          if ((i64toi32_i32$3 | 0) < (i64toi32_i32$2 | 0)) {
            $171_1 = 1
          } else {
            if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$2 | 0)) {
            if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$5 >>> 0) {
              $172_1 = 0
            } else {
              $172_1 = 1
            }
            $173_1 = $172_1;
            } else {
            $173_1 = 0
            }
            $171_1 = $173_1;
          }
          if ($171_1) {
            break label$27
          }
          HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
          }
          i64toi32_i32$0 = $20$hi;
          i64toi32_i32$0 = $18$hi;
          i64toi32_i32$0 = $20$hi;
          i64toi32_i32$5 = $20_1;
          i64toi32_i32$3 = $18$hi;
          i64toi32_i32$2 = $18_1;
          i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
          i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
          if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
          i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
          }
          $18_1 = i64toi32_i32$4;
          $18$hi = i64toi32_i32$1;
          break label$12;
        }
        $14_1 = !$11_1;
        if (($2_1 | 0) < (0 | 0)) {
          break label$14
        }
        }
        i64toi32_i32$0 = $1_1;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 112 | 0) >> 2] | 0;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 116 | 0) >> 2] | 0;
        i64toi32_i32$0 = i64toi32_i32$1;
        i64toi32_i32$1 = 0;
        i64toi32_i32$2 = 0;
        if ((i64toi32_i32$5 | 0) < (i64toi32_i32$1 | 0)) {
        $174_1 = 1
        } else {
        if ((i64toi32_i32$5 | 0) <= (i64toi32_i32$1 | 0)) {
          if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$2 >>> 0) {
          $175_1 = 0
          } else {
          $175_1 = 1
          }
          $176_1 = $175_1;
        } else {
          $176_1 = 0
        }
        $174_1 = $176_1;
        }
        if ($174_1) {
        break label$14
        }
        HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
      }
      if (!$14_1) {
        break label$12
      }
      HEAP32[($124() | 0) >> 2] = 28;
      }
      i64toi32_i32$0 = 0;
      $19_1 = 0;
      $19$hi = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      $536($1_1 | 0, 0 | 0, i64toi32_i32$0 | 0);
      i64toi32_i32$0 = 0;
      $18_1 = 0;
      $18$hi = i64toi32_i32$0;
      break label$11;
    }
    label$28 : {
      $1_1 = HEAP32[($7_1 + 784 | 0) >> 2] | 0;
      if ($1_1) {
      break label$28
      }
      wasm2js_scratch_store_f64(+(0.0));
      i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
      i64toi32_i32$2 = wasm2js_scratch_load_i32(0 | 0) | 0;
      i64toi32_i32$5 = 2147483647;
      i64toi32_i32$1 = -1;
      i64toi32_i32$5 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
      $204_1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
      $204$hi = i64toi32_i32$5;
      wasm2js_scratch_store_f64(+(+($5_1 | 0)));
      i64toi32_i32$5 = wasm2js_scratch_load_i32(1 | 0) | 0;
      i64toi32_i32$0 = wasm2js_scratch_load_i32(0 | 0) | 0;
      i64toi32_i32$2 = -2147483648;
      i64toi32_i32$1 = 0;
      i64toi32_i32$2 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
      $208_1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
      $208$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $204$hi;
      i64toi32_i32$5 = $204_1;
      i64toi32_i32$0 = $208$hi;
      i64toi32_i32$1 = $208_1;
      i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
      wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$5 | i64toi32_i32$1 | 0 | 0);
      wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
      $546($7_1 | 0, +(+wasm2js_scratch_load_f64()));
      i64toi32_i32$2 = $7_1 + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $18_1 = i64toi32_i32$0;
      $18$hi = i64toi32_i32$5;
      i64toi32_i32$2 = $7_1;
      i64toi32_i32$5 = HEAP32[$7_1 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
      $19_1 = i64toi32_i32$5;
      $19$hi = i64toi32_i32$0;
      break label$11;
    }
    label$29 : {
      i64toi32_i32$0 = $19$hi;
      i64toi32_i32$2 = $19_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$1 = 9;
      if ((i64toi32_i32$0 | 0) > (i64toi32_i32$5 | 0)) {
      $177_1 = 1
      } else {
      if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$5 | 0)) {
        if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$1 >>> 0) {
        $178_1 = 0
        } else {
        $178_1 = 1
        }
        $179_1 = $178_1;
      } else {
        $179_1 = 0
      }
      $177_1 = $179_1;
      }
      if ($177_1) {
      break label$29
      }
      i64toi32_i32$2 = $18$hi;
      i64toi32_i32$2 = $19$hi;
      i64toi32_i32$2 = $18$hi;
      i64toi32_i32$1 = $18_1;
      i64toi32_i32$0 = $19$hi;
      i64toi32_i32$5 = $19_1;
      if ((i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break label$29
      }
      label$30 : {
      if ($3_1 >>> 0 > 30 >>> 0) {
        break label$30
      }
      if ($1_1 >>> $3_1 | 0) {
        break label$29
      }
      }
      $540($7_1 + 48 | 0 | 0, $5_1 | 0);
      $551($7_1 + 32 | 0 | 0, $1_1 | 0);
      i64toi32_i32$5 = $7_1;
      i64toi32_i32$1 = HEAP32[($7_1 + 48 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[($7_1 + 52 | 0) >> 2] | 0;
      $235_1 = i64toi32_i32$1;
      $235$hi = i64toi32_i32$2;
      i64toi32_i32$5 = ($7_1 + 48 | 0) + 8 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $239_1 = i64toi32_i32$2;
      $239$hi = i64toi32_i32$1;
      i64toi32_i32$5 = $7_1;
      i64toi32_i32$1 = HEAP32[($7_1 + 32 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[($7_1 + 36 | 0) >> 2] | 0;
      $241_1 = i64toi32_i32$1;
      $241$hi = i64toi32_i32$2;
      i64toi32_i32$5 = ($7_1 + 32 | 0) + 8 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $245_1 = i64toi32_i32$2;
      $245$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $235$hi;
      i64toi32_i32$2 = $239$hi;
      i64toi32_i32$5 = $241$hi;
      i64toi32_i32$0 = $245$hi;
      $542($7_1 + 16 | 0 | 0, $235_1 | 0, i64toi32_i32$1 | 0, $239_1 | 0, i64toi32_i32$2 | 0, $241_1 | 0, i64toi32_i32$5 | 0, $245_1 | 0, i64toi32_i32$0 | 0);
      i64toi32_i32$2 = ($7_1 + 16 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $18_1 = i64toi32_i32$0;
      $18$hi = i64toi32_i32$5;
      i64toi32_i32$2 = $7_1;
      i64toi32_i32$5 = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
      $19_1 = i64toi32_i32$5;
      $19$hi = i64toi32_i32$0;
      break label$11;
    }
    label$31 : {
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$0 = 0;
      $255$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$2 = $18_1;
      i64toi32_i32$5 = $255$hi;
      i64toi32_i32$1 = $9_1 >>> 1 | 0;
      if ((i64toi32_i32$0 | 0) < (i64toi32_i32$5 | 0)) {
      $180_1 = 1
      } else {
      if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$5 | 0)) {
        if (i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0) {
        $181_1 = 0
        } else {
        $181_1 = 1
        }
        $182_1 = $181_1;
      } else {
        $182_1 = 0
      }
      $180_1 = $182_1;
      }
      if ($180_1) {
      break label$31
      }
      HEAP32[($124() | 0) >> 2] = 68;
      $540($7_1 + 96 | 0 | 0, $5_1 | 0);
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 96 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 100 | 0) >> 2] | 0;
      $264_1 = i64toi32_i32$2;
      $264$hi = i64toi32_i32$0;
      i64toi32_i32$1 = (i64toi32_i32$1 + 96 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $268_1 = i64toi32_i32$0;
      $268$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $264$hi;
      i64toi32_i32$0 = $268$hi;
      i64toi32_i32$1 = -1;
      i64toi32_i32$5 = 2147418111;
      $542($7_1 + 80 | 0 | 0, $264_1 | 0, i64toi32_i32$2 | 0, $268_1 | 0, i64toi32_i32$0 | 0, -1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$5 | 0);
      i64toi32_i32$0 = $7_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 80 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 84 | 0) >> 2] | 0;
      $272_1 = i64toi32_i32$5;
      $272$hi = i64toi32_i32$1;
      i64toi32_i32$0 = (i64toi32_i32$0 + 80 | 0) + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $276_1 = i64toi32_i32$1;
      $276$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $272$hi;
      i64toi32_i32$1 = $276$hi;
      i64toi32_i32$0 = -1;
      i64toi32_i32$2 = 2147418111;
      $542($7_1 + 64 | 0 | 0, $272_1 | 0, i64toi32_i32$5 | 0, $276_1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$0 | 0, -1 | 0, i64toi32_i32$2 | 0);
      i64toi32_i32$1 = ($7_1 + 64 | 0) + 8 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $18_1 = i64toi32_i32$2;
      $18$hi = i64toi32_i32$0;
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] | 0;
      $19_1 = i64toi32_i32$0;
      $19$hi = i64toi32_i32$2;
      break label$11;
    }
    label$32 : {
      i64toi32_i32$2 = $18$hi;
      i64toi32_i32$0 = $4_1 + -226 | 0;
      i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
      $286_1 = i64toi32_i32$0;
      $286$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $18$hi;
      i64toi32_i32$1 = $18_1;
      i64toi32_i32$0 = $286$hi;
      i64toi32_i32$5 = $286_1;
      if ((i64toi32_i32$2 | 0) > (i64toi32_i32$0 | 0)) {
      $183_1 = 1
      } else {
      if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$0 | 0)) {
        if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
        $184_1 = 0
        } else {
        $184_1 = 1
        }
        $185_1 = $184_1;
      } else {
        $185_1 = 0
      }
      $183_1 = $185_1;
      }
      if ($183_1) {
      break label$32
      }
      HEAP32[($124() | 0) >> 2] = 68;
      $540($7_1 + 144 | 0 | 0, $5_1 | 0);
      i64toi32_i32$5 = $7_1;
      i64toi32_i32$1 = HEAP32[($7_1 + 144 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[($7_1 + 148 | 0) >> 2] | 0;
      $295_1 = i64toi32_i32$1;
      $295$hi = i64toi32_i32$2;
      i64toi32_i32$5 = ($7_1 + 144 | 0) + 8 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $299_1 = i64toi32_i32$2;
      $299$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $295$hi;
      i64toi32_i32$2 = $299$hi;
      i64toi32_i32$5 = 0;
      i64toi32_i32$0 = 65536;
      $542($7_1 + 128 | 0 | 0, $295_1 | 0, i64toi32_i32$1 | 0, $299_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$0 | 0);
      i64toi32_i32$2 = $7_1;
      i64toi32_i32$0 = HEAP32[($7_1 + 128 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[($7_1 + 132 | 0) >> 2] | 0;
      $303_1 = i64toi32_i32$0;
      $303$hi = i64toi32_i32$5;
      i64toi32_i32$2 = ($7_1 + 128 | 0) + 8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $307_1 = i64toi32_i32$5;
      $307$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $303$hi;
      i64toi32_i32$5 = $307$hi;
      i64toi32_i32$2 = 0;
      i64toi32_i32$1 = 65536;
      $542($7_1 + 112 | 0 | 0, $303_1 | 0, i64toi32_i32$0 | 0, $307_1 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
      i64toi32_i32$5 = ($7_1 + 112 | 0) + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $18_1 = i64toi32_i32$1;
      $18$hi = i64toi32_i32$2;
      i64toi32_i32$5 = $7_1;
      i64toi32_i32$2 = HEAP32[($7_1 + 112 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($7_1 + 116 | 0) >> 2] | 0;
      $19_1 = i64toi32_i32$2;
      $19$hi = i64toi32_i32$1;
      break label$11;
    }
    label$33 : {
      if (!$16_1) {
      break label$33
      }
      label$34 : {
      if (($16_1 | 0) > (8 | 0)) {
        break label$34
      }
      $2_1 = ($7_1 + 784 | 0) + ($15_1 << 2 | 0) | 0;
      $1_1 = HEAP32[$2_1 >> 2] | 0;
      label$35 : while (1) {
        $1_1 = Math_imul($1_1, 10);
        $16_1 = $16_1 + 1 | 0;
        if (($16_1 | 0) != (9 | 0)) {
        continue label$35
        }
        break label$35;
      };
      HEAP32[$2_1 >> 2] = $1_1;
      }
      $15_1 = $15_1 + 1 | 0;
    }
    i64toi32_i32$1 = $18$hi;
    $16_1 = $18_1;
    label$36 : {
      if (($12_1 | 0) >= (9 | 0)) {
      break label$36
      }
      i64toi32_i32$5 = $18_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$0 = 17;
      if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
      $186_1 = 1
      } else {
      if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
        if (i64toi32_i32$5 >>> 0 <= i64toi32_i32$0 >>> 0) {
        $187_1 = 0
        } else {
        $187_1 = 1
        }
        $188_1 = $187_1;
      } else {
        $188_1 = 0
      }
      $186_1 = $188_1;
      }
      if ($186_1) {
      break label$36
      }
      if (($12_1 | 0) > ($16_1 | 0)) {
      break label$36
      }
      label$37 : {
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$0 = $18_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$2 = 9;
      if ((i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$1 | 0) | 0) {
        break label$37
      }
      $540($7_1 + 192 | 0 | 0, $5_1 | 0);
      $551($7_1 + 176 | 0 | 0, HEAP32[($7_1 + 784 | 0) >> 2] | 0 | 0);
      i64toi32_i32$2 = $7_1;
      i64toi32_i32$0 = HEAP32[($7_1 + 192 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[($7_1 + 196 | 0) >> 2] | 0;
      $356_1 = i64toi32_i32$0;
      $356$hi = i64toi32_i32$5;
      i64toi32_i32$2 = ($7_1 + 192 | 0) + 8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $360_1 = i64toi32_i32$5;
      $360$hi = i64toi32_i32$0;
      i64toi32_i32$2 = $7_1;
      i64toi32_i32$0 = HEAP32[($7_1 + 176 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[($7_1 + 180 | 0) >> 2] | 0;
      $362_1 = i64toi32_i32$0;
      $362$hi = i64toi32_i32$5;
      i64toi32_i32$2 = ($7_1 + 176 | 0) + 8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $366_1 = i64toi32_i32$5;
      $366$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $356$hi;
      i64toi32_i32$5 = $360$hi;
      i64toi32_i32$2 = $362$hi;
      i64toi32_i32$1 = $366$hi;
      $542($7_1 + 160 | 0 | 0, $356_1 | 0, i64toi32_i32$0 | 0, $360_1 | 0, i64toi32_i32$5 | 0, $362_1 | 0, i64toi32_i32$2 | 0, $366_1 | 0, i64toi32_i32$1 | 0);
      i64toi32_i32$5 = ($7_1 + 160 | 0) + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $18_1 = i64toi32_i32$1;
      $18$hi = i64toi32_i32$2;
      i64toi32_i32$5 = $7_1;
      i64toi32_i32$2 = HEAP32[($7_1 + 160 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($7_1 + 164 | 0) >> 2] | 0;
      $19_1 = i64toi32_i32$2;
      $19$hi = i64toi32_i32$1;
      break label$11;
      }
      label$38 : {
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$5 = $18_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$0 = 8;
      if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
        $189_1 = 1
      } else {
        if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
        if (i64toi32_i32$5 >>> 0 <= i64toi32_i32$0 >>> 0) {
          $190_1 = 0
        } else {
          $190_1 = 1
        }
        $191_1 = $190_1;
        } else {
        $191_1 = 0
        }
        $189_1 = $191_1;
      }
      if ($189_1) {
        break label$38
      }
      $540($7_1 + 272 | 0 | 0, $5_1 | 0);
      $551($7_1 + 256 | 0 | 0, HEAP32[($7_1 + 784 | 0) >> 2] | 0 | 0);
      i64toi32_i32$0 = $7_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 272 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 276 | 0) >> 2] | 0;
      $385_1 = i64toi32_i32$5;
      $385$hi = i64toi32_i32$1;
      i64toi32_i32$0 = (i64toi32_i32$0 + 272 | 0) + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $389_1 = i64toi32_i32$1;
      $389$hi = i64toi32_i32$5;
      i64toi32_i32$0 = $7_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 256 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 260 | 0) >> 2] | 0;
      $391_1 = i64toi32_i32$5;
      $391$hi = i64toi32_i32$1;
      i64toi32_i32$0 = (i64toi32_i32$0 + 256 | 0) + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $395_1 = i64toi32_i32$1;
      $395$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $385$hi;
      i64toi32_i32$1 = $389$hi;
      i64toi32_i32$0 = $391$hi;
      i64toi32_i32$2 = $395$hi;
      $542($7_1 + 240 | 0 | 0, $385_1 | 0, i64toi32_i32$5 | 0, $389_1 | 0, i64toi32_i32$1 | 0, $391_1 | 0, i64toi32_i32$0 | 0, $395_1 | 0, i64toi32_i32$2 | 0);
      $540($7_1 + 224 | 0 | 0, HEAP32[(((8 - $16_1 | 0) << 2 | 0) + 69936 | 0) >> 2] | 0 | 0);
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 240 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 244 | 0) >> 2] | 0;
      $406_1 = i64toi32_i32$2;
      $406$hi = i64toi32_i32$0;
      i64toi32_i32$1 = (i64toi32_i32$1 + 240 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $410_1 = i64toi32_i32$0;
      $410$hi = i64toi32_i32$2;
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 224 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 228 | 0) >> 2] | 0;
      $412_1 = i64toi32_i32$2;
      $412$hi = i64toi32_i32$0;
      i64toi32_i32$1 = (i64toi32_i32$1 + 224 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $416_1 = i64toi32_i32$0;
      $416$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $406$hi;
      i64toi32_i32$0 = $410$hi;
      i64toi32_i32$1 = $412$hi;
      i64toi32_i32$5 = $416$hi;
      $555($7_1 + 208 | 0 | 0, $406_1 | 0, i64toi32_i32$2 | 0, $410_1 | 0, i64toi32_i32$0 | 0, $412_1 | 0, i64toi32_i32$1 | 0, $416_1 | 0, i64toi32_i32$5 | 0);
      i64toi32_i32$0 = ($7_1 + 208 | 0) + 8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $18_1 = i64toi32_i32$5;
      $18$hi = i64toi32_i32$1;
      i64toi32_i32$0 = $7_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 208 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 212 | 0) >> 2] | 0;
      $19_1 = i64toi32_i32$1;
      $19$hi = i64toi32_i32$5;
      break label$11;
      }
      $1_1 = HEAP32[($7_1 + 784 | 0) >> 2] | 0;
      label$39 : {
      $2_1 = ($3_1 + Math_imul($16_1, -3) | 0) + 27 | 0;
      if (($2_1 | 0) > (30 | 0)) {
        break label$39
      }
      if ($1_1 >>> $2_1 | 0) {
        break label$36
      }
      }
      $540($7_1 + 352 | 0 | 0, $5_1 | 0);
      $551($7_1 + 336 | 0 | 0, $1_1 | 0);
      i64toi32_i32$0 = $7_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 352 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 356 | 0) >> 2] | 0;
      $444_1 = i64toi32_i32$5;
      $444$hi = i64toi32_i32$1;
      i64toi32_i32$0 = (i64toi32_i32$0 + 352 | 0) + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $448_1 = i64toi32_i32$1;
      $448$hi = i64toi32_i32$5;
      i64toi32_i32$0 = $7_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 336 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 340 | 0) >> 2] | 0;
      $450_1 = i64toi32_i32$5;
      $450$hi = i64toi32_i32$1;
      i64toi32_i32$0 = (i64toi32_i32$0 + 336 | 0) + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $454_1 = i64toi32_i32$1;
      $454$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $444$hi;
      i64toi32_i32$1 = $448$hi;
      i64toi32_i32$0 = $450$hi;
      i64toi32_i32$2 = $454$hi;
      $542($7_1 + 320 | 0 | 0, $444_1 | 0, i64toi32_i32$5 | 0, $448_1 | 0, i64toi32_i32$1 | 0, $450_1 | 0, i64toi32_i32$0 | 0, $454_1 | 0, i64toi32_i32$2 | 0);
      $540($7_1 + 304 | 0 | 0, HEAP32[(($16_1 << 2 | 0) + 69896 | 0) >> 2] | 0 | 0);
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 320 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 324 | 0) >> 2] | 0;
      $464_1 = i64toi32_i32$2;
      $464$hi = i64toi32_i32$0;
      i64toi32_i32$1 = (i64toi32_i32$1 + 320 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $468_1 = i64toi32_i32$0;
      $468$hi = i64toi32_i32$2;
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 304 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 308 | 0) >> 2] | 0;
      $470_1 = i64toi32_i32$2;
      $470$hi = i64toi32_i32$0;
      i64toi32_i32$1 = (i64toi32_i32$1 + 304 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $474_1 = i64toi32_i32$0;
      $474$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $464$hi;
      i64toi32_i32$0 = $468$hi;
      i64toi32_i32$1 = $470$hi;
      i64toi32_i32$5 = $474$hi;
      $542($7_1 + 288 | 0 | 0, $464_1 | 0, i64toi32_i32$2 | 0, $468_1 | 0, i64toi32_i32$0 | 0, $470_1 | 0, i64toi32_i32$1 | 0, $474_1 | 0, i64toi32_i32$5 | 0);
      i64toi32_i32$0 = ($7_1 + 288 | 0) + 8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $18_1 = i64toi32_i32$5;
      $18$hi = i64toi32_i32$1;
      i64toi32_i32$0 = $7_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 288 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 292 | 0) >> 2] | 0;
      $19_1 = i64toi32_i32$1;
      $19$hi = i64toi32_i32$5;
      break label$11;
    }
    label$40 : while (1) {
      $14_1 = $15_1;
      $15_1 = $14_1 + -1 | 0;
      if (!(HEAP32[(($7_1 + 784 | 0) + ($15_1 << 2 | 0) | 0) >> 2] | 0)) {
      continue label$40
      }
      break label$40;
    };
    $12_1 = 0;
    label$41 : {
      label$42 : {
      $1_1 = ($16_1 | 0) % (9 | 0) | 0;
      if ($1_1) {
        break label$42
      }
      $13_1 = 0;
      break label$41;
      }
      $495_1 = $1_1 + 9 | 0;
      $496_1 = $1_1;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$0 = $18_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$2 = 0;
      if ((i64toi32_i32$5 | 0) < (i64toi32_i32$1 | 0)) {
      $192_1 = 1
      } else {
      if ((i64toi32_i32$5 | 0) <= (i64toi32_i32$1 | 0)) {
        if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$2 >>> 0) {
        $193_1 = 0
        } else {
        $193_1 = 1
        }
        $194_1 = $193_1;
      } else {
        $194_1 = 0
      }
      $192_1 = $194_1;
      }
      $9_1 = $192_1 ? $495_1 : $496_1;
      label$43 : {
      label$44 : {
        if ($14_1) {
        break label$44
        }
        $13_1 = 0;
        $14_1 = 0;
        break label$43;
      }
      $11_1 = HEAP32[(((8 - $9_1 | 0) << 2 | 0) + 69936 | 0) >> 2] | 0;
      $6_1 = (1e9 | 0) / ($11_1 | 0) | 0;
      $2_1 = 0;
      $1_1 = 0;
      $13_1 = 0;
      label$45 : while (1) {
        $15_1 = ($7_1 + 784 | 0) + ($1_1 << 2 | 0) | 0;
        $513_1 = $15_1;
        $15_1 = HEAP32[$15_1 >> 2] | 0;
        $8_1 = ($15_1 >>> 0) / ($11_1 >>> 0) | 0;
        $2_1 = $8_1 + $2_1 | 0;
        HEAP32[$513_1 >> 2] = $2_1;
        $2_1 = ($1_1 | 0) == ($13_1 | 0) & !$2_1 | 0;
        $13_1 = $2_1 ? ($13_1 + 1 | 0) & 2047 | 0 : $13_1;
        $16_1 = $2_1 ? $16_1 + -9 | 0 : $16_1;
        $2_1 = Math_imul($6_1, $15_1 - Math_imul($8_1, $11_1) | 0);
        $1_1 = $1_1 + 1 | 0;
        if (($1_1 | 0) != ($14_1 | 0)) {
        continue label$45
        }
        break label$45;
      };
      if (!$2_1) {
        break label$43
      }
      HEAP32[(($7_1 + 784 | 0) + ($14_1 << 2 | 0) | 0) >> 2] = $2_1;
      $14_1 = $14_1 + 1 | 0;
      }
      $16_1 = ($16_1 - $9_1 | 0) + 9 | 0;
    }
    label$46 : while (1) {
      $9_1 = ($7_1 + 784 | 0) + ($13_1 << 2 | 0) | 0;
      $6_1 = ($16_1 | 0) < (36 | 0);
      label$47 : {
      label$48 : while (1) {
        label$49 : {
        if ($6_1) {
          break label$49
        }
        if (($16_1 | 0) != (36 | 0)) {
          break label$47
        }
        if ((HEAP32[$9_1 >> 2] | 0) >>> 0 >= 10384593 >>> 0) {
          break label$47
        }
        }
        $15_1 = $14_1 + 2047 | 0;
        $11_1 = 0;
        label$50 : while (1) {
        $2_1 = $14_1;
        label$51 : {
          label$52 : {
          $1_1 = $15_1 & 2047 | 0;
          $14_1 = ($7_1 + 784 | 0) + ($1_1 << 2 | 0) | 0;
          i64toi32_i32$2 = $14_1;
          i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
          i64toi32_i32$5 = 0;
          i64toi32_i32$2 = i64toi32_i32$0;
          i64toi32_i32$0 = 0;
          i64toi32_i32$1 = 29;
          i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
          if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
            i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
            $195_1 = 0;
          } else {
            i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
            $195_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
          }
          $591$hi = i64toi32_i32$0;
          i64toi32_i32$0 = 0;
          $593$hi = i64toi32_i32$0;
          i64toi32_i32$0 = $591$hi;
          i64toi32_i32$5 = $195_1;
          i64toi32_i32$2 = $593$hi;
          i64toi32_i32$1 = $11_1;
          i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
          i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
          if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
            i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
          }
          $18_1 = i64toi32_i32$3;
          $18$hi = i64toi32_i32$4;
          i64toi32_i32$4 = $18$hi;
          i64toi32_i32$4 = $18$hi;
          i64toi32_i32$0 = i64toi32_i32$3;
          i64toi32_i32$5 = 0;
          i64toi32_i32$1 = 1000000001;
          if ($18$hi >>> 0 > i64toi32_i32$5 >>> 0 | (($18$hi | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 >= i64toi32_i32$1 >>> 0 | 0) | 0) {
            break label$52
          }
          $11_1 = 0;
          break label$51;
          }
          i64toi32_i32$0 = $18$hi;
          i64toi32_i32$4 = 0;
          i64toi32_i32$4 = __wasm_i64_udiv($18_1 | 0, i64toi32_i32$0 | 0, 1e9 | 0, i64toi32_i32$4 | 0) | 0;
          i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
          $19_1 = i64toi32_i32$4;
          $19$hi = i64toi32_i32$0;
          i64toi32_i32$4 = 0;
          i64toi32_i32$4 = __wasm_i64_mul($19_1 | 0, i64toi32_i32$0 | 0, 1e9 | 0, i64toi32_i32$4 | 0) | 0;
          i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
          $601_1 = i64toi32_i32$4;
          $601$hi = i64toi32_i32$0;
          i64toi32_i32$0 = $18$hi;
          i64toi32_i32$1 = $18_1;
          i64toi32_i32$4 = $601$hi;
          i64toi32_i32$5 = $601_1;
          i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
          i64toi32_i32$3 = (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) + i64toi32_i32$4 | 0;
          i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
          $18_1 = i64toi32_i32$2;
          $18$hi = i64toi32_i32$3;
          i64toi32_i32$3 = $19$hi;
          $11_1 = $19_1;
        }
        i64toi32_i32$3 = $18$hi;
        HEAP32[$14_1 >> 2] = $18_1;
        $8_1 = ($2_1 + -1 | 0) & 2047 | 0;
        $14_1 = ($1_1 | 0) != ($8_1 | 0) ? $2_1 : ($1_1 | 0) == ($13_1 | 0) ? $2_1 : !($18_1 | i64toi32_i32$3 | 0) ? $1_1 : $2_1;
        $15_1 = $1_1 + -1 | 0;
        if (($1_1 | 0) != ($13_1 | 0)) {
          continue label$50
        }
        break label$50;
        };
        $12_1 = $12_1 + -29 | 0;
        $14_1 = $2_1;
        if (!$11_1) {
        continue label$48
        }
        break label$48;
      };
      label$53 : {
        label$54 : {
        $13_1 = ($13_1 + -1 | 0) & 2047 | 0;
        if (($13_1 | 0) == ($2_1 | 0)) {
          break label$54
        }
        $14_1 = $2_1;
        break label$53;
        }
        $1_1 = ($7_1 + 784 | 0) + ((($2_1 + 2046 | 0) & 2047 | 0) << 2 | 0) | 0;
        HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] | 0 | (HEAP32[(($7_1 + 784 | 0) + ($8_1 << 2 | 0) | 0) >> 2] | 0) | 0;
        $14_1 = $8_1;
      }
      $16_1 = $16_1 + 9 | 0;
      HEAP32[(($7_1 + 784 | 0) + ($13_1 << 2 | 0) | 0) >> 2] = $11_1;
      continue label$46;
      }
      break label$46;
    };
    label$55 : {
      label$56 : while (1) {
      $17_1 = ($14_1 + 1 | 0) & 2047 | 0;
      $9_1 = ($7_1 + 784 | 0) + ((($14_1 + -1 | 0) & 2047 | 0) << 2 | 0) | 0;
      label$57 : while (1) {
        $15_1 = ($16_1 | 0) > (45 | 0) ? 9 : 1;
        label$58 : {
        label$59 : while (1) {
          $11_1 = $13_1;
          $1_1 = 0;
          label$60 : {
          label$61 : {
            label$62 : while (1) {
            $2_1 = ($1_1 + $11_1 | 0) & 2047 | 0;
            if (($2_1 | 0) == ($14_1 | 0)) {
              break label$61
            }
            $2_1 = HEAP32[(($7_1 + 784 | 0) + ($2_1 << 2 | 0) | 0) >> 2] | 0;
            $13_1 = HEAP32[(($1_1 << 2 | 0) + 69920 | 0) >> 2] | 0;
            if ($2_1 >>> 0 < $13_1 >>> 0) {
              break label$61
            }
            if ($2_1 >>> 0 > $13_1 >>> 0) {
              break label$60
            }
            $1_1 = $1_1 + 1 | 0;
            if (($1_1 | 0) != (4 | 0)) {
              continue label$62
            }
            break label$62;
            };
          }
          if (($16_1 | 0) != (36 | 0)) {
            break label$60
          }
          i64toi32_i32$3 = 0;
          $18_1 = 0;
          $18$hi = i64toi32_i32$3;
          $1_1 = 0;
          i64toi32_i32$3 = 0;
          $19_1 = 0;
          $19$hi = i64toi32_i32$3;
          label$63 : while (1) {
            label$64 : {
            $2_1 = ($1_1 + $11_1 | 0) & 2047 | 0;
            if (($2_1 | 0) != ($14_1 | 0)) {
              break label$64
            }
            $14_1 = ($14_1 + 1 | 0) & 2047 | 0;
            HEAP32[((($14_1 << 2 | 0) + ($7_1 + 784 | 0) | 0) + -4 | 0) >> 2] = 0;
            }
            $551($7_1 + 768 | 0 | 0, HEAP32[(($7_1 + 784 | 0) + ($2_1 << 2 | 0) | 0) >> 2] | 0 | 0);
            i64toi32_i32$3 = $18$hi;
            i64toi32_i32$3 = $19$hi;
            i64toi32_i32$3 = $18$hi;
            i64toi32_i32$1 = $19$hi;
            i64toi32_i32$0 = 0;
            i64toi32_i32$5 = 1075633366;
            $542($7_1 + 752 | 0 | 0, $18_1 | 0, i64toi32_i32$3 | 0, $19_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0, 1342177280 | 0, i64toi32_i32$5 | 0);
            i64toi32_i32$1 = $7_1;
            i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 752 | 0) >> 2] | 0;
            i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 756 | 0) >> 2] | 0;
            $742_1 = i64toi32_i32$5;
            $742$hi = i64toi32_i32$0;
            i64toi32_i32$1 = (i64toi32_i32$1 + 752 | 0) + 8 | 0;
            i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
            i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
            $746_1 = i64toi32_i32$0;
            $746$hi = i64toi32_i32$5;
            i64toi32_i32$1 = $7_1;
            i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 768 | 0) >> 2] | 0;
            i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 772 | 0) >> 2] | 0;
            $748_1 = i64toi32_i32$5;
            $748$hi = i64toi32_i32$0;
            i64toi32_i32$1 = (i64toi32_i32$1 + 768 | 0) + 8 | 0;
            i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
            i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
            $752_1 = i64toi32_i32$0;
            $752$hi = i64toi32_i32$5;
            i64toi32_i32$5 = $742$hi;
            i64toi32_i32$0 = $746$hi;
            i64toi32_i32$1 = $748$hi;
            i64toi32_i32$3 = $752$hi;
            $545($7_1 + 736 | 0 | 0, $742_1 | 0, i64toi32_i32$5 | 0, $746_1 | 0, i64toi32_i32$0 | 0, $748_1 | 0, i64toi32_i32$1 | 0, $752_1 | 0, i64toi32_i32$3 | 0);
            i64toi32_i32$0 = ($7_1 + 736 | 0) + 8 | 0;
            i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
            i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
            $19_1 = i64toi32_i32$3;
            $19$hi = i64toi32_i32$1;
            i64toi32_i32$0 = $7_1;
            i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 736 | 0) >> 2] | 0;
            i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 740 | 0) >> 2] | 0;
            $18_1 = i64toi32_i32$1;
            $18$hi = i64toi32_i32$3;
            $1_1 = $1_1 + 1 | 0;
            if (($1_1 | 0) != (4 | 0)) {
            continue label$63
            }
            break label$63;
          };
          $540(i64toi32_i32$0 + 720 | 0 | 0, $5_1 | 0);
          i64toi32_i32$3 = $19$hi;
          i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 720 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 724 | 0) >> 2] | 0;
          $771_1 = i64toi32_i32$3;
          $771$hi = i64toi32_i32$1;
          i64toi32_i32$0 = (i64toi32_i32$0 + 720 | 0) + 8 | 0;
          i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
          i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
          $775_1 = i64toi32_i32$1;
          $775$hi = i64toi32_i32$3;
          i64toi32_i32$3 = $18$hi;
          i64toi32_i32$1 = $19$hi;
          i64toi32_i32$0 = $771$hi;
          i64toi32_i32$5 = $775$hi;
          $542($7_1 + 704 | 0 | 0, $18_1 | 0, i64toi32_i32$3 | 0, $19_1 | 0, i64toi32_i32$1 | 0, $771_1 | 0, i64toi32_i32$0 | 0, $775_1 | 0, i64toi32_i32$5 | 0);
          i64toi32_i32$1 = ($7_1 + 704 | 0) + 8 | 0;
          i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
          $19_1 = i64toi32_i32$5;
          $19$hi = i64toi32_i32$0;
          i64toi32_i32$0 = 0;
          $18_1 = 0;
          $18$hi = i64toi32_i32$0;
          i64toi32_i32$1 = $7_1;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 704 | 0) >> 2] | 0;
          i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 708 | 0) >> 2] | 0;
          $20_1 = i64toi32_i32$0;
          $20$hi = i64toi32_i32$5;
          $13_1 = $12_1 + 113 | 0;
          $1_1 = $13_1 - $4_1 | 0;
          $8_1 = ($3_1 | 0) > ($1_1 | 0);
          $2_1 = $8_1 ? (($1_1 | 0) > (0 | 0) ? $1_1 : 0) : $3_1;
          if ($2_1 >>> 0 <= 112 >>> 0) {
            break label$58
          }
          i64toi32_i32$5 = 0;
          $21_1 = 0;
          $21$hi = i64toi32_i32$5;
          i64toi32_i32$5 = 0;
          $22_1 = 0;
          $22$hi = i64toi32_i32$5;
          i64toi32_i32$5 = 0;
          $23_1 = 0;
          $23$hi = i64toi32_i32$5;
          break label$55;
          }
          $12_1 = $15_1 + $12_1 | 0;
          $13_1 = $14_1;
          if (($11_1 | 0) == ($14_1 | 0)) {
          continue label$59
          }
          break label$59;
        };
        $8_1 = 1e9 >>> $15_1 | 0;
        $6_1 = (-1 << $15_1 | 0) ^ -1 | 0;
        $1_1 = 0;
        $13_1 = $11_1;
        label$65 : while (1) {
          $2_1 = ($7_1 + 784 | 0) + ($11_1 << 2 | 0) | 0;
          $817_1 = $2_1;
          $2_1 = HEAP32[$2_1 >> 2] | 0;
          $1_1 = ($2_1 >>> $15_1 | 0) + $1_1 | 0;
          HEAP32[$817_1 >> 2] = $1_1;
          $1_1 = ($11_1 | 0) == ($13_1 | 0) & !$1_1 | 0;
          $13_1 = $1_1 ? ($13_1 + 1 | 0) & 2047 | 0 : $13_1;
          $16_1 = $1_1 ? $16_1 + -9 | 0 : $16_1;
          $1_1 = Math_imul($2_1 & $6_1 | 0, $8_1);
          $11_1 = ($11_1 + 1 | 0) & 2047 | 0;
          if (($11_1 | 0) != ($14_1 | 0)) {
          continue label$65
          }
          break label$65;
        };
        if (!$1_1) {
          continue label$57
        }
        label$66 : {
          if (($17_1 | 0) == ($13_1 | 0)) {
          break label$66
          }
          HEAP32[(($7_1 + 784 | 0) + ($14_1 << 2 | 0) | 0) >> 2] = $1_1;
          $14_1 = $17_1;
          continue label$56;
        }
        HEAP32[$9_1 >> 2] = HEAP32[$9_1 >> 2] | 0 | 1 | 0;
        continue label$57;
        }
        break label$57;
      };
      break label$56;
      };
      $546($7_1 + 656 | 0 | 0, +(+$549(+(1.0), 225 - $2_1 | 0 | 0)));
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 656 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 660 | 0) >> 2] | 0;
      $878_1 = i64toi32_i32$5;
      $878$hi = i64toi32_i32$0;
      i64toi32_i32$1 = (i64toi32_i32$1 + 656 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $882_1 = i64toi32_i32$0;
      $882$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $20$hi;
      i64toi32_i32$5 = $19$hi;
      i64toi32_i32$5 = $878$hi;
      i64toi32_i32$0 = $882$hi;
      i64toi32_i32$1 = $20$hi;
      i64toi32_i32$3 = $19$hi;
      $550($7_1 + 688 | 0 | 0, $878_1 | 0, i64toi32_i32$5 | 0, $882_1 | 0, i64toi32_i32$0 | 0, $20_1 | 0, i64toi32_i32$1 | 0, $19_1 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$0 = ($7_1 + 688 | 0) + 8 | 0;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $23_1 = i64toi32_i32$3;
      $23$hi = i64toi32_i32$1;
      i64toi32_i32$0 = $7_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 688 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 692 | 0) >> 2] | 0;
      $22_1 = i64toi32_i32$1;
      $22$hi = i64toi32_i32$3;
      $546(i64toi32_i32$0 + 640 | 0 | 0, +(+$549(+(1.0), 113 - $2_1 | 0 | 0)));
      i64toi32_i32$3 = $20$hi;
      i64toi32_i32$3 = $19$hi;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 640 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 644 | 0) >> 2] | 0;
      $901_1 = i64toi32_i32$3;
      $901$hi = i64toi32_i32$1;
      i64toi32_i32$0 = (i64toi32_i32$0 + 640 | 0) + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $905_1 = i64toi32_i32$1;
      $905$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $20$hi;
      i64toi32_i32$1 = $19$hi;
      i64toi32_i32$0 = $901$hi;
      i64toi32_i32$5 = $905$hi;
      $557($7_1 + 672 | 0 | 0, $20_1 | 0, i64toi32_i32$3 | 0, $19_1 | 0, i64toi32_i32$1 | 0, $901_1 | 0, i64toi32_i32$0 | 0, $905_1 | 0, i64toi32_i32$5 | 0);
      i64toi32_i32$5 = i64toi32_i32$3;
      i64toi32_i32$5 = i64toi32_i32$1;
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 672 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 676 | 0) >> 2] | 0;
      $18_1 = i64toi32_i32$5;
      $18$hi = i64toi32_i32$0;
      i64toi32_i32$1 = (i64toi32_i32$1 + 672 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $21_1 = i64toi32_i32$0;
      $21$hi = i64toi32_i32$5;
      i64toi32_i32$5 = i64toi32_i32$3;
      i64toi32_i32$0 = $19$hi;
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$3 = $21$hi;
      $552($7_1 + 624 | 0 | 0, $20_1 | 0, i64toi32_i32$5 | 0, $19_1 | 0, i64toi32_i32$0 | 0, $18_1 | 0, i64toi32_i32$1 | 0, $21_1 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$3 = $22$hi;
      i64toi32_i32$3 = $23$hi;
      i64toi32_i32$0 = $7_1;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 624 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 628 | 0) >> 2] | 0;
      $923_1 = i64toi32_i32$3;
      $923$hi = i64toi32_i32$1;
      i64toi32_i32$0 = (i64toi32_i32$0 + 624 | 0) + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $927_1 = i64toi32_i32$1;
      $927$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $22$hi;
      i64toi32_i32$1 = $23$hi;
      i64toi32_i32$0 = $923$hi;
      i64toi32_i32$5 = $927$hi;
      $545($7_1 + 608 | 0 | 0, $22_1 | 0, i64toi32_i32$3 | 0, $23_1 | 0, i64toi32_i32$1 | 0, $923_1 | 0, i64toi32_i32$0 | 0, $927_1 | 0, i64toi32_i32$5 | 0);
      i64toi32_i32$1 = ($7_1 + 608 | 0) + 8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $19_1 = i64toi32_i32$5;
      $19$hi = i64toi32_i32$0;
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 608 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 612 | 0) >> 2] | 0;
      $20_1 = i64toi32_i32$0;
      $20$hi = i64toi32_i32$5;
    }
    label$67 : {
      $15_1 = ($11_1 + 4 | 0) & 2047 | 0;
      if (($15_1 | 0) == ($14_1 | 0)) {
      break label$67
      }
      label$68 : {
      label$69 : {
        $15_1 = HEAP32[(($7_1 + 784 | 0) + ($15_1 << 2 | 0) | 0) >> 2] | 0;
        if ($15_1 >>> 0 > 499999999 >>> 0) {
        break label$69
        }
        label$70 : {
        if ($15_1) {
          break label$70
        }
        if ((($11_1 + 5 | 0) & 2047 | 0 | 0) == ($14_1 | 0)) {
          break label$68
        }
        }
        $546($7_1 + 496 | 0 | 0, +(+($5_1 | 0) * .25));
        i64toi32_i32$5 = $18$hi;
        i64toi32_i32$5 = $21$hi;
        i64toi32_i32$1 = $7_1;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 496 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 500 | 0) >> 2] | 0;
        $964_1 = i64toi32_i32$5;
        $964$hi = i64toi32_i32$0;
        i64toi32_i32$1 = (i64toi32_i32$1 + 496 | 0) + 8 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
        $968_1 = i64toi32_i32$0;
        $968$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $18$hi;
        i64toi32_i32$0 = $21$hi;
        i64toi32_i32$1 = $964$hi;
        i64toi32_i32$3 = $968$hi;
        $545($7_1 + 480 | 0 | 0, $18_1 | 0, i64toi32_i32$5 | 0, $21_1 | 0, i64toi32_i32$0 | 0, $964_1 | 0, i64toi32_i32$1 | 0, $968_1 | 0, i64toi32_i32$3 | 0);
        i64toi32_i32$0 = ($7_1 + 480 | 0) + 8 | 0;
        i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
        $21_1 = i64toi32_i32$3;
        $21$hi = i64toi32_i32$1;
        i64toi32_i32$0 = $7_1;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 480 | 0) >> 2] | 0;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 484 | 0) >> 2] | 0;
        $18_1 = i64toi32_i32$1;
        $18$hi = i64toi32_i32$3;
        break label$68;
      }
      label$71 : {
        if (($15_1 | 0) == (5e8 | 0)) {
        break label$71
        }
        $546($7_1 + 592 | 0 | 0, +(+($5_1 | 0) * .75));
        i64toi32_i32$3 = $18$hi;
        i64toi32_i32$3 = $21$hi;
        i64toi32_i32$0 = $7_1;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 592 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 596 | 0) >> 2] | 0;
        $987_1 = i64toi32_i32$3;
        $987$hi = i64toi32_i32$1;
        i64toi32_i32$0 = (i64toi32_i32$0 + 592 | 0) + 8 | 0;
        i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
        $991_1 = i64toi32_i32$1;
        $991$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $18$hi;
        i64toi32_i32$1 = $21$hi;
        i64toi32_i32$0 = $987$hi;
        i64toi32_i32$5 = $991$hi;
        $545($7_1 + 576 | 0 | 0, $18_1 | 0, i64toi32_i32$3 | 0, $21_1 | 0, i64toi32_i32$1 | 0, $987_1 | 0, i64toi32_i32$0 | 0, $991_1 | 0, i64toi32_i32$5 | 0);
        i64toi32_i32$1 = ($7_1 + 576 | 0) + 8 | 0;
        i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
        $21_1 = i64toi32_i32$5;
        $21$hi = i64toi32_i32$0;
        i64toi32_i32$1 = $7_1;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 576 | 0) >> 2] | 0;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 580 | 0) >> 2] | 0;
        $18_1 = i64toi32_i32$0;
        $18$hi = i64toi32_i32$5;
        break label$68;
      }
      $24_1 = +($5_1 | 0);
      label$72 : {
        if ((($11_1 + 5 | 0) & 2047 | 0 | 0) != ($14_1 | 0)) {
        break label$72
        }
        $546($7_1 + 528 | 0 | 0, +($24_1 * .5));
        i64toi32_i32$5 = $18$hi;
        i64toi32_i32$5 = $21$hi;
        i64toi32_i32$1 = $7_1;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 528 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 532 | 0) >> 2] | 0;
        $1014_1 = i64toi32_i32$5;
        $1014$hi = i64toi32_i32$0;
        i64toi32_i32$1 = (i64toi32_i32$1 + 528 | 0) + 8 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
        $1018_1 = i64toi32_i32$0;
        $1018$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $18$hi;
        i64toi32_i32$0 = $21$hi;
        i64toi32_i32$1 = $1014$hi;
        i64toi32_i32$3 = $1018$hi;
        $545($7_1 + 512 | 0 | 0, $18_1 | 0, i64toi32_i32$5 | 0, $21_1 | 0, i64toi32_i32$0 | 0, $1014_1 | 0, i64toi32_i32$1 | 0, $1018_1 | 0, i64toi32_i32$3 | 0);
        i64toi32_i32$0 = ($7_1 + 512 | 0) + 8 | 0;
        i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
        $21_1 = i64toi32_i32$3;
        $21$hi = i64toi32_i32$1;
        i64toi32_i32$0 = $7_1;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 512 | 0) >> 2] | 0;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 516 | 0) >> 2] | 0;
        $18_1 = i64toi32_i32$1;
        $18$hi = i64toi32_i32$3;
        break label$68;
      }
      $546($7_1 + 560 | 0 | 0, +($24_1 * .75));
      i64toi32_i32$3 = $18$hi;
      i64toi32_i32$3 = $21$hi;
      i64toi32_i32$0 = $7_1;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 560 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 564 | 0) >> 2] | 0;
      $1034_1 = i64toi32_i32$3;
      $1034$hi = i64toi32_i32$1;
      i64toi32_i32$0 = (i64toi32_i32$0 + 560 | 0) + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $1038_1 = i64toi32_i32$1;
      $1038$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $18$hi;
      i64toi32_i32$1 = $21$hi;
      i64toi32_i32$0 = $1034$hi;
      i64toi32_i32$5 = $1038$hi;
      $545($7_1 + 544 | 0 | 0, $18_1 | 0, i64toi32_i32$3 | 0, $21_1 | 0, i64toi32_i32$1 | 0, $1034_1 | 0, i64toi32_i32$0 | 0, $1038_1 | 0, i64toi32_i32$5 | 0);
      i64toi32_i32$1 = ($7_1 + 544 | 0) + 8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $21_1 = i64toi32_i32$5;
      $21$hi = i64toi32_i32$0;
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 544 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 548 | 0) >> 2] | 0;
      $18_1 = i64toi32_i32$0;
      $18$hi = i64toi32_i32$5;
      }
      if ($2_1 >>> 0 > 111 >>> 0) {
      break label$67
      }
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$5 = $21$hi;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$0 = $21$hi;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = 1073676288;
      $557($7_1 + 464 | 0 | 0, $18_1 | 0, i64toi32_i32$5 | 0, $21_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$0 = $7_1;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 464 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 468 | 0) >> 2] | 0;
      $1052_1 = i64toi32_i32$3;
      $1052$hi = i64toi32_i32$1;
      i64toi32_i32$0 = (i64toi32_i32$0 + 464 | 0) + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $1056_1 = i64toi32_i32$1;
      $1056$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $1052$hi;
      i64toi32_i32$1 = $1056$hi;
      i64toi32_i32$0 = 0;
      i64toi32_i32$5 = 0;
      if ($547($1052_1 | 0, i64toi32_i32$3 | 0, $1056_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0) | 0) {
      break label$67
      }
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$5 = $21$hi;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$0 = $21$hi;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = 1073676288;
      $545($7_1 + 448 | 0 | 0, $18_1 | 0, i64toi32_i32$5 | 0, $21_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$0 = ($7_1 + 448 | 0) + 8 | 0;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $21_1 = i64toi32_i32$3;
      $21$hi = i64toi32_i32$1;
      i64toi32_i32$0 = $7_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 448 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 452 | 0) >> 2] | 0;
      $18_1 = i64toi32_i32$1;
      $18$hi = i64toi32_i32$3;
    }
    i64toi32_i32$3 = $20$hi;
    i64toi32_i32$3 = $19$hi;
    i64toi32_i32$3 = $18$hi;
    i64toi32_i32$3 = $21$hi;
    i64toi32_i32$3 = $20$hi;
    i64toi32_i32$1 = $19$hi;
    i64toi32_i32$0 = $18$hi;
    i64toi32_i32$5 = $21$hi;
    $545($7_1 + 432 | 0 | 0, $20_1 | 0, i64toi32_i32$3 | 0, $19_1 | 0, i64toi32_i32$1 | 0, $18_1 | 0, i64toi32_i32$0 | 0, $21_1 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 432 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 436 | 0) >> 2] | 0;
    $1077_1 = i64toi32_i32$5;
    $1077$hi = i64toi32_i32$0;
    i64toi32_i32$1 = (i64toi32_i32$1 + 432 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $1081_1 = i64toi32_i32$0;
    $1081$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $22$hi;
    i64toi32_i32$5 = $23$hi;
    i64toi32_i32$5 = $1077$hi;
    i64toi32_i32$0 = $1081$hi;
    i64toi32_i32$1 = $22$hi;
    i64toi32_i32$3 = $23$hi;
    $552($7_1 + 416 | 0 | 0, $1077_1 | 0, i64toi32_i32$5 | 0, $1081_1 | 0, i64toi32_i32$0 | 0, $22_1 | 0, i64toi32_i32$1 | 0, $23_1 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$0 = ($7_1 + 416 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$3;
    $19$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $7_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 416 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 420 | 0) >> 2] | 0;
    $20_1 = i64toi32_i32$1;
    $20$hi = i64toi32_i32$3;
    label$73 : {
      if (($13_1 & 2147483647 | 0 | 0) <= ($10_1 + -2 | 0 | 0)) {
      break label$73
      }
      i64toi32_i32$3 = $19$hi;
      i64toi32_i32$3 = $20$hi;
      i64toi32_i32$1 = $19$hi;
      $558(i64toi32_i32$0 + 400 | 0 | 0, $20_1 | 0, i64toi32_i32$3 | 0, $19_1 | 0, i64toi32_i32$1 | 0);
      i64toi32_i32$1 = i64toi32_i32$3;
      i64toi32_i32$1 = $19$hi;
      i64toi32_i32$1 = i64toi32_i32$3;
      i64toi32_i32$3 = $19$hi;
      i64toi32_i32$0 = 0;
      i64toi32_i32$5 = 1073610752;
      $542($7_1 + 384 | 0 | 0, $20_1 | 0, i64toi32_i32$1 | 0, $19_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0);
      i64toi32_i32$3 = $7_1;
      i64toi32_i32$5 = HEAP32[($7_1 + 400 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($7_1 + 404 | 0) >> 2] | 0;
      $1104_1 = i64toi32_i32$5;
      $1104$hi = i64toi32_i32$0;
      i64toi32_i32$3 = ($7_1 + 400 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
      $1108_1 = i64toi32_i32$0;
      $1108$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $1104$hi;
      i64toi32_i32$0 = $1108$hi;
      i64toi32_i32$3 = 0;
      i64toi32_i32$1 = 1081081856;
      $13_1 = $548($1104_1 | 0, i64toi32_i32$5 | 0, $1108_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$0 = ($7_1 + 384 | 0) + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $1113$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $19$hi;
      $14_1 = ($13_1 | 0) > (-1 | 0);
      i64toi32_i32$4 = $14_1;
      i64toi32_i32$3 = $1113$hi;
      $196_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $19$hi;
      i64toi32_i32$5 = $14_1 ? $196_1 : $19_1;
      i64toi32_i32$0 = $14_1 ? i64toi32_i32$3 : i64toi32_i32$1;
      $19_1 = i64toi32_i32$5;
      $19$hi = i64toi32_i32$0;
      i64toi32_i32$4 = $7_1;
      i64toi32_i32$0 = HEAP32[($7_1 + 384 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[($7_1 + 388 | 0) >> 2] | 0;
      $1120$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $20$hi;
      i64toi32_i32$3 = $14_1;
      i64toi32_i32$5 = $1120$hi;
      $197_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $20$hi;
      i64toi32_i32$1 = i64toi32_i32$3 ? $197_1 : $20_1;
      i64toi32_i32$4 = i64toi32_i32$3 ? i64toi32_i32$5 : i64toi32_i32$0;
      $20_1 = i64toi32_i32$1;
      $20$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $18$hi;
      i64toi32_i32$4 = $21$hi;
      i64toi32_i32$4 = $18$hi;
      i64toi32_i32$1 = $21$hi;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = 0;
      $11_1 = $547($18_1 | 0, $18$hi | 0, $21_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0) | 0;
      label$74 : {
      $12_1 = $12_1 + $14_1 | 0;
      if (($12_1 + 110 | 0 | 0) > ($10_1 | 0)) {
        break label$74
      }
      if (!(($8_1 & (($2_1 | 0) != ($1_1 | 0) | ($13_1 | 0) < (0 | 0) | 0) | 0) & ($11_1 | 0) != (0 | 0) | 0)) {
        break label$73
      }
      }
      HEAP32[($124() | 0) >> 2] = 68;
    }
    i64toi32_i32$0 = $20$hi;
    i64toi32_i32$0 = $19$hi;
    i64toi32_i32$0 = $20$hi;
    i64toi32_i32$3 = $19$hi;
    $553($7_1 + 368 | 0 | 0, $20_1 | 0, i64toi32_i32$0 | 0, $19_1 | 0, i64toi32_i32$3 | 0, $12_1 | 0);
    i64toi32_i32$1 = ($7_1 + 368 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $18_1 = i64toi32_i32$3;
    $18$hi = i64toi32_i32$0;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 368 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 372 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$0;
    $19$hi = i64toi32_i32$3;
    }
    i64toi32_i32$3 = $18$hi;
    i64toi32_i32$0 = $0_1;
    HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $18_1;
    HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$3;
    i64toi32_i32$3 = $19$hi;
    HEAP32[i64toi32_i32$0 >> 2] = $19_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$3;
    global$0 = $7_1 + 8976 | 0;
  }
  
  function $563($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, $3_1 = 0, $6$hi = 0, $6_1 = 0, $5_1 = 0, i64toi32_i32$3 = 0, $4_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $88$hi = 0, $90_1 = 0, $90$hi = 0, $139$hi = 0;
    label$1 : {
    label$2 : {
      $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
      if (($2_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
      break label$2
      }
      HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
      $3_1 = HEAPU8[$2_1 >> 0] | 0;
      break label$1;
    }
    $3_1 = $537($0_1 | 0) | 0;
    }
    label$3 : {
    label$4 : {
      label$5 : {
      label$6 : {
        switch ($3_1 + -43 | 0 | 0) {
        case 0:
        case 2:
        label$8 : {
          label$9 : {
          $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
          if (($2_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
            break label$9
          }
          HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
          $2_1 = HEAPU8[$2_1 >> 0] | 0;
          break label$8;
          }
          $2_1 = $537($0_1 | 0) | 0;
        }
        $4_1 = ($3_1 | 0) == (45 | 0);
        $5_1 = $2_1 + -58 | 0;
        if (!$1_1) {
          break label$5
        }
        if ($5_1 >>> 0 > -11 >>> 0) {
          break label$5
        }
        i64toi32_i32$2 = $0_1;
        i64toi32_i32$0 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
        i64toi32_i32$2 = i64toi32_i32$0;
        i64toi32_i32$0 = 0;
        i64toi32_i32$3 = 0;
        if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
          $18_1 = 1
        } else {
          if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
          if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
            $19_1 = 0
          } else {
            $19_1 = 1
          }
          $20_1 = $19_1;
          } else {
          $20_1 = 0
          }
          $18_1 = $20_1;
        }
        if ($18_1) {
          break label$4
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
        break label$4;
        default:
        break label$6;
        };
      }
      $5_1 = $3_1 + -58 | 0;
      $4_1 = 0;
      $2_1 = $3_1;
      }
      if ($5_1 >>> 0 < -10 >>> 0) {
      break label$4
      }
      i64toi32_i32$2 = 0;
      $6_1 = 0;
      $6$hi = i64toi32_i32$2;
      label$10 : {
      if (($2_1 + -48 | 0) >>> 0 >= 10 >>> 0) {
        break label$10
      }
      $3_1 = 0;
      label$11 : while (1) {
        $3_1 = $2_1 + Math_imul($3_1, 10) | 0;
        label$12 : {
        label$13 : {
          $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
          if (($2_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
          break label$13
          }
          HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
          $2_1 = HEAPU8[$2_1 >> 0] | 0;
          break label$12;
        }
        $2_1 = $537($0_1 | 0) | 0;
        }
        $3_1 = $3_1 + -48 | 0;
        label$14 : {
        $5_1 = $2_1 + -48 | 0;
        if ($5_1 >>> 0 > 9 >>> 0) {
          break label$14
        }
        if (($3_1 | 0) < (214748364 | 0)) {
          continue label$11
        }
        }
        break label$11;
      };
      i64toi32_i32$1 = $3_1;
      i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
      $6_1 = i64toi32_i32$1;
      $6$hi = i64toi32_i32$2;
      if ($5_1 >>> 0 >= 10 >>> 0) {
        break label$10
      }
      label$15 : while (1) {
        i64toi32_i32$2 = 0;
        $88$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $6$hi;
        i64toi32_i32$1 = 0;
        i64toi32_i32$1 = __wasm_i64_mul($6_1 | 0, i64toi32_i32$2 | 0, 10 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
        $90_1 = i64toi32_i32$1;
        $90$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $88$hi;
        i64toi32_i32$3 = $2_1;
        i64toi32_i32$1 = $90$hi;
        i64toi32_i32$0 = $90_1;
        i64toi32_i32$4 = $2_1 + i64toi32_i32$0 | 0;
        i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
        }
        $6_1 = i64toi32_i32$4;
        $6$hi = i64toi32_i32$5;
        label$16 : {
        label$17 : {
          $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
          if (($2_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
          break label$17
          }
          HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
          $2_1 = HEAPU8[$2_1 >> 0] | 0;
          break label$16;
        }
        $2_1 = $537($0_1 | 0) | 0;
        }
        i64toi32_i32$5 = $6$hi;
        i64toi32_i32$2 = $6_1;
        i64toi32_i32$3 = -1;
        i64toi32_i32$0 = -48;
        i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
        if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
        }
        $6_1 = i64toi32_i32$1;
        $6$hi = i64toi32_i32$4;
        label$18 : {
        $3_1 = $2_1 + -48 | 0;
        if ($3_1 >>> 0 > 9 >>> 0) {
          break label$18
        }
        i64toi32_i32$5 = i64toi32_i32$1;
        i64toi32_i32$2 = 21474836;
        i64toi32_i32$0 = 2061584302;
        if ((i64toi32_i32$4 | 0) < (i64toi32_i32$2 | 0)) {
          $21_1 = 1
        } else {
          if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$2 | 0)) {
          if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$0 >>> 0) {
            $22_1 = 0
          } else {
            $22_1 = 1
          }
          $23_1 = $22_1;
          } else {
          $23_1 = 0
          }
          $21_1 = $23_1;
        }
        if ($21_1) {
          continue label$15
        }
        }
        break label$15;
      };
      if ($3_1 >>> 0 >= 10 >>> 0) {
        break label$10
      }
      label$19 : while (1) {
        label$20 : {
        label$21 : {
          $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
          if (($2_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
          break label$21
          }
          HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
          $2_1 = HEAPU8[$2_1 >> 0] | 0;
          break label$20;
        }
        $2_1 = $537($0_1 | 0) | 0;
        }
        if (($2_1 + -48 | 0) >>> 0 < 10 >>> 0) {
        continue label$19
        }
        break label$19;
      };
      }
      label$22 : {
      i64toi32_i32$0 = $0_1;
      i64toi32_i32$5 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
      i64toi32_i32$4 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$5;
      i64toi32_i32$5 = 0;
      i64toi32_i32$2 = 0;
      if ((i64toi32_i32$4 | 0) < (i64toi32_i32$5 | 0)) {
        $24_1 = 1
      } else {
        if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$5 | 0)) {
        if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$2 >>> 0) {
          $25_1 = 0
        } else {
          $25_1 = 1
        }
        $26_1 = $25_1;
        } else {
        $26_1 = 0
        }
        $24_1 = $26_1;
      }
      if ($24_1) {
        break label$22
      }
      HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
      }
      i64toi32_i32$0 = $6$hi;
      i64toi32_i32$0 = 0;
      i64toi32_i32$2 = 0;
      i64toi32_i32$4 = $6$hi;
      i64toi32_i32$5 = $6_1;
      i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
      i64toi32_i32$1 = (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) + i64toi32_i32$4 | 0;
      i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$1 | 0;
      $139$hi = i64toi32_i32$1;
      i64toi32_i32$1 = i64toi32_i32$4;
      i64toi32_i32$4 = $4_1;
      i64toi32_i32$1 = $139$hi;
      i64toi32_i32$2 = $6$hi;
      i64toi32_i32$5 = i64toi32_i32$4 ? i64toi32_i32$3 : i64toi32_i32$5;
      i64toi32_i32$0 = i64toi32_i32$4 ? i64toi32_i32$1 : i64toi32_i32$2;
      $6_1 = i64toi32_i32$5;
      $6$hi = i64toi32_i32$0;
      break label$3;
    }
    i64toi32_i32$0 = -2147483648;
    $6_1 = 0;
    $6$hi = i64toi32_i32$0;
    i64toi32_i32$4 = $0_1;
    i64toi32_i32$0 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
    i64toi32_i32$4 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 0;
    if ((i64toi32_i32$5 | 0) < (i64toi32_i32$0 | 0)) {
      $27_1 = 1
    } else {
      if ((i64toi32_i32$5 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$4 >>> 0 >= i64toi32_i32$2 >>> 0) {
        $28_1 = 0
      } else {
        $28_1 = 1
      }
      $29_1 = $28_1;
      } else {
      $29_1 = 0
      }
      $27_1 = $29_1;
    }
    if ($27_1) {
      break label$3
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
    i64toi32_i32$4 = -2147483648;
    i64toi32_i32$5 = 0;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$4;
    return i64toi32_i32$5 | 0;
    }
    i64toi32_i32$5 = $6$hi;
    i64toi32_i32$4 = $6_1;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
    return i64toi32_i32$4 | 0;
  }
  
  function $564($0_1, $1_1, $2_1, $3_1, $3$hi) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $3$hi = $3$hi | 0;
    var i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $5_1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, $10$hi = 0, $10_1 = 0, $11$hi = 0, $7_1 = 0, $12$hi = 0, $11_1 = 0, $12_1 = 0, $13$hi = 0, $6_1 = 0, $13_1 = 0, $4_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $8_1 = 0, $9_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $195_1 = 0, $195$hi = 0, $249_1 = 0, $249$hi = 0, $348$hi = 0, $415$hi = 0;
    $4_1 = global$0 - 16 | 0;
    global$0 = $4_1;
    label$1 : {
    label$2 : {
      label$3 : {
      if ($1_1 >>> 0 > 36 >>> 0) {
        break label$3
      }
      if (($1_1 | 0) != (1 | 0)) {
        break label$2
      }
      }
      HEAP32[($124() | 0) >> 2] = 28;
      i64toi32_i32$0 = 0;
      $3_1 = 0;
      $3$hi = i64toi32_i32$0;
      break label$1;
    }
    label$4 : while (1) {
      label$5 : {
      label$6 : {
        $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
        break label$6
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
        $5_1 = HEAPU8[$5_1 >> 0] | 0;
        break label$5;
      }
      $5_1 = $537($0_1 | 0) | 0;
      }
      if ($565($5_1 | 0) | 0) {
      continue label$4
      }
      break label$4;
    };
    $6_1 = 0;
    label$7 : {
      label$8 : {
      switch ($5_1 + -43 | 0 | 0) {
      case 0:
      case 2:
        break label$8;
      default:
        break label$7;
      };
      }
      $6_1 = ($5_1 | 0) == (45 | 0) ? -1 : 0;
      label$9 : {
      $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
      if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
        break label$9
      }
      HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
      $5_1 = HEAPU8[$5_1 >> 0] | 0;
      break label$7;
      }
      $5_1 = $537($0_1 | 0) | 0;
    }
    label$10 : {
      label$11 : {
      label$12 : {
        label$13 : {
        label$14 : {
          if (($1_1 | 0) != (0 | 0) & ($1_1 | 0) != (16 | 0) | 0) {
          break label$14
          }
          if (($5_1 | 0) != (48 | 0)) {
          break label$14
          }
          label$15 : {
          label$16 : {
            $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
            if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
            break label$16
            }
            HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
            $5_1 = HEAPU8[$5_1 >> 0] | 0;
            break label$15;
          }
          $5_1 = $537($0_1 | 0) | 0;
          }
          label$17 : {
          if (($5_1 & -33 | 0 | 0) != (88 | 0)) {
            break label$17
          }
          label$18 : {
            label$19 : {
            $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
            if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
              break label$19
            }
            HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
            $5_1 = HEAPU8[$5_1 >> 0] | 0;
            break label$18;
            }
            $5_1 = $537($0_1 | 0) | 0;
          }
          $1_1 = 16;
          if ((HEAPU8[($5_1 + 70001 | 0) >> 0] | 0) >>> 0 < 16 >>> 0) {
            break label$12
          }
          i64toi32_i32$0 = 0;
          $3_1 = 0;
          $3$hi = i64toi32_i32$0;
          label$20 : {
            label$21 : {
            i64toi32_i32$2 = $0_1;
            i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 112 | 0) >> 2] | 0;
            i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 116 | 0) >> 2] | 0;
            i64toi32_i32$2 = i64toi32_i32$0;
            i64toi32_i32$0 = 0;
            i64toi32_i32$3 = 0;
            if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
              $31_1 = 1
            } else {
              if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
              if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
                $32_1 = 0
              } else {
                $32_1 = 1
              }
              $33_1 = $32_1;
              } else {
              $33_1 = 0
              }
              $31_1 = $33_1;
            }
            if ($31_1) {
              break label$21
            }
            $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
            HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + -1 | 0;
            if (!$2_1) {
              break label$20
            }
            HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + -2 | 0;
            break label$1;
            }
            if ($2_1) {
            break label$1
            }
          }
          i64toi32_i32$2 = 0;
          $3_1 = 0;
          $3$hi = i64toi32_i32$2;
          i64toi32_i32$2 = 0;
          $536($0_1 | 0, 0 | 0, i64toi32_i32$2 | 0);
          break label$1;
          }
          if ($1_1) {
          break label$13
          }
          $1_1 = 8;
          break label$12;
        }
        $1_1 = $1_1 ? $1_1 : 10;
        if ($1_1 >>> 0 > (HEAPU8[($5_1 + 70001 | 0) >> 0] | 0) >>> 0) {
          break label$13
        }
        i64toi32_i32$2 = 0;
        $3_1 = 0;
        $3$hi = i64toi32_i32$2;
        label$22 : {
          i64toi32_i32$3 = $0_1;
          i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 112 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 116 | 0) >> 2] | 0;
          i64toi32_i32$3 = i64toi32_i32$2;
          i64toi32_i32$2 = 0;
          i64toi32_i32$0 = 0;
          if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
          $34_1 = 1
          } else {
          if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
            if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0) {
            $35_1 = 0
            } else {
            $35_1 = 1
            }
            $36_1 = $35_1;
          } else {
            $36_1 = 0
          }
          $34_1 = $36_1;
          }
          if ($34_1) {
          break label$22
          }
          HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
        }
        i64toi32_i32$3 = 0;
        $536($0_1 | 0, 0 | 0, i64toi32_i32$3 | 0);
        HEAP32[($124() | 0) >> 2] = 28;
        break label$1;
        }
        if (($1_1 | 0) != (10 | 0)) {
        break label$12
        }
        i64toi32_i32$3 = 0;
        $10_1 = 0;
        $10$hi = i64toi32_i32$3;
        label$23 : {
        $2_1 = $5_1 + -48 | 0;
        if ($2_1 >>> 0 > 9 >>> 0) {
          break label$23
        }
        $5_1 = 0;
        label$24 : while (1) {
          label$25 : {
          label$26 : {
            $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
            if (($1_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
            break label$26
            }
            HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
            $1_1 = HEAPU8[$1_1 >> 0] | 0;
            break label$25;
          }
          $1_1 = $537($0_1 | 0) | 0;
          }
          $5_1 = Math_imul($5_1, 10) + $2_1 | 0;
          label$27 : {
          $2_1 = $1_1 + -48 | 0;
          if ($2_1 >>> 0 > 9 >>> 0) {
            break label$27
          }
          if ($5_1 >>> 0 < 429496729 >>> 0) {
            continue label$24
          }
          }
          break label$24;
        };
        i64toi32_i32$3 = 0;
        $10_1 = $5_1;
        $10$hi = i64toi32_i32$3;
        }
        if ($2_1 >>> 0 > 9 >>> 0) {
        break label$10
        }
        i64toi32_i32$3 = $10$hi;
        i64toi32_i32$1 = 0;
        i64toi32_i32$1 = __wasm_i64_mul($10_1 | 0, i64toi32_i32$3 | 0, 10 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
        $11_1 = i64toi32_i32$1;
        $11$hi = i64toi32_i32$3;
        i64toi32_i32$3 = 0;
        $12_1 = $2_1;
        $12$hi = i64toi32_i32$3;
        label$28 : while (1) {
        label$29 : {
          label$30 : {
          $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
          if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
            break label$30
          }
          HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
          $5_1 = HEAPU8[$5_1 >> 0] | 0;
          break label$29;
          }
          $5_1 = $537($0_1 | 0) | 0;
        }
        i64toi32_i32$3 = $11$hi;
        i64toi32_i32$3 = $12$hi;
        i64toi32_i32$3 = $11$hi;
        i64toi32_i32$0 = $11_1;
        i64toi32_i32$1 = $12$hi;
        i64toi32_i32$2 = $12_1;
        i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
        i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
          i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
        }
        $10_1 = i64toi32_i32$4;
        $10$hi = i64toi32_i32$5;
        label$31 : {
          label$32 : {
          label$33 : {
            $1_1 = $5_1 + -48 | 0;
            if ($1_1 >>> 0 > 9 >>> 0) {
            break label$33
            }
            i64toi32_i32$3 = i64toi32_i32$4;
            i64toi32_i32$0 = 429496729;
            i64toi32_i32$2 = -1717986918;
            if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0) {
            break label$32
            }
          }
          if ($1_1 >>> 0 <= 9 >>> 0) {
            break label$31
          }
          break label$10;
          }
          i64toi32_i32$3 = $10$hi;
          i64toi32_i32$5 = 0;
          i64toi32_i32$5 = __wasm_i64_mul($10_1 | 0, i64toi32_i32$3 | 0, 10 | 0, i64toi32_i32$5 | 0) | 0;
          i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
          $11_1 = i64toi32_i32$5;
          $11$hi = i64toi32_i32$3;
          i64toi32_i32$3 = 0;
          $12_1 = $1_1;
          $12$hi = i64toi32_i32$3;
          i64toi32_i32$2 = $1_1;
          i64toi32_i32$5 = -1;
          i64toi32_i32$0 = -1;
          i64toi32_i32$5 = i64toi32_i32$3 ^ i64toi32_i32$5 | 0;
          $195_1 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
          $195$hi = i64toi32_i32$5;
          i64toi32_i32$5 = $11$hi;
          i64toi32_i32$3 = $11_1;
          i64toi32_i32$2 = $195$hi;
          i64toi32_i32$0 = $195_1;
          if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$3 >>> 0 <= i64toi32_i32$0 >>> 0 | 0) | 0) {
          continue label$28
          }
        }
        break label$28;
        };
        $1_1 = 10;
        break label$11;
      }
      label$34 : {
        if (!($1_1 & ($1_1 + -1 | 0) | 0)) {
        break label$34
        }
        i64toi32_i32$3 = 0;
        $10_1 = 0;
        $10$hi = i64toi32_i32$3;
        label$35 : {
        $7_1 = HEAPU8[($5_1 + 70001 | 0) >> 0] | 0;
        if ($1_1 >>> 0 <= $7_1 >>> 0) {
          break label$35
        }
        $2_1 = 0;
        label$36 : while (1) {
          label$37 : {
          label$38 : {
            $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
            if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
            break label$38
            }
            HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
            $5_1 = HEAPU8[$5_1 >> 0] | 0;
            break label$37;
          }
          $5_1 = $537($0_1 | 0) | 0;
          }
          $2_1 = $7_1 + Math_imul($2_1, $1_1) | 0;
          label$39 : {
          $7_1 = HEAPU8[($5_1 + 70001 | 0) >> 0] | 0;
          if ($1_1 >>> 0 <= $7_1 >>> 0) {
            break label$39
          }
          if ($2_1 >>> 0 < 119304647 >>> 0) {
            continue label$36
          }
          }
          break label$36;
        };
        i64toi32_i32$3 = 0;
        $10_1 = $2_1;
        $10$hi = i64toi32_i32$3;
        }
        if ($1_1 >>> 0 <= $7_1 >>> 0) {
        break label$11
        }
        i64toi32_i32$3 = 0;
        $11_1 = $1_1;
        $11$hi = i64toi32_i32$3;
        label$40 : while (1) {
        i64toi32_i32$3 = $10$hi;
        i64toi32_i32$3 = $11$hi;
        i64toi32_i32$3 = $10$hi;
        i64toi32_i32$5 = $11$hi;
        i64toi32_i32$5 = __wasm_i64_mul($10_1 | 0, i64toi32_i32$3 | 0, $11_1 | 0, i64toi32_i32$5 | 0) | 0;
        i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
        $12_1 = i64toi32_i32$5;
        $12$hi = i64toi32_i32$3;
        i64toi32_i32$3 = 0;
        i64toi32_i32$0 = $7_1;
        i64toi32_i32$5 = 0;
        i64toi32_i32$2 = 255;
        i64toi32_i32$5 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
        $13_1 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
        $13$hi = i64toi32_i32$5;
        i64toi32_i32$3 = $13_1;
        i64toi32_i32$0 = -1;
        i64toi32_i32$2 = -1;
        i64toi32_i32$0 = i64toi32_i32$5 ^ i64toi32_i32$0 | 0;
        $249_1 = i64toi32_i32$3 ^ i64toi32_i32$2 | 0;
        $249$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $12$hi;
        i64toi32_i32$5 = $12_1;
        i64toi32_i32$3 = $249$hi;
        i64toi32_i32$2 = $249_1;
        if (i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0) {
          break label$11
        }
        label$41 : {
          label$42 : {
          $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
          if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
            break label$42
          }
          HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
          $5_1 = HEAPU8[$5_1 >> 0] | 0;
          break label$41;
          }
          $5_1 = $537($0_1 | 0) | 0;
        }
        i64toi32_i32$5 = $12$hi;
        i64toi32_i32$5 = $13$hi;
        i64toi32_i32$5 = $12$hi;
        i64toi32_i32$2 = $12_1;
        i64toi32_i32$0 = $13$hi;
        i64toi32_i32$3 = $13_1;
        i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
        if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
          i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
        }
        $10_1 = i64toi32_i32$1;
        $10$hi = i64toi32_i32$4;
        $7_1 = HEAPU8[($5_1 + 70001 | 0) >> 0] | 0;
        if ($1_1 >>> 0 <= $7_1 >>> 0) {
          break label$11
        }
        i64toi32_i32$4 = $11$hi;
        i64toi32_i32$4 = $10$hi;
        i64toi32_i32$4 = $11$hi;
        i64toi32_i32$2 = 0;
        i64toi32_i32$5 = $10$hi;
        i64toi32_i32$3 = 0;
        $554($4_1 | 0, $11_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$2 | 0, i64toi32_i32$1 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$3 | 0);
        i64toi32_i32$2 = $4_1;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
        i64toi32_i32$2 = i64toi32_i32$3;
        i64toi32_i32$3 = 0;
        i64toi32_i32$4 = 0;
        if ((i64toi32_i32$2 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$3 | 0) | 0) {
          break label$11
        }
        continue label$40;
        };
      }
      $8_1 = HEAP8[(((Math_imul($1_1, 23) >>> 5 | 0) & 7 | 0) + 70257 | 0) >> 0] | 0;
      i64toi32_i32$2 = 0;
      $10_1 = 0;
      $10$hi = i64toi32_i32$2;
      label$43 : {
        $2_1 = HEAPU8[($5_1 + 70001 | 0) >> 0] | 0;
        if ($1_1 >>> 0 <= $2_1 >>> 0) {
        break label$43
        }
        $7_1 = 0;
        label$44 : while (1) {
        label$45 : {
          label$46 : {
          $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
          if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
            break label$46
          }
          HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
          $5_1 = HEAPU8[$5_1 >> 0] | 0;
          break label$45;
          }
          $5_1 = $537($0_1 | 0) | 0;
        }
        $9_1 = $7_1 << $8_1 | 0;
        $7_1 = $2_1 | $9_1 | 0;
        label$47 : {
          $2_1 = HEAPU8[($5_1 + 70001 | 0) >> 0] | 0;
          if ($1_1 >>> 0 <= $2_1 >>> 0) {
          break label$47
          }
          if ($9_1 >>> 0 < 134217728 >>> 0) {
          continue label$44
          }
        }
        break label$44;
        };
        i64toi32_i32$2 = 0;
        $10_1 = $7_1;
        $10$hi = i64toi32_i32$2;
      }
      if ($1_1 >>> 0 <= $2_1 >>> 0) {
        break label$11
      }
      i64toi32_i32$2 = 0;
      $12_1 = $8_1;
      $12$hi = i64toi32_i32$2;
      i64toi32_i32$2 = -1;
      i64toi32_i32$4 = -1;
      i64toi32_i32$5 = $12$hi;
      i64toi32_i32$3 = $12_1;
      i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$5 = 0;
        $37_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
      } else {
        i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
        $37_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
      }
      $13_1 = $37_1;
      $13$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $10$hi;
      i64toi32_i32$5 = $13$hi;
      i64toi32_i32$2 = $13_1;
      i64toi32_i32$4 = $10$hi;
      i64toi32_i32$3 = $10_1;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0) {
        break label$11
      }
      label$48 : while (1) {
        i64toi32_i32$2 = 0;
        i64toi32_i32$3 = $2_1;
        i64toi32_i32$5 = 0;
        i64toi32_i32$4 = 255;
        i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
        $11_1 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
        $11$hi = i64toi32_i32$5;
        label$49 : {
        label$50 : {
          $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
          if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
          break label$50
          }
          HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
          $5_1 = HEAPU8[$5_1 >> 0] | 0;
          break label$49;
        }
        $5_1 = $537($0_1 | 0) | 0;
        }
        i64toi32_i32$5 = $10$hi;
        i64toi32_i32$5 = $12$hi;
        i64toi32_i32$5 = $10$hi;
        i64toi32_i32$2 = $10_1;
        i64toi32_i32$3 = $12$hi;
        i64toi32_i32$4 = $12_1;
        i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
        $38_1 = 0;
        } else {
        i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
        $38_1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
        }
        $348$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $11$hi;
        i64toi32_i32$3 = $348$hi;
        i64toi32_i32$5 = $38_1;
        i64toi32_i32$2 = $11$hi;
        i64toi32_i32$4 = $11_1;
        i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
        $10_1 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
        $10$hi = i64toi32_i32$2;
        $2_1 = HEAPU8[($5_1 + 70001 | 0) >> 0] | 0;
        if ($1_1 >>> 0 <= $2_1 >>> 0) {
        break label$11
        }
        i64toi32_i32$2 = $13$hi;
        i64toi32_i32$2 = $10$hi;
        i64toi32_i32$3 = $10_1;
        i64toi32_i32$5 = $13$hi;
        i64toi32_i32$4 = $13_1;
        if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 <= i64toi32_i32$4 >>> 0 | 0) | 0) {
        continue label$48
        }
        break label$48;
      };
      }
      if ($1_1 >>> 0 <= (HEAPU8[($5_1 + 70001 | 0) >> 0] | 0) >>> 0) {
      break label$10
      }
      label$51 : while (1) {
      label$52 : {
        label$53 : {
        $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
          break label$53
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
        $5_1 = HEAPU8[$5_1 >> 0] | 0;
        break label$52;
        }
        $5_1 = $537($0_1 | 0) | 0;
      }
      if ($1_1 >>> 0 > (HEAPU8[($5_1 + 70001 | 0) >> 0] | 0) >>> 0) {
        continue label$51
      }
      break label$51;
      };
      HEAP32[($124() | 0) >> 2] = 68;
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$4 = $3_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$5 = 1;
      i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
      $6_1 = !(i64toi32_i32$4 & i64toi32_i32$5 | 0 | i64toi32_i32$2 | 0) ? $6_1 : 0;
      i64toi32_i32$2 = i64toi32_i32$3;
      i64toi32_i32$2 = i64toi32_i32$3;
      $10_1 = i64toi32_i32$4;
      $10$hi = i64toi32_i32$3;
    }
    label$54 : {
      i64toi32_i32$3 = $0_1;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 112 | 0) >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 116 | 0) >> 2] | 0;
      i64toi32_i32$3 = i64toi32_i32$2;
      i64toi32_i32$2 = 0;
      i64toi32_i32$5 = 0;
      if ((i64toi32_i32$4 | 0) < (i64toi32_i32$2 | 0)) {
      $39_1 = 1
      } else {
      if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$2 | 0)) {
        if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$5 >>> 0) {
        $40_1 = 0
        } else {
        $40_1 = 1
        }
        $41_1 = $40_1;
      } else {
        $41_1 = 0
      }
      $39_1 = $41_1;
      }
      if ($39_1) {
      break label$54
      }
      HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
    }
    label$55 : {
      i64toi32_i32$3 = $10$hi;
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$3 = $10$hi;
      i64toi32_i32$5 = $10_1;
      i64toi32_i32$4 = $3$hi;
      i64toi32_i32$2 = $3_1;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0) {
      break label$55
      }
      label$56 : {
      i64toi32_i32$5 = i64toi32_i32$4;
      if (i64toi32_i32$2 & 1 | 0) {
        break label$56
      }
      if ($6_1) {
        break label$56
      }
      HEAP32[($124() | 0) >> 2] = 68;
      i64toi32_i32$3 = -1;
      i64toi32_i32$4 = -1;
      i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
      i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $3_1 = i64toi32_i32$0;
      $3$hi = i64toi32_i32$1;
      break label$1;
      }
      i64toi32_i32$1 = $10$hi;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$1 = $10$hi;
      i64toi32_i32$5 = $10_1;
      i64toi32_i32$2 = $3$hi;
      i64toi32_i32$4 = $3_1;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 <= i64toi32_i32$4 >>> 0 | 0) | 0) {
      break label$55
      }
      HEAP32[($124() | 0) >> 2] = 68;
      break label$1;
    }
    i64toi32_i32$5 = $10$hi;
    i64toi32_i32$1 = $6_1;
    i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
    $3_1 = i64toi32_i32$1;
    $3$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $10$hi;
    i64toi32_i32$4 = $10_1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$2 = $3_1;
    i64toi32_i32$1 = i64toi32_i32$5 ^ i64toi32_i32$1 | 0;
    $415$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $415$hi;
    i64toi32_i32$5 = i64toi32_i32$4 ^ i64toi32_i32$2 | 0;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
    i64toi32_i32$0 = (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) + i64toi32_i32$4 | 0;
    i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
    $3_1 = i64toi32_i32$3;
    $3$hi = i64toi32_i32$0;
    }
    global$0 = $4_1 + 16 | 0;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$5 = $3_1;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
    return i64toi32_i32$5 | 0;
  }
  
  function $565($0_1) {
    $0_1 = $0_1 | 0;
    return ($0_1 | 0) == (32 | 0) | ($0_1 + -9 | 0) >>> 0 < 5 >>> 0 | 0 | 0;
  }
  
  function $566($0_1, $0$hi, $1_1, $1$hi) {
    $0_1 = $0_1 | 0;
    $0$hi = $0$hi | 0;
    $1_1 = $1_1 | 0;
    $1$hi = $1$hi | 0;
    var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $4_1 = 0, $7_1 = 0, $7$hi = 0, $3_1 = 0, $2_1 = 0, $5_1 = 0, $8_1 = 0, $37_1 = 0, $8$hi = 0, $39_1 = 0, $40_1 = 0, $6_1 = 0, $41_1 = 0, $42_1 = 0, $26_1 = 0, $30_1 = 0, $38_1 = 0, $38$hi = 0, $80_1 = 0, $80$hi = 0, $97_1 = 0, $97$hi = 0, $102_1 = 0, $102$hi = 0, $106_1 = 0, $106$hi = 0, $109_1 = 0, $110$hi = 0, $113_1 = 0, $117_1 = 0, $125_1 = 0, $125$hi = 0, $142_1 = 0;
    $2_1 = global$0 - 32 | 0;
    global$0 = $2_1;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$1 = 65535;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $7_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $7$hi = i64toi32_i32$1;
    label$1 : {
    label$2 : {
      i64toi32_i32$1 = i64toi32_i32$0;
      i64toi32_i32$1 = i64toi32_i32$0;
      i64toi32_i32$0 = i64toi32_i32$2;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = 48;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $37_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      } else {
      i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      $37_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
      }
      i64toi32_i32$1 = $37_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 32767;
      i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
      $8_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
      $8$hi = i64toi32_i32$0;
      $3_1 = $8_1;
      if (($3_1 + -16257 | 0) >>> 0 > 253 >>> 0) {
      break label$2
      }
      i64toi32_i32$0 = $7$hi;
      i64toi32_i32$2 = $7_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = 25;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $39_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      } else {
      i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      $39_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
      }
      $4_1 = $39_1;
      label$3 : {
      label$4 : {
        i64toi32_i32$1 = $0$hi;
        $26_1 = !($0_1 | i64toi32_i32$1 | 0);
        i64toi32_i32$1 = $1$hi;
        i64toi32_i32$0 = $1_1;
        i64toi32_i32$2 = 0;
        i64toi32_i32$3 = 33554431;
        i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
        $7_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
        $7$hi = i64toi32_i32$2;
        i64toi32_i32$1 = $7_1;
        i64toi32_i32$0 = 0;
        i64toi32_i32$3 = 16777216;
        $30_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$2;
        i64toi32_i32$1 = i64toi32_i32$2;
        i64toi32_i32$3 = $7_1;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 16777216;
        if ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) | 0 ? $26_1 : $30_1) {
        break label$4
        }
        $4_1 = $4_1 + 1 | 0;
        break label$3;
      }
      i64toi32_i32$3 = $0$hi;
      i64toi32_i32$3 = $7$hi;
      i64toi32_i32$0 = $7_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$2 = 16777216;
      i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
      $38_1 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
      $38$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $0$hi;
      i64toi32_i32$3 = $0_1;
      i64toi32_i32$0 = $38$hi;
      i64toi32_i32$2 = $38_1;
      i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
      i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
      i64toi32_i32$3 = 0;
      i64toi32_i32$2 = 0;
      if ((i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | 0) {
        break label$3
      }
      $4_1 = ($4_1 & 1 | 0) + $4_1 | 0;
      }
      $5_1 = $4_1 >>> 0 > 8388607 >>> 0;
      $4_1 = $5_1 ? 0 : $4_1;
      $3_1 = ($5_1 ? -16255 : -16256) + $3_1 | 0;
      break label$1;
    }
    label$5 : {
      i64toi32_i32$1 = $0$hi;
      i64toi32_i32$1 = $7$hi;
      i64toi32_i32$1 = $0$hi;
      i64toi32_i32$2 = $0_1;
      i64toi32_i32$0 = $7$hi;
      i64toi32_i32$3 = $7_1;
      i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
      if (!(i64toi32_i32$2 | i64toi32_i32$3 | 0 | i64toi32_i32$0 | 0)) {
      break label$5
      }
      i64toi32_i32$0 = $8$hi;
      i64toi32_i32$1 = $8_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = 32767;
      if ((i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | 0) {
      break label$5
      }
      i64toi32_i32$1 = $7$hi;
      i64toi32_i32$3 = $7_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$2 = 25;
      i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = 0;
      $40_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      } else {
      i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      $40_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
      }
      $4_1 = $40_1 | 4194304 | 0;
      $3_1 = 255;
      break label$1;
    }
    label$6 : {
      if ($3_1 >>> 0 <= 16510 >>> 0) {
      break label$6
      }
      $3_1 = 255;
      $4_1 = 0;
      break label$1;
    }
    label$7 : {
      i64toi32_i32$0 = $8$hi;
      $5_1 = !($8_1 | i64toi32_i32$0 | 0);
      $6_1 = $5_1 ? 16256 : 16257;
      $4_1 = $6_1 - $3_1 | 0;
      if (($4_1 | 0) <= (112 | 0)) {
      break label$7
      }
      $4_1 = 0;
      $3_1 = 0;
      break label$1;
    }
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$0 = $7$hi;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$3 = 65536;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
    $80_1 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
    $80$hi = i64toi32_i32$3;
    i64toi32_i32$4 = $5_1;
    i64toi32_i32$3 = i64toi32_i32$0;
    i64toi32_i32$1 = $80$hi;
    i64toi32_i32$2 = i64toi32_i32$4 ? $7_1 : $80_1;
    i64toi32_i32$0 = i64toi32_i32$4 ? i64toi32_i32$0 : i64toi32_i32$1;
    $7_1 = i64toi32_i32$2;
    $7$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$2 = $7$hi;
    $538($2_1 + 16 | 0 | 0, $0_1 | 0, i64toi32_i32$0 | 0, $7_1 | 0, i64toi32_i32$2 | 0, 128 - $4_1 | 0 | 0);
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$2 = $7$hi;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = $7$hi;
    $541($2_1 | 0, $0_1 | 0, i64toi32_i32$2 | 0, $7_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0);
    i64toi32_i32$4 = $2_1 + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $0_1 = i64toi32_i32$0;
    $0$hi = i64toi32_i32$2;
    i64toi32_i32$4 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 25;
    i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = 0;
      $41_1 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
    } else {
      i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
      $41_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
    }
    $4_1 = $41_1;
    label$8 : {
      label$9 : {
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $97_1 = i64toi32_i32$0;
      $97$hi = i64toi32_i32$4;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
      $102_1 = i64toi32_i32$4;
      $102$hi = i64toi32_i32$0;
      i64toi32_i32$2 = (i64toi32_i32$2 + 16 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $106_1 = i64toi32_i32$0;
      $106$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $102$hi;
      i64toi32_i32$2 = $102_1;
      i64toi32_i32$0 = $106$hi;
      i64toi32_i32$1 = $106_1;
      i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
      i64toi32_i32$4 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
      i64toi32_i32$2 = 0;
      i64toi32_i32$1 = 0;
      $109_1 = ($6_1 | 0) != ($3_1 | 0) & ((i64toi32_i32$4 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | 0) | 0;
      i64toi32_i32$4 = 0;
      $110$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $97$hi;
      i64toi32_i32$1 = $97_1;
      i64toi32_i32$0 = $110$hi;
      i64toi32_i32$2 = $109_1;
      i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
      $7_1 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
      $7$hi = i64toi32_i32$0;
      $113_1 = !($7_1 | i64toi32_i32$0 | 0);
      i64toi32_i32$0 = $0$hi;
      i64toi32_i32$4 = $0_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$2 = 33554431;
      i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
      $0_1 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
      $0$hi = i64toi32_i32$1;
      i64toi32_i32$0 = $0_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$2 = 16777216;
      $117_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$2 = $0_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$4 = 16777216;
      if ((i64toi32_i32$2 | 0) == (i64toi32_i32$4 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $113_1 : $117_1) {
        break label$9
      }
      $4_1 = $4_1 + 1 | 0;
      break label$8;
      }
      i64toi32_i32$2 = $7$hi;
      i64toi32_i32$2 = $0$hi;
      i64toi32_i32$4 = $0_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$1 = 16777216;
      i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
      $125_1 = i64toi32_i32$4 ^ i64toi32_i32$1 | 0;
      $125$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $7$hi;
      i64toi32_i32$2 = $7_1;
      i64toi32_i32$4 = $125$hi;
      i64toi32_i32$1 = $125_1;
      i64toi32_i32$4 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
      i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
      i64toi32_i32$2 = 0;
      i64toi32_i32$1 = 0;
      if ((i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$4 | 0) != (i64toi32_i32$2 | 0) | 0) {
      break label$8
      }
      $4_1 = ($4_1 & 1 | 0) + $4_1 | 0;
    }
    $3_1 = $4_1 >>> 0 > 8388607 >>> 0;
    $4_1 = $3_1 ? $4_1 ^ 8388608 | 0 : $4_1;
    }
    global$0 = $2_1 + 32 | 0;
    $142_1 = $3_1 << 23 | 0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$2 = 32;
    i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = 0;
    $42_1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
    } else {
    i64toi32_i32$4 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
    $42_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$3 | 0) | 0;
    }
    return Math_fround((wasm2js_scratch_store_i32(2, $142_1 | ($42_1 & -2147483648 | 0) | 0 | $4_1 | 0), wasm2js_scratch_load_f32()));
  }
  
  function $567($0_1, $0$hi, $1_1, $1$hi) {
    $0_1 = $0_1 | 0;
    $0$hi = $0$hi | 0;
    $1_1 = $1_1 | 0;
    $1$hi = $1$hi | 0;
    var i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, $7_1 = 0, $7$hi = 0, $3_1 = 0, $2_1 = 0, $8_1 = 0, $8$hi = 0, $6_1 = 0, $47_1 = 0, $48_1 = 0, $49_1 = 0, $50_1 = 0, $51_1 = 0, $4_1 = 0, $5_1 = 0, $52_1 = 0, $53_1 = 0, $54_1 = 0, $23_1 = 0, $23$hi = 0, $25$hi = 0, $39$hi = 0, $48$hi = 0, $58_1 = 0, $58$hi = 0, $60$hi = 0, $79_1 = 0, $79$hi = 0, $92_1 = 0, $92$hi = 0, $96$hi = 0, $99_1 = 0, $99$hi = 0, $104_1 = 0, $104$hi = 0, $108_1 = 0, $108$hi = 0, $111_1 = 0, $112$hi = 0, $121$hi = 0, $125_1 = 0, $125$hi = 0, $136$hi = 0, $138_1 = 0, $138$hi = 0, $139$hi = 0;
    $2_1 = global$0 - 32 | 0;
    global$0 = $2_1;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$1 = 65535;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $7_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $7$hi = i64toi32_i32$1;
    label$1 : {
    label$2 : {
      i64toi32_i32$1 = i64toi32_i32$0;
      i64toi32_i32$1 = i64toi32_i32$0;
      i64toi32_i32$0 = i64toi32_i32$2;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = 48;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $47_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      } else {
      i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      $47_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
      }
      i64toi32_i32$1 = $47_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 32767;
      i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
      $8_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
      $8$hi = i64toi32_i32$0;
      $3_1 = $8_1;
      if (($3_1 + -15361 | 0) >>> 0 > 2045 >>> 0) {
      break label$2
      }
      i64toi32_i32$0 = $0$hi;
      i64toi32_i32$2 = $0_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = 60;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $48_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      } else {
      i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      $48_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
      }
      $23_1 = $48_1;
      $23$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $7$hi;
      i64toi32_i32$0 = $7_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = 4;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
      $49_1 = 0;
      } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
      $49_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
      }
      $25$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $23$hi;
      i64toi32_i32$1 = $23_1;
      i64toi32_i32$0 = $25$hi;
      i64toi32_i32$3 = $49_1;
      i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
      $7_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
      $7$hi = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      $8_1 = $3_1 + -15360 | 0;
      $8$hi = i64toi32_i32$0;
      label$3 : {
      label$4 : {
        i64toi32_i32$0 = $0$hi;
        i64toi32_i32$2 = $0_1;
        i64toi32_i32$1 = 268435455;
        i64toi32_i32$3 = -1;
        i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
        $0_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
        $0$hi = i64toi32_i32$1;
        i64toi32_i32$0 = $0_1;
        i64toi32_i32$2 = 134217728;
        i64toi32_i32$3 = 1;
        if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0) {
        break label$4
        }
        i64toi32_i32$0 = $7$hi;
        i64toi32_i32$3 = $7_1;
        i64toi32_i32$1 = 0;
        i64toi32_i32$2 = 1;
        i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
        i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
        }
        $7_1 = i64toi32_i32$4;
        $7$hi = i64toi32_i32$5;
        break label$3;
      }
      i64toi32_i32$5 = $0$hi;
      i64toi32_i32$0 = $0_1;
      i64toi32_i32$3 = 134217728;
      i64toi32_i32$2 = 0;
      if ((i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$3 | 0) | 0) {
        break label$3
      }
      i64toi32_i32$0 = $7$hi;
      i64toi32_i32$2 = $7_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$3 = 1;
      i64toi32_i32$5 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
      $39$hi = i64toi32_i32$5;
      i64toi32_i32$5 = i64toi32_i32$0;
      i64toi32_i32$5 = $39$hi;
      i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
      i64toi32_i32$2 = $7$hi;
      i64toi32_i32$3 = $7_1;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $7_1 = i64toi32_i32$1;
      $7$hi = i64toi32_i32$4;
      }
      i64toi32_i32$4 = $7$hi;
      i64toi32_i32$5 = $7_1;
      i64toi32_i32$0 = 1048575;
      i64toi32_i32$3 = -1;
      $3_1 = i64toi32_i32$4 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$2 = $3_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$0 = i64toi32_i32$2 ? 0 : $7_1;
      i64toi32_i32$3 = i64toi32_i32$2 ? i64toi32_i32$5 : i64toi32_i32$4;
      $0_1 = i64toi32_i32$0;
      $0$hi = i64toi32_i32$3;
      i64toi32_i32$3 = 0;
      $48$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $8$hi;
      i64toi32_i32$3 = $48$hi;
      i64toi32_i32$0 = $8$hi;
      i64toi32_i32$4 = $8_1;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
      i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $7_1 = i64toi32_i32$5;
      $7$hi = i64toi32_i32$1;
      break label$1;
    }
    label$5 : {
      i64toi32_i32$1 = $0$hi;
      i64toi32_i32$1 = $7$hi;
      i64toi32_i32$1 = $0$hi;
      i64toi32_i32$3 = $0_1;
      i64toi32_i32$2 = $7$hi;
      i64toi32_i32$4 = $7_1;
      i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
      if (!(i64toi32_i32$3 | i64toi32_i32$4 | 0 | i64toi32_i32$2 | 0)) {
      break label$5
      }
      i64toi32_i32$2 = $8$hi;
      i64toi32_i32$1 = $8_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$4 = 32767;
      if ((i64toi32_i32$1 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
      break label$5
      }
      i64toi32_i32$1 = $0$hi;
      i64toi32_i32$4 = $0_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = 60;
      i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $50_1 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
      } else {
      i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
      $50_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
      }
      $58_1 = $50_1;
      $58$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $7$hi;
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$3 = 4;
      i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
      $51_1 = 0;
      } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$0 | 0) | 0;
      $51_1 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
      }
      $60$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $58$hi;
      i64toi32_i32$2 = $58_1;
      i64toi32_i32$1 = $60$hi;
      i64toi32_i32$3 = $51_1;
      i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
      i64toi32_i32$4 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
      i64toi32_i32$2 = 524288;
      i64toi32_i32$3 = 0;
      i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
      $0_1 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
      $0$hi = i64toi32_i32$2;
      i64toi32_i32$2 = 0;
      $7_1 = 2047;
      $7$hi = i64toi32_i32$2;
      break label$1;
    }
    label$6 : {
      if ($3_1 >>> 0 <= 17406 >>> 0) {
      break label$6
      }
      i64toi32_i32$2 = 0;
      $7_1 = 2047;
      $7$hi = i64toi32_i32$2;
      i64toi32_i32$2 = 0;
      $0_1 = 0;
      $0$hi = i64toi32_i32$2;
      break label$1;
    }
    label$7 : {
      i64toi32_i32$2 = $8$hi;
      $4_1 = !($8_1 | i64toi32_i32$2 | 0);
      $5_1 = $4_1 ? 15360 : 15361;
      $6_1 = $5_1 - $3_1 | 0;
      if (($6_1 | 0) <= (112 | 0)) {
      break label$7
      }
      i64toi32_i32$2 = 0;
      $0_1 = 0;
      $0$hi = i64toi32_i32$2;
      i64toi32_i32$2 = 0;
      $7_1 = 0;
      $7$hi = i64toi32_i32$2;
      break label$1;
    }
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $7$hi;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$4 = 65536;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
    $79_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
    $79$hi = i64toi32_i32$4;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$4 = i64toi32_i32$2;
    i64toi32_i32$1 = $79$hi;
    i64toi32_i32$3 = i64toi32_i32$0 ? $7_1 : $79_1;
    i64toi32_i32$2 = i64toi32_i32$0 ? i64toi32_i32$2 : i64toi32_i32$1;
    $7_1 = i64toi32_i32$3;
    $7$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$3 = $7$hi;
    $538($2_1 + 16 | 0 | 0, $0_1 | 0, i64toi32_i32$2 | 0, $7_1 | 0, i64toi32_i32$3 | 0, 128 - $6_1 | 0 | 0);
    i64toi32_i32$3 = i64toi32_i32$2;
    i64toi32_i32$3 = $7$hi;
    i64toi32_i32$3 = i64toi32_i32$2;
    i64toi32_i32$2 = $7$hi;
    $541($2_1 | 0, $0_1 | 0, i64toi32_i32$3 | 0, $7_1 | 0, i64toi32_i32$2 | 0, $6_1 | 0);
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $7_1 = i64toi32_i32$2;
    $7$hi = i64toi32_i32$3;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 60;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $52_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
    } else {
      i64toi32_i32$2 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
      $52_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $92_1 = $52_1;
    $92$hi = i64toi32_i32$2;
    i64toi32_i32$3 = $2_1 + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    i64toi32_i32$3 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 4;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
      $53_1 = 0;
    } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
      $53_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
    }
    $96$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $92$hi;
    i64toi32_i32$0 = $92_1;
    i64toi32_i32$3 = $96$hi;
    i64toi32_i32$1 = $53_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $0_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $0$hi = i64toi32_i32$3;
    label$8 : {
      label$9 : {
      i64toi32_i32$3 = $7$hi;
      i64toi32_i32$2 = $7_1;
      i64toi32_i32$0 = 268435455;
      i64toi32_i32$1 = -1;
      i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
      $99_1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
      $99$hi = i64toi32_i32$0;
      i64toi32_i32$3 = $2_1;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 16 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 20 | 0) >> 2] | 0;
      $104_1 = i64toi32_i32$0;
      $104$hi = i64toi32_i32$2;
      i64toi32_i32$3 = (i64toi32_i32$3 + 16 | 0) + 8 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
      $108_1 = i64toi32_i32$2;
      $108$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $104$hi;
      i64toi32_i32$3 = $104_1;
      i64toi32_i32$2 = $108$hi;
      i64toi32_i32$1 = $108_1;
      i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
      i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
      i64toi32_i32$3 = 0;
      i64toi32_i32$1 = 0;
      $111_1 = ($5_1 | 0) != ($3_1 | 0) & ((i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) | 0;
      i64toi32_i32$0 = 0;
      $112$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $99$hi;
      i64toi32_i32$1 = $99_1;
      i64toi32_i32$2 = $112$hi;
      i64toi32_i32$3 = $111_1;
      i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
      $7_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
      $7$hi = i64toi32_i32$2;
      i64toi32_i32$0 = $7_1;
      i64toi32_i32$1 = 134217728;
      i64toi32_i32$3 = 1;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0) {
        break label$9
      }
      i64toi32_i32$0 = $0$hi;
      i64toi32_i32$3 = $0_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$1 = 1;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $0_1 = i64toi32_i32$4;
      $0$hi = i64toi32_i32$5;
      break label$8;
      }
      i64toi32_i32$5 = $7$hi;
      i64toi32_i32$0 = $7_1;
      i64toi32_i32$3 = 134217728;
      i64toi32_i32$1 = 0;
      if ((i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$3 | 0) | 0) {
      break label$8
      }
      i64toi32_i32$0 = $0$hi;
      i64toi32_i32$1 = $0_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$3 = 1;
      i64toi32_i32$5 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
      $121$hi = i64toi32_i32$5;
      i64toi32_i32$5 = i64toi32_i32$0;
      i64toi32_i32$5 = $121$hi;
      i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
      i64toi32_i32$1 = $0$hi;
      i64toi32_i32$3 = $0_1;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $0_1 = i64toi32_i32$2;
      $0$hi = i64toi32_i32$4;
    }
    i64toi32_i32$4 = $0$hi;
    i64toi32_i32$5 = $0_1;
    i64toi32_i32$0 = 1048576;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = i64toi32_i32$4 ^ i64toi32_i32$0 | 0;
    $125_1 = i64toi32_i32$5 ^ i64toi32_i32$3 | 0;
    $125$hi = i64toi32_i32$0;
    i64toi32_i32$0 = i64toi32_i32$4;
    i64toi32_i32$4 = i64toi32_i32$5;
    i64toi32_i32$5 = 1048575;
    i64toi32_i32$3 = -1;
    $3_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$4 = $125$hi;
    i64toi32_i32$5 = i64toi32_i32$1 ? $125_1 : $0_1;
    i64toi32_i32$3 = i64toi32_i32$1 ? i64toi32_i32$4 : i64toi32_i32$0;
    $0_1 = i64toi32_i32$5;
    $0$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $7_1 = i64toi32_i32$1;
    $7$hi = i64toi32_i32$3;
    }
    global$0 = $2_1 + 32 | 0;
    i64toi32_i32$3 = $7$hi;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = 52;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    $54_1 = 0;
    } else {
    i64toi32_i32$5 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
    $54_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    }
    $136$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$1 = -2147483648;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
    $138_1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
    $138$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $136$hi;
    i64toi32_i32$5 = $54_1;
    i64toi32_i32$3 = $138$hi;
    i64toi32_i32$0 = $138_1;
    i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
    $139$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$3 = $139$hi;
    i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    i64toi32_i32$5 = $0$hi;
    i64toi32_i32$0 = $0_1;
    i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
    wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 | i64toi32_i32$0 | 0 | 0);
    wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$5 | 0);
    return +(+wasm2js_scratch_load_f64());
  }
  
  function $568($0_1) {
    $0_1 = $0_1 | 0;
    label$1 : {
    if ($0_1) {
      break label$1
    }
    return 1 | 0;
    }
    return !(HEAP32[$0_1 >> 2] | 0) | 0;
  }
  
  function $569($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, $5_1 = 0, i64toi32_i32$2 = 0, $9_1 = 0, i64toi32_i32$5 = 0, $14_1 = 0, $3_1 = 0, $11_1 = 0, $8_1 = 0, $13_1 = 0, $19$hi = 0, $12_1 = 0, $15_1 = 0, $20$hi = 0, $17_1 = 0, $6_1 = 0, $19_1 = 0, $10_1 = 0, $20_1 = 0, $21$hi = 0, $16_1 = 0, $18_1 = 0, $21_1 = 0, i64toi32_i32$6 = 0, $4_1 = 0, $62_1 = 0, $63_1 = 0, $64_1 = 0, $65_1 = 0, $66_1 = 0, $67_1 = 0, $68_1 = 0, $69_1 = 0, $70_1 = 0, $71_1 = 0, $72_1 = 0, $73_1 = 0, $74_1 = 0, $75_1 = 0, $76_1 = 0, $77_1 = 0, $7_1 = 0, $80$hi = 0, $82$hi = 0, $87_1 = 0, $87$hi = 0, $146$hi = 0, $148$hi = 0, $154_1 = 0, $154$hi = 0, $282$hi = 0, $284$hi = 0, $289_1 = 0, $289$hi = 0, $329_1 = 0, $329$hi = 0, $335_1 = 0, $335$hi = 0, $336$hi = 0, $435_1 = 0, $435$hi = 0, $441_1 = 0, $441$hi = 0, $442$hi = 0, $653_1 = 0, $653$hi = 0, $658_1 = 0, $658$hi = 0, $686$hi = 0, $688$hi = 0, $694_1 = 0, $694$hi = 0;
    $3_1 = global$0 - 304 | 0;
    global$0 = $3_1;
    label$1 : {
    label$2 : {
      if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) >= (0 | 0)) {
      break label$2
      }
      $4_1 = 1;
      break label$1;
    }
    $4_1 = !($153($0_1 | 0) | 0);
    }
    label$3 : {
    label$4 : {
      label$5 : {
      if (HEAP32[($0_1 + 4 | 0) >> 2] | 0) {
        break label$5
      }
      $157($0_1 | 0) | 0;
      if (!(HEAP32[($0_1 + 4 | 0) >> 2] | 0)) {
        break label$4
      }
      }
      label$6 : {
      $5_1 = HEAPU8[$1_1 >> 0] | 0;
      if ($5_1) {
        break label$6
      }
      $6_1 = 0;
      break label$3;
      }
      $7_1 = $3_1 + 16 | 0;
      i64toi32_i32$0 = 0;
      $19_1 = 0;
      $19$hi = i64toi32_i32$0;
      $6_1 = 0;
      label$7 : {
      label$8 : {
        label$9 : {
        label$10 : {
          label$11 : {
          label$12 : {
            label$13 : while (1) {
            label$14 : {
              label$15 : {
              $5_1 = $5_1 & 255 | 0;
              if (!($570($5_1 | 0) | 0)) {
                break label$15
              }
              label$16 : while (1) {
                $5_1 = $1_1;
                $1_1 = $1_1 + 1 | 0;
                if ($570(HEAPU8[($5_1 + 1 | 0) >> 0] | 0 | 0) | 0) {
                continue label$16
                }
                break label$16;
              };
              i64toi32_i32$0 = 0;
              $536($0_1 | 0, 0 | 0, i64toi32_i32$0 | 0);
              label$17 : while (1) {
                label$18 : {
                label$19 : {
                  $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                  if (($1_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                  break label$19
                  }
                  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
                  $1_1 = HEAPU8[$1_1 >> 0] | 0;
                  break label$18;
                }
                $1_1 = $537($0_1 | 0) | 0;
                }
                if ($570($1_1 | 0) | 0) {
                continue label$17
                }
                break label$17;
              };
              $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
              label$20 : {
                i64toi32_i32$2 = $0_1;
                i64toi32_i32$0 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
                i64toi32_i32$1 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
                i64toi32_i32$2 = i64toi32_i32$0;
                i64toi32_i32$0 = 0;
                i64toi32_i32$3 = 0;
                if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
                $62_1 = 1
                } else {
                if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
                  if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
                  $63_1 = 0
                  } else {
                  $63_1 = 1
                  }
                  $64_1 = $63_1;
                } else {
                  $64_1 = 0
                }
                $62_1 = $64_1;
                }
                if ($62_1) {
                break label$20
                }
                $1_1 = $1_1 + -1 | 0;
                HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
              }
              i64toi32_i32$3 = $0_1;
              i64toi32_i32$2 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
              i64toi32_i32$1 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
              $80$hi = i64toi32_i32$1;
              i64toi32_i32$1 = $19$hi;
              i64toi32_i32$1 = $80$hi;
              i64toi32_i32$3 = i64toi32_i32$2;
              i64toi32_i32$2 = $19$hi;
              i64toi32_i32$0 = $19_1;
              i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
              i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
              if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
                i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
              }
              $82$hi = i64toi32_i32$5;
              i64toi32_i32$3 = $1_1 - (HEAP32[($0_1 + 44 | 0) >> 2] | 0) | 0;
              i64toi32_i32$5 = i64toi32_i32$3 >> 31 | 0;
              $87_1 = i64toi32_i32$3;
              $87$hi = i64toi32_i32$5;
              i64toi32_i32$5 = $82$hi;
              i64toi32_i32$1 = i64toi32_i32$4;
              i64toi32_i32$3 = $87$hi;
              i64toi32_i32$0 = $87_1;
              i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
              i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
              if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
                i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
              }
              $19_1 = i64toi32_i32$2;
              $19$hi = i64toi32_i32$4;
              break label$14;
              }
              label$21 : {
              label$22 : {
                label$23 : {
                label$24 : {
                  if (($5_1 | 0) != (37 | 0)) {
                  break label$24
                  }
                  $5_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
                  if (($5_1 | 0) == (42 | 0)) {
                  break label$23
                  }
                  if (($5_1 | 0) != (37 | 0)) {
                  break label$22
                  }
                }
                i64toi32_i32$4 = 0;
                $536($0_1 | 0, 0 | 0, i64toi32_i32$4 | 0);
                label$25 : {
                  label$26 : {
                  if ((HEAPU8[$1_1 >> 0] | 0 | 0) != (37 | 0)) {
                    break label$26
                  }
                  label$27 : while (1) {
                    label$28 : {
                    label$29 : {
                      $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                      if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                      break label$29
                      }
                      HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
                      $5_1 = HEAPU8[$5_1 >> 0] | 0;
                      break label$28;
                    }
                    $5_1 = $537($0_1 | 0) | 0;
                    }
                    if ($570($5_1 | 0) | 0) {
                    continue label$27
                    }
                    break label$27;
                  };
                  $1_1 = $1_1 + 1 | 0;
                  break label$25;
                  }
                  label$30 : {
                  $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                  if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                    break label$30
                  }
                  HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
                  $5_1 = HEAPU8[$5_1 >> 0] | 0;
                  break label$25;
                  }
                  $5_1 = $537($0_1 | 0) | 0;
                }
                label$31 : {
                  if (($5_1 | 0) == (HEAPU8[$1_1 >> 0] | 0 | 0)) {
                  break label$31
                  }
                  label$32 : {
                  i64toi32_i32$5 = $0_1;
                  i64toi32_i32$4 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
                  i64toi32_i32$1 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
                  i64toi32_i32$5 = i64toi32_i32$4;
                  i64toi32_i32$4 = 0;
                  i64toi32_i32$0 = 0;
                  if ((i64toi32_i32$1 | 0) < (i64toi32_i32$4 | 0)) {
                    $65_1 = 1
                  } else {
                    if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$4 | 0)) {
                    if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$0 >>> 0) {
                      $66_1 = 0
                    } else {
                      $66_1 = 1
                    }
                    $67_1 = $66_1;
                    } else {
                    $67_1 = 0
                    }
                    $65_1 = $67_1;
                  }
                  if ($65_1) {
                    break label$32
                  }
                  HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
                  }
                  if (($5_1 | 0) > (-1 | 0)) {
                  break label$3
                  }
                  if ($6_1) {
                  break label$3
                  }
                  break label$4;
                }
                i64toi32_i32$0 = $0_1;
                i64toi32_i32$5 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
                i64toi32_i32$1 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
                $146$hi = i64toi32_i32$1;
                i64toi32_i32$1 = $19$hi;
                i64toi32_i32$1 = $146$hi;
                i64toi32_i32$0 = i64toi32_i32$5;
                i64toi32_i32$5 = $19$hi;
                i64toi32_i32$4 = $19_1;
                i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
                i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
                if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
                  i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
                }
                $148$hi = i64toi32_i32$2;
                i64toi32_i32$0 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) - (HEAP32[($0_1 + 44 | 0) >> 2] | 0) | 0;
                i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
                $154_1 = i64toi32_i32$0;
                $154$hi = i64toi32_i32$2;
                i64toi32_i32$2 = $148$hi;
                i64toi32_i32$1 = i64toi32_i32$3;
                i64toi32_i32$0 = $154$hi;
                i64toi32_i32$4 = $154_1;
                i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
                i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
                if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
                  i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
                }
                $19_1 = i64toi32_i32$5;
                $19$hi = i64toi32_i32$3;
                $5_1 = $1_1;
                break label$14;
                }
                $5_1 = $1_1 + 2 | 0;
                $8_1 = 0;
                break label$21;
              }
              label$33 : {
                $9_1 = $5_1 + -48 | 0;
                if ($9_1 >>> 0 > 9 >>> 0) {
                break label$33
                }
                if ((HEAPU8[($1_1 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
                break label$33
                }
                $5_1 = $1_1 + 3 | 0;
                $8_1 = $571($2_1 | 0, $9_1 | 0) | 0;
                break label$21;
              }
              $5_1 = $1_1 + 1 | 0;
              $8_1 = HEAP32[$2_1 >> 2] | 0;
              $2_1 = $2_1 + 4 | 0;
              }
              $10_1 = 0;
              $9_1 = 0;
              label$34 : {
              $1_1 = HEAPU8[$5_1 >> 0] | 0;
              if (($1_1 + -48 | 0) >>> 0 > 9 >>> 0) {
                break label$34
              }
              label$35 : while (1) {
                $9_1 = (Math_imul($9_1, 10) + $1_1 | 0) + -48 | 0;
                $1_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
                $5_1 = $5_1 + 1 | 0;
                if (($1_1 + -48 | 0) >>> 0 < 10 >>> 0) {
                continue label$35
                }
                break label$35;
              };
              }
              label$36 : {
              label$37 : {
                if (($1_1 | 0) == (109 | 0)) {
                break label$37
                }
                $11_1 = $5_1;
                break label$36;
              }
              $11_1 = $5_1 + 1 | 0;
              $12_1 = 0;
              $10_1 = ($8_1 | 0) != (0 | 0);
              $1_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
              $13_1 = 0;
              }
              $5_1 = $11_1 + 1 | 0;
              $14_1 = 3;
              $15_1 = $10_1;
              label$38 : {
              label$39 : {
                switch (($1_1 & 255 | 0) + -65 | 0 | 0) {
                case 39:
                $1_1 = (HEAPU8[($11_1 + 1 | 0) >> 0] | 0 | 0) == (104 | 0);
                $5_1 = $1_1 ? $11_1 + 2 | 0 : $5_1;
                $14_1 = $1_1 ? -2 : -1;
                break label$38;
                case 43:
                $1_1 = (HEAPU8[($11_1 + 1 | 0) >> 0] | 0 | 0) == (108 | 0);
                $5_1 = $1_1 ? $11_1 + 2 | 0 : $5_1;
                $14_1 = $1_1 ? 3 : 1;
                break label$38;
                case 51:
                case 57:
                $14_1 = 1;
                break label$38;
                case 11:
                $14_1 = 2;
                break label$38;
                case 41:
                break label$38;
                case 0:
                case 2:
                case 4:
                case 5:
                case 6:
                case 18:
                case 23:
                case 26:
                case 32:
                case 34:
                case 35:
                case 36:
                case 37:
                case 38:
                case 40:
                case 45:
                case 46:
                case 47:
                case 50:
                case 52:
                case 55:
                break label$39;
                default:
                break label$8;
                };
              }
              $14_1 = 0;
              $5_1 = $11_1;
              }
              $1_1 = HEAPU8[$5_1 >> 0] | 0;
              $11_1 = ($1_1 & 47 | 0 | 0) == (3 | 0);
              $16_1 = $11_1 ? 1 : $14_1;
              label$44 : {
              $17_1 = $11_1 ? $1_1 | 32 | 0 : $1_1;
              if (($17_1 | 0) == (91 | 0)) {
                break label$44
              }
              label$45 : {
                label$46 : {
                if (($17_1 | 0) == (110 | 0)) {
                  break label$46
                }
                if (($17_1 | 0) != (99 | 0)) {
                  break label$45
                }
                $9_1 = ($9_1 | 0) > (1 | 0) ? $9_1 : 1;
                break label$44;
                }
                i64toi32_i32$3 = $19$hi;
                $572($8_1 | 0, $16_1 | 0, $19_1 | 0, i64toi32_i32$3 | 0);
                break label$14;
              }
              i64toi32_i32$3 = 0;
              $536($0_1 | 0, 0 | 0, i64toi32_i32$3 | 0);
              label$47 : while (1) {
                label$48 : {
                label$49 : {
                  $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                  if (($1_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                  break label$49
                  }
                  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
                  $1_1 = HEAPU8[$1_1 >> 0] | 0;
                  break label$48;
                }
                $1_1 = $537($0_1 | 0) | 0;
                }
                if ($570($1_1 | 0) | 0) {
                continue label$47
                }
                break label$47;
              };
              $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
              label$50 : {
                i64toi32_i32$2 = $0_1;
                i64toi32_i32$3 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
                i64toi32_i32$1 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
                i64toi32_i32$2 = i64toi32_i32$3;
                i64toi32_i32$3 = 0;
                i64toi32_i32$4 = 0;
                if ((i64toi32_i32$1 | 0) < (i64toi32_i32$3 | 0)) {
                $68_1 = 1
                } else {
                if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$3 | 0)) {
                  if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$4 >>> 0) {
                  $69_1 = 0
                  } else {
                  $69_1 = 1
                  }
                  $70_1 = $69_1;
                } else {
                  $70_1 = 0
                }
                $68_1 = $70_1;
                }
                if ($68_1) {
                break label$50
                }
                $1_1 = $1_1 + -1 | 0;
                HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
              }
              i64toi32_i32$4 = $0_1;
              i64toi32_i32$2 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
              i64toi32_i32$1 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
              $282$hi = i64toi32_i32$1;
              i64toi32_i32$1 = $19$hi;
              i64toi32_i32$1 = $282$hi;
              i64toi32_i32$4 = i64toi32_i32$2;
              i64toi32_i32$2 = $19$hi;
              i64toi32_i32$3 = $19_1;
              i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
              i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
              if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
                i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
              }
              $284$hi = i64toi32_i32$5;
              i64toi32_i32$4 = $1_1 - (HEAP32[($0_1 + 44 | 0) >> 2] | 0) | 0;
              i64toi32_i32$5 = i64toi32_i32$4 >> 31 | 0;
              $289_1 = i64toi32_i32$4;
              $289$hi = i64toi32_i32$5;
              i64toi32_i32$5 = $284$hi;
              i64toi32_i32$1 = i64toi32_i32$0;
              i64toi32_i32$4 = $289$hi;
              i64toi32_i32$3 = $289_1;
              i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
              i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
              if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
                i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
              }
              $19_1 = i64toi32_i32$2;
              $19$hi = i64toi32_i32$0;
              }
              i64toi32_i32$1 = $9_1;
              i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
              $20_1 = i64toi32_i32$1;
              $20$hi = i64toi32_i32$0;
              $536($0_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0);
              label$51 : {
              label$52 : {
                $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                if (($1_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                break label$52
                }
                HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
                break label$51;
              }
              if (($537($0_1 | 0) | 0 | 0) < (0 | 0)) {
                break label$9
              }
              }
              label$53 : {
              i64toi32_i32$5 = $0_1;
              i64toi32_i32$0 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
              i64toi32_i32$1 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
              i64toi32_i32$5 = i64toi32_i32$0;
              i64toi32_i32$0 = 0;
              i64toi32_i32$3 = 0;
              if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
                $71_1 = 1
              } else {
                if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
                if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0) {
                  $72_1 = 0
                } else {
                  $72_1 = 1
                }
                $73_1 = $72_1;
                } else {
                $73_1 = 0
                }
                $71_1 = $73_1;
              }
              if ($71_1) {
                break label$53
              }
              HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
              }
              $1_1 = 16;
              label$54 : {
              label$55 : {
                label$56 : {
                label$57 : {
                  label$58 : {
                  switch ($17_1 + -88 | 0 | 0) {
                  default:
                    $1_1 = $17_1 + -65 | 0;
                    if ($1_1 >>> 0 > 6 >>> 0) {
                    break label$54
                    }
                    if (!((1 << $1_1 | 0) & 113 | 0)) {
                    break label$54
                    }
                  case 9:
                  case 13:
                  case 14:
                  case 15:
                    $559($3_1 + 8 | 0 | 0, $0_1 | 0, $16_1 | 0, 0 | 0);
                    i64toi32_i32$3 = $0_1;
                    i64toi32_i32$5 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
                    i64toi32_i32$1 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
                    $329_1 = i64toi32_i32$5;
                    $329$hi = i64toi32_i32$1;
                    i64toi32_i32$5 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) - (HEAP32[($0_1 + 44 | 0) >> 2] | 0) | 0;
                    i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
                    $335_1 = i64toi32_i32$5;
                    $335$hi = i64toi32_i32$1;
                    i64toi32_i32$1 = 0;
                    i64toi32_i32$3 = 0;
                    i64toi32_i32$5 = $335$hi;
                    i64toi32_i32$0 = $335_1;
                    i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
                    i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0;
                    i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
                    i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
                    $336$hi = i64toi32_i32$2;
                    i64toi32_i32$2 = $329$hi;
                    i64toi32_i32$1 = $329_1;
                    i64toi32_i32$3 = $336$hi;
                    i64toi32_i32$0 = i64toi32_i32$4;
                    if ((i64toi32_i32$1 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
                    break label$56
                    }
                    break label$10;
                  case 3:
                  case 11:
                  case 27:
                    label$64 : {
                    if (($17_1 | 16 | 0 | 0) != (115 | 0)) {
                      break label$64
                    }
                    $115($3_1 + 32 | 0 | 0, -1 | 0, 257 | 0) | 0;
                    HEAP8[($3_1 + 32 | 0) >> 0] = 0;
                    if (($17_1 | 0) != (115 | 0)) {
                      break label$55
                    }
                    HEAP8[($3_1 + 65 | 0) >> 0] = 0;
                    HEAP8[($3_1 + 46 | 0) >> 0] = 0;
                    $74_1 = 0;
                    HEAP16[($3_1 + 42 | 0) >> 1] = $74_1;
                    HEAP16[($3_1 + 44 | 0) >> 1] = $74_1 >>> 16 | 0;
                    break label$55;
                    }
                    $14_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
                    $1_1 = ($14_1 | 0) == (94 | 0);
                    $115($3_1 + 32 | 0 | 0, $1_1 | 0, 257 | 0) | 0;
                    HEAP8[($3_1 + 32 | 0) >> 0] = 0;
                    $15_1 = $1_1 ? $5_1 + 2 | 0 : $5_1 + 1 | 0;
                    label$65 : {
                    label$66 : {
                      label$67 : {
                      label$68 : {
                        $1_1 = HEAPU8[($5_1 + ($1_1 ? 2 : 1) | 0) >> 0] | 0;
                        if (($1_1 | 0) == (45 | 0)) {
                        break label$68
                        }
                        if (($1_1 | 0) == (93 | 0)) {
                        break label$67
                        }
                        $11_1 = ($14_1 | 0) != (94 | 0);
                        $5_1 = $15_1;
                        break label$65;
                      }
                      $11_1 = ($14_1 | 0) != (94 | 0);
                      HEAP8[($3_1 + 78 | 0) >> 0] = $11_1;
                      break label$66;
                      }
                      $11_1 = ($14_1 | 0) != (94 | 0);
                      HEAP8[($3_1 + 126 | 0) >> 0] = $11_1;
                    }
                    $5_1 = $15_1 + 1 | 0;
                    }
                    label$69 : while (1) {
                    label$70 : {
                      label$71 : {
                      $14_1 = HEAPU8[$5_1 >> 0] | 0;
                      if (($14_1 | 0) == (45 | 0)) {
                        break label$71
                      }
                      if (!$14_1) {
                        break label$9
                      }
                      if (($14_1 | 0) == (93 | 0)) {
                        break label$55
                      }
                      break label$70;
                      }
                      $14_1 = 45;
                      $18_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
                      if (!$18_1) {
                      break label$70
                      }
                      if (($18_1 | 0) == (93 | 0)) {
                      break label$70
                      }
                      $15_1 = $5_1 + 1 | 0;
                      label$72 : {
                      label$73 : {
                        $1_1 = HEAPU8[($5_1 + -1 | 0) >> 0] | 0;
                        if ($1_1 >>> 0 < $18_1 >>> 0) {
                        break label$73
                        }
                        $14_1 = $18_1;
                        break label$72;
                      }
                      label$74 : while (1) {
                        $1_1 = $1_1 + 1 | 0;
                        HEAP8[(($3_1 + 32 | 0) + $1_1 | 0) >> 0] = $11_1;
                        $14_1 = HEAPU8[$15_1 >> 0] | 0;
                        if ($1_1 >>> 0 < $14_1 >>> 0) {
                        continue label$74
                        }
                        break label$74;
                      };
                      }
                      $5_1 = $15_1;
                    }
                    HEAP8[(($14_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] = $11_1;
                    $5_1 = $5_1 + 1 | 0;
                    continue label$69;
                    };
                  case 23:
                    $1_1 = 8;
                    break label$57;
                  case 12:
                  case 29:
                    $1_1 = 10;
                    break label$57;
                  case 1:
                  case 2:
                  case 4:
                  case 5:
                  case 6:
                  case 7:
                  case 8:
                  case 10:
                  case 16:
                  case 18:
                  case 19:
                  case 20:
                  case 21:
                  case 22:
                  case 25:
                  case 26:
                  case 28:
                  case 30:
                  case 31:
                    break label$54;
                  case 0:
                  case 24:
                  case 32:
                    break label$57;
                  case 17:
                    break label$58;
                  };
                  }
                  $1_1 = 0;
                }
                i64toi32_i32$1 = -1;
                i64toi32_i32$1 = $564($0_1 | 0, $1_1 | 0, 0 | 0, -1 | 0, i64toi32_i32$1 | 0) | 0;
                i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
                $20_1 = i64toi32_i32$1;
                $20$hi = i64toi32_i32$2;
                i64toi32_i32$0 = $0_1;
                i64toi32_i32$2 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
                i64toi32_i32$1 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
                $435_1 = i64toi32_i32$2;
                $435$hi = i64toi32_i32$1;
                i64toi32_i32$2 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) - (HEAP32[($0_1 + 44 | 0) >> 2] | 0) | 0;
                i64toi32_i32$1 = i64toi32_i32$2 >> 31 | 0;
                $441_1 = i64toi32_i32$2;
                $441$hi = i64toi32_i32$1;
                i64toi32_i32$1 = 0;
                i64toi32_i32$0 = 0;
                i64toi32_i32$2 = $441$hi;
                i64toi32_i32$3 = $441_1;
                i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
                i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0;
                i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
                i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$4 | 0;
                $442$hi = i64toi32_i32$4;
                i64toi32_i32$4 = $435$hi;
                i64toi32_i32$1 = $435_1;
                i64toi32_i32$0 = $442$hi;
                i64toi32_i32$3 = i64toi32_i32$5;
                if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) | 0) {
                  break label$10
                }
                label$75 : {
                  if (($17_1 | 0) != (112 | 0)) {
                  break label$75
                  }
                  if (!$8_1) {
                  break label$75
                  }
                  i64toi32_i32$1 = $20$hi;
                  HEAP32[$8_1 >> 2] = $20_1;
                  break label$54;
                }
                i64toi32_i32$1 = $20$hi;
                $572($8_1 | 0, $16_1 | 0, $20_1 | 0, i64toi32_i32$1 | 0);
                break label$54;
                }
                if (!$8_1) {
                break label$54
                }
                i64toi32_i32$3 = $7_1;
                i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
                i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
                $20_1 = i64toi32_i32$1;
                $20$hi = i64toi32_i32$4;
                i64toi32_i32$3 = $3_1;
                i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] | 0;
                i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] | 0;
                $21_1 = i64toi32_i32$4;
                $21$hi = i64toi32_i32$1;
                label$76 : {
                switch ($16_1 | 0) {
                case 0:
                  i64toi32_i32$1 = $21$hi;
                  i64toi32_i32$1 = $20$hi;
                  i64toi32_i32$1 = $21$hi;
                  i64toi32_i32$4 = $20$hi;
                  HEAPF32[$8_1 >> 2] = Math_fround($566($21_1 | 0, i64toi32_i32$1 | 0, $20_1 | 0, i64toi32_i32$4 | 0));
                  break label$54;
                case 1:
                  i64toi32_i32$4 = $21$hi;
                  i64toi32_i32$4 = $20$hi;
                  i64toi32_i32$4 = $21$hi;
                  i64toi32_i32$1 = $20$hi;
                  HEAPF64[$8_1 >> 3] = +$567($21_1 | 0, i64toi32_i32$4 | 0, $20_1 | 0, i64toi32_i32$1 | 0);
                  break label$54;
                case 2:
                  break label$76;
                default:
                  break label$54;
                };
                }
                i64toi32_i32$1 = $21$hi;
                i64toi32_i32$4 = $8_1;
                HEAP32[i64toi32_i32$4 >> 2] = $21_1;
                HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$1;
                i64toi32_i32$1 = $20$hi;
                HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = $20_1;
                HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$1;
                break label$54;
              }
              $11_1 = ($17_1 | 0) != (99 | 0);
              $14_1 = $11_1 ? 31 : $9_1 + 1 | 0;
              label$79 : {
                label$80 : {
                if (($16_1 | 0) != (1 | 0)) {
                  break label$80
                }
                $9_1 = $8_1;
                label$81 : {
                  if (!$10_1) {
                  break label$81
                  }
                  $9_1 = $126($14_1 << 2 | 0 | 0) | 0;
                  if (!$9_1) {
                  break label$11
                  }
                }
                i64toi32_i32$4 = $3_1;
                i64toi32_i32$1 = 0;
                HEAP32[(i64toi32_i32$4 + 296 | 0) >> 2] = 0;
                HEAP32[(i64toi32_i32$4 + 300 | 0) >> 2] = i64toi32_i32$1;
                $1_1 = 0;
                label$82 : while (1) {
                  $13_1 = $9_1;
                  label$83 : {
                  label$84 : while (1) {
                    label$85 : {
                    label$86 : {
                      $9_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                      if (($9_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                      break label$86
                      }
                      HEAP32[($0_1 + 4 | 0) >> 2] = $9_1 + 1 | 0;
                      $9_1 = HEAPU8[$9_1 >> 0] | 0;
                      break label$85;
                    }
                    $9_1 = $537($0_1 | 0) | 0;
                    }
                    if (!(HEAPU8[(($9_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] | 0)) {
                    break label$83
                    }
                    HEAP8[($3_1 + 27 | 0) >> 0] = $9_1;
                    $9_1 = $463($3_1 + 28 | 0 | 0, $3_1 + 27 | 0 | 0, 1 | 0, $3_1 + 296 | 0 | 0) | 0;
                    if (($9_1 | 0) == (-2 | 0)) {
                    continue label$84
                    }
                    label$87 : {
                    if (($9_1 | 0) != (-1 | 0)) {
                      break label$87
                    }
                    $12_1 = 0;
                    break label$9;
                    }
                    label$88 : {
                    if (!$13_1) {
                      break label$88
                    }
                    HEAP32[($13_1 + ($1_1 << 2 | 0) | 0) >> 2] = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
                    $1_1 = $1_1 + 1 | 0;
                    }
                    if (!$10_1) {
                    continue label$84
                    }
                    if (($1_1 | 0) != ($14_1 | 0)) {
                    continue label$84
                    }
                    break label$84;
                  };
                  $15_1 = 1;
                  $12_1 = 0;
                  $14_1 = $14_1 << 1 | 0 | 1 | 0;
                  $9_1 = $129($13_1 | 0, $14_1 << 2 | 0 | 0) | 0;
                  if ($9_1) {
                    continue label$82
                  }
                  break label$8;
                  }
                  break label$82;
                };
                $12_1 = 0;
                $14_1 = $13_1;
                if (!($568($3_1 + 296 | 0 | 0) | 0)) {
                  break label$9
                }
                break label$79;
                }
                label$89 : {
                if (!$10_1) {
                  break label$89
                }
                $1_1 = 0;
                $9_1 = $126($14_1 | 0) | 0;
                if (!$9_1) {
                  break label$11
                }
                label$90 : while (1) {
                  $13_1 = $9_1;
                  label$91 : while (1) {
                  label$92 : {
                    label$93 : {
                    $9_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                    if (($9_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                      break label$93
                    }
                    HEAP32[($0_1 + 4 | 0) >> 2] = $9_1 + 1 | 0;
                    $9_1 = HEAPU8[$9_1 >> 0] | 0;
                    break label$92;
                    }
                    $9_1 = $537($0_1 | 0) | 0;
                  }
                  label$94 : {
                    if (HEAPU8[(($9_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] | 0) {
                    break label$94
                    }
                    $14_1 = 0;
                    $12_1 = $13_1;
                    break label$79;
                  }
                  HEAP8[($13_1 + $1_1 | 0) >> 0] = $9_1;
                  $1_1 = $1_1 + 1 | 0;
                  if (($1_1 | 0) != ($14_1 | 0)) {
                    continue label$91
                  }
                  break label$91;
                  };
                  $15_1 = 1;
                  $14_1 = $14_1 << 1 | 0 | 1 | 0;
                  $9_1 = $129($13_1 | 0, $14_1 | 0) | 0;
                  if ($9_1) {
                  continue label$90
                  }
                  break label$90;
                };
                $12_1 = $13_1;
                $13_1 = 0;
                break label$8;
                }
                $1_1 = 0;
                label$95 : {
                if (!$8_1) {
                  break label$95
                }
                label$96 : while (1) {
                  label$97 : {
                  label$98 : {
                    $9_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                    if (($9_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                    break label$98
                    }
                    HEAP32[($0_1 + 4 | 0) >> 2] = $9_1 + 1 | 0;
                    $9_1 = HEAPU8[$9_1 >> 0] | 0;
                    break label$97;
                  }
                  $9_1 = $537($0_1 | 0) | 0;
                  }
                  label$99 : {
                  if (HEAPU8[(($9_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] | 0) {
                    break label$99
                  }
                  $14_1 = 0;
                  $13_1 = $8_1;
                  $12_1 = $8_1;
                  break label$79;
                  }
                  HEAP8[($8_1 + $1_1 | 0) >> 0] = $9_1;
                  $1_1 = $1_1 + 1 | 0;
                  continue label$96;
                };
                }
                label$100 : while (1) {
                label$101 : {
                  label$102 : {
                  $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                  if (($1_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                    break label$102
                  }
                  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
                  $1_1 = HEAPU8[$1_1 >> 0] | 0;
                  break label$101;
                  }
                  $1_1 = $537($0_1 | 0) | 0;
                }
                if (HEAPU8[(($1_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] | 0) {
                  continue label$100
                }
                break label$100;
                };
                $13_1 = 0;
                $12_1 = 0;
                $14_1 = 0;
                $1_1 = 0;
              }
              $9_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
              label$103 : {
                i64toi32_i32$3 = $0_1;
                i64toi32_i32$1 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
                i64toi32_i32$4 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
                i64toi32_i32$3 = i64toi32_i32$1;
                i64toi32_i32$1 = 0;
                i64toi32_i32$0 = 0;
                if ((i64toi32_i32$4 | 0) < (i64toi32_i32$1 | 0)) {
                $75_1 = 1
                } else {
                if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$1 | 0)) {
                  if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0) {
                  $76_1 = 0
                  } else {
                  $76_1 = 1
                  }
                  $77_1 = $76_1;
                } else {
                  $77_1 = 0
                }
                $75_1 = $77_1;
                }
                if ($75_1) {
                break label$103
                }
                $9_1 = $9_1 + -1 | 0;
                HEAP32[($0_1 + 4 | 0) >> 2] = $9_1;
              }
              i64toi32_i32$0 = $0_1;
              i64toi32_i32$3 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
              i64toi32_i32$4 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
              $653_1 = i64toi32_i32$3;
              $653$hi = i64toi32_i32$4;
              i64toi32_i32$3 = $9_1 - (HEAP32[($0_1 + 44 | 0) >> 2] | 0) | 0;
              i64toi32_i32$4 = i64toi32_i32$3 >> 31 | 0;
              $658_1 = i64toi32_i32$3;
              $658$hi = i64toi32_i32$4;
              i64toi32_i32$4 = $653$hi;
              i64toi32_i32$0 = $653_1;
              i64toi32_i32$3 = $658$hi;
              i64toi32_i32$1 = $658_1;
              i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
              i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
              if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
                i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
              }
              $21_1 = i64toi32_i32$2;
              $21$hi = i64toi32_i32$5;
              if (!(i64toi32_i32$2 | i64toi32_i32$5 | 0)) {
                break label$12
              }
              i64toi32_i32$5 = $20$hi;
              i64toi32_i32$5 = $21$hi;
              i64toi32_i32$4 = i64toi32_i32$2;
              i64toi32_i32$0 = $20$hi;
              i64toi32_i32$1 = $20_1;
              if (!($11_1 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) | 0) | 0)) {
                break label$12
              }
              label$104 : {
                if (!$10_1) {
                break label$104
                }
                HEAP32[$8_1 >> 2] = $13_1;
              }
              label$105 : {
                if (($17_1 | 0) == (99 | 0)) {
                break label$105
                }
                label$106 : {
                if (!$14_1) {
                  break label$106
                }
                HEAP32[($14_1 + ($1_1 << 2 | 0) | 0) >> 2] = 0;
                }
                label$107 : {
                if ($12_1) {
                  break label$107
                }
                $12_1 = 0;
                break label$105;
                }
                HEAP8[($12_1 + $1_1 | 0) >> 0] = 0;
              }
              $13_1 = $14_1;
              }
              i64toi32_i32$1 = $0_1;
              i64toi32_i32$4 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
              i64toi32_i32$5 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
              $686$hi = i64toi32_i32$5;
              i64toi32_i32$5 = $19$hi;
              i64toi32_i32$5 = $686$hi;
              i64toi32_i32$1 = i64toi32_i32$4;
              i64toi32_i32$4 = $19$hi;
              i64toi32_i32$0 = $19_1;
              i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
              i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
              if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
              i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
              }
              $688$hi = i64toi32_i32$2;
              i64toi32_i32$1 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) - (HEAP32[($0_1 + 44 | 0) >> 2] | 0) | 0;
              i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
              $694_1 = i64toi32_i32$1;
              $694$hi = i64toi32_i32$2;
              i64toi32_i32$2 = $688$hi;
              i64toi32_i32$5 = i64toi32_i32$3;
              i64toi32_i32$1 = $694$hi;
              i64toi32_i32$0 = $694_1;
              i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
              i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
              if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
              i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
              }
              $19_1 = i64toi32_i32$4;
              $19$hi = i64toi32_i32$3;
              $6_1 = $6_1 + (($8_1 | 0) != (0 | 0)) | 0;
            }
            $1_1 = $5_1 + 1 | 0;
            $5_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
            if ($5_1) {
              continue label$13
            }
            break label$3;
            };
          }
          $13_1 = $14_1;
          break label$10;
          }
          $15_1 = 1;
          $12_1 = 0;
          $13_1 = 0;
          break label$8;
        }
        $15_1 = $10_1;
        break label$7;
        }
        $15_1 = $10_1;
      }
      $6_1 = $6_1 ? $6_1 : -1;
      }
      if (!$15_1) {
      break label$3
      }
      $128($12_1 | 0);
      $128($13_1 | 0);
      break label$3;
    }
    $6_1 = -1;
    }
    label$108 : {
    if ($4_1) {
      break label$108
    }
    $154($0_1 | 0);
    }
    global$0 = $3_1 + 304 | 0;
    return $6_1 | 0;
  }
  
  function $570($0_1) {
    $0_1 = $0_1 | 0;
    return ($0_1 | 0) == (32 | 0) | ($0_1 + -9 | 0) >>> 0 < 5 >>> 0 | 0 | 0;
  }
  
  function $571($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0;
    $2_1 = global$0 - 16 | 0;
    HEAP32[($2_1 + 12 | 0) >> 2] = $0_1;
    $0_1 = $1_1 >>> 0 > 1 >>> 0 ? ($0_1 + ($1_1 << 2 | 0) | 0) + -4 | 0 : $0_1;
    HEAP32[($2_1 + 8 | 0) >> 2] = $0_1 + 4 | 0;
    return HEAP32[$0_1 >> 2] | 0 | 0;
  }
  
  function $572($0_1, $1_1, $2_1, $2$hi) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $2$hi = $2$hi | 0;
    var i64toi32_i32$0 = 0;
    label$1 : {
    if (!$0_1) {
      break label$1
    }
    label$2 : {
      switch ($1_1 + 2 | 0 | 0) {
      case 0:
      i64toi32_i32$0 = $2$hi;
      HEAP8[$0_1 >> 0] = $2_1;
      return;
      case 1:
      i64toi32_i32$0 = $2$hi;
      HEAP16[$0_1 >> 1] = $2_1;
      return;
      case 2:
      case 3:
      i64toi32_i32$0 = $2$hi;
      HEAP32[$0_1 >> 2] = $2_1;
      return;
      case 5:
      break label$2;
      default:
      break label$1;
      };
    }
    i64toi32_i32$0 = $2$hi;
    HEAP32[$0_1 >> 2] = $2_1;
    HEAP32[($0_1 + 4 | 0) >> 2] = i64toi32_i32$0;
    }
  }
  
  function $573($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0, $4_1 = 0;
    $3_1 = ($2_1 | 0) != (0 | 0);
    label$1 : {
    label$2 : {
      label$3 : {
      if (!($0_1 & 3 | 0)) {
        break label$3
      }
      if (!$2_1) {
        break label$3
      }
      $4_1 = $1_1 & 255 | 0;
      label$4 : while (1) {
        if ((HEAPU8[$0_1 >> 0] | 0 | 0) == ($4_1 | 0)) {
        break label$2
        }
        $2_1 = $2_1 + -1 | 0;
        $3_1 = ($2_1 | 0) != (0 | 0);
        $0_1 = $0_1 + 1 | 0;
        if (!($0_1 & 3 | 0)) {
        break label$3
        }
        if ($2_1) {
        continue label$4
        }
        break label$4;
      };
      }
      if (!$3_1) {
      break label$1
      }
      label$5 : {
      if ((HEAPU8[$0_1 >> 0] | 0 | 0) == ($1_1 & 255 | 0 | 0)) {
        break label$5
      }
      if ($2_1 >>> 0 < 4 >>> 0) {
        break label$5
      }
      $4_1 = Math_imul($1_1 & 255 | 0, 16843009);
      label$6 : while (1) {
        $3_1 = (HEAP32[$0_1 >> 2] | 0) ^ $4_1 | 0;
        if (((16843008 - $3_1 | 0 | $3_1 | 0) & -2139062144 | 0 | 0) != (-2139062144 | 0)) {
        break label$2
        }
        $0_1 = $0_1 + 4 | 0;
        $2_1 = $2_1 + -4 | 0;
        if ($2_1 >>> 0 > 3 >>> 0) {
        continue label$6
        }
        break label$6;
      };
      }
      if (!$2_1) {
      break label$1
      }
    }
    $3_1 = $1_1 & 255 | 0;
    label$7 : while (1) {
      label$8 : {
      if ((HEAPU8[$0_1 >> 0] | 0 | 0) != ($3_1 | 0)) {
        break label$8
      }
      return $0_1 | 0;
      }
      $0_1 = $0_1 + 1 | 0;
      $2_1 = $2_1 + -1 | 0;
      if ($2_1) {
      continue label$7
      }
      break label$7;
    };
    }
    return 0 | 0;
  }
  
  function $574($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0;
    $3_1 = global$0 - 144 | 0;
    global$0 = $3_1;
    $3_1 = $115($3_1 | 0, 0 | 0, 144 | 0) | 0;
    HEAP32[($3_1 + 76 | 0) >> 2] = -1;
    HEAP32[($3_1 + 44 | 0) >> 2] = $0_1;
    HEAP32[($3_1 + 32 | 0) >> 2] = 90;
    HEAP32[($3_1 + 84 | 0) >> 2] = $0_1;
    $0_1 = $569($3_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
    global$0 = $3_1 + 144 | 0;
    return $0_1 | 0;
  }
  
  function $575($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $4_1 = 0, $3_1 = 0, $5_1 = 0;
    $3_1 = HEAP32[($0_1 + 84 | 0) >> 2] | 0;
    $4_1 = $2_1 + 256 | 0;
    $5_1 = $573($3_1 | 0, 0 | 0, $4_1 | 0) | 0;
    $4_1 = $5_1 ? $5_1 - $3_1 | 0 : $4_1;
    $2_1 = $4_1 >>> 0 < $2_1 >>> 0 ? $4_1 : $2_1;
    $120($1_1 | 0, $3_1 | 0, $2_1 | 0) | 0;
    $4_1 = $3_1 + $4_1 | 0;
    HEAP32[($0_1 + 84 | 0) >> 2] = $4_1;
    HEAP32[($0_1 + 8 | 0) >> 2] = $4_1;
    HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 + $2_1 | 0;
    return $2_1 | 0;
  }
  
  function $576() {
    var $0_1 = 0, $1_1 = 0;
    $0_1 = global$0 - 16 | 0;
    global$0 = $0_1;
    label$1 : {
    if (fimport$21($0_1 + 12 | 0 | 0, $0_1 + 8 | 0 | 0) | 0) {
      break label$1
    }
    $1_1 = $126(((HEAP32[($0_1 + 12 | 0) >> 2] | 0) << 2 | 0) + 4 | 0 | 0) | 0;
    HEAP32[(0 + 88708 | 0) >> 2] = $1_1;
    if (!$1_1) {
      break label$1
    }
    label$2 : {
      $1_1 = $126(HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
      if (!$1_1) {
      break label$2
      }
      HEAP32[((HEAP32[(0 + 88708 | 0) >> 2] | 0) + ((HEAP32[($0_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = 0;
      if (!(fimport$22(HEAP32[(0 + 88708 | 0) >> 2] | 0 | 0, $1_1 | 0) | 0)) {
      break label$1
      }
    }
    HEAP32[(0 + 88708 | 0) >> 2] = 0;
    }
    global$0 = $0_1 + 16 | 0;
  }
  
  function $577($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0, $4_1 = 0;
    label$1 : {
    if ($2_1) {
      break label$1
    }
    return 0 | 0;
    }
    label$2 : {
    label$3 : {
      $3_1 = HEAPU8[$0_1 >> 0] | 0;
      if ($3_1) {
      break label$3
      }
      $0_1 = 0;
      break label$2;
    }
    label$4 : {
      label$5 : while (1) {
      $4_1 = HEAPU8[$1_1 >> 0] | 0;
      if (($3_1 & 255 | 0 | 0) != ($4_1 | 0)) {
        break label$4
      }
      if (!$4_1) {
        break label$4
      }
      $2_1 = $2_1 + -1 | 0;
      if (!$2_1) {
        break label$4
      }
      $1_1 = $1_1 + 1 | 0;
      $3_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
      $0_1 = $0_1 + 1 | 0;
      if ($3_1) {
        continue label$5
      }
      break label$5;
      };
      $3_1 = 0;
    }
    $0_1 = $3_1 & 255 | 0;
    }
    return $0_1 - (HEAPU8[$1_1 >> 0] | 0) | 0 | 0;
  }
  
  function $578($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0, $4_1 = 0, $3_1 = 0, $2_1 = 0;
    label$1 : {
    $1_1 = $136($0_1 | 0, 61 | 0) | 0;
    if (($1_1 | 0) != ($0_1 | 0)) {
      break label$1
    }
    return 0 | 0;
    }
    $2_1 = 0;
    label$2 : {
    $3_1 = $1_1 - $0_1 | 0;
    if (HEAPU8[($0_1 + $3_1 | 0) >> 0] | 0) {
      break label$2
    }
    $1_1 = HEAP32[(0 + 88708 | 0) >> 2] | 0;
    if (!$1_1) {
      break label$2
    }
    $4_1 = HEAP32[$1_1 >> 2] | 0;
    if (!$4_1) {
      break label$2
    }
    label$3 : {
      label$4 : while (1) {
      label$5 : {
        if ($577($0_1 | 0, $4_1 | 0, $3_1 | 0) | 0) {
        break label$5
        }
        $4_1 = (HEAP32[$1_1 >> 2] | 0) + $3_1 | 0;
        if ((HEAPU8[$4_1 >> 0] | 0 | 0) == (61 | 0)) {
        break label$3
        }
      }
      $4_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      $1_1 = $1_1 + 4 | 0;
      if ($4_1) {
        continue label$4
      }
      break label$2;
      };
    }
    $2_1 = $4_1 + 1 | 0;
    }
    return $2_1 | 0;
  }
  
  function $579($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $3_1 = 0, $2_1 = 0;
    $2_1 = HEAPU8[$1_1 >> 0] | 0;
    label$1 : {
    $3_1 = HEAPU8[$0_1 >> 0] | 0;
    if (!$3_1) {
      break label$1
    }
    if (($3_1 | 0) != ($2_1 & 255 | 0 | 0)) {
      break label$1
    }
    label$2 : while (1) {
      $2_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
      $3_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
      if (!$3_1) {
      break label$1
      }
      $1_1 = $1_1 + 1 | 0;
      $0_1 = $0_1 + 1 | 0;
      if (($3_1 | 0) == ($2_1 & 255 | 0 | 0)) {
      continue label$2
      }
      break label$2;
    };
    }
    return $3_1 - ($2_1 & 255 | 0) | 0 | 0;
  }
  
  function $580($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0, $3_1 = 0, $4_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0;
    label$1 : {
    if (HEAPU8[$1_1 >> 0] | 0) {
      break label$1
    }
    label$2 : {
      $1_1 = $578(66325 | 0) | 0;
      if (!$1_1) {
      break label$2
      }
      if (HEAPU8[$1_1 >> 0] | 0) {
      break label$1
      }
    }
    label$3 : {
      $1_1 = $578(Math_imul($0_1, 12) + 70272 | 0 | 0) | 0;
      if (!$1_1) {
      break label$3
      }
      if (HEAPU8[$1_1 >> 0] | 0) {
      break label$1
      }
    }
    label$4 : {
      $1_1 = $578(66338 | 0) | 0;
      if (!$1_1) {
      break label$4
      }
      if (HEAPU8[$1_1 >> 0] | 0) {
      break label$1
      }
    }
    $1_1 = 67035;
    }
    $2_1 = 0;
    label$5 : {
    label$6 : {
      label$7 : while (1) {
      $3_1 = HEAPU8[($1_1 + $2_1 | 0) >> 0] | 0;
      if (!$3_1) {
        break label$6
      }
      if (($3_1 | 0) == (47 | 0)) {
        break label$6
      }
      $3_1 = 23;
      $2_1 = $2_1 + 1 | 0;
      if (($2_1 | 0) != (23 | 0)) {
        continue label$7
      }
      break label$5;
      };
    }
    $3_1 = $2_1;
    }
    $4_1 = 67035;
    label$8 : {
    label$9 : {
      label$10 : {
      label$11 : {
        label$12 : {
        $2_1 = HEAPU8[$1_1 >> 0] | 0;
        if (($2_1 | 0) == (46 | 0)) {
          break label$12
        }
        if (HEAPU8[($1_1 + $3_1 | 0) >> 0] | 0) {
          break label$12
        }
        $4_1 = $1_1;
        if (($2_1 | 0) != (67 | 0)) {
          break label$11
        }
        }
        if (!(HEAPU8[($4_1 + 1 | 0) >> 0] | 0)) {
        break label$10
        }
      }
      if (!($579($4_1 | 0, 67035 | 0) | 0)) {
        break label$10
      }
      if ($579($4_1 | 0, 66294 | 0) | 0) {
        break label$9
      }
      }
      label$13 : {
      if ($0_1) {
        break label$13
      }
      $2_1 = 69204;
      if ((HEAPU8[($4_1 + 1 | 0) >> 0] | 0 | 0) == (46 | 0)) {
        break label$8
      }
      }
      return 0 | 0;
    }
    label$14 : {
      $2_1 = HEAP32[(0 + 88716 | 0) >> 2] | 0;
      if (!$2_1) {
      break label$14
      }
      label$15 : while (1) {
      if (!($579($4_1 | 0, $2_1 + 8 | 0 | 0) | 0)) {
        break label$8
      }
      $2_1 = HEAP32[($2_1 + 32 | 0) >> 2] | 0;
      if ($2_1) {
        continue label$15
      }
      break label$15;
      };
    }
    label$16 : {
      $2_1 = $126(36 | 0) | 0;
      if (!$2_1) {
      break label$16
      }
      i64toi32_i32$2 = 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 69208 | 0) >> 2] | 0;
      HEAP32[$2_1 >> 2] = HEAP32[(i64toi32_i32$2 + 69204 | 0) >> 2] | 0;
      HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$1;
      $1_1 = $2_1 + 8 | 0;
      $120($1_1 | 0, $4_1 | 0, $3_1 | 0) | 0;
      HEAP8[($1_1 + $3_1 | 0) >> 0] = 0;
      HEAP32[($2_1 + 32 | 0) >> 2] = HEAP32[(0 + 88716 | 0) >> 2] | 0;
      HEAP32[(0 + 88716 | 0) >> 2] = $2_1;
    }
    $2_1 = $0_1 | $2_1 | 0 ? $2_1 : 69204;
    }
    return $2_1 | 0;
  }
  
  function $581($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0, $4_1 = 0;
    label$1 : {
    label$2 : {
      label$3 : {
      if ($2_1 >>> 0 < 4 >>> 0) {
        break label$3
      }
      if (($1_1 | $0_1 | 0) & 3 | 0) {
        break label$2
      }
      label$4 : while (1) {
        if ((HEAP32[$0_1 >> 2] | 0 | 0) != (HEAP32[$1_1 >> 2] | 0 | 0)) {
        break label$2
        }
        $1_1 = $1_1 + 4 | 0;
        $0_1 = $0_1 + 4 | 0;
        $2_1 = $2_1 + -4 | 0;
        if ($2_1 >>> 0 > 3 >>> 0) {
        continue label$4
        }
        break label$4;
      };
      }
      if (!$2_1) {
      break label$1
      }
    }
    label$5 : {
      label$6 : while (1) {
      $3_1 = HEAPU8[$0_1 >> 0] | 0;
      $4_1 = HEAPU8[$1_1 >> 0] | 0;
      if (($3_1 | 0) != ($4_1 | 0)) {
        break label$5
      }
      $1_1 = $1_1 + 1 | 0;
      $0_1 = $0_1 + 1 | 0;
      $2_1 = $2_1 + -1 | 0;
      if (!$2_1) {
        break label$1
      }
      continue label$6;
      };
    }
    return $3_1 - $4_1 | 0 | 0;
    }
    return 0 | 0;
  }
  
  function $582($0_1) {
    $0_1 = $0_1 | 0;
    return ($0_1 | 0) != (88744 | 0) & (($0_1 | 0) != (88720 | 0) & (($0_1 | 0) != (69264 | 0) & (($0_1 | 0) != (0 | 0) & ($0_1 | 0) != (69240 | 0) | 0) | 0) | 0) | 0 | 0;
  }
  
  function $583($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $149(88712 | 0);
    $2_1 = $584($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
    $150(88712 | 0);
    return $2_1 | 0;
  }
  
  function $584($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $4_1 = 0, $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $5_1 = 0, i64toi32_i32$2 = 0, $72_1 = 0, $78_1 = 0, $84_1 = 0;
    $3_1 = global$0 - 32 | 0;
    global$0 = $3_1;
    $4_1 = 0;
    label$1 : {
    label$2 : {
      label$3 : while (1) {
      $5_1 = (1 << $4_1 | 0) & $0_1 | 0;
      label$4 : {
        label$5 : {
        if (!$2_1) {
          break label$5
        }
        if ($5_1) {
          break label$5
        }
        $5_1 = HEAP32[($2_1 + ($4_1 << 2 | 0) | 0) >> 2] | 0;
        break label$4;
        }
        $5_1 = $580($4_1 | 0, ($5_1 ? $1_1 : 67181) | 0) | 0;
      }
      HEAP32[(($3_1 + 8 | 0) + ($4_1 << 2 | 0) | 0) >> 2] = $5_1;
      if (($5_1 | 0) == (-1 | 0)) {
        break label$2
      }
      $4_1 = $4_1 + 1 | 0;
      if (($4_1 | 0) != (6 | 0)) {
        continue label$3
      }
      break label$3;
      };
      label$6 : {
      if ($582($2_1 | 0) | 0) {
        break label$6
      }
      $2_1 = 69240;
      if (!($581($3_1 + 8 | 0 | 0, 69240 | 0, 24 | 0) | 0)) {
        break label$1
      }
      $2_1 = 69264;
      if (!($581($3_1 + 8 | 0 | 0, 69264 | 0, 24 | 0) | 0)) {
        break label$1
      }
      $4_1 = 0;
      label$7 : {
        if (HEAPU8[(0 + 88768 | 0) >> 0] | 0) {
        break label$7
        }
        label$8 : while (1) {
        HEAP32[(($4_1 << 2 | 0) + 88720 | 0) >> 2] = $580($4_1 | 0, 67181 | 0) | 0;
        $4_1 = $4_1 + 1 | 0;
        if (($4_1 | 0) != (6 | 0)) {
          continue label$8
        }
        break label$8;
        };
        HEAP8[(0 + 88768 | 0) >> 0] = 1;
        HEAP32[(0 + 88744 | 0) >> 2] = HEAP32[(0 + 88720 | 0) >> 2] | 0;
      }
      $2_1 = 88720;
      if (!($581($3_1 + 8 | 0 | 0, 88720 | 0, 24 | 0) | 0)) {
        break label$1
      }
      $2_1 = 88744;
      if (!($581($3_1 + 8 | 0 | 0, 88744 | 0, 24 | 0) | 0)) {
        break label$1
      }
      $2_1 = $126(24 | 0) | 0;
      if (!$2_1) {
        break label$2
      }
      }
      i64toi32_i32$2 = $3_1;
      i64toi32_i32$0 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
      $72_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $2_1;
      HEAP32[$2_1 >> 2] = $72_1;
      HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = ($3_1 + 8 | 0) + 16 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $78_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $2_1 + 16 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $78_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$2 = ($3_1 + 8 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $84_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $2_1 + 8 | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $84_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      break label$1;
    }
    $2_1 = 0;
    }
    global$0 = $3_1 + 32 | 0;
    return $2_1 | 0;
  }
  
  function $585($0_1) {
    $0_1 = $0_1 | 0;
    return (($0_1 + -97 | 0) >>> 0 < 26 >>> 0 ? $0_1 & 95 | 0 : $0_1) | 0;
  }
  
  function $586($0_1) {
    $0_1 = $0_1 | 0;
    return (($0_1 + -65 | 0) >>> 0 < 26 >>> 0 ? $0_1 | 32 | 0 : $0_1) | 0;
  }
  
  function $587($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0;
    $2_1 = $573($0_1 | 0, 0 | 0, $1_1 | 0) | 0;
    return ($2_1 ? $2_1 - $0_1 | 0 : $1_1) | 0;
  }
  
  function $588($0_1, $1_1) {
    $0_1 = +$0_1;
    $1_1 = $1_1 | 0;
    var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $3_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, $2_1 = 0, $10_1 = 0, $2$hi = 0;
    label$1 : {
    wasm2js_scratch_store_f64(+$0_1);
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    $2_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
    $2$hi = i64toi32_i32$0;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 52;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $10_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
      i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      $10_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $3_1 = $10_1 & 2047 | 0;
    if (($3_1 | 0) == (2047 | 0)) {
      break label$1
    }
    label$2 : {
      if ($3_1) {
      break label$2
      }
      label$3 : {
      label$4 : {
        if ($0_1 != 0.0) {
        break label$4
        }
        $3_1 = 0;
        break label$3;
      }
      $0_1 = +$588(+($0_1 * 18446744073709551615.0), $1_1 | 0);
      $3_1 = (HEAP32[$1_1 >> 2] | 0) + -64 | 0;
      }
      HEAP32[$1_1 >> 2] = $3_1;
      return +$0_1;
    }
    HEAP32[$1_1 >> 2] = $3_1 + -1022 | 0;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$2 = -2146435073;
    i64toi32_i32$3 = -1;
    i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
    i64toi32_i32$0 = 1071644672;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 | i64toi32_i32$3 | 0 | 0);
    wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
    $0_1 = +wasm2js_scratch_load_f64();
    }
    return +$0_1;
  }
  
  function $589($0_1, $1_1, $2_1, $3_1, $4_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    var $5_1 = 0, i64toi32_i32$0 = 0, $8_1 = 0, $6_1 = 0, $7_1 = 0;
    $5_1 = global$0 - 208 | 0;
    global$0 = $5_1;
    HEAP32[($5_1 + 204 | 0) >> 2] = $2_1;
    $115($5_1 + 160 | 0 | 0, 0 | 0, 40 | 0) | 0;
    HEAP32[($5_1 + 200 | 0) >> 2] = HEAP32[($5_1 + 204 | 0) >> 2] | 0;
    label$1 : {
    label$2 : {
      if (($590(0 | 0, $1_1 | 0, $5_1 + 200 | 0 | 0, $5_1 + 80 | 0 | 0, $5_1 + 160 | 0 | 0, $3_1 | 0, $4_1 | 0) | 0 | 0) >= (0 | 0)) {
      break label$2
      }
      $4_1 = -1;
      break label$1;
    }
    label$3 : {
      label$4 : {
      if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) >= (0 | 0)) {
        break label$4
      }
      $6_1 = 1;
      break label$3;
      }
      $6_1 = !($153($0_1 | 0) | 0);
    }
    $7_1 = HEAP32[$0_1 >> 2] | 0;
    HEAP32[$0_1 >> 2] = $7_1 & -33 | 0;
    label$5 : {
      label$6 : {
      label$7 : {
        label$8 : {
        if (HEAP32[($0_1 + 48 | 0) >> 2] | 0) {
          break label$8
        }
        HEAP32[($0_1 + 48 | 0) >> 2] = 80;
        HEAP32[($0_1 + 28 | 0) >> 2] = 0;
        i64toi32_i32$0 = 0;
        HEAP32[($0_1 + 16 | 0) >> 2] = 0;
        HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$0;
        $8_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
        HEAP32[($0_1 + 44 | 0) >> 2] = $5_1;
        break label$7;
        }
        $8_1 = 0;
        if (HEAP32[($0_1 + 16 | 0) >> 2] | 0) {
        break label$6
        }
      }
      $2_1 = -1;
      if ($159($0_1 | 0) | 0) {
        break label$5
      }
      }
      $2_1 = $590($0_1 | 0, $1_1 | 0, $5_1 + 200 | 0 | 0, $5_1 + 80 | 0 | 0, $5_1 + 160 | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
    }
    $4_1 = $7_1 & 32 | 0;
    label$9 : {
      if (!$8_1) {
      break label$9
      }
      FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0]($0_1, 0, 0) | 0;
      HEAP32[($0_1 + 48 | 0) >> 2] = 0;
      HEAP32[($0_1 + 44 | 0) >> 2] = $8_1;
      HEAP32[($0_1 + 28 | 0) >> 2] = 0;
      $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
      i64toi32_i32$0 = 0;
      HEAP32[($0_1 + 16 | 0) >> 2] = 0;
      HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$0;
      $2_1 = $3_1 ? $2_1 : -1;
    }
    $3_1 = HEAP32[$0_1 >> 2] | 0;
    HEAP32[$0_1 >> 2] = $3_1 | $4_1 | 0;
    $4_1 = $3_1 & 32 | 0 ? -1 : $2_1;
    if ($6_1) {
      break label$1
    }
    $154($0_1 | 0);
    }
    global$0 = $5_1 + 208 | 0;
    return $4_1 | 0;
  }
  
  function $590($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $6_1 = $6_1 | 0;
    var $12_1 = 0, $7_1 = 0, $15_1 = 0, $20_1 = 0, $17_1 = 0, $14_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $13_1 = 0, $11_1 = 0, i64toi32_i32$2 = 0, $16_1 = 0, $19_1 = 0, $22_1 = 0, i64toi32_i32$5 = 0, $25_1 = 0, $25$hi = 0, $9_1 = 0, $18_1 = 0, $24_1 = 0, $10_1 = 0, i64toi32_i32$3 = 0, $21_1 = 0, $23_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $8_1 = 0, $266_1 = 0;
    $7_1 = global$0 - 64 | 0;
    global$0 = $7_1;
    HEAP32[($7_1 + 60 | 0) >> 2] = $1_1;
    $8_1 = $7_1 + 39 | 0;
    $9_1 = $7_1 + 40 | 0;
    $10_1 = 0;
    $11_1 = 0;
    label$1 : {
    label$2 : {
      label$3 : {
      label$4 : {
        label$5 : while (1) {
        $12_1 = 0;
        label$6 : while (1) {
          $13_1 = $1_1;
          if (($12_1 | 0) > ($11_1 ^ 2147483647 | 0 | 0)) {
          break label$4
          }
          $11_1 = $12_1 + $11_1 | 0;
          $12_1 = $1_1;
          label$7 : {
          label$8 : {
            label$9 : {
            label$10 : {
              label$11 : {
              label$12 : {
                $14_1 = HEAPU8[$12_1 >> 0] | 0;
                if (!$14_1) {
                break label$12
                }
                label$13 : while (1) {
                label$14 : {
                  label$15 : {
                  label$16 : {
                    $14_1 = $14_1 & 255 | 0;
                    if ($14_1) {
                    break label$16
                    }
                    $1_1 = $12_1;
                    break label$15;
                  }
                  if (($14_1 | 0) != (37 | 0)) {
                    break label$14
                  }
                  $14_1 = $12_1;
                  label$17 : while (1) {
                    label$18 : {
                    if ((HEAPU8[($14_1 + 1 | 0) >> 0] | 0 | 0) == (37 | 0)) {
                      break label$18
                    }
                    $1_1 = $14_1;
                    break label$15;
                    }
                    $12_1 = $12_1 + 1 | 0;
                    $15_1 = HEAPU8[($14_1 + 2 | 0) >> 0] | 0;
                    $1_1 = $14_1 + 2 | 0;
                    $14_1 = $1_1;
                    if (($15_1 | 0) == (37 | 0)) {
                    continue label$17
                    }
                    break label$17;
                  };
                  }
                  $12_1 = $12_1 - $13_1 | 0;
                  $14_1 = $11_1 ^ 2147483647 | 0;
                  if (($12_1 | 0) > ($14_1 | 0)) {
                  break label$4
                  }
                  label$19 : {
                  if (!$0_1) {
                    break label$19
                  }
                  $591($0_1 | 0, $13_1 | 0, $12_1 | 0);
                  }
                  if ($12_1) {
                  continue label$6
                  }
                  HEAP32[($7_1 + 60 | 0) >> 2] = $1_1;
                  $12_1 = $1_1 + 1 | 0;
                  $16_1 = -1;
                  label$20 : {
                  $15_1 = (HEAP8[($1_1 + 1 | 0) >> 0] | 0) + -48 | 0;
                  if ($15_1 >>> 0 > 9 >>> 0) {
                    break label$20
                  }
                  if ((HEAPU8[($1_1 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
                    break label$20
                  }
                  $12_1 = $1_1 + 3 | 0;
                  $10_1 = 1;
                  $16_1 = $15_1;
                  }
                  HEAP32[($7_1 + 60 | 0) >> 2] = $12_1;
                  $17_1 = 0;
                  label$21 : {
                  label$22 : {
                    $18_1 = HEAP8[$12_1 >> 0] | 0;
                    $1_1 = $18_1 + -32 | 0;
                    if ($1_1 >>> 0 <= 31 >>> 0) {
                    break label$22
                    }
                    $15_1 = $12_1;
                    break label$21;
                  }
                  $17_1 = 0;
                  $15_1 = $12_1;
                  $1_1 = 1 << $1_1 | 0;
                  if (!($1_1 & 75913 | 0)) {
                    break label$21
                  }
                  label$23 : while (1) {
                    $15_1 = $12_1 + 1 | 0;
                    HEAP32[($7_1 + 60 | 0) >> 2] = $15_1;
                    $17_1 = $1_1 | $17_1 | 0;
                    $18_1 = HEAP8[($12_1 + 1 | 0) >> 0] | 0;
                    $1_1 = $18_1 + -32 | 0;
                    if ($1_1 >>> 0 >= 32 >>> 0) {
                    break label$21
                    }
                    $12_1 = $15_1;
                    $1_1 = 1 << $1_1 | 0;
                    if ($1_1 & 75913 | 0) {
                    continue label$23
                    }
                    break label$23;
                  };
                  }
                  label$24 : {
                  label$25 : {
                    if (($18_1 | 0) != (42 | 0)) {
                    break label$25
                    }
                    label$26 : {
                    label$27 : {
                      $12_1 = (HEAP8[($15_1 + 1 | 0) >> 0] | 0) + -48 | 0;
                      if ($12_1 >>> 0 > 9 >>> 0) {
                      break label$27
                      }
                      if ((HEAPU8[($15_1 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
                      break label$27
                      }
                      label$28 : {
                      label$29 : {
                        if ($0_1) {
                        break label$29
                        }
                        HEAP32[($4_1 + ($12_1 << 2 | 0) | 0) >> 2] = 10;
                        $19_1 = 0;
                        break label$28;
                      }
                      $19_1 = HEAP32[($3_1 + ($12_1 << 3 | 0) | 0) >> 2] | 0;
                      }
                      $1_1 = $15_1 + 3 | 0;
                      $10_1 = 1;
                      break label$26;
                    }
                    if ($10_1) {
                      break label$11
                    }
                    $1_1 = $15_1 + 1 | 0;
                    label$30 : {
                      if ($0_1) {
                      break label$30
                      }
                      HEAP32[($7_1 + 60 | 0) >> 2] = $1_1;
                      $10_1 = 0;
                      $19_1 = 0;
                      break label$24;
                    }
                    $12_1 = HEAP32[$2_1 >> 2] | 0;
                    HEAP32[$2_1 >> 2] = $12_1 + 4 | 0;
                    $19_1 = HEAP32[$12_1 >> 2] | 0;
                    $10_1 = 0;
                    }
                    HEAP32[($7_1 + 60 | 0) >> 2] = $1_1;
                    if (($19_1 | 0) > (-1 | 0)) {
                    break label$24
                    }
                    $19_1 = 0 - $19_1 | 0;
                    $17_1 = $17_1 | 8192 | 0;
                    break label$24;
                  }
                  $19_1 = $592($7_1 + 60 | 0 | 0) | 0;
                  if (($19_1 | 0) < (0 | 0)) {
                    break label$4
                  }
                  $1_1 = HEAP32[($7_1 + 60 | 0) >> 2] | 0;
                  }
                  $12_1 = 0;
                  $20_1 = -1;
                  label$31 : {
                  label$32 : {
                    if ((HEAPU8[$1_1 >> 0] | 0 | 0) == (46 | 0)) {
                    break label$32
                    }
                    $21_1 = 0;
                    break label$31;
                  }
                  label$33 : {
                    if ((HEAPU8[($1_1 + 1 | 0) >> 0] | 0 | 0) != (42 | 0)) {
                    break label$33
                    }
                    label$34 : {
                    label$35 : {
                      $15_1 = (HEAP8[($1_1 + 2 | 0) >> 0] | 0) + -48 | 0;
                      if ($15_1 >>> 0 > 9 >>> 0) {
                      break label$35
                      }
                      if ((HEAPU8[($1_1 + 3 | 0) >> 0] | 0 | 0) != (36 | 0)) {
                      break label$35
                      }
                      label$36 : {
                      label$37 : {
                        if ($0_1) {
                        break label$37
                        }
                        HEAP32[($4_1 + ($15_1 << 2 | 0) | 0) >> 2] = 10;
                        $20_1 = 0;
                        break label$36;
                      }
                      $20_1 = HEAP32[($3_1 + ($15_1 << 3 | 0) | 0) >> 2] | 0;
                      }
                      $1_1 = $1_1 + 4 | 0;
                      break label$34;
                    }
                    if ($10_1) {
                      break label$11
                    }
                    $1_1 = $1_1 + 2 | 0;
                    label$38 : {
                      if ($0_1) {
                      break label$38
                      }
                      $20_1 = 0;
                      break label$34;
                    }
                    $15_1 = HEAP32[$2_1 >> 2] | 0;
                    HEAP32[$2_1 >> 2] = $15_1 + 4 | 0;
                    $20_1 = HEAP32[$15_1 >> 2] | 0;
                    }
                    HEAP32[($7_1 + 60 | 0) >> 2] = $1_1;
                    $21_1 = ($20_1 | 0) > (-1 | 0);
                    break label$31;
                  }
                  HEAP32[($7_1 + 60 | 0) >> 2] = $1_1 + 1 | 0;
                  $21_1 = 1;
                  $20_1 = $592($7_1 + 60 | 0 | 0) | 0;
                  $1_1 = HEAP32[($7_1 + 60 | 0) >> 2] | 0;
                  }
                  label$39 : while (1) {
                  $15_1 = $12_1;
                  $22_1 = 28;
                  $18_1 = $1_1;
                  $12_1 = HEAP8[$1_1 >> 0] | 0;
                  if (($12_1 + -123 | 0) >>> 0 < -58 >>> 0) {
                    break label$3
                  }
                  $1_1 = $1_1 + 1 | 0;
                  $12_1 = HEAPU8[(($12_1 + Math_imul($15_1, 58) | 0) + 70287 | 0) >> 0] | 0;
                  if (($12_1 + -1 | 0) >>> 0 < 8 >>> 0) {
                    continue label$39
                  }
                  break label$39;
                  };
                  HEAP32[($7_1 + 60 | 0) >> 2] = $1_1;
                  label$40 : {
                  label$41 : {
                    if (($12_1 | 0) == (27 | 0)) {
                    break label$41
                    }
                    if (!$12_1) {
                    break label$3
                    }
                    label$42 : {
                    if (($16_1 | 0) < (0 | 0)) {
                      break label$42
                    }
                    label$43 : {
                      if ($0_1) {
                      break label$43
                      }
                      HEAP32[($4_1 + ($16_1 << 2 | 0) | 0) >> 2] = $12_1;
                      continue label$5;
                    }
                    i64toi32_i32$2 = $3_1 + ($16_1 << 3 | 0) | 0;
                    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                    $266_1 = i64toi32_i32$0;
                    i64toi32_i32$0 = $7_1;
                    HEAP32[($7_1 + 48 | 0) >> 2] = $266_1;
                    HEAP32[($7_1 + 52 | 0) >> 2] = i64toi32_i32$1;
                    break label$40;
                    }
                    if (!$0_1) {
                    break label$7
                    }
                    $593($7_1 + 48 | 0 | 0, $12_1 | 0, $2_1 | 0, $6_1 | 0);
                    break label$40;
                  }
                  if (($16_1 | 0) > (-1 | 0)) {
                    break label$3
                  }
                  $12_1 = 0;
                  if (!$0_1) {
                    continue label$6
                  }
                  }
                  if ((HEAPU8[$0_1 >> 0] | 0) & 32 | 0) {
                  break label$2
                  }
                  $23_1 = $17_1 & -65537 | 0;
                  $17_1 = $17_1 & 8192 | 0 ? $23_1 : $17_1;
                  $16_1 = 0;
                  $24_1 = 65680;
                  $22_1 = $9_1;
                  label$44 : {
                  label$45 : {
                    label$46 : {
                    label$47 : {
                      label$48 : {
                      label$49 : {
                        label$50 : {
                        label$51 : {
                          label$52 : {
                          label$53 : {
                            label$54 : {
                            label$55 : {
                              label$56 : {
                              label$57 : {
                                label$58 : {
                                label$59 : {
                                  label$60 : {
                                  $12_1 = HEAP8[$18_1 >> 0] | 0;
                                  $12_1 = $15_1 ? (($12_1 & 15 | 0 | 0) == (3 | 0) ? $12_1 & -45 | 0 : $12_1) : $12_1;
                                  switch ($12_1 + -88 | 0 | 0) {
                                  case 9:
                                  case 13:
                                  case 14:
                                  case 15:
                                    break label$44;
                                  case 27:
                                    break label$50;
                                  case 11:
                                    break label$51;
                                  case 12:
                                  case 17:
                                    break label$54;
                                  case 23:
                                    break label$55;
                                  case 0:
                                  case 32:
                                    break label$56;
                                  case 24:
                                    break label$57;
                                  case 22:
                                    break label$58;
                                  case 29:
                                    break label$59;
                                  case 1:
                                  case 2:
                                  case 3:
                                  case 4:
                                  case 5:
                                  case 6:
                                  case 7:
                                  case 8:
                                  case 10:
                                  case 16:
                                  case 18:
                                  case 19:
                                  case 20:
                                  case 21:
                                  case 25:
                                  case 26:
                                  case 28:
                                  case 30:
                                  case 31:
                                    break label$8;
                                  default:
                                    break label$60;
                                  };
                                  }
                                  $22_1 = $9_1;
                                  label$61 : {
                                  switch ($12_1 + -65 | 0 | 0) {
                                  case 0:
                                  case 4:
                                  case 5:
                                  case 6:
                                    break label$44;
                                  case 2:
                                    break label$49;
                                  case 1:
                                  case 3:
                                    break label$8;
                                  default:
                                    break label$61;
                                  };
                                  }
                                  if (($12_1 | 0) == (83 | 0)) {
                                  break label$48
                                  }
                                  break label$9;
                                }
                                $16_1 = 0;
                                $24_1 = 65680;
                                i64toi32_i32$2 = $7_1;
                                i64toi32_i32$1 = HEAP32[($7_1 + 48 | 0) >> 2] | 0;
                                i64toi32_i32$0 = HEAP32[($7_1 + 52 | 0) >> 2] | 0;
                                $25_1 = i64toi32_i32$1;
                                $25$hi = i64toi32_i32$0;
                                break label$53;
                                }
                                $12_1 = 0;
                                label$62 : {
                                switch ($15_1 & 255 | 0 | 0) {
                                case 0:
                                  HEAP32[(HEAP32[($7_1 + 48 | 0) >> 2] | 0) >> 2] = $11_1;
                                  continue label$6;
                                case 1:
                                  HEAP32[(HEAP32[($7_1 + 48 | 0) >> 2] | 0) >> 2] = $11_1;
                                  continue label$6;
                                case 2:
                                  i64toi32_i32$1 = $11_1;
                                  i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
                                  i64toi32_i32$1 = HEAP32[($7_1 + 48 | 0) >> 2] | 0;
                                  HEAP32[i64toi32_i32$1 >> 2] = $11_1;
                                  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                                  continue label$6;
                                case 3:
                                  HEAP16[(HEAP32[($7_1 + 48 | 0) >> 2] | 0) >> 1] = $11_1;
                                  continue label$6;
                                case 4:
                                  HEAP8[(HEAP32[($7_1 + 48 | 0) >> 2] | 0) >> 0] = $11_1;
                                  continue label$6;
                                case 6:
                                  HEAP32[(HEAP32[($7_1 + 48 | 0) >> 2] | 0) >> 2] = $11_1;
                                  continue label$6;
                                case 7:
                                  break label$62;
                                default:
                                  continue label$6;
                                };
                                }
                                i64toi32_i32$1 = $11_1;
                                i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
                                i64toi32_i32$1 = HEAP32[($7_1 + 48 | 0) >> 2] | 0;
                                HEAP32[i64toi32_i32$1 >> 2] = $11_1;
                                HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                                continue label$6;
                              }
                              $20_1 = $20_1 >>> 0 > 8 >>> 0 ? $20_1 : 8;
                              $17_1 = $17_1 | 8 | 0;
                              $12_1 = 120;
                              }
                              $16_1 = 0;
                              $24_1 = 65680;
                              i64toi32_i32$2 = $7_1;
                              i64toi32_i32$0 = HEAP32[($7_1 + 48 | 0) >> 2] | 0;
                              i64toi32_i32$1 = HEAP32[($7_1 + 52 | 0) >> 2] | 0;
                              $25_1 = i64toi32_i32$0;
                              $25$hi = i64toi32_i32$1;
                              $13_1 = $594(i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, $9_1 | 0, $12_1 & 32 | 0 | 0) | 0;
                              if (!(i64toi32_i32$0 | i64toi32_i32$1 | 0)) {
                              break label$52
                              }
                              if (!($17_1 & 8 | 0)) {
                              break label$52
                              }
                              $24_1 = ($12_1 >>> 4 | 0) + 65680 | 0;
                              $16_1 = 2;
                              break label$52;
                            }
                            $16_1 = 0;
                            $24_1 = 65680;
                            i64toi32_i32$2 = $7_1;
                            i64toi32_i32$1 = HEAP32[($7_1 + 48 | 0) >> 2] | 0;
                            i64toi32_i32$0 = HEAP32[($7_1 + 52 | 0) >> 2] | 0;
                            $25_1 = i64toi32_i32$1;
                            $25$hi = i64toi32_i32$0;
                            $13_1 = $595(i64toi32_i32$1 | 0, i64toi32_i32$0 | 0, $9_1 | 0) | 0;
                            if (!($17_1 & 8 | 0)) {
                              break label$52
                            }
                            $12_1 = $9_1 - $13_1 | 0;
                            $20_1 = ($20_1 | 0) > ($12_1 | 0) ? $20_1 : $12_1 + 1 | 0;
                            break label$52;
                            }
                            label$69 : {
                            i64toi32_i32$2 = $7_1;
                            i64toi32_i32$0 = HEAP32[($7_1 + 48 | 0) >> 2] | 0;
                            i64toi32_i32$1 = HEAP32[($7_1 + 52 | 0) >> 2] | 0;
                            $25_1 = i64toi32_i32$0;
                            $25$hi = i64toi32_i32$1;
                            i64toi32_i32$2 = i64toi32_i32$0;
                            i64toi32_i32$0 = -1;
                            i64toi32_i32$3 = -1;
                            if ((i64toi32_i32$1 | 0) > (i64toi32_i32$0 | 0)) {
                              $33_1 = 1
                            } else {
                              if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$0 | 0)) {
                              if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
                                $34_1 = 0
                              } else {
                                $34_1 = 1
                              }
                              $35_1 = $34_1;
                              } else {
                              $35_1 = 0
                              }
                              $33_1 = $35_1;
                            }
                            if ($33_1) {
                              break label$69
                            }
                            i64toi32_i32$2 = $25$hi;
                            i64toi32_i32$2 = 0;
                            i64toi32_i32$3 = 0;
                            i64toi32_i32$1 = $25$hi;
                            i64toi32_i32$0 = $25_1;
                            i64toi32_i32$5 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) + i64toi32_i32$1 | 0;
                            i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
                            $25_1 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
                            $25$hi = i64toi32_i32$5;
                            i64toi32_i32$3 = $7_1;
                            HEAP32[($7_1 + 48 | 0) >> 2] = $25_1;
                            HEAP32[($7_1 + 52 | 0) >> 2] = i64toi32_i32$5;
                            $16_1 = 1;
                            $24_1 = 65680;
                            break label$53;
                            }
                            label$70 : {
                            if (!($17_1 & 2048 | 0)) {
                              break label$70
                            }
                            $16_1 = 1;
                            $24_1 = 65681;
                            break label$53;
                            }
                            $16_1 = $17_1 & 1 | 0;
                            $24_1 = $16_1 ? 65682 : 65680;
                          }
                          i64toi32_i32$5 = $25$hi;
                          $13_1 = $596($25_1 | 0, i64toi32_i32$5 | 0, $9_1 | 0) | 0;
                          }
                          if ($21_1 & ($20_1 | 0) < (0 | 0) | 0) {
                          break label$4
                          }
                          $17_1 = $21_1 ? $17_1 & -65537 | 0 : $17_1;
                          label$71 : {
                          i64toi32_i32$5 = $25$hi;
                          i64toi32_i32$2 = $25_1;
                          i64toi32_i32$3 = 0;
                          i64toi32_i32$0 = 0;
                          if ((i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$3 | 0) | 0) {
                            break label$71
                          }
                          if ($20_1) {
                            break label$71
                          }
                          $13_1 = $9_1;
                          $22_1 = $13_1;
                          $20_1 = 0;
                          break label$8;
                          }
                          i64toi32_i32$2 = $25$hi;
                          $12_1 = ($9_1 - $13_1 | 0) + !($25_1 | i64toi32_i32$2 | 0) | 0;
                          $20_1 = ($20_1 | 0) > ($12_1 | 0) ? $20_1 : $12_1;
                          break label$9;
                        }
                        $12_1 = HEAPU8[($7_1 + 48 | 0) >> 0] | 0;
                        break label$10;
                        }
                        $12_1 = HEAP32[($7_1 + 48 | 0) >> 2] | 0;
                        $13_1 = $12_1 ? $12_1 : 67074;
                        $12_1 = $587($13_1 | 0, ($20_1 >>> 0 < 2147483647 >>> 0 ? $20_1 : 2147483647) | 0) | 0;
                        $22_1 = $13_1 + $12_1 | 0;
                        label$72 : {
                        if (($20_1 | 0) <= (-1 | 0)) {
                          break label$72
                        }
                        $17_1 = $23_1;
                        $20_1 = $12_1;
                        break label$8;
                        }
                        $17_1 = $23_1;
                        $20_1 = $12_1;
                        if (HEAPU8[$22_1 >> 0] | 0) {
                        break label$4
                        }
                        break label$8;
                      }
                      i64toi32_i32$0 = $7_1;
                      i64toi32_i32$2 = HEAP32[($7_1 + 48 | 0) >> 2] | 0;
                      i64toi32_i32$5 = HEAP32[($7_1 + 52 | 0) >> 2] | 0;
                      $25_1 = i64toi32_i32$2;
                      $25$hi = i64toi32_i32$5;
                      if (!!(i64toi32_i32$2 | i64toi32_i32$5 | 0)) {
                        break label$47
                      }
                      $12_1 = 0;
                      break label$10;
                      }
                      label$73 : {
                      if (!$20_1) {
                        break label$73
                      }
                      $14_1 = HEAP32[($7_1 + 48 | 0) >> 2] | 0;
                      break label$46;
                      }
                      $12_1 = 0;
                      $597($0_1 | 0, 32 | 0, $19_1 | 0, 0 | 0, $17_1 | 0);
                      break label$45;
                    }
                    HEAP32[($7_1 + 12 | 0) >> 2] = 0;
                    i64toi32_i32$5 = $25$hi;
                    HEAP32[($7_1 + 8 | 0) >> 2] = $25_1;
                    HEAP32[($7_1 + 48 | 0) >> 2] = $7_1 + 8 | 0;
                    $14_1 = $7_1 + 8 | 0;
                    $20_1 = -1;
                    }
                    $12_1 = 0;
                    label$74 : {
                    label$75 : while (1) {
                      $15_1 = HEAP32[$14_1 >> 2] | 0;
                      if (!$15_1) {
                      break label$74
                      }
                      $15_1 = $471($7_1 + 4 | 0 | 0, $15_1 | 0) | 0;
                      if (($15_1 | 0) < (0 | 0)) {
                      break label$2
                      }
                      if ($15_1 >>> 0 > ($20_1 - $12_1 | 0) >>> 0) {
                      break label$74
                      }
                      $14_1 = $14_1 + 4 | 0;
                      $12_1 = $15_1 + $12_1 | 0;
                      if ($12_1 >>> 0 < $20_1 >>> 0) {
                      continue label$75
                      }
                      break label$75;
                    };
                    }
                    $22_1 = 61;
                    if (($12_1 | 0) < (0 | 0)) {
                    break label$3
                    }
                    $597($0_1 | 0, 32 | 0, $19_1 | 0, $12_1 | 0, $17_1 | 0);
                    label$76 : {
                    if ($12_1) {
                      break label$76
                    }
                    $12_1 = 0;
                    break label$45;
                    }
                    $15_1 = 0;
                    $14_1 = HEAP32[($7_1 + 48 | 0) >> 2] | 0;
                    label$77 : while (1) {
                    $13_1 = HEAP32[$14_1 >> 2] | 0;
                    if (!$13_1) {
                      break label$45
                    }
                    $13_1 = $471($7_1 + 4 | 0 | 0, $13_1 | 0) | 0;
                    $15_1 = $13_1 + $15_1 | 0;
                    if ($15_1 >>> 0 > $12_1 >>> 0) {
                      break label$45
                    }
                    $591($0_1 | 0, $7_1 + 4 | 0 | 0, $13_1 | 0);
                    $14_1 = $14_1 + 4 | 0;
                    if ($15_1 >>> 0 < $12_1 >>> 0) {
                      continue label$77
                    }
                    break label$77;
                    };
                  }
                  $597($0_1 | 0, 32 | 0, $19_1 | 0, $12_1 | 0, $17_1 ^ 8192 | 0 | 0);
                  $12_1 = ($19_1 | 0) > ($12_1 | 0) ? $19_1 : $12_1;
                  continue label$6;
                  }
                  if ($21_1 & ($20_1 | 0) < (0 | 0) | 0) {
                  break label$4
                  }
                  $22_1 = 61;
                  $12_1 = FUNCTION_TABLE[$5_1 | 0]($0_1, +HEAPF64[($7_1 + 48 | 0) >> 3], $19_1, $20_1, $17_1, $12_1) | 0;
                  if (($12_1 | 0) >= (0 | 0)) {
                  continue label$6
                  }
                  break label$3;
                }
                $14_1 = HEAPU8[($12_1 + 1 | 0) >> 0] | 0;
                $12_1 = $12_1 + 1 | 0;
                continue label$13;
                };
              }
              if ($0_1) {
                break label$1
              }
              if (!$10_1) {
                break label$7
              }
              $12_1 = 1;
              label$78 : {
                label$79 : while (1) {
                $14_1 = HEAP32[($4_1 + ($12_1 << 2 | 0) | 0) >> 2] | 0;
                if (!$14_1) {
                  break label$78
                }
                $593($3_1 + ($12_1 << 3 | 0) | 0 | 0, $14_1 | 0, $2_1 | 0, $6_1 | 0);
                $11_1 = 1;
                $12_1 = $12_1 + 1 | 0;
                if (($12_1 | 0) != (10 | 0)) {
                  continue label$79
                }
                break label$1;
                };
              }
              label$80 : {
                if ($12_1 >>> 0 < 10 >>> 0) {
                break label$80
                }
                $11_1 = 1;
                break label$1;
              }
              label$81 : while (1) {
                if (HEAP32[($4_1 + ($12_1 << 2 | 0) | 0) >> 2] | 0) {
                break label$11
                }
                $11_1 = 1;
                $12_1 = $12_1 + 1 | 0;
                if (($12_1 | 0) == (10 | 0)) {
                break label$1
                }
                continue label$81;
              };
              }
              $22_1 = 28;
              break label$3;
            }
            HEAP8[($7_1 + 39 | 0) >> 0] = $12_1;
            $20_1 = 1;
            $13_1 = $8_1;
            $22_1 = $9_1;
            $17_1 = $23_1;
            break label$8;
            }
            $22_1 = $9_1;
          }
          $1_1 = $22_1 - $13_1 | 0;
          $18_1 = ($20_1 | 0) > ($1_1 | 0) ? $20_1 : $1_1;
          if (($18_1 | 0) > ($16_1 ^ 2147483647 | 0 | 0)) {
            break label$4
          }
          $22_1 = 61;
          $15_1 = $16_1 + $18_1 | 0;
          $12_1 = ($19_1 | 0) > ($15_1 | 0) ? $19_1 : $15_1;
          if (($12_1 | 0) > ($14_1 | 0)) {
            break label$3
          }
          $597($0_1 | 0, 32 | 0, $12_1 | 0, $15_1 | 0, $17_1 | 0);
          $591($0_1 | 0, $24_1 | 0, $16_1 | 0);
          $597($0_1 | 0, 48 | 0, $12_1 | 0, $15_1 | 0, $17_1 ^ 65536 | 0 | 0);
          $597($0_1 | 0, 48 | 0, $18_1 | 0, $1_1 | 0, 0 | 0);
          $591($0_1 | 0, $13_1 | 0, $1_1 | 0);
          $597($0_1 | 0, 32 | 0, $12_1 | 0, $15_1 | 0, $17_1 ^ 8192 | 0 | 0);
          $1_1 = HEAP32[($7_1 + 60 | 0) >> 2] | 0;
          continue label$6;
          }
          break label$6;
        };
        break label$5;
        };
        $11_1 = 0;
        break label$1;
      }
      $22_1 = 61;
      }
      HEAP32[($124() | 0) >> 2] = $22_1;
    }
    $11_1 = -1;
    }
    global$0 = $7_1 + 64 | 0;
    return $11_1 | 0;
  }
  
  function $591($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    label$1 : {
    if ((HEAPU8[$0_1 >> 0] | 0) & 32 | 0) {
      break label$1
    }
    $160($1_1 | 0, $2_1 | 0, $0_1 | 0) | 0;
    }
  }
  
  function $592($0_1) {
    $0_1 = $0_1 | 0;
    var $3_1 = 0, $1_1 = 0, $2_1 = 0, $4_1 = 0, $5_1 = 0;
    $1_1 = 0;
    label$1 : {
    $2_1 = HEAP32[$0_1 >> 2] | 0;
    $3_1 = (HEAP8[$2_1 >> 0] | 0) + -48 | 0;
    if ($3_1 >>> 0 <= 9 >>> 0) {
      break label$1
    }
    return 0 | 0;
    }
    label$2 : while (1) {
    $4_1 = -1;
    label$3 : {
      if ($1_1 >>> 0 > 214748364 >>> 0) {
      break label$3
      }
      $1_1 = Math_imul($1_1, 10);
      $4_1 = $3_1 >>> 0 > ($1_1 ^ 2147483647 | 0) >>> 0 ? -1 : $3_1 + $1_1 | 0;
    }
    $3_1 = $2_1 + 1 | 0;
    HEAP32[$0_1 >> 2] = $3_1;
    $5_1 = HEAP8[($2_1 + 1 | 0) >> 0] | 0;
    $1_1 = $4_1;
    $2_1 = $3_1;
    $3_1 = $5_1 + -48 | 0;
    if ($3_1 >>> 0 < 10 >>> 0) {
      continue label$2
    }
    break label$2;
    };
    return $1_1 | 0;
  }
  
  function $593($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $21_1 = 0, $29_1 = 0, $37_1 = 0, $45_1 = 0, $55_1 = 0, $63_1 = 0, $71_1 = 0, $79_1 = 0, $87_1 = 0, $97_1 = 0, $105_1 = 0, $115_1 = 0, $125_1 = 0, $133_1 = 0, $141_1 = 0;
    label$1 : {
    switch ($1_1 + -9 | 0 | 0) {
    case 0:
      $1_1 = HEAP32[$2_1 >> 2] | 0;
      HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
      HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
      return;
    case 1:
      $1_1 = HEAP32[$2_1 >> 2] | 0;
      HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
      i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
      $21_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $0_1;
      HEAP32[i64toi32_i32$0 >> 2] = $21_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      return;
    case 2:
      $1_1 = HEAP32[$2_1 >> 2] | 0;
      HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
      i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
      i64toi32_i32$0 = 0;
      $29_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $0_1;
      HEAP32[i64toi32_i32$1 >> 2] = $29_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      return;
    case 4:
      $1_1 = HEAP32[$2_1 >> 2] | 0;
      HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
      i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
      $37_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $0_1;
      HEAP32[i64toi32_i32$0 >> 2] = $37_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      return;
    case 5:
      $1_1 = HEAP32[$2_1 >> 2] | 0;
      HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
      i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
      i64toi32_i32$0 = 0;
      $45_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $0_1;
      HEAP32[i64toi32_i32$1 >> 2] = $45_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      return;
    case 3:
      $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
      HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
      i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      $55_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $0_1;
      HEAP32[i64toi32_i32$0 >> 2] = $55_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      return;
    case 6:
      $1_1 = HEAP32[$2_1 >> 2] | 0;
      HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
      i64toi32_i32$1 = HEAP16[$1_1 >> 1] | 0;
      i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
      $63_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $0_1;
      HEAP32[i64toi32_i32$1 >> 2] = $63_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      return;
    case 7:
      $1_1 = HEAP32[$2_1 >> 2] | 0;
      HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
      i64toi32_i32$0 = HEAPU16[$1_1 >> 1] | 0;
      i64toi32_i32$1 = 0;
      $71_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $0_1;
      HEAP32[i64toi32_i32$0 >> 2] = $71_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      return;
    case 8:
      $1_1 = HEAP32[$2_1 >> 2] | 0;
      HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
      i64toi32_i32$1 = HEAP8[$1_1 >> 0] | 0;
      i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
      $79_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $0_1;
      HEAP32[i64toi32_i32$1 >> 2] = $79_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      return;
    case 9:
      $1_1 = HEAP32[$2_1 >> 2] | 0;
      HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
      i64toi32_i32$0 = HEAPU8[$1_1 >> 0] | 0;
      i64toi32_i32$1 = 0;
      $87_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $0_1;
      HEAP32[i64toi32_i32$0 >> 2] = $87_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      return;
    case 10:
      $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
      HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
      i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      $97_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $0_1;
      HEAP32[i64toi32_i32$1 >> 2] = $97_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      return;
    case 11:
      $1_1 = HEAP32[$2_1 >> 2] | 0;
      HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
      i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
      i64toi32_i32$1 = 0;
      $105_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $0_1;
      HEAP32[i64toi32_i32$0 >> 2] = $105_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      return;
    case 12:
      $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
      HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
      i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      $115_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $0_1;
      HEAP32[i64toi32_i32$1 >> 2] = $115_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      return;
    case 13:
      $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
      HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
      i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      $125_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $0_1;
      HEAP32[i64toi32_i32$0 >> 2] = $125_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      return;
    case 14:
      $1_1 = HEAP32[$2_1 >> 2] | 0;
      HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
      i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
      $133_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $0_1;
      HEAP32[i64toi32_i32$1 >> 2] = $133_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      return;
    case 15:
      $1_1 = HEAP32[$2_1 >> 2] | 0;
      HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
      i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
      i64toi32_i32$1 = 0;
      $141_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $0_1;
      HEAP32[i64toi32_i32$0 >> 2] = $141_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      return;
    case 16:
      $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
      HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
      HEAPF64[$0_1 >> 3] = +HEAPF64[$1_1 >> 3];
      return;
    case 17:
      FUNCTION_TABLE[$3_1 | 0]($0_1, $2_1);
      break;
    default:
      break label$1;
    };
    }
  }
  
  function $594($0_1, $0$hi, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $0$hi = $0$hi | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $10_1 = 0, $3_1 = 0;
    label$1 : {
    i64toi32_i32$0 = $0$hi;
    if (!($0_1 | i64toi32_i32$0 | 0)) {
      break label$1
    }
    label$2 : while (1) {
      $1_1 = $1_1 + -1 | 0;
      i64toi32_i32$0 = $0$hi;
      HEAP8[$1_1 >> 0] = HEAPU8[(($0_1 & 15 | 0) + 70816 | 0) >> 0] | 0 | $2_1 | 0;
      i64toi32_i32$2 = $0_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = 15;
      $3_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$0;
      i64toi32_i32$2 = i64toi32_i32$0;
      i64toi32_i32$3 = $0_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$1 = 4;
      i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = 0;
      $10_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      } else {
      i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      $10_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
      }
      $0_1 = $10_1;
      $0$hi = i64toi32_i32$0;
      if ($3_1) {
      continue label$2
      }
      break label$2;
    };
    }
    return $1_1 | 0;
  }
  
  function $595($0_1, $0$hi, $1_1) {
    $0_1 = $0_1 | 0;
    $0$hi = $0$hi | 0;
    $1_1 = $1_1 | 0;
    var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $9_1 = 0, $2_1 = 0;
    label$1 : {
    i64toi32_i32$0 = $0$hi;
    if (!($0_1 | i64toi32_i32$0 | 0)) {
      break label$1
    }
    label$2 : while (1) {
      $1_1 = $1_1 + -1 | 0;
      i64toi32_i32$0 = $0$hi;
      HEAP8[$1_1 >> 0] = $0_1 & 7 | 0 | 48 | 0;
      i64toi32_i32$2 = $0_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = 7;
      $2_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$0;
      i64toi32_i32$2 = i64toi32_i32$0;
      i64toi32_i32$3 = $0_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$1 = 3;
      i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = 0;
      $9_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      } else {
      i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      $9_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
      }
      $0_1 = $9_1;
      $0$hi = i64toi32_i32$0;
      if ($2_1) {
      continue label$2
      }
      break label$2;
    };
    }
    return $1_1 | 0;
  }
  
  function $596($0_1, $0$hi, $1_1) {
    $0_1 = $0_1 | 0;
    $0$hi = $0$hi | 0;
    $1_1 = $1_1 | 0;
    var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, $3_1 = 0, i64toi32_i32$3 = 0, $2_1 = 0, $2$hi = 0, $4_1 = 0, $16_1 = 0, $16$hi = 0, $5_1 = 0;
    label$1 : {
    label$2 : {
      i64toi32_i32$0 = $0$hi;
      i64toi32_i32$2 = $0_1;
      i64toi32_i32$1 = 1;
      i64toi32_i32$3 = 0;
      if (i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
      break label$2
      }
      i64toi32_i32$2 = i64toi32_i32$0;
      $2_1 = $0_1;
      $2$hi = i64toi32_i32$2;
      break label$1;
    }
    label$3 : while (1) {
      $1_1 = $1_1 + -1 | 0;
      i64toi32_i32$2 = $0$hi;
      i64toi32_i32$0 = 0;
      i64toi32_i32$0 = __wasm_i64_udiv($0_1 | 0, i64toi32_i32$2 | 0, 10 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $2_1 = i64toi32_i32$0;
      $2$hi = i64toi32_i32$2;
      i64toi32_i32$0 = 0;
      i64toi32_i32$0 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$2 | 0, 10 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $16_1 = i64toi32_i32$0;
      $16$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $0$hi;
      i64toi32_i32$3 = $0_1;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$1 = $16_1;
      i64toi32_i32$5 = ($0_1 >>> 0 < i64toi32_i32$1 >>> 0) + i64toi32_i32$0 | 0;
      i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
      HEAP8[$1_1 >> 0] = $0_1 - i64toi32_i32$1 | 0 | 48 | 0;
      i64toi32_i32$5 = i64toi32_i32$2;
      i64toi32_i32$5 = i64toi32_i32$2;
      i64toi32_i32$2 = $0_1;
      i64toi32_i32$3 = 9;
      i64toi32_i32$1 = -1;
      $3_1 = i64toi32_i32$5 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
      i64toi32_i32$2 = $2$hi;
      $0_1 = $2_1;
      $0$hi = i64toi32_i32$2;
      if ($3_1) {
      continue label$3
      }
      break label$3;
    };
    }
    label$4 : {
    i64toi32_i32$2 = $2$hi;
    if (!($2_1 | i64toi32_i32$2 | 0)) {
      break label$4
    }
    $3_1 = $2_1;
    label$5 : while (1) {
      $1_1 = $1_1 + -1 | 0;
      $4_1 = ($3_1 >>> 0) / (10 >>> 0) | 0;
      HEAP8[$1_1 >> 0] = $3_1 - Math_imul($4_1, 10) | 0 | 48 | 0;
      $5_1 = $3_1 >>> 0 > 9 >>> 0;
      $3_1 = $4_1;
      if ($5_1) {
      continue label$5
      }
      break label$5;
    };
    }
    return $1_1 | 0;
  }
  
  function $597($0_1, $1_1, $2_1, $3_1, $4_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    var $5_1 = 0;
    $5_1 = global$0 - 256 | 0;
    global$0 = $5_1;
    label$1 : {
    if (($2_1 | 0) <= ($3_1 | 0)) {
      break label$1
    }
    if ($4_1 & 73728 | 0) {
      break label$1
    }
    $3_1 = $2_1 - $3_1 | 0;
    $2_1 = $3_1 >>> 0 < 256 >>> 0;
    $115($5_1 | 0, $1_1 | 0, ($2_1 ? $3_1 : 256) | 0) | 0;
    label$2 : {
      if ($2_1) {
      break label$2
      }
      label$3 : while (1) {
      $591($0_1 | 0, $5_1 | 0, 256 | 0);
      $3_1 = $3_1 + -256 | 0;
      if ($3_1 >>> 0 > 255 >>> 0) {
        continue label$3
      }
      break label$3;
      };
    }
    $591($0_1 | 0, $5_1 | 0, $3_1 | 0);
    }
    global$0 = $5_1 + 256 | 0;
  }
  
  function $598($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    return $589($0_1 | 0, $1_1 | 0, $2_1 | 0, 91 | 0, 92 | 0) | 0 | 0;
  }
  
  function $599($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = +$1_1;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    var $10_1 = 0, $11_1 = 0, $18_1 = 0, $19_1 = 0, $12_1 = 0, i64toi32_i32$1 = 0, $15_1 = 0, $6_1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, $22_1 = 0, i64toi32_i32$2 = 0, $23_1 = 0, $20_1 = 0, $17_1 = 0, $8_1 = 0, $27_1 = 0.0, $13_1 = 0, $24_1 = 0, $14_1 = 0, $16_1 = 0, $24$hi = 0, $9_1 = 0, $21_1 = 0, $7_1 = 0, $44_1 = 0, $45_1 = 0, $46_1 = 0, $25$hi = 0, $47_1 = 0, $25_1 = 0, $168_1 = 0, $170$hi = 0, $172$hi = 0, $174_1 = 0, $174$hi = 0, $26$hi = 0, $180_1 = 0, $180$hi = 0, $388_1 = 0.0;
    $6_1 = global$0 - 560 | 0;
    global$0 = $6_1;
    $7_1 = 0;
    HEAP32[($6_1 + 44 | 0) >> 2] = 0;
    label$1 : {
    label$2 : {
      i64toi32_i32$0 = $601(+$1_1) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $24_1 = i64toi32_i32$0;
      $24$hi = i64toi32_i32$1;
      i64toi32_i32$2 = i64toi32_i32$0;
      i64toi32_i32$0 = -1;
      i64toi32_i32$3 = -1;
      if ((i64toi32_i32$1 | 0) > (i64toi32_i32$0 | 0)) {
      $44_1 = 1
      } else {
      if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$0 | 0)) {
        if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
        $45_1 = 0
        } else {
        $45_1 = 1
        }
        $46_1 = $45_1;
      } else {
        $46_1 = 0
      }
      $44_1 = $46_1;
      }
      if ($44_1) {
      break label$2
      }
      $8_1 = 1;
      $9_1 = 65690;
      $1_1 = -$1_1;
      i64toi32_i32$2 = $601(+$1_1) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $24_1 = i64toi32_i32$2;
      $24$hi = i64toi32_i32$1;
      break label$1;
    }
    label$3 : {
      if (!($4_1 & 2048 | 0)) {
      break label$3
      }
      $8_1 = 1;
      $9_1 = 65693;
      break label$1;
    }
    $8_1 = $4_1 & 1 | 0;
    $9_1 = $8_1 ? 65696 : 65691;
    $7_1 = !$8_1;
    }
    label$4 : {
    label$5 : {
      i64toi32_i32$1 = $24$hi;
      i64toi32_i32$3 = $24_1;
      i64toi32_i32$2 = 2146435072;
      i64toi32_i32$0 = 0;
      i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
      i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
      i64toi32_i32$3 = 2146435072;
      i64toi32_i32$0 = 0;
      if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
      break label$5
      }
      $10_1 = $8_1 + 3 | 0;
      $597($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 & -65537 | 0 | 0);
      $591($0_1 | 0, $9_1 | 0, $8_1 | 0);
      $11_1 = $5_1 & 32 | 0;
      $591($0_1 | 0, ($1_1 != $1_1 ? ($11_1 ? 66007 : 66309) : $11_1 ? 66139 : 66343) | 0, 3 | 0);
      $597($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 ^ 8192 | 0 | 0);
      $12_1 = ($2_1 | 0) > ($10_1 | 0) ? $2_1 : $10_1;
      break label$4;
    }
    $13_1 = $6_1 + 16 | 0;
    label$6 : {
      label$7 : {
      label$8 : {
        label$9 : {
        $1_1 = +$588(+$1_1, $6_1 + 44 | 0 | 0);
        $1_1 = $1_1 + $1_1;
        if ($1_1 == 0.0) {
          break label$9
        }
        $10_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
        HEAP32[($6_1 + 44 | 0) >> 2] = $10_1 + -1 | 0;
        $14_1 = $5_1 | 32 | 0;
        if (($14_1 | 0) != (97 | 0)) {
          break label$8
        }
        break label$6;
        }
        $14_1 = $5_1 | 32 | 0;
        if (($14_1 | 0) == (97 | 0)) {
        break label$6
        }
        $15_1 = ($3_1 | 0) < (0 | 0) ? 6 : $3_1;
        $16_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
        break label$7;
      }
      $16_1 = $10_1 + -29 | 0;
      HEAP32[($6_1 + 44 | 0) >> 2] = $16_1;
      $15_1 = ($3_1 | 0) < (0 | 0) ? 6 : $3_1;
      $1_1 = $1_1 * 268435456.0;
      }
      $17_1 = ($6_1 + 48 | 0) + (($16_1 | 0) < (0 | 0) ? 0 : 288) | 0;
      $11_1 = $17_1;
      label$10 : while (1) {
      label$11 : {
        label$12 : {
        if (!($1_1 < 4294967296.0 & $1_1 >= 0.0 | 0)) {
          break label$12
        }
        $10_1 = ~~$1_1 >>> 0;
        break label$11;
        }
        $10_1 = 0;
      }
      HEAP32[$11_1 >> 2] = $10_1;
      $11_1 = $11_1 + 4 | 0;
      $1_1 = ($1_1 - +($10_1 >>> 0)) * 1.0e9;
      if ($1_1 != 0.0) {
        continue label$10
      }
      break label$10;
      };
      label$13 : {
      label$14 : {
        if (($16_1 | 0) >= (1 | 0)) {
        break label$14
        }
        $18_1 = $16_1;
        $10_1 = $11_1;
        $19_1 = $17_1;
        break label$13;
      }
      $19_1 = $17_1;
      $18_1 = $16_1;
      label$15 : while (1) {
        $18_1 = $18_1 >>> 0 < 29 >>> 0 ? $18_1 : 29;
        label$16 : {
        $10_1 = $11_1 + -4 | 0;
        if ($10_1 >>> 0 < $19_1 >>> 0) {
          break label$16
        }
        i64toi32_i32$1 = 0;
        $25_1 = $18_1;
        $25$hi = i64toi32_i32$1;
        i64toi32_i32$1 = 0;
        $24_1 = 0;
        $24$hi = i64toi32_i32$1;
        label$17 : while (1) {
          $168_1 = $10_1;
          i64toi32_i32$0 = $10_1;
          i64toi32_i32$1 = HEAP32[$10_1 >> 2] | 0;
          i64toi32_i32$2 = 0;
          $170$hi = i64toi32_i32$2;
          i64toi32_i32$2 = $25$hi;
          i64toi32_i32$2 = $170$hi;
          i64toi32_i32$0 = i64toi32_i32$1;
          i64toi32_i32$1 = $25$hi;
          i64toi32_i32$3 = $25_1;
          i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
          if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
          i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
          $47_1 = 0;
          } else {
          i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
          $47_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
          }
          $172$hi = i64toi32_i32$1;
          i64toi32_i32$1 = $24$hi;
          i64toi32_i32$2 = $24_1;
          i64toi32_i32$0 = 0;
          i64toi32_i32$3 = -1;
          i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
          $174_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
          $174$hi = i64toi32_i32$0;
          i64toi32_i32$0 = $172$hi;
          i64toi32_i32$1 = $47_1;
          i64toi32_i32$2 = $174$hi;
          i64toi32_i32$3 = $174_1;
          i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
          i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
          if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
          i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
          }
          $26$hi = i64toi32_i32$5;
          i64toi32_i32$1 = 0;
          i64toi32_i32$1 = __wasm_i64_udiv(i64toi32_i32$4 | 0, i64toi32_i32$5 | 0, 1e9 | 0, i64toi32_i32$1 | 0) | 0;
          i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
          $24_1 = i64toi32_i32$1;
          $24$hi = i64toi32_i32$5;
          i64toi32_i32$1 = 0;
          i64toi32_i32$1 = __wasm_i64_mul($24_1 | 0, i64toi32_i32$5 | 0, 1e9 | 0, i64toi32_i32$1 | 0) | 0;
          i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
          $180_1 = i64toi32_i32$1;
          $180$hi = i64toi32_i32$5;
          i64toi32_i32$5 = $26$hi;
          i64toi32_i32$0 = i64toi32_i32$4;
          i64toi32_i32$1 = $180$hi;
          i64toi32_i32$3 = $180_1;
          i64toi32_i32$2 = i64toi32_i32$4 - i64toi32_i32$3 | 0;
          i64toi32_i32$4 = (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$1 | 0;
          i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
          HEAP32[$168_1 >> 2] = i64toi32_i32$2;
          $10_1 = $10_1 + -4 | 0;
          if ($10_1 >>> 0 >= $19_1 >>> 0) {
          continue label$17
          }
          break label$17;
        };
        i64toi32_i32$4 = i64toi32_i32$5;
        i64toi32_i32$4 = i64toi32_i32$5;
        i64toi32_i32$5 = i64toi32_i32$0;
        i64toi32_i32$0 = 0;
        i64toi32_i32$3 = 1e9;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0) {
          break label$16
        }
        $19_1 = $19_1 + -4 | 0;
        i64toi32_i32$5 = $24$hi;
        HEAP32[$19_1 >> 2] = $24_1;
        }
        label$18 : {
        label$19 : while (1) {
          $10_1 = $11_1;
          if ($10_1 >>> 0 <= $19_1 >>> 0) {
          break label$18
          }
          $11_1 = $10_1 + -4 | 0;
          if (!(HEAP32[$11_1 >> 2] | 0)) {
          continue label$19
          }
          break label$19;
        };
        }
        $18_1 = (HEAP32[($6_1 + 44 | 0) >> 2] | 0) - $18_1 | 0;
        HEAP32[($6_1 + 44 | 0) >> 2] = $18_1;
        $11_1 = $10_1;
        if (($18_1 | 0) > (0 | 0)) {
        continue label$15
        }
        break label$15;
      };
      }
      label$20 : {
      if (($18_1 | 0) > (-1 | 0)) {
        break label$20
      }
      $20_1 = ((($15_1 + 25 | 0) >>> 0) / (9 >>> 0) | 0) + 1 | 0;
      $21_1 = ($14_1 | 0) == (102 | 0);
      label$21 : while (1) {
        $11_1 = 0 - $18_1 | 0;
        $12_1 = $11_1 >>> 0 < 9 >>> 0 ? $11_1 : 9;
        label$22 : {
        label$23 : {
          if ($19_1 >>> 0 < $10_1 >>> 0) {
          break label$23
          }
          $11_1 = !(HEAP32[$19_1 >> 2] | 0) << 2 | 0;
          break label$22;
        }
        $22_1 = 1e9 >>> $12_1 | 0;
        $23_1 = (-1 << $12_1 | 0) ^ -1 | 0;
        $18_1 = 0;
        $11_1 = $19_1;
        label$24 : while (1) {
          $3_1 = HEAP32[$11_1 >> 2] | 0;
          HEAP32[$11_1 >> 2] = ($3_1 >>> $12_1 | 0) + $18_1 | 0;
          $18_1 = Math_imul($3_1 & $23_1 | 0, $22_1);
          $11_1 = $11_1 + 4 | 0;
          if ($11_1 >>> 0 < $10_1 >>> 0) {
          continue label$24
          }
          break label$24;
        };
        $11_1 = !(HEAP32[$19_1 >> 2] | 0) << 2 | 0;
        if (!$18_1) {
          break label$22
        }
        HEAP32[$10_1 >> 2] = $18_1;
        $10_1 = $10_1 + 4 | 0;
        }
        $18_1 = (HEAP32[($6_1 + 44 | 0) >> 2] | 0) + $12_1 | 0;
        HEAP32[($6_1 + 44 | 0) >> 2] = $18_1;
        $19_1 = $19_1 + $11_1 | 0;
        $11_1 = $21_1 ? $17_1 : $19_1;
        $10_1 = (($10_1 - $11_1 | 0) >> 2 | 0 | 0) > ($20_1 | 0) ? $11_1 + ($20_1 << 2 | 0) | 0 : $10_1;
        if (($18_1 | 0) < (0 | 0)) {
        continue label$21
        }
        break label$21;
      };
      }
      $18_1 = 0;
      label$25 : {
      if ($19_1 >>> 0 >= $10_1 >>> 0) {
        break label$25
      }
      $18_1 = Math_imul(($17_1 - $19_1 | 0) >> 2 | 0, 9);
      $11_1 = 10;
      $3_1 = HEAP32[$19_1 >> 2] | 0;
      if ($3_1 >>> 0 < 10 >>> 0) {
        break label$25
      }
      label$26 : while (1) {
        $18_1 = $18_1 + 1 | 0;
        $11_1 = Math_imul($11_1, 10);
        if ($3_1 >>> 0 >= $11_1 >>> 0) {
        continue label$26
        }
        break label$26;
      };
      }
      label$27 : {
      $11_1 = ($15_1 - (($14_1 | 0) == (102 | 0) ? 0 : $18_1) | 0) - (($15_1 | 0) != (0 | 0) & ($14_1 | 0) == (103 | 0) | 0) | 0;
      if (($11_1 | 0) >= (Math_imul(($10_1 - $17_1 | 0) >> 2 | 0, 9) + -9 | 0 | 0)) {
        break label$27
      }
      $3_1 = $11_1 + 9216 | 0;
      $22_1 = ($3_1 | 0) / (9 | 0) | 0;
      $12_1 = (($6_1 + 48 | 0) + (($16_1 | 0) < (0 | 0) ? -4092 : -3804) | 0) + ($22_1 << 2 | 0) | 0;
      $11_1 = 10;
      label$28 : {
        $3_1 = $3_1 - Math_imul($22_1, 9) | 0;
        if (($3_1 | 0) > (7 | 0)) {
        break label$28
        }
        label$29 : while (1) {
        $11_1 = Math_imul($11_1, 10);
        $3_1 = $3_1 + 1 | 0;
        if (($3_1 | 0) != (8 | 0)) {
          continue label$29
        }
        break label$29;
        };
      }
      $23_1 = $12_1 + 4 | 0;
      label$30 : {
        label$31 : {
        $3_1 = HEAP32[$12_1 >> 2] | 0;
        $20_1 = ($3_1 >>> 0) / ($11_1 >>> 0) | 0;
        $22_1 = $3_1 - Math_imul($20_1, $11_1) | 0;
        if ($22_1) {
          break label$31
        }
        if (($23_1 | 0) == ($10_1 | 0)) {
          break label$30
        }
        }
        label$32 : {
        label$33 : {
          if ($20_1 & 1 | 0) {
          break label$33
          }
          $1_1 = 9007199254740992.0;
          if (($11_1 | 0) != (1e9 | 0)) {
          break label$32
          }
          if ($12_1 >>> 0 <= $19_1 >>> 0) {
          break label$32
          }
          if (!((HEAPU8[($12_1 + -4 | 0) >> 0] | 0) & 1 | 0)) {
          break label$32
          }
        }
        $1_1 = 9007199254740994.0;
        }
        $388_1 = ($23_1 | 0) == ($10_1 | 0) ? 1.0 : 1.5;
        $23_1 = $11_1 >>> 1 | 0;
        $27_1 = $22_1 >>> 0 < $23_1 >>> 0 ? .5 : ($22_1 | 0) == ($23_1 | 0) ? $388_1 : 1.5;
        label$34 : {
        if ($7_1) {
          break label$34
        }
        if ((HEAPU8[$9_1 >> 0] | 0 | 0) != (45 | 0)) {
          break label$34
        }
        $27_1 = -$27_1;
        $1_1 = -$1_1;
        }
        $3_1 = $3_1 - $22_1 | 0;
        HEAP32[$12_1 >> 2] = $3_1;
        if ($1_1 + $27_1 == $1_1) {
        break label$30
        }
        $11_1 = $3_1 + $11_1 | 0;
        HEAP32[$12_1 >> 2] = $11_1;
        label$35 : {
        if ($11_1 >>> 0 < 1e9 >>> 0) {
          break label$35
        }
        label$36 : while (1) {
          HEAP32[$12_1 >> 2] = 0;
          label$37 : {
          $12_1 = $12_1 + -4 | 0;
          if ($12_1 >>> 0 >= $19_1 >>> 0) {
            break label$37
          }
          $19_1 = $19_1 + -4 | 0;
          HEAP32[$19_1 >> 2] = 0;
          }
          $11_1 = (HEAP32[$12_1 >> 2] | 0) + 1 | 0;
          HEAP32[$12_1 >> 2] = $11_1;
          if ($11_1 >>> 0 > 999999999 >>> 0) {
          continue label$36
          }
          break label$36;
        };
        }
        $18_1 = Math_imul(($17_1 - $19_1 | 0) >> 2 | 0, 9);
        $11_1 = 10;
        $3_1 = HEAP32[$19_1 >> 2] | 0;
        if ($3_1 >>> 0 < 10 >>> 0) {
        break label$30
        }
        label$38 : while (1) {
        $18_1 = $18_1 + 1 | 0;
        $11_1 = Math_imul($11_1, 10);
        if ($3_1 >>> 0 >= $11_1 >>> 0) {
          continue label$38
        }
        break label$38;
        };
      }
      $11_1 = $12_1 + 4 | 0;
      $10_1 = $10_1 >>> 0 > $11_1 >>> 0 ? $11_1 : $10_1;
      }
      label$39 : {
      label$40 : while (1) {
        $11_1 = $10_1;
        $3_1 = $10_1 >>> 0 <= $19_1 >>> 0;
        if ($3_1) {
        break label$39
        }
        $10_1 = $10_1 + -4 | 0;
        if (!(HEAP32[$10_1 >> 2] | 0)) {
        continue label$40
        }
        break label$40;
      };
      }
      label$41 : {
      label$42 : {
        if (($14_1 | 0) == (103 | 0)) {
        break label$42
        }
        $22_1 = $4_1 & 8 | 0;
        break label$41;
      }
      $10_1 = $15_1 ? $15_1 : 1;
      $12_1 = ($10_1 | 0) > ($18_1 | 0) & ($18_1 | 0) > (-5 | 0) | 0;
      $15_1 = ($12_1 ? $18_1 ^ -1 | 0 : -1) + $10_1 | 0;
      $5_1 = ($12_1 ? -1 : -2) + $5_1 | 0;
      $22_1 = $4_1 & 8 | 0;
      if ($22_1) {
        break label$41
      }
      $10_1 = -9;
      label$43 : {
        if ($3_1) {
        break label$43
        }
        $12_1 = HEAP32[($11_1 + -4 | 0) >> 2] | 0;
        if (!$12_1) {
        break label$43
        }
        $3_1 = 10;
        $10_1 = 0;
        if (($12_1 >>> 0) % (10 >>> 0) | 0) {
        break label$43
        }
        label$44 : while (1) {
        $22_1 = $10_1;
        $10_1 = $10_1 + 1 | 0;
        $3_1 = Math_imul($3_1, 10);
        if (!(($12_1 >>> 0) % ($3_1 >>> 0) | 0)) {
          continue label$44
        }
        break label$44;
        };
        $10_1 = $22_1 ^ -1 | 0;
      }
      $3_1 = Math_imul(($11_1 - $17_1 | 0) >> 2 | 0, 9);
      label$45 : {
        if (($5_1 & -33 | 0 | 0) != (70 | 0)) {
        break label$45
        }
        $22_1 = 0;
        $10_1 = ($3_1 + $10_1 | 0) + -9 | 0;
        $10_1 = ($10_1 | 0) > (0 | 0) ? $10_1 : 0;
        $15_1 = ($15_1 | 0) < ($10_1 | 0) ? $15_1 : $10_1;
        break label$41;
      }
      $22_1 = 0;
      $10_1 = (($18_1 + $3_1 | 0) + $10_1 | 0) + -9 | 0;
      $10_1 = ($10_1 | 0) > (0 | 0) ? $10_1 : 0;
      $15_1 = ($15_1 | 0) < ($10_1 | 0) ? $15_1 : $10_1;
      }
      $12_1 = -1;
      $23_1 = $15_1 | $22_1 | 0;
      if (($15_1 | 0) > (($23_1 ? 2147483645 : 2147483646) | 0)) {
      break label$4
      }
      $3_1 = ($15_1 + (($23_1 | 0) != (0 | 0)) | 0) + 1 | 0;
      label$46 : {
      label$47 : {
        $21_1 = $5_1 & -33 | 0;
        if (($21_1 | 0) != (70 | 0)) {
        break label$47
        }
        if (($18_1 | 0) > ($3_1 ^ 2147483647 | 0 | 0)) {
        break label$4
        }
        $10_1 = ($18_1 | 0) > (0 | 0) ? $18_1 : 0;
        break label$46;
      }
      label$48 : {
        $10_1 = $18_1 >> 31 | 0;
        i64toi32_i32$5 = 0;
        $10_1 = $596(($18_1 ^ $10_1 | 0) - $10_1 | 0 | 0, i64toi32_i32$5 | 0, $13_1 | 0) | 0;
        if (($13_1 - $10_1 | 0 | 0) > (1 | 0)) {
        break label$48
        }
        label$49 : while (1) {
        $10_1 = $10_1 + -1 | 0;
        HEAP8[$10_1 >> 0] = 48;
        if (($13_1 - $10_1 | 0 | 0) < (2 | 0)) {
          continue label$49
        }
        break label$49;
        };
      }
      $20_1 = $10_1 + -2 | 0;
      HEAP8[$20_1 >> 0] = $5_1;
      $12_1 = -1;
      HEAP8[($10_1 + -1 | 0) >> 0] = ($18_1 | 0) < (0 | 0) ? 45 : 43;
      $10_1 = $13_1 - $20_1 | 0;
      if (($10_1 | 0) > ($3_1 ^ 2147483647 | 0 | 0)) {
        break label$4
      }
      }
      $12_1 = -1;
      $10_1 = $10_1 + $3_1 | 0;
      if (($10_1 | 0) > ($8_1 ^ 2147483647 | 0 | 0)) {
      break label$4
      }
      $5_1 = $10_1 + $8_1 | 0;
      $597($0_1 | 0, 32 | 0, $2_1 | 0, $5_1 | 0, $4_1 | 0);
      $591($0_1 | 0, $9_1 | 0, $8_1 | 0);
      $597($0_1 | 0, 48 | 0, $2_1 | 0, $5_1 | 0, $4_1 ^ 65536 | 0 | 0);
      label$50 : {
      label$51 : {
        label$52 : {
        label$53 : {
          if (($21_1 | 0) != (70 | 0)) {
          break label$53
          }
          $18_1 = $6_1 + 16 | 0 | 9 | 0;
          $3_1 = $19_1 >>> 0 > $17_1 >>> 0 ? $17_1 : $19_1;
          $19_1 = $3_1;
          label$54 : while (1) {
          i64toi32_i32$3 = $19_1;
          i64toi32_i32$5 = HEAP32[$19_1 >> 2] | 0;
          i64toi32_i32$4 = 0;
          $10_1 = $596(i64toi32_i32$5 | 0, i64toi32_i32$4 | 0, $18_1 | 0) | 0;
          label$55 : {
            label$56 : {
            if (($19_1 | 0) == ($3_1 | 0)) {
              break label$56
            }
            if ($10_1 >>> 0 <= ($6_1 + 16 | 0) >>> 0) {
              break label$55
            }
            label$57 : while (1) {
              $10_1 = $10_1 + -1 | 0;
              HEAP8[$10_1 >> 0] = 48;
              if ($10_1 >>> 0 > ($6_1 + 16 | 0) >>> 0) {
              continue label$57
              }
              break label$55;
            };
            }
            if (($10_1 | 0) != ($18_1 | 0)) {
            break label$55
            }
            $10_1 = $10_1 + -1 | 0;
            HEAP8[$10_1 >> 0] = 48;
          }
          $591($0_1 | 0, $10_1 | 0, $18_1 - $10_1 | 0 | 0);
          $19_1 = $19_1 + 4 | 0;
          if ($19_1 >>> 0 <= $17_1 >>> 0) {
            continue label$54
          }
          break label$54;
          };
          label$58 : {
          if (!$23_1) {
            break label$58
          }
          $591($0_1 | 0, 67070 | 0, 1 | 0);
          }
          if ($19_1 >>> 0 >= $11_1 >>> 0) {
          break label$52
          }
          if (($15_1 | 0) < (1 | 0)) {
          break label$52
          }
          label$59 : while (1) {
          label$60 : {
            i64toi32_i32$3 = $19_1;
            i64toi32_i32$4 = HEAP32[$19_1 >> 2] | 0;
            i64toi32_i32$5 = 0;
            $10_1 = $596(i64toi32_i32$4 | 0, i64toi32_i32$5 | 0, $18_1 | 0) | 0;
            if ($10_1 >>> 0 <= ($6_1 + 16 | 0) >>> 0) {
            break label$60
            }
            label$61 : while (1) {
            $10_1 = $10_1 + -1 | 0;
            HEAP8[$10_1 >> 0] = 48;
            if ($10_1 >>> 0 > ($6_1 + 16 | 0) >>> 0) {
              continue label$61
            }
            break label$61;
            };
          }
          $591($0_1 | 0, $10_1 | 0, (($15_1 | 0) < (9 | 0) ? $15_1 : 9) | 0);
          $10_1 = $15_1 + -9 | 0;
          $19_1 = $19_1 + 4 | 0;
          if ($19_1 >>> 0 >= $11_1 >>> 0) {
            break label$51
          }
          $3_1 = ($15_1 | 0) > (9 | 0);
          $15_1 = $10_1;
          if ($3_1) {
            continue label$59
          }
          break label$51;
          };
        }
        label$62 : {
          if (($15_1 | 0) < (0 | 0)) {
          break label$62
          }
          $12_1 = $11_1 >>> 0 > $19_1 >>> 0 ? $11_1 : $19_1 + 4 | 0;
          $18_1 = $6_1 + 16 | 0 | 9 | 0;
          $11_1 = $19_1;
          label$63 : while (1) {
          label$64 : {
            i64toi32_i32$3 = $11_1;
            i64toi32_i32$5 = HEAP32[$11_1 >> 2] | 0;
            i64toi32_i32$4 = 0;
            $10_1 = $596(i64toi32_i32$5 | 0, i64toi32_i32$4 | 0, $18_1 | 0) | 0;
            if (($10_1 | 0) != ($18_1 | 0)) {
            break label$64
            }
            $10_1 = $10_1 + -1 | 0;
            HEAP8[$10_1 >> 0] = 48;
          }
          label$65 : {
            label$66 : {
            if (($11_1 | 0) == ($19_1 | 0)) {
              break label$66
            }
            if ($10_1 >>> 0 <= ($6_1 + 16 | 0) >>> 0) {
              break label$65
            }
            label$67 : while (1) {
              $10_1 = $10_1 + -1 | 0;
              HEAP8[$10_1 >> 0] = 48;
              if ($10_1 >>> 0 > ($6_1 + 16 | 0) >>> 0) {
              continue label$67
              }
              break label$65;
            };
            }
            $591($0_1 | 0, $10_1 | 0, 1 | 0);
            $10_1 = $10_1 + 1 | 0;
            if (!($15_1 | $22_1 | 0)) {
            break label$65
            }
            $591($0_1 | 0, 67070 | 0, 1 | 0);
          }
          $3_1 = $18_1 - $10_1 | 0;
          $591($0_1 | 0, $10_1 | 0, (($15_1 | 0) > ($3_1 | 0) ? $3_1 : $15_1) | 0);
          $15_1 = $15_1 - $3_1 | 0;
          $11_1 = $11_1 + 4 | 0;
          if ($11_1 >>> 0 >= $12_1 >>> 0) {
            break label$62
          }
          if (($15_1 | 0) > (-1 | 0)) {
            continue label$63
          }
          break label$63;
          };
        }
        $597($0_1 | 0, 48 | 0, $15_1 + 18 | 0 | 0, 18 | 0, 0 | 0);
        $591($0_1 | 0, $20_1 | 0, $13_1 - $20_1 | 0 | 0);
        break label$50;
        }
        $10_1 = $15_1;
      }
      $597($0_1 | 0, 48 | 0, $10_1 + 9 | 0 | 0, 9 | 0, 0 | 0);
      }
      $597($0_1 | 0, 32 | 0, $2_1 | 0, $5_1 | 0, $4_1 ^ 8192 | 0 | 0);
      $12_1 = ($2_1 | 0) > ($5_1 | 0) ? $2_1 : $5_1;
      break label$4;
    }
    $20_1 = $9_1 + ((($5_1 << 26 | 0) >> 31 | 0) & 9 | 0) | 0;
    label$68 : {
      if ($3_1 >>> 0 > 11 >>> 0) {
      break label$68
      }
      $10_1 = 12 - $3_1 | 0;
      $27_1 = 16.0;
      label$69 : while (1) {
      $27_1 = $27_1 * 16.0;
      $10_1 = $10_1 + -1 | 0;
      if ($10_1) {
        continue label$69
      }
      break label$69;
      };
      label$70 : {
      if ((HEAPU8[$20_1 >> 0] | 0 | 0) != (45 | 0)) {
        break label$70
      }
      $1_1 = -($27_1 + (-$1_1 - $27_1));
      break label$68;
      }
      $1_1 = $1_1 + $27_1 - $27_1;
    }
    label$71 : {
      $11_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
      $10_1 = $11_1 >> 31 | 0;
      i64toi32_i32$4 = 0;
      $10_1 = $596(($11_1 ^ $10_1 | 0) - $10_1 | 0 | 0, i64toi32_i32$4 | 0, $13_1 | 0) | 0;
      if (($10_1 | 0) != ($13_1 | 0)) {
      break label$71
      }
      $10_1 = $10_1 + -1 | 0;
      HEAP8[$10_1 >> 0] = 48;
      $11_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
    }
    $22_1 = $8_1 | 2 | 0;
    $19_1 = $5_1 & 32 | 0;
    $23_1 = $10_1 + -2 | 0;
    HEAP8[$23_1 >> 0] = $5_1 + 15 | 0;
    HEAP8[($10_1 + -1 | 0) >> 0] = ($11_1 | 0) < (0 | 0) ? 45 : 43;
    $18_1 = ($3_1 | 0) < (1 | 0) & !($4_1 & 8 | 0) | 0;
    $11_1 = $6_1 + 16 | 0;
    label$72 : while (1) {
      $10_1 = $11_1;
      label$73 : {
      label$74 : {
        if (!(Math_abs($1_1) < 2147483648.0)) {
        break label$74
        }
        $11_1 = ~~$1_1;
        break label$73;
      }
      $11_1 = -2147483648;
      }
      HEAP8[$10_1 >> 0] = HEAPU8[($11_1 + 70816 | 0) >> 0] | 0 | $19_1 | 0;
      $1_1 = ($1_1 - +($11_1 | 0)) * 16.0;
      label$75 : {
      $11_1 = $10_1 + 1 | 0;
      if (($11_1 - ($6_1 + 16 | 0) | 0 | 0) != (1 | 0)) {
        break label$75
      }
      if ($1_1 == 0.0 & $18_1 | 0) {
        break label$75
      }
      HEAP8[($10_1 + 1 | 0) >> 0] = 46;
      $11_1 = $10_1 + 2 | 0;
      }
      if ($1_1 != 0.0) {
      continue label$72
      }
      break label$72;
    };
    $12_1 = -1;
    $19_1 = $13_1 - $23_1 | 0;
    $18_1 = $22_1 + $19_1 | 0;
    if (($3_1 | 0) > (2147483645 - $18_1 | 0 | 0)) {
      break label$4
    }
    $10_1 = $11_1 - ($6_1 + 16 | 0) | 0;
    $3_1 = $3_1 ? (($10_1 + -2 | 0 | 0) < ($3_1 | 0) ? $3_1 + 2 | 0 : $10_1) : $10_1;
    $11_1 = $18_1 + $3_1 | 0;
    $597($0_1 | 0, 32 | 0, $2_1 | 0, $11_1 | 0, $4_1 | 0);
    $591($0_1 | 0, $20_1 | 0, $22_1 | 0);
    $597($0_1 | 0, 48 | 0, $2_1 | 0, $11_1 | 0, $4_1 ^ 65536 | 0 | 0);
    $591($0_1 | 0, $6_1 + 16 | 0 | 0, $10_1 | 0);
    $597($0_1 | 0, 48 | 0, $3_1 - $10_1 | 0 | 0, 0 | 0, 0 | 0);
    $591($0_1 | 0, $23_1 | 0, $19_1 | 0);
    $597($0_1 | 0, 32 | 0, $2_1 | 0, $11_1 | 0, $4_1 ^ 8192 | 0 | 0);
    $12_1 = ($2_1 | 0) > ($11_1 | 0) ? $2_1 : $11_1;
    }
    global$0 = $6_1 + 560 | 0;
    return $12_1 | 0;
  }
  
  function $600($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $2_1 = 0, $12_1 = 0, $12$hi = 0, $15_1 = 0, $15$hi = 0;
    $2_1 = ((HEAP32[$1_1 >> 2] | 0) + 7 | 0) & -8 | 0;
    HEAP32[$1_1 >> 2] = $2_1 + 16 | 0;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $12_1 = i64toi32_i32$0;
    $12$hi = i64toi32_i32$1;
    i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $15_1 = i64toi32_i32$1;
    $15$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $12$hi;
    i64toi32_i32$1 = $15$hi;
    HEAPF64[$0_1 >> 3] = +$567($12_1 | 0, i64toi32_i32$0 | 0, $15_1 | 0, i64toi32_i32$1 | 0);
  }
  
  function $601($0_1) {
    $0_1 = +$0_1;
    var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
    wasm2js_scratch_store_f64(+$0_1);
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$1 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
    return i64toi32_i32$1 | 0;
  }
  
  function $602($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    var $4_1 = 0, $5_1 = 0;
    $4_1 = global$0 - 160 | 0;
    global$0 = $4_1;
    $0_1 = $1_1 ? $0_1 : $4_1 + 158 | 0;
    HEAP32[($4_1 + 148 | 0) >> 2] = $0_1;
    $5_1 = $1_1 + -1 | 0;
    HEAP32[($4_1 + 152 | 0) >> 2] = $5_1 >>> 0 > $1_1 >>> 0 ? 0 : $5_1;
    $4_1 = $115($4_1 | 0, 0 | 0, 144 | 0) | 0;
    HEAP32[($4_1 + 76 | 0) >> 2] = -1;
    HEAP32[($4_1 + 36 | 0) >> 2] = 93;
    HEAP32[($4_1 + 80 | 0) >> 2] = -1;
    HEAP32[($4_1 + 44 | 0) >> 2] = $4_1 + 159 | 0;
    HEAP32[($4_1 + 84 | 0) >> 2] = $4_1 + 148 | 0;
    HEAP8[$0_1 >> 0] = 0;
    $1_1 = $598($4_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
    global$0 = $4_1 + 160 | 0;
    return $1_1 | 0;
  }
  
  function $603($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0, $5_1 = 0, $4_1 = 0, $7_1 = 0, $6_1 = 0;
    $3_1 = HEAP32[($0_1 + 84 | 0) >> 2] | 0;
    $4_1 = HEAP32[$3_1 >> 2] | 0;
    label$1 : {
    $5_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    $6_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    $7_1 = (HEAP32[($0_1 + 20 | 0) >> 2] | 0) - $6_1 | 0;
    $7_1 = $5_1 >>> 0 < $7_1 >>> 0 ? $5_1 : $7_1;
    if (!$7_1) {
      break label$1
    }
    $120($4_1 | 0, $6_1 | 0, $7_1 | 0) | 0;
    $4_1 = (HEAP32[$3_1 >> 2] | 0) + $7_1 | 0;
    HEAP32[$3_1 >> 2] = $4_1;
    $5_1 = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) - $7_1 | 0;
    HEAP32[($3_1 + 4 | 0) >> 2] = $5_1;
    }
    label$2 : {
    $5_1 = $5_1 >>> 0 < $2_1 >>> 0 ? $5_1 : $2_1;
    if (!$5_1) {
      break label$2
    }
    $120($4_1 | 0, $1_1 | 0, $5_1 | 0) | 0;
    $4_1 = (HEAP32[$3_1 >> 2] | 0) + $5_1 | 0;
    HEAP32[$3_1 >> 2] = $4_1;
    HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) - $5_1 | 0;
    }
    HEAP8[$4_1 >> 0] = 0;
    $3_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $3_1;
    HEAP32[($0_1 + 20 | 0) >> 2] = $3_1;
    return $2_1 | 0;
  }
  
  function $604($0_1) {
    $0_1 = $0_1 | 0;
    return ($0_1 + -48 | 0) >>> 0 < 10 >>> 0 | (($0_1 | 32 | 0) + -97 | 0) >>> 0 < 6 >>> 0 | 0 | 0;
  }
  
  function $605($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $604($0_1 | 0) | 0 | 0;
  }
  
  function $606($0_1) {
    $0_1 = $0_1 | 0;
    return ($0_1 + -48 | 0) >>> 0 < 10 >>> 0 | 0;
  }
  
  function $607($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $606($0_1 | 0) | 0 | 0;
  }
  
  function $608($0_1, $0$hi, $1_1) {
    $0_1 = $0_1 | 0;
    $0$hi = $0$hi | 0;
    $1_1 = $1_1 | 0;
    var i64toi32_i32$5 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $2_1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, $4_1 = 0, $3_1 = 0, $6_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $5_1 = 0, $6$hi = 0, $39_1 = 0, $39$hi = 0, $7_1 = 0, $7$hi = 0, $50_1 = 0, $51_1 = 0, $83_1 = 0, $83$hi = 0, $29_1 = 0, $94_1 = 0, $94$hi = 0;
    label$1 : {
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = -1;
    i64toi32_i32$3 = -2;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    i64toi32_i32$0 = i64toi32_i32$4;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 136;
    if (i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
      break label$1
    }
    i64toi32_i32$0 = $0$hi;
    $2_1 = $0_1;
    $3_1 = ($2_1 + -68 | 0) >> 2 | 0;
    label$2 : {
      label$3 : {
      label$4 : {
        if ($2_1 & 3 | 0) {
        break label$4
        }
        $3_1 = $3_1 + -1 | 0;
        if (!$1_1) {
        break label$2
        }
        $4_1 = 1;
        break label$3;
      }
      if (!$1_1) {
        break label$2
      }
      $4_1 = 0;
      }
      HEAP32[$1_1 >> 2] = $4_1;
    }
    i64toi32_i32$5 = (Math_imul($2_1, 31536e3) + Math_imul($3_1, 86400) | 0) + 2087447296 | 0;
    i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
    return i64toi32_i32$5 | 0;
    }
    i64toi32_i32$5 = $0$hi;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$0 = -1;
    i64toi32_i32$2 = -100;
    i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $0_1 = i64toi32_i32$1;
    $0$hi = i64toi32_i32$4;
    i64toi32_i32$3 = 0;
    i64toi32_i32$3 = __wasm_i64_sdiv(i64toi32_i32$1 | 0, i64toi32_i32$4 | 0, 400 | 0, i64toi32_i32$3 | 0) | 0;
    i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
    $6_1 = i64toi32_i32$3;
    $6$hi = i64toi32_i32$4;
    i64toi32_i32$3 = 0;
    i64toi32_i32$3 = __wasm_i64_mul($6_1 | 0, i64toi32_i32$4 | 0, 400 | 0, i64toi32_i32$3 | 0) | 0;
    i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
    $39_1 = i64toi32_i32$3;
    $39$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $0$hi;
    i64toi32_i32$5 = i64toi32_i32$1;
    i64toi32_i32$3 = $39$hi;
    i64toi32_i32$2 = $39_1;
    i64toi32_i32$0 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
    i64toi32_i32$1 = (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) + i64toi32_i32$3 | 0;
    i64toi32_i32$1 = i64toi32_i32$4 - i64toi32_i32$1 | 0;
    $7_1 = i64toi32_i32$0;
    $7$hi = i64toi32_i32$1;
    i64toi32_i32$4 = i64toi32_i32$0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 63;
    i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
    $25_1 = i64toi32_i32$1 >> i64toi32_i32$3 | 0;
    } else {
    i64toi32_i32$5 = i64toi32_i32$1 >> i64toi32_i32$3 | 0;
    $25_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
    }
    i64toi32_i32$5 = $6$hi;
    $3_1 = $25_1 + $6_1 | 0;
    label$5 : {
    label$6 : {
      label$7 : {
      label$8 : {
        label$9 : {
        i64toi32_i32$5 = $7$hi;
        $2_1 = $7_1;
        $50_1 = $2_1 + 400 | 0;
        $51_1 = $2_1;
        i64toi32_i32$1 = $2_1;
        i64toi32_i32$4 = 0;
        i64toi32_i32$2 = 0;
        if ((i64toi32_i32$5 | 0) < (i64toi32_i32$4 | 0)) {
          $26_1 = 1
        } else {
          if ((i64toi32_i32$5 | 0) <= (i64toi32_i32$4 | 0)) {
          if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$2 >>> 0) {
            $27_1 = 0
          } else {
            $27_1 = 1
          }
          $28_1 = $27_1;
          } else {
          $28_1 = 0
          }
          $26_1 = $28_1;
        }
        $2_1 = $26_1 ? $50_1 : $51_1;
        if ($2_1) {
          break label$9
        }
        $2_1 = 1;
        $4_1 = 0;
        break label$8;
        }
        label$10 : {
        label$11 : {
          if (($2_1 | 0) < (200 | 0)) {
          break label$11
          }
          label$12 : {
          if ($2_1 >>> 0 < 300 >>> 0) {
            break label$12
          }
          $2_1 = $2_1 + -300 | 0;
          $4_1 = 3;
          break label$10;
          }
          $2_1 = $2_1 + -200 | 0;
          $4_1 = 2;
          break label$10;
        }
        $4_1 = ($2_1 | 0) > (99 | 0);
        $2_1 = $4_1 ? $2_1 + -100 | 0 : $2_1;
        }
        if ($2_1) {
        break label$7
        }
        $2_1 = 0;
      }
      $5_1 = 0;
      if ($1_1) {
        break label$6
      }
      break label$5;
      }
      $5_1 = $2_1 >>> 2 | 0;
      $2_1 = !($2_1 & 3 | 0);
      if (!$1_1) {
      break label$5
      }
    }
    HEAP32[$1_1 >> 2] = $2_1;
    }
    i64toi32_i32$1 = $0$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$5 = __wasm_i64_mul($0_1 | 0, i64toi32_i32$1 | 0, 31536e3 | 0, i64toi32_i32$5 | 0) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $83_1 = i64toi32_i32$5;
    $83$hi = i64toi32_i32$1;
    i64toi32_i32$5 = ($5_1 + (Math_imul($4_1, 24) + Math_imul($3_1, 97) | 0) | 0) - $2_1 | 0;
    i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
    $29_1 = i64toi32_i32$5;
    i64toi32_i32$5 = 0;
    i64toi32_i32$5 = __wasm_i64_mul($29_1 | 0, i64toi32_i32$1 | 0, 86400 | 0, i64toi32_i32$5 | 0) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $94_1 = i64toi32_i32$5;
    $94$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $83$hi;
    i64toi32_i32$2 = $83_1;
    i64toi32_i32$5 = $94$hi;
    i64toi32_i32$4 = $94_1;
    i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
    i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    i64toi32_i32$1 = i64toi32_i32$3;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = 946771200;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
    i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
    }
    i64toi32_i32$1 = i64toi32_i32$5;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$3;
    return i64toi32_i32$5 | 0;
  }
  
  function $609($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0;
    $2_1 = HEAP32[(($0_1 << 2 | 0) + 70832 | 0) >> 2] | 0;
    return (($0_1 | 0) > (1 | 0) ? ($1_1 ? $2_1 + 86400 | 0 : $2_1) : $2_1) | 0;
  }
  
  function $610($0_1) {
    $0_1 = $0_1 | 0;
    var i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $2_1 = 0, $5$hi = 0, $4_1 = 0, $5_1 = 0, $1_1 = 0, $3_1 = 0, $34$hi = 0, $6_1 = 0, $6$hi = 0, $7_1 = 0, $7$hi = 0, $55_1 = 0, $55$hi = 0, $58$hi = 0, $59$hi = 0, $31_1 = 0, $63_1 = 0, $63$hi = 0, $64$hi = 0, $66_1 = 0, $66$hi = 0, $67$hi = 0, $69_1 = 0, $69$hi = 0, $70$hi = 0;
    $1_1 = global$0 - 16 | 0;
    global$0 = $1_1;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
    i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
    $5_1 = i64toi32_i32$0;
    $5$hi = i64toi32_i32$1;
    label$1 : {
    $2_1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
    if ($2_1 >>> 0 < 12 >>> 0) {
      break label$1
    }
    $3_1 = ($2_1 | 0) / (12 | 0) | 0;
    $4_1 = $2_1 - Math_imul($3_1, 12) | 0;
    $2_1 = ($4_1 | 0) < (0 | 0) ? $4_1 + 12 | 0 : $4_1;
    i64toi32_i32$0 = $3_1 + ($4_1 >> 31 | 0) | 0;
    i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
    $34$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $5$hi;
    i64toi32_i32$1 = $34$hi;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $5_1 = i64toi32_i32$4;
    $5$hi = i64toi32_i32$5;
    }
    i64toi32_i32$5 = $5$hi;
    i64toi32_i32$5 = $608($5_1 | 0, i64toi32_i32$5 | 0, $1_1 + 12 | 0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $5_1 = i64toi32_i32$5;
    $5$hi = i64toi32_i32$2;
    $2_1 = $609($2_1 | 0, HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0) | 0;
    $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
    i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
    $6_1 = i64toi32_i32$2;
    $6$hi = i64toi32_i32$5;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
    $7_1 = i64toi32_i32$5;
    $7$hi = i64toi32_i32$2;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
    global$0 = $1_1 + 16 | 0;
    $55_1 = i64toi32_i32$2;
    $55$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $5$hi;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
    $58$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $5$hi;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$2 = $58$hi;
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $59$hi = i64toi32_i32$4;
    i64toi32_i32$1 = $4_1 + -1 | 0;
    i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
    $31_1 = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$1 = __wasm_i64_mul($31_1 | 0, i64toi32_i32$4 | 0, 86400 | 0, i64toi32_i32$1 | 0) | 0;
    i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
    $63_1 = i64toi32_i32$1;
    $63$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $59$hi;
    i64toi32_i32$5 = i64toi32_i32$0;
    i64toi32_i32$1 = $63$hi;
    i64toi32_i32$3 = $63_1;
    i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $64$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $6$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$5 = __wasm_i64_mul($6_1 | 0, i64toi32_i32$0 | 0, 3600 | 0, i64toi32_i32$5 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $66_1 = i64toi32_i32$5;
    $66$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $64$hi;
    i64toi32_i32$4 = i64toi32_i32$2;
    i64toi32_i32$5 = $66$hi;
    i64toi32_i32$3 = $66_1;
    i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
    }
    $67$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $7$hi;
    i64toi32_i32$4 = 0;
    i64toi32_i32$4 = __wasm_i64_mul($7_1 | 0, i64toi32_i32$2 | 0, 60 | 0, i64toi32_i32$4 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $69_1 = i64toi32_i32$4;
    $69$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $67$hi;
    i64toi32_i32$0 = i64toi32_i32$1;
    i64toi32_i32$4 = $69$hi;
    i64toi32_i32$3 = $69_1;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $70$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $55$hi;
    i64toi32_i32$2 = $55_1;
    i64toi32_i32$0 = $70$hi;
    i64toi32_i32$3 = i64toi32_i32$5;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    i64toi32_i32$2 = i64toi32_i32$4;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
    return i64toi32_i32$2 | 0;
  }
  
  function $611($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    var $4_1 = 0;
    $4_1 = global$0 - 16 | 0;
    global$0 = $4_1;
    HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
    $3_1 = $602($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
    global$0 = $4_1 + 16 | 0;
    return $3_1 | 0;
  }
  
  function $612() {
    label$1 : {
    if ((HEAPU8[(0 + 88816 | 0) >> 0] | 0) & 1 | 0) {
      break label$1
    }
    $145(88792 | 0) | 0;
    label$2 : {
      if ((HEAPU8[(0 + 88816 | 0) >> 0] | 0) & 1 | 0) {
      break label$2
      }
      fimport$23(88772 | 0, 88776 | 0, 88832 | 0, 88864 | 0);
      HEAP32[(0 + 88784 | 0) >> 2] = 88864;
      HEAP32[(0 + 88780 | 0) >> 2] = 88832;
      HEAP8[(0 + 88816 | 0) >> 0] = 1;
    }
    $146(88792 | 0) | 0;
    }
  }
  
  function $613($0_1) {
    $0_1 = $0_1 | 0;
    $0_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
    $149(88788 | 0);
    $612();
    $150(88788 | 0);
    return $0_1 | 0;
  }
  
  function $614($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $3_1 = 0, $2_1 = 0, $4_1 = 0;
    label$1 : {
    if (($0_1 | 0) != (14 | 0)) {
      break label$1
    }
    return (HEAP32[$1_1 >> 2] | 0 ? 67037 : 66332) | 0;
    }
    $2_1 = $0_1 >> 16 | 0;
    label$2 : {
    $3_1 = $0_1 & 65535 | 0;
    if (($3_1 | 0) != (65535 | 0)) {
      break label$2
    }
    if (($2_1 | 0) > (5 | 0)) {
      break label$2
    }
    $0_1 = HEAP32[($1_1 + ($2_1 << 2 | 0) | 0) >> 2] | 0;
    return ($0_1 ? $0_1 + 8 | 0 : 66347) | 0;
    }
    $4_1 = 67181;
    label$3 : {
    label$4 : {
      label$5 : {
      switch ($2_1 + -1 | 0 | 0) {
      case 0:
        if ($3_1 >>> 0 > 1 >>> 0) {
        break label$3
        }
        $0_1 = 70880;
        break label$4;
      case 1:
        if ($3_1 >>> 0 > 49 >>> 0) {
        break label$3
        }
        $0_1 = 70896;
        break label$4;
      case 4:
        break label$5;
      default:
        break label$3;
      };
      }
      if ($3_1 >>> 0 > 3 >>> 0) {
      break label$3
      }
      $0_1 = 71216;
    }
    label$8 : {
      if ($3_1) {
      break label$8
      }
      return $0_1 | 0;
    }
    label$9 : while (1) {
      $1_1 = HEAPU8[$0_1 >> 0] | 0;
      $4_1 = $0_1 + 1 | 0;
      $0_1 = $4_1;
      if ($1_1) {
      continue label$9
      }
      $3_1 = $3_1 + -1 | 0;
      if ($3_1) {
      continue label$9
      }
      break label$9;
    };
    }
    return $4_1 | 0;
  }
  
  function $615($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
    i64toi32_i32$0 = -1;
    i64toi32_i32$0 = $616($0_1 | 0, $1_1 | 0, $2_1 | 0, -1 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
    return i64toi32_i32$0 | 0;
  }
  
  function $616($0_1, $1_1, $2_1, $3_1, $3$hi) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $3$hi = $3$hi | 0;
    var i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, $7_1 = 0, $6_1 = 0, $12$hi = 0, $11$hi = 0, $8_1 = 0, $11_1 = 0, $12_1 = 0, $5_1 = 0, $4_1 = 0, $10_1 = 0, $9_1 = 0, $13_1 = 0, $14_1 = 0, $14$hi = 0, $13$hi = 0, $105_1 = 0, $105$hi = 0, $150$hi = 0;
    $4_1 = global$0 - 16 | 0;
    global$0 = $4_1;
    label$1 : {
    label$2 : {
      label$3 : {
      label$4 : {
        if (($2_1 | 0) > (36 | 0)) {
        break label$4
        }
        $5_1 = 0;
        $6_1 = HEAPU8[$0_1 >> 0] | 0;
        if ($6_1) {
        break label$3
        }
        $7_1 = $0_1;
        break label$2;
      }
      HEAP32[($124() | 0) >> 2] = 28;
      i64toi32_i32$0 = 0;
      $3_1 = 0;
      $3$hi = i64toi32_i32$0;
      break label$1;
      }
      $7_1 = $0_1;
      label$5 : {
      label$6 : while (1) {
        if (!($617($6_1 << 24 >> 24 | 0) | 0)) {
        break label$5
        }
        $6_1 = HEAPU8[($7_1 + 1 | 0) >> 0] | 0;
        $8_1 = $7_1 + 1 | 0;
        $7_1 = $8_1;
        if ($6_1) {
        continue label$6
        }
        break label$6;
      };
      break label$2;
      }
      label$7 : {
      $6_1 = $6_1 & 255 | 0;
      switch ($6_1 + -43 | 0 | 0) {
      case 0:
      case 2:
        break label$7;
      default:
        break label$2;
      };
      }
      $5_1 = ($6_1 | 0) == (45 | 0) ? -1 : 0;
      $7_1 = $7_1 + 1 | 0;
    }
    label$8 : {
      label$9 : {
      if (($2_1 | 16 | 0 | 0) != (16 | 0)) {
        break label$9
      }
      if ((HEAPU8[$7_1 >> 0] | 0 | 0) != (48 | 0)) {
        break label$9
      }
      $9_1 = 1;
      label$10 : {
        if (((HEAPU8[($7_1 + 1 | 0) >> 0] | 0) & 223 | 0 | 0) != (88 | 0)) {
        break label$10
        }
        $7_1 = $7_1 + 2 | 0;
        $10_1 = 16;
        break label$8;
      }
      $7_1 = $7_1 + 1 | 0;
      $10_1 = $2_1 ? $2_1 : 8;
      break label$8;
      }
      $10_1 = $2_1 ? $2_1 : 10;
      $9_1 = 0;
    }
    i64toi32_i32$0 = 0;
    $11_1 = $10_1;
    $11$hi = i64toi32_i32$0;
    $2_1 = 0;
    i64toi32_i32$0 = 0;
    $12_1 = 0;
    $12$hi = i64toi32_i32$0;
    label$11 : {
      label$12 : while (1) {
      label$13 : {
        $8_1 = HEAPU8[$7_1 >> 0] | 0;
        $6_1 = $8_1 + -48 | 0;
        if (($6_1 & 255 | 0) >>> 0 < 10 >>> 0) {
        break label$13
        }
        label$14 : {
        if ((($8_1 + -97 | 0) & 255 | 0) >>> 0 > 25 >>> 0) {
          break label$14
        }
        $6_1 = $8_1 + -87 | 0;
        break label$13;
        }
        if ((($8_1 + -65 | 0) & 255 | 0) >>> 0 > 25 >>> 0) {
        break label$11
        }
        $6_1 = $8_1 + -55 | 0;
      }
      if (($10_1 | 0) <= ($6_1 & 255 | 0 | 0)) {
        break label$11
      }
      i64toi32_i32$0 = $11$hi;
      i64toi32_i32$0 = $12$hi;
      i64toi32_i32$0 = $11$hi;
      i64toi32_i32$1 = 0;
      i64toi32_i32$2 = $12$hi;
      i64toi32_i32$3 = 0;
      $554($4_1 | 0, $11_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, $12_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
      $8_1 = 1;
      label$15 : {
        i64toi32_i32$1 = $4_1;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] | 0;
        i64toi32_i32$1 = i64toi32_i32$3;
        i64toi32_i32$3 = 0;
        i64toi32_i32$0 = 0;
        if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
        break label$15
        }
        i64toi32_i32$1 = $12$hi;
        i64toi32_i32$1 = $11$hi;
        i64toi32_i32$1 = $12$hi;
        i64toi32_i32$2 = $11$hi;
        i64toi32_i32$2 = __wasm_i64_mul($12_1 | 0, i64toi32_i32$1 | 0, $11_1 | 0, i64toi32_i32$2 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $13_1 = i64toi32_i32$2;
        $13$hi = i64toi32_i32$1;
        i64toi32_i32$1 = 0;
        i64toi32_i32$0 = $6_1;
        i64toi32_i32$2 = 0;
        i64toi32_i32$3 = 255;
        i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
        $14_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
        $14$hi = i64toi32_i32$2;
        i64toi32_i32$1 = $14_1;
        i64toi32_i32$0 = -1;
        i64toi32_i32$3 = -1;
        i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
        $105_1 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
        $105$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $13$hi;
        i64toi32_i32$2 = $13_1;
        i64toi32_i32$1 = $105$hi;
        i64toi32_i32$3 = $105_1;
        if (i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
        break label$15
        }
        i64toi32_i32$2 = i64toi32_i32$0;
        i64toi32_i32$2 = $14$hi;
        i64toi32_i32$2 = i64toi32_i32$0;
        i64toi32_i32$3 = $13_1;
        i64toi32_i32$0 = $14$hi;
        i64toi32_i32$1 = $14_1;
        i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
        i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
        }
        $12_1 = i64toi32_i32$4;
        $12$hi = i64toi32_i32$5;
        $9_1 = 1;
        $8_1 = $2_1;
      }
      $7_1 = $7_1 + 1 | 0;
      $2_1 = $8_1;
      continue label$12;
      };
    }
    label$16 : {
      if (!$1_1) {
      break label$16
      }
      HEAP32[$1_1 >> 2] = $9_1 ? $7_1 : $0_1;
    }
    label$17 : {
      label$18 : {
      label$19 : {
        if (!$2_1) {
        break label$19
        }
        HEAP32[($124() | 0) >> 2] = 68;
        i64toi32_i32$5 = $3$hi;
        i64toi32_i32$2 = $3_1;
        i64toi32_i32$3 = 0;
        i64toi32_i32$1 = 1;
        i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
        $11_1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
        $11$hi = i64toi32_i32$3;
        $5_1 = !($11_1 | i64toi32_i32$3 | 0) ? $5_1 : 0;
        i64toi32_i32$3 = i64toi32_i32$5;
        $12_1 = i64toi32_i32$2;
        $12$hi = i64toi32_i32$3;
        break label$18;
      }
      i64toi32_i32$3 = $12$hi;
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$3 = $12$hi;
      i64toi32_i32$5 = $12_1;
      i64toi32_i32$2 = $3$hi;
      i64toi32_i32$1 = $3_1;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0) {
        break label$17
      }
      i64toi32_i32$5 = i64toi32_i32$2;
      i64toi32_i32$5 = i64toi32_i32$2;
      i64toi32_i32$3 = 0;
      i64toi32_i32$2 = 1;
      i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
      $11_1 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
      $11$hi = i64toi32_i32$3;
      }
      label$20 : {
      i64toi32_i32$3 = $11$hi;
      if ($11_1) {
        break label$20
      }
      if ($5_1) {
        break label$20
      }
      HEAP32[($124() | 0) >> 2] = 68;
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$5 = $3_1;
      i64toi32_i32$1 = -1;
      i64toi32_i32$2 = -1;
      i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $3_1 = i64toi32_i32$0;
      $3$hi = i64toi32_i32$4;
      break label$1;
      }
      i64toi32_i32$4 = $12$hi;
      i64toi32_i32$4 = $3$hi;
      i64toi32_i32$4 = $12$hi;
      i64toi32_i32$3 = $12_1;
      i64toi32_i32$5 = $3$hi;
      i64toi32_i32$2 = $3_1;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 <= i64toi32_i32$2 >>> 0 | 0) | 0) {
      break label$17
      }
      HEAP32[($124() | 0) >> 2] = 68;
      break label$1;
    }
    i64toi32_i32$3 = $12$hi;
    i64toi32_i32$4 = $5_1;
    i64toi32_i32$3 = i64toi32_i32$4 >> 31 | 0;
    $11_1 = i64toi32_i32$4;
    $11$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $12$hi;
    i64toi32_i32$2 = $12_1;
    i64toi32_i32$4 = $11$hi;
    i64toi32_i32$5 = $11_1;
    i64toi32_i32$4 = i64toi32_i32$3 ^ i64toi32_i32$4 | 0;
    $150$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $11$hi;
    i64toi32_i32$4 = $150$hi;
    i64toi32_i32$3 = i64toi32_i32$2 ^ i64toi32_i32$5 | 0;
    i64toi32_i32$2 = $11$hi;
    i64toi32_i32$1 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
    i64toi32_i32$0 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) + i64toi32_i32$2 | 0;
    i64toi32_i32$0 = i64toi32_i32$4 - i64toi32_i32$0 | 0;
    $3_1 = i64toi32_i32$1;
    $3$hi = i64toi32_i32$0;
    }
    global$0 = $4_1 + 16 | 0;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$3 = $3_1;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
    return i64toi32_i32$3 | 0;
  }
  
  function $617($0_1) {
    $0_1 = $0_1 | 0;
    return ($0_1 | 0) == (32 | 0) | ($0_1 + -9 | 0) >>> 0 < 5 >>> 0 | 0 | 0;
  }
  
  function $618($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
    i64toi32_i32$0 = -2147483648;
    i64toi32_i32$0 = $616($0_1 | 0, $1_1 | 0, $2_1 | 0, 0 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
    return i64toi32_i32$0 | 0;
  }
  
  function $619($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var i64toi32_i32$0 = 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$0 = $616($0_1 | 0, $1_1 | 0, $2_1 | 0, -1 | 0, i64toi32_i32$0 | 0) | 0;
    return i64toi32_i32$0 | 0;
  }
  
  function $620($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, $10_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $11$hi = 0, $11_1 = 0, $6_1 = 0, $8_1 = 0, $7_1 = 0, $9_1 = 0, $12_1 = 0, $12$hi = 0, i64toi32_i32$6 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $54_1 = 0, $54$hi = 0, $56$hi = 0, $64$hi = 0, $80$hi = 0, $101_1 = 0, $101$hi = 0, $103_1 = 0, $103$hi = 0, $141_1 = 0, $141$hi = 0, $145$hi = 0;
    $6_1 = global$0 - 80 | 0;
    global$0 = $6_1;
    $7_1 = 65671;
    $8_1 = 48;
    $9_1 = 131112;
    $10_1 = 0;
    label$1 : {
    label$2 : {
      label$3 : {
      label$4 : {
        label$5 : {
        label$6 : {
          label$7 : {
          label$8 : {
            label$9 : {
            label$10 : {
              label$11 : {
              label$12 : {
                label$13 : {
                label$14 : {
                  label$15 : {
                  label$16 : {
                    label$17 : {
                    label$18 : {
                      label$19 : {
                      label$20 : {
                        label$21 : {
                        label$22 : {
                          switch ($2_1 + -37 | 0 | 0) {
                          case 60:
                          $10_1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
                          if ($10_1 >>> 0 <= 6 >>> 0) {
                            break label$12
                          }
                          break label$3;
                          case 28:
                          $10_1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
                          if ($10_1 >>> 0 > 6 >>> 0) {
                            break label$3
                          }
                          $10_1 = $10_1 + 131079 | 0;
                          break label$11;
                          case 61:
                          case 67:
                          $10_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
                          if ($10_1 >>> 0 > 11 >>> 0) {
                            break label$3
                          }
                          $10_1 = $10_1 + 131086 | 0;
                          break label$11;
                          case 29:
                          $10_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
                          if ($10_1 >>> 0 > 11 >>> 0) {
                            break label$3
                          }
                          $10_1 = $10_1 + 131098 | 0;
                          break label$11;
                          case 30:
                          i64toi32_i32$2 = $3_1;
                          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
                          i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
                          i64toi32_i32$2 = i64toi32_i32$0;
                          i64toi32_i32$0 = 0;
                          i64toi32_i32$3 = 1900;
                          i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
                          i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
                          if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
                            i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
                          }
                          i64toi32_i32$2 = 0;
                          i64toi32_i32$2 = __wasm_i64_sdiv(i64toi32_i32$4 | 0, i64toi32_i32$5 | 0, 100 | 0, i64toi32_i32$2 | 0) | 0;
                          i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
                          $11_1 = i64toi32_i32$2;
                          $11$hi = i64toi32_i32$5;
                          break label$7;
                          case 64:
                          $8_1 = 95;
                          case 63:
                          i64toi32_i32$1 = $3_1;
                          i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] | 0;
                          i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
                          $11_1 = i64toi32_i32$5;
                          $11$hi = i64toi32_i32$2;
                          break label$6;
                          case 33:
                          $7_1 = 66236;
                          break label$8;
                          case 34:
                          case 66:
                          i64toi32_i32$1 = $3_1;
                          i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] | 0;
                          i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
                          $12_1 = i64toi32_i32$2;
                          $12$hi = i64toi32_i32$5;
                          i64toi32_i32$1 = i64toi32_i32$2;
                          i64toi32_i32$2 = 0;
                          i64toi32_i32$3 = 1900;
                          i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
                          i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
                          if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
                            i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
                          }
                          $11_1 = i64toi32_i32$0;
                          $11$hi = i64toi32_i32$4;
                          label$48 : {
                            label$49 : {
                            $10_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
                            if (($10_1 | 0) > (2 | 0)) {
                              break label$49
                            }
                            $54_1 = i64toi32_i32$0;
                            $54$hi = i64toi32_i32$4;
                            i64toi32_i32$4 = $12$hi;
                            i64toi32_i32$5 = $12_1;
                            i64toi32_i32$1 = 0;
                            i64toi32_i32$3 = 1899;
                            i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
                            i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
                            if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
                              i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
                            }
                            $56$hi = i64toi32_i32$0;
                            i64toi32_i32$1 = ($621($3_1 | 0) | 0 | 0) == (1 | 0);
                            i64toi32_i32$0 = $54$hi;
                            i64toi32_i32$5 = $56$hi;
                            i64toi32_i32$3 = i64toi32_i32$1 ? $54_1 : i64toi32_i32$2;
                            i64toi32_i32$4 = i64toi32_i32$1 ? i64toi32_i32$0 : i64toi32_i32$5;
                            $11_1 = i64toi32_i32$3;
                            $11$hi = i64toi32_i32$4;
                            break label$48;
                            }
                            if ($10_1 >>> 0 < 361 >>> 0) {
                            break label$48
                            }
                            i64toi32_i32$4 = $12$hi;
                            i64toi32_i32$1 = $12_1;
                            i64toi32_i32$3 = 0;
                            i64toi32_i32$5 = 1901;
                            i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
                            i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
                            if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
                            i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
                            }
                            $64$hi = i64toi32_i32$2;
                            i64toi32_i32$2 = $11$hi;
                            i64toi32_i32$3 = ($621($3_1 | 0) | 0 | 0) == (1 | 0);
                            i64toi32_i32$2 = $64$hi;
                            i64toi32_i32$1 = $11$hi;
                            i64toi32_i32$5 = i64toi32_i32$3 ? i64toi32_i32$0 : $11_1;
                            i64toi32_i32$4 = i64toi32_i32$3 ? i64toi32_i32$2 : i64toi32_i32$1;
                            $11_1 = i64toi32_i32$5;
                            $11$hi = i64toi32_i32$4;
                          }
                          $8_1 = 48;
                          if (($2_1 | 0) == (103 | 0)) {
                            break label$13
                          }
                          break label$5;
                          case 35:
                          i64toi32_i32$3 = $3_1;
                          i64toi32_i32$4 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
                          i64toi32_i32$5 = i64toi32_i32$4 >> 31 | 0;
                          $11_1 = i64toi32_i32$4;
                          $11$hi = i64toi32_i32$5;
                          break label$7;
                          case 36:
                          $8_1 = 48;
                          $10_1 = 2;
                          label$50 : {
                            $3_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
                            if ($3_1) {
                            break label$50
                            }
                            i64toi32_i32$5 = 0;
                            $11_1 = 12;
                            $11$hi = i64toi32_i32$5;
                            break label$4;
                          }
                          i64toi32_i32$4 = $3_1;
                          i64toi32_i32$5 = i64toi32_i32$4 >> 31 | 0;
                          $11_1 = i64toi32_i32$4;
                          $11$hi = i64toi32_i32$5;
                          i64toi32_i32$3 = i64toi32_i32$4;
                          i64toi32_i32$4 = -1;
                          i64toi32_i32$1 = -12;
                          i64toi32_i32$2 = $3_1 + i64toi32_i32$1 | 0;
                          i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
                          if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
                            i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
                          }
                          $80$hi = i64toi32_i32$0;
                          i64toi32_i32$0 = $11$hi;
                          i64toi32_i32$4 = ($3_1 | 0) > (12 | 0);
                          i64toi32_i32$0 = $80$hi;
                          i64toi32_i32$3 = $11$hi;
                          i64toi32_i32$1 = i64toi32_i32$4 ? i64toi32_i32$2 : $11_1;
                          i64toi32_i32$5 = i64toi32_i32$4 ? i64toi32_i32$0 : i64toi32_i32$3;
                          $11_1 = i64toi32_i32$1;
                          $11$hi = i64toi32_i32$5;
                          break label$4;
                          case 69:
                          i64toi32_i32$1 = (HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 1 | 0;
                          i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
                          $11_1 = i64toi32_i32$1;
                          $11$hi = i64toi32_i32$5;
                          $8_1 = 48;
                          $10_1 = 3;
                          break label$4;
                          case 72:
                          i64toi32_i32$1 = (HEAP32[($3_1 + 16 | 0) >> 2] | 0) + 1 | 0;
                          i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
                          $11_1 = i64toi32_i32$1;
                          $11$hi = i64toi32_i32$5;
                          break label$7;
                          case 40:
                          i64toi32_i32$4 = $3_1;
                          i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
                          i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
                          $11_1 = i64toi32_i32$5;
                          $11$hi = i64toi32_i32$1;
                          break label$7;
                          case 73:
                          HEAP32[$1_1 >> 2] = 1;
                          $10_1 = 67178;
                          break label$1;
                          case 75:
                          $10_1 = (HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) > (11 | 0) ? 131111 : 131110;
                          break label$11;
                          case 45:
                          $7_1 = 66319;
                          break label$8;
                          case 78:
                          i64toi32_i32$1 = $610($3_1 | 0) | 0;
                          i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
                          $101_1 = i64toi32_i32$1;
                          $101$hi = i64toi32_i32$5;
                          i64toi32_i32$4 = $3_1;
                          i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 36 | 0) >> 2] | 0;
                          i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
                          $103_1 = i64toi32_i32$5;
                          $103$hi = i64toi32_i32$1;
                          i64toi32_i32$1 = $101$hi;
                          i64toi32_i32$4 = $101_1;
                          i64toi32_i32$5 = $103$hi;
                          i64toi32_i32$3 = $103_1;
                          i64toi32_i32$0 = i64toi32_i32$4 - i64toi32_i32$3 | 0;
                          i64toi32_i32$6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0;
                          i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
                          i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
                          $11_1 = i64toi32_i32$0;
                          $11$hi = i64toi32_i32$2;
                          break label$21;
                          case 46:
                          i64toi32_i32$1 = $3_1;
                          i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
                          i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
                          $11_1 = i64toi32_i32$2;
                          $11$hi = i64toi32_i32$4;
                          break label$7;
                          case 79:
                          HEAP32[$1_1 >> 2] = 1;
                          $10_1 = 67180;
                          break label$1;
                          case 47:
                          $7_1 = 66300;
                          break label$8;
                          case 80:
                          $10_1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
                          i64toi32_i32$2 = $10_1 ? $10_1 : 7;
                          i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
                          $11_1 = i64toi32_i32$2;
                          $11$hi = i64toi32_i32$4;
                          break label$21;
                          case 48:
                          i64toi32_i32$4 = 0;
                          $11_1 = ((((HEAP32[($3_1 + 28 | 0) >> 2] | 0) - (HEAP32[($3_1 + 24 | 0) >> 2] | 0) | 0) + 7 | 0) >>> 0) / (7 >>> 0) | 0;
                          $11$hi = i64toi32_i32$4;
                          break label$7;
                          case 50:
                          i64toi32_i32$4 = 0;
                          $11_1 = ((((HEAP32[($3_1 + 28 | 0) >> 2] | 0) - ((((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 6 | 0) >>> 0) % (7 >>> 0) | 0) | 0) + 7 | 0) >>> 0) / (7 >>> 0) | 0;
                          $11$hi = i64toi32_i32$4;
                          break label$7;
                          case 49:
                          i64toi32_i32$4 = 0;
                          $11_1 = $621($3_1 | 0) | 0;
                          $11$hi = i64toi32_i32$4;
                          break label$7;
                          case 77:
                          break label$10;
                          case 0:
                          break label$14;
                          case 53:
                          break label$15;
                          case 85:
                          break label$16;
                          case 52:
                          break label$17;
                          case 84:
                          break label$18;
                          case 51:
                          break label$19;
                          case 83:
                          break label$20;
                          case 82:
                          break label$22;
                          case 31:
                          break label$8;
                          case 62:
                          break label$9;
                          default:
                          break label$1;
                          };
                        }
                        i64toi32_i32$1 = $3_1;
                        i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] | 0;
                        i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
                        $11_1 = i64toi32_i32$4;
                        $11$hi = i64toi32_i32$2;
                        }
                        $8_1 = 48;
                        $10_1 = 1;
                        break label$4;
                      }
                      $9_1 = 131113;
                      break label$9;
                      }
                      $9_1 = 131114;
                      break label$9;
                    }
                    i64toi32_i32$1 = $3_1;
                    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] | 0;
                    i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
                    i64toi32_i32$1 = i64toi32_i32$2;
                    i64toi32_i32$2 = 0;
                    i64toi32_i32$3 = 1900;
                    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
                    i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
                    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
                      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
                    }
                    i64toi32_i32$1 = 0;
                    i64toi32_i32$1 = __wasm_i64_srem(i64toi32_i32$5 | 0, i64toi32_i32$0 | 0, 100 | 0, i64toi32_i32$1 | 0) | 0;
                    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
                    $11_1 = i64toi32_i32$1;
                    $11$hi = i64toi32_i32$0;
                    $141_1 = i64toi32_i32$1;
                    $141$hi = i64toi32_i32$0;
                    i64toi32_i32$4 = i64toi32_i32$1;
                    i64toi32_i32$1 = 0;
                    i64toi32_i32$3 = 63;
                    i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
                    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
                      i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
                      $34_1 = i64toi32_i32$0 >> i64toi32_i32$2 | 0;
                    } else {
                      i64toi32_i32$1 = i64toi32_i32$0 >> i64toi32_i32$2 | 0;
                      $34_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$2 | 0) | 0;
                    }
                    $11_1 = $34_1;
                    $11$hi = i64toi32_i32$1;
                    i64toi32_i32$1 = $141$hi;
                    i64toi32_i32$0 = $141_1;
                    i64toi32_i32$4 = $11$hi;
                    i64toi32_i32$3 = $11_1;
                    i64toi32_i32$4 = i64toi32_i32$1 ^ i64toi32_i32$4 | 0;
                    $145$hi = i64toi32_i32$4;
                    i64toi32_i32$4 = $11$hi;
                    i64toi32_i32$4 = $145$hi;
                    i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
                    i64toi32_i32$0 = $11$hi;
                    i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
                    i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
                    i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
                    i64toi32_i32$5 = i64toi32_i32$4 - i64toi32_i32$5 | 0;
                    $11_1 = i64toi32_i32$2;
                    $11$hi = i64toi32_i32$5;
                    break label$7;
                    }
                    i64toi32_i32$4 = $3_1;
                    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 20 | 0) >> 2] | 0;
                    i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
                    $12_1 = i64toi32_i32$5;
                    $12$hi = i64toi32_i32$1;
                    i64toi32_i32$4 = i64toi32_i32$5;
                    i64toi32_i32$5 = 0;
                    i64toi32_i32$3 = 1900;
                    i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
                    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
                    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
                    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
                    }
                    $11_1 = i64toi32_i32$0;
                    $11$hi = i64toi32_i32$2;
                    label$51 : {
                    i64toi32_i32$2 = $12$hi;
                    i64toi32_i32$1 = $12_1;
                    i64toi32_i32$4 = 0;
                    i64toi32_i32$3 = 8100;
                    if ((i64toi32_i32$2 | 0) > (i64toi32_i32$4 | 0)) {
                      $35_1 = 1
                    } else {
                      if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$4 | 0)) {
                      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
                        $36_1 = 0
                      } else {
                        $36_1 = 1
                      }
                      $37_1 = $36_1;
                      } else {
                      $37_1 = 0
                      }
                      $35_1 = $37_1;
                    }
                    if ($35_1) {
                      break label$51
                    }
                    $8_1 = 48;
                    break label$5;
                    }
                    i64toi32_i32$1 = $11$hi;
                    i64toi32_i32$2 = $6_1;
                    HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] = $11_1;
                    HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] = i64toi32_i32$1;
                    HEAP32[$1_1 >> 2] = $611($0_1 | 0, 100 | 0, 66193 | 0, i64toi32_i32$2 + 48 | 0 | 0) | 0;
                    $10_1 = $0_1;
                    break label$1;
                  }
                  label$52 : {
                    if ((HEAP32[($3_1 + 32 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
                    break label$52
                    }
                    HEAP32[$1_1 >> 2] = 0;
                    $10_1 = 67181;
                    break label$1;
                  }
                  $10_1 = HEAP32[($3_1 + 36 | 0) >> 2] | 0;
                  $3_1 = ($10_1 | 0) / (3600 | 0) | 0;
                  HEAP32[($6_1 + 64 | 0) >> 2] = Math_imul($3_1, 100) + (((($10_1 - Math_imul($3_1, 3600) | 0) << 16 >> 16 | 0) / (60 | 0) | 0) << 16 >> 16) | 0;
                  HEAP32[$1_1 >> 2] = $611($0_1 | 0, 100 | 0, 66199 | 0, $6_1 + 64 | 0 | 0) | 0;
                  $10_1 = $0_1;
                  break label$1;
                  }
                  label$53 : {
                  if ((HEAP32[($3_1 + 32 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
                    break label$53
                  }
                  HEAP32[$1_1 >> 2] = 0;
                  $10_1 = 67181;
                  break label$1;
                  }
                  $10_1 = $613($3_1 | 0) | 0;
                  break label$2;
                }
                HEAP32[$1_1 >> 2] = 1;
                $10_1 = 67081;
                break label$1;
                }
                i64toi32_i32$1 = $11$hi;
                i64toi32_i32$2 = 0;
                i64toi32_i32$2 = __wasm_i64_srem($11_1 | 0, i64toi32_i32$1 | 0, 100 | 0, i64toi32_i32$2 | 0) | 0;
                i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
                $11_1 = i64toi32_i32$2;
                $11$hi = i64toi32_i32$1;
                break label$6;
              }
              $10_1 = $10_1 | 131072 | 0;
              }
              $10_1 = $614($10_1 | 0, $4_1 | 0) | 0;
              break label$2;
            }
            $9_1 = 131115;
            }
            $7_1 = $614($9_1 | 0, $4_1 | 0) | 0;
          }
          $10_1 = $622($0_1 | 0, 100 | 0, $7_1 | 0, $3_1 | 0, $4_1 | 0) | 0;
          HEAP32[$1_1 >> 2] = $10_1;
          $10_1 = $10_1 ? $0_1 : 0;
          break label$1;
          }
          $8_1 = 48;
        }
        $10_1 = 2;
        break label$4;
        }
        $10_1 = 4;
      }
      label$54 : {
        label$55 : {
        $3_1 = $5_1 ? $5_1 : $8_1;
        if (($3_1 | 0) == (95 | 0)) {
          break label$55
        }
        if (($3_1 | 0) != (45 | 0)) {
          break label$54
        }
        i64toi32_i32$1 = $11$hi;
        i64toi32_i32$2 = $6_1;
        HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] = $11_1;
        HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] = i64toi32_i32$1;
        HEAP32[$1_1 >> 2] = $611($0_1 | 0, 100 | 0, 66194 | 0, i64toi32_i32$2 + 16 | 0 | 0) | 0;
        $10_1 = $0_1;
        break label$1;
        }
        i64toi32_i32$1 = $11$hi;
        i64toi32_i32$2 = $6_1;
        HEAP32[(i64toi32_i32$2 + 40 | 0) >> 2] = $11_1;
        HEAP32[(i64toi32_i32$2 + 44 | 0) >> 2] = i64toi32_i32$1;
        HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] = $10_1;
        HEAP32[$1_1 >> 2] = $611($0_1 | 0, 100 | 0, 66187 | 0, i64toi32_i32$2 + 32 | 0 | 0) | 0;
        $10_1 = $0_1;
        break label$1;
      }
      i64toi32_i32$1 = $11$hi;
      i64toi32_i32$2 = $6_1;
      HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $11_1;
      HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$1;
      HEAP32[i64toi32_i32$2 >> 2] = $10_1;
      HEAP32[$1_1 >> 2] = $611($0_1 | 0, 100 | 0, 66180 | 0, i64toi32_i32$2 | 0) | 0;
      $10_1 = $0_1;
      break label$1;
      }
      $10_1 = 67072;
    }
    HEAP32[$1_1 >> 2] = $122($10_1 | 0) | 0;
    }
    global$0 = $6_1 + 80 | 0;
    return $10_1 | 0;
  }
  
  function $621($0_1) {
    $0_1 = $0_1 | 0;
    var $2_1 = 0, $3_1 = 0, $1_1 = 0, $14_1 = 0;
    $1_1 = 53;
    label$1 : {
    label$2 : {
      $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
      $3_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
      $14_1 = ((($2_1 - ((($3_1 + 6 | 0) >>> 0) % (7 >>> 0) | 0) | 0) + 7 | 0) >>> 0) / (7 >>> 0) | 0;
      $3_1 = $3_1 - $2_1 | 0;
      $2_1 = $14_1 + (((($3_1 + 369 | 0) >>> 0) % (7 >>> 0) | 0) >>> 0 < 3 >>> 0) | 0;
      if (($2_1 | 0) == (53 | 0)) {
      break label$2
      }
      $1_1 = $2_1;
      if ($2_1) {
      break label$1
      }
      $1_1 = 52;
      label$3 : {
      switch (((($3_1 + 6 | 0) >>> 0) % (7 >>> 0) | 0) + -4 | 0 | 0) {
      case 1:
        if (!($623(((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) % (400 | 0) | 0) + -1 | 0 | 0) | 0)) {
        break label$1
        }
        break;
      case 0:
        break label$3;
      default:
        break label$1;
      };
      }
      return 53 | 0;
    }
    label$5 : {
      switch (((($3_1 + 371 | 0) >>> 0) % (7 >>> 0) | 0) + -3 | 0 | 0) {
      case 0:
      if ($623(HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) | 0) {
        break label$1
      }
      break;
      case 1:
      break label$1;
      default:
      break label$5;
      };
    }
    $1_1 = 1;
    }
    return $1_1 | 0;
  }
  
  function $622($0_1, $1_1, $2_1, $3_1, $4_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    var $6_1 = 0, $7_1 = 0, $11_1 = 0, $8_1 = 0, $9_1 = 0, $5_1 = 0, $12_1 = 0, $10_1 = 0, $13_1 = 0;
    $5_1 = global$0 - 128 | 0;
    global$0 = $5_1;
    label$1 : {
    label$2 : {
      if ($1_1) {
      break label$2
      }
      $6_1 = 0;
      break label$1;
    }
    $7_1 = 0;
    label$3 : {
      label$4 : {
      label$5 : while (1) {
        label$6 : {
        label$7 : {
          $6_1 = HEAPU8[$2_1 >> 0] | 0;
          if (($6_1 | 0) == (37 | 0)) {
          break label$7
          }
          label$8 : {
          if ($6_1) {
            break label$8
          }
          $6_1 = $7_1;
          break label$3;
          }
          HEAP8[($0_1 + $7_1 | 0) >> 0] = $6_1;
          $7_1 = $7_1 + 1 | 0;
          break label$6;
        }
        $8_1 = 0;
        $9_1 = 1;
        label$9 : {
          label$10 : {
          label$11 : {
            $6_1 = HEAPU8[($2_1 + 1 | 0) >> 0] | 0;
            switch ($6_1 + -45 | 0 | 0) {
            case 0:
            case 3:
            break label$10;
            case 1:
            case 2:
            break label$9;
            default:
            break label$11;
            };
          }
          if (($6_1 | 0) != (95 | 0)) {
            break label$9
          }
          }
          $8_1 = $6_1;
          $6_1 = HEAPU8[($2_1 + 2 | 0) >> 0] | 0;
          $9_1 = 2;
        }
        label$12 : {
          label$13 : {
          $10_1 = $6_1 & 255 | 0;
          $11_1 = ($2_1 + $9_1 | 0) + (($10_1 | 0) == (43 | 0)) | 0;
          if (((HEAP8[$11_1 >> 0] | 0) + -48 | 0) >>> 0 > 9 >>> 0) {
            break label$13
          }
          $2_1 = $619($11_1 | 0, $5_1 + 12 | 0 | 0, 10 | 0) | 0;
          $9_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
          break label$12;
          }
          HEAP32[($5_1 + 12 | 0) >> 2] = $11_1;
          $2_1 = 0;
          $9_1 = $11_1;
        }
        $12_1 = 0;
        label$14 : {
          $6_1 = HEAPU8[$9_1 >> 0] | 0;
          $13_1 = $6_1 + -67 | 0;
          if ($13_1 >>> 0 > 22 >>> 0) {
          break label$14
          }
          if (!((1 << $13_1 | 0) & 4194329 | 0)) {
          break label$14
          }
          $12_1 = $2_1;
          if ($2_1) {
          break label$14
          }
          $12_1 = ($9_1 | 0) != ($11_1 | 0);
        }
        label$15 : {
          label$16 : {
          if (($6_1 | 0) == (79 | 0)) {
            break label$16
          }
          if (($6_1 | 0) == (69 | 0)) {
            break label$16
          }
          $2_1 = $9_1;
          break label$15;
          }
          $2_1 = $9_1 + 1 | 0;
          $6_1 = HEAPU8[($9_1 + 1 | 0) >> 0] | 0;
        }
        $11_1 = $620($5_1 + 16 | 0 | 0, $5_1 + 124 | 0 | 0, $6_1 << 24 >> 24 | 0, $3_1 | 0, $4_1 | 0, $8_1 | 0) | 0;
        if (!$11_1) {
          break label$4
        }
        label$17 : {
          label$18 : {
          if ($12_1) {
            break label$18
          }
          $8_1 = HEAP32[($5_1 + 124 | 0) >> 2] | 0;
          break label$17;
          }
          label$19 : {
          label$20 : {
            label$21 : {
            $6_1 = HEAPU8[$11_1 >> 0] | 0;
            switch ($6_1 + -43 | 0 | 0) {
            case 0:
            case 2:
              break label$20;
            default:
              break label$21;
            };
            }
            $8_1 = HEAP32[($5_1 + 124 | 0) >> 2] | 0;
            break label$19;
          }
          $8_1 = (HEAP32[($5_1 + 124 | 0) >> 2] | 0) + -1 | 0;
          $6_1 = HEAPU8[($11_1 + 1 | 0) >> 0] | 0;
          $11_1 = $11_1 + 1 | 0;
          }
          label$22 : {
          if (($6_1 & 255 | 0 | 0) != (48 | 0)) {
            break label$22
          }
          label$23 : while (1) {
            $6_1 = HEAP8[($11_1 + 1 | 0) >> 0] | 0;
            if (($6_1 + -48 | 0) >>> 0 > 9 >>> 0) {
            break label$22
            }
            $11_1 = $11_1 + 1 | 0;
            $8_1 = $8_1 + -1 | 0;
            if (($6_1 | 0) == (48 | 0)) {
            continue label$23
            }
            break label$23;
          };
          }
          HEAP32[($5_1 + 124 | 0) >> 2] = $8_1;
          $6_1 = 0;
          label$24 : while (1) {
          $9_1 = $6_1;
          $6_1 = $6_1 + 1 | 0;
          if (((HEAP8[($11_1 + $9_1 | 0) >> 0] | 0) + -48 | 0) >>> 0 < 10 >>> 0) {
            continue label$24
          }
          break label$24;
          };
          $6_1 = $12_1 >>> 0 > $8_1 >>> 0 ? $12_1 : $8_1;
          label$25 : {
          label$26 : {
            label$27 : {
            if ((HEAP32[($3_1 + 20 | 0) >> 2] | 0 | 0) >= (-1900 | 0)) {
              break label$27
            }
            $9_1 = 45;
            break label$26;
            }
            if (($10_1 | 0) != (43 | 0)) {
            break label$25
            }
            if ((($6_1 - $8_1 | 0) + $9_1 | 0) >>> 0 < ((HEAPU8[(HEAP32[($5_1 + 12 | 0) >> 2] | 0) >> 0] | 0 | 0) == (67 | 0) ? 3 : 5) >>> 0) {
            break label$25
            }
            $9_1 = 43;
          }
          HEAP8[($0_1 + $7_1 | 0) >> 0] = $9_1;
          $6_1 = $6_1 + -1 | 0;
          $7_1 = $7_1 + 1 | 0;
          }
          if ($6_1 >>> 0 <= $8_1 >>> 0) {
          break label$17
          }
          if ($7_1 >>> 0 >= $1_1 >>> 0) {
          break label$17
          }
          label$28 : while (1) {
          HEAP8[($0_1 + $7_1 | 0) >> 0] = 48;
          $7_1 = $7_1 + 1 | 0;
          $6_1 = $6_1 + -1 | 0;
          if ($6_1 >>> 0 <= $8_1 >>> 0) {
            break label$17
          }
          if ($7_1 >>> 0 < $1_1 >>> 0) {
            continue label$28
          }
          break label$28;
          };
        }
        $6_1 = $1_1 - $7_1 | 0;
        $6_1 = $8_1 >>> 0 < $6_1 >>> 0 ? $8_1 : $6_1;
        HEAP32[($5_1 + 124 | 0) >> 2] = $6_1;
        $120($0_1 + $7_1 | 0 | 0, $11_1 | 0, $6_1 | 0) | 0;
        $7_1 = (HEAP32[($5_1 + 124 | 0) >> 2] | 0) + $7_1 | 0;
        }
        $2_1 = $2_1 + 1 | 0;
        if ($7_1 >>> 0 < $1_1 >>> 0) {
        continue label$5
        }
        break label$5;
      };
      }
      $7_1 = ($7_1 | 0) == ($1_1 | 0) ? $1_1 + -1 | 0 : $7_1;
      $6_1 = 0;
    }
    HEAP8[($0_1 + $7_1 | 0) >> 0] = 0;
    }
    global$0 = $5_1 + 128 | 0;
    return $6_1 | 0;
  }
  
  function $623($0_1) {
    $0_1 = $0_1 | 0;
    label$1 : {
    $0_1 = ($0_1 | 0) > (2147481747 | 0) ? $0_1 + -2e3 | 0 : $0_1;
    if (!($0_1 & 3 | 0)) {
      break label$1
    }
    return 0 | 0;
    }
    label$2 : {
    $0_1 = $0_1 + 1900 | 0;
    if (!(($0_1 | 0) % (100 | 0) | 0)) {
      break label$2
    }
    return 1 | 0;
    }
    return !(($0_1 | 0) % (400 | 0) | 0) | 0;
  }
  
  function $624($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
    $2_1 = $574($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
    global$0 = $3_1 + 16 | 0;
    return $2_1 | 0;
  }
  
  function $625($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0, $4_1 = 0, $5_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
    HEAP32[($3_1 + 8 | 0) >> 2] = $2_1;
    $4_1 = -1;
    label$1 : {
    $2_1 = $602(0 | 0, 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
    if (($2_1 | 0) < (0 | 0)) {
      break label$1
    }
    $5_1 = $2_1 + 1 | 0;
    $2_1 = $126($5_1 | 0) | 0;
    HEAP32[$0_1 >> 2] = $2_1;
    if (!$2_1) {
      break label$1
    }
    $4_1 = $602($2_1 | 0, $5_1 | 0, $1_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
    }
    global$0 = $3_1 + 16 | 0;
    return $4_1 | 0;
  }
  
  function $626($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $627(88884 | 0) | 0;
    label$1 : {
    label$2 : while (1) {
      if ((HEAP32[$0_1 >> 2] | 0 | 0) != (1 | 0)) {
      break label$1
      }
      $628(88908 | 0, 88884 | 0) | 0;
      continue label$2;
    };
    }
    label$3 : {
    if (HEAP32[$0_1 >> 2] | 0) {
      break label$3
    }
    $629($0_1 | 0);
    $630(88884 | 0) | 0;
    FUNCTION_TABLE[$2_1 | 0]($1_1);
    $627(88884 | 0) | 0;
    $631($0_1 | 0);
    $630(88884 | 0) | 0;
    $632(88908 | 0) | 0;
    return;
    }
    $630(88884 | 0) | 0;
  }
  
  function $627($0_1) {
    $0_1 = $0_1 | 0;
    return $145($0_1 | 0) | 0 | 0;
  }
  
  function $628($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $147($0_1 | 0, $1_1 | 0) | 0 | 0;
  }
  
  function $629($0_1) {
    $0_1 = $0_1 | 0;
    HEAP32[$0_1 >> 2] = 1;
  }
  
  function $630($0_1) {
    $0_1 = $0_1 | 0;
    return $146($0_1 | 0) | 0 | 0;
  }
  
  function $631($0_1) {
    $0_1 = $0_1 | 0;
    HEAP32[$0_1 >> 2] = -1;
  }
  
  function $632($0_1) {
    $0_1 = $0_1 | 0;
    return $148($0_1 | 0) | 0 | 0;
  }
  
  function $633($0_1) {
    $0_1 = $0_1 | 0;
    label$1 : {
    if (!($582($0_1 | 0) | 0)) {
      break label$1
    }
    $128($0_1 | 0);
    }
  }
  
  function $634($0_1) {
    $0_1 = $0_1 | 0;
    var $2_1 = 0, $1_1 = 0;
    $1_1 = $0_1;
    label$1 : while (1) {
    $2_1 = $1_1;
    $1_1 = $2_1 + 4 | 0;
    if (HEAP32[$2_1 >> 2] | 0) {
      continue label$1
    }
    break label$1;
    };
    return ($2_1 - $0_1 | 0) >> 2 | 0 | 0;
  }
  
  function $635() {
    return 71236 | 0;
  }
  
  function $636() {
    return 72784 | 0;
  }
  
  function $637($0_1, $1_1, $2_1, $3_1, $4_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    var $7_1 = 0, $6_1 = 0, $8_1 = 0, $5_1 = 0;
    $5_1 = global$0 - 16 | 0;
    global$0 = $5_1;
    $6_1 = 0;
    label$1 : {
    $7_1 = HEAP32[$1_1 >> 2] | 0;
    if (!$7_1) {
      break label$1
    }
    if (!$2_1) {
      break label$1
    }
    $8_1 = $0_1 ? $3_1 : 0;
    $6_1 = 0;
    label$2 : while (1) {
      label$3 : {
      $3_1 = $468(($8_1 >>> 0 < 4 >>> 0 ? $5_1 + 12 | 0 : $0_1) | 0, HEAP32[$7_1 >> 2] | 0 | 0, 0 | 0) | 0;
      if (($3_1 | 0) != (-1 | 0)) {
        break label$3
      }
      $6_1 = -1;
      break label$1;
      }
      label$4 : {
      label$5 : {
        if ($0_1) {
        break label$5
        }
        $0_1 = 0;
        break label$4;
      }
      label$6 : {
        if ($8_1 >>> 0 > 3 >>> 0) {
        break label$6
        }
        if ($8_1 >>> 0 < $3_1 >>> 0) {
        break label$1
        }
        $120($0_1 | 0, $5_1 + 12 | 0 | 0, $3_1 | 0) | 0;
      }
      $8_1 = $8_1 - $3_1 | 0;
      $0_1 = $0_1 + $3_1 | 0;
      }
      label$7 : {
      if (HEAP32[$7_1 >> 2] | 0) {
        break label$7
      }
      $7_1 = 0;
      break label$1;
      }
      $6_1 = $3_1 + $6_1 | 0;
      $7_1 = $7_1 + 4 | 0;
      $2_1 = $2_1 + -1 | 0;
      if ($2_1) {
      continue label$2
      }
      break label$2;
    };
    }
    label$8 : {
    if (!$0_1) {
      break label$8
    }
    HEAP32[$1_1 >> 2] = $7_1;
    }
    global$0 = $5_1 + 16 | 0;
    return $6_1 | 0;
  }
  
  function $638($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    var $4_1 = 0, $6_1 = 0, $5_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
    $4_1 = HEAP32[$1_1 >> 2] | 0;
    label$1 : {
    label$2 : {
      label$3 : {
      label$4 : {
        label$5 : {
        label$6 : {
          label$7 : {
          label$8 : {
            label$9 : {
            label$10 : {
              label$11 : {
              if (!$3_1) {
                break label$11
              }
              $5_1 = HEAP32[$3_1 >> 2] | 0;
              if (!$5_1) {
                break label$11
              }
              label$12 : {
                if ($0_1) {
                break label$12
                }
                $3_1 = $2_1;
                break label$8;
              }
              HEAP32[$3_1 >> 2] = 0;
              $3_1 = $2_1;
              $6_1 = 0;
              break label$10;
              }
              label$13 : {
              label$14 : {
                if (HEAP32[(HEAP32[(($118() | 0) + 96 | 0) >> 2] | 0) >> 2] | 0) {
                break label$14
                }
                if (!$0_1) {
                break label$13
                }
                if (!$2_1) {
                break label$1
                }
                $5_1 = $2_1;
                label$15 : {
                label$16 : while (1) {
                  $3_1 = HEAP8[$4_1 >> 0] | 0;
                  if (!$3_1) {
                  break label$15
                  }
                  HEAP32[$0_1 >> 2] = $3_1 & 57343 | 0;
                  $0_1 = $0_1 + 4 | 0;
                  $4_1 = $4_1 + 1 | 0;
                  $5_1 = $5_1 + -1 | 0;
                  if ($5_1) {
                  continue label$16
                  }
                  break label$1;
                };
                }
                HEAP32[$0_1 >> 2] = 0;
                HEAP32[$1_1 >> 2] = 0;
                return $2_1 - $5_1 | 0 | 0;
              }
              $3_1 = $2_1;
              if (!$0_1) {
                break label$9
              }
              $6_1 = 1;
              break label$10;
              }
              return $122($4_1 | 0) | 0 | 0;
            }
            label$17 : while (1) {
              label$18 : {
              label$19 : {
                label$20 : {
                label$21 : {
                  label$22 : {
                  label$23 : {
                    switch ($6_1 | 0) {
                    case 0:
                    $7_1 = HEAPU8[$4_1 >> 0] | 0;
                    $6_1 = $7_1 >>> 3 | 0;
                    if (($6_1 + -16 | 0 | ($6_1 + ($5_1 >> 26 | 0) | 0) | 0) >>> 0 > 7 >>> 0) {
                      break label$6
                    }
                    $8_1 = $4_1 + 1 | 0;
                    $6_1 = $7_1 + -128 | 0 | ($5_1 << 6 | 0) | 0;
                    if (($6_1 | 0) <= (-1 | 0)) {
                      break label$22
                    }
                    $4_1 = $8_1;
                    break label$21;
                    default:
                    break label$23;
                    };
                  }
                  if (!$3_1) {
                    break label$1
                  }
                  label$25 : while (1) {
                    label$26 : {
                    $6_1 = HEAPU8[$4_1 >> 0] | 0;
                    if (($6_1 + -1 | 0) >>> 0 <= 126 >>> 0) {
                      break label$26
                    }
                    $5_1 = $6_1;
                    break label$18;
                    }
                    label$27 : {
                    if ($3_1 >>> 0 < 5 >>> 0) {
                      break label$27
                    }
                    if ($4_1 & 3 | 0) {
                      break label$27
                    }
                    label$28 : {
                      label$29 : while (1) {
                      $5_1 = HEAP32[$4_1 >> 2] | 0;
                      if (($5_1 + -16843009 | 0 | $5_1 | 0) & -2139062144 | 0) {
                        break label$28
                      }
                      HEAP32[$0_1 >> 2] = $5_1 & 255 | 0;
                      HEAP32[($0_1 + 4 | 0) >> 2] = HEAPU8[($4_1 + 1 | 0) >> 0] | 0;
                      HEAP32[($0_1 + 8 | 0) >> 2] = HEAPU8[($4_1 + 2 | 0) >> 0] | 0;
                      HEAP32[($0_1 + 12 | 0) >> 2] = HEAPU8[($4_1 + 3 | 0) >> 0] | 0;
                      $0_1 = $0_1 + 16 | 0;
                      $4_1 = $4_1 + 4 | 0;
                      $3_1 = $3_1 + -4 | 0;
                      if ($3_1 >>> 0 > 4 >>> 0) {
                        continue label$29
                      }
                      break label$29;
                      };
                      $5_1 = HEAPU8[$4_1 >> 0] | 0;
                    }
                    $6_1 = $5_1 & 255 | 0;
                    if (($6_1 + -1 | 0) >>> 0 > 126 >>> 0) {
                      break label$18
                    }
                    }
                    HEAP32[$0_1 >> 2] = $6_1;
                    $0_1 = $0_1 + 4 | 0;
                    $4_1 = $4_1 + 1 | 0;
                    $3_1 = $3_1 + -1 | 0;
                    if (!$3_1) {
                    break label$1
                    }
                    continue label$25;
                  };
                  }
                  $7_1 = (HEAPU8[$8_1 >> 0] | 0) + -128 | 0;
                  if ($7_1 >>> 0 > 63 >>> 0) {
                  break label$20
                  }
                  $8_1 = $4_1 + 2 | 0;
                  $9_1 = $6_1 << 6 | 0;
                  $6_1 = $7_1 | $9_1 | 0;
                  label$30 : {
                  if (($9_1 | 0) <= (-1 | 0)) {
                    break label$30
                  }
                  $4_1 = $8_1;
                  break label$21;
                  }
                  $7_1 = (HEAPU8[$8_1 >> 0] | 0) + -128 | 0;
                  if ($7_1 >>> 0 > 63 >>> 0) {
                  break label$20
                  }
                  $4_1 = $4_1 + 3 | 0;
                  $6_1 = $7_1 | ($6_1 << 6 | 0) | 0;
                }
                HEAP32[$0_1 >> 2] = $6_1;
                $3_1 = $3_1 + -1 | 0;
                $0_1 = $0_1 + 4 | 0;
                break label$19;
                }
                HEAP32[($124() | 0) >> 2] = 25;
                $4_1 = $4_1 + -1 | 0;
                break label$3;
              }
              $6_1 = 1;
              continue label$17;
              }
              $6_1 = $6_1 + -194 | 0;
              if ($6_1 >>> 0 > 50 >>> 0) {
              break label$5
              }
              $4_1 = $4_1 + 1 | 0;
              $5_1 = HEAP32[(($6_1 << 2 | 0) + 69296 | 0) >> 2] | 0;
              $6_1 = 0;
              continue label$17;
            };
            }
            $6_1 = 1;
            break label$7;
          }
          $6_1 = 0;
          }
          label$31 : while (1) {
          label$32 : {
            switch ($6_1 | 0) {
            case 0:
            $6_1 = (HEAPU8[$4_1 >> 0] | 0) >>> 3 | 0;
            if (($6_1 + -16 | 0 | (($5_1 >> 26 | 0) + $6_1 | 0) | 0) >>> 0 > 7 >>> 0) {
              break label$6
            }
            $6_1 = $4_1 + 1 | 0;
            label$34 : {
              label$35 : {
              if ($5_1 & 33554432 | 0) {
                break label$35
              }
              $4_1 = $6_1;
              break label$34;
              }
              label$36 : {
              if (((HEAPU8[$6_1 >> 0] | 0) & 192 | 0 | 0) == (128 | 0)) {
                break label$36
              }
              $4_1 = $4_1 + -1 | 0;
              break label$4;
              }
              $6_1 = $4_1 + 2 | 0;
              label$37 : {
              if ($5_1 & 524288 | 0) {
                break label$37
              }
              $4_1 = $6_1;
              break label$34;
              }
              label$38 : {
              if (((HEAPU8[$6_1 >> 0] | 0) & 192 | 0 | 0) == (128 | 0)) {
                break label$38
              }
              $4_1 = $4_1 + -1 | 0;
              break label$4;
              }
              $4_1 = $4_1 + 3 | 0;
            }
            $3_1 = $3_1 + -1 | 0;
            $6_1 = 1;
            continue label$31;
            default:
            break label$32;
            };
          }
          label$39 : while (1) {
            $5_1 = HEAPU8[$4_1 >> 0] | 0;
            label$40 : {
            if ($4_1 & 3 | 0) {
              break label$40
            }
            if (($5_1 + -1 | 0) >>> 0 > 126 >>> 0) {
              break label$40
            }
            $5_1 = HEAP32[$4_1 >> 2] | 0;
            if (($5_1 + -16843009 | 0 | $5_1 | 0) & -2139062144 | 0) {
              break label$40
            }
            label$41 : while (1) {
              $3_1 = $3_1 + -4 | 0;
              $5_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
              $6_1 = $4_1 + 4 | 0;
              $4_1 = $6_1;
              if (!(($5_1 | ($5_1 + -16843009 | 0) | 0) & -2139062144 | 0)) {
              continue label$41
              }
              break label$41;
            };
            }
            label$42 : {
            $6_1 = $5_1 & 255 | 0;
            if (($6_1 + -1 | 0) >>> 0 > 126 >>> 0) {
              break label$42
            }
            $3_1 = $3_1 + -1 | 0;
            $4_1 = $4_1 + 1 | 0;
            continue label$39;
            }
            break label$39;
          };
          $6_1 = $6_1 + -194 | 0;
          if ($6_1 >>> 0 > 50 >>> 0) {
            break label$5
          }
          $4_1 = $4_1 + 1 | 0;
          $5_1 = HEAP32[(($6_1 << 2 | 0) + 69296 | 0) >> 2] | 0;
          $6_1 = 0;
          continue label$31;
          };
        }
        $4_1 = $4_1 + -1 | 0;
        if ($5_1) {
          break label$4
        }
        $5_1 = HEAPU8[$4_1 >> 0] | 0;
        }
        if ($5_1 & 255 | 0) {
        break label$4
        }
        label$43 : {
        if (!$0_1) {
          break label$43
        }
        HEAP32[$0_1 >> 2] = 0;
        HEAP32[$1_1 >> 2] = 0;
        }
        return $2_1 - $3_1 | 0 | 0;
      }
      HEAP32[($124() | 0) >> 2] = 25;
      if (!$0_1) {
        break label$2
      }
      }
      HEAP32[$1_1 >> 2] = $4_1;
    }
    return -1 | 0;
    }
    HEAP32[$1_1 >> 2] = $4_1;
    return $2_1 | 0;
  }
  
  function $639($0_1, $1_1, $2_1, $3_1, $4_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    var $9_1 = 0, $8_1 = 0, $5_1 = 0, $10_1 = 0, $7_1 = 0, $6_1 = 0, $11_1 = 0;
    $5_1 = global$0 - 1040 | 0;
    global$0 = $5_1;
    $6_1 = HEAP32[$1_1 >> 2] | 0;
    HEAP32[($5_1 + 12 | 0) >> 2] = $6_1;
    $3_1 = $0_1 ? $3_1 : 256;
    $7_1 = $0_1 ? $0_1 : $5_1 + 16 | 0;
    $8_1 = 0;
    label$1 : {
    label$2 : {
      label$3 : {
      label$4 : {
        if (!$6_1) {
        break label$4
        }
        if (!$3_1) {
        break label$4
        }
        label$5 : while (1) {
        $9_1 = $2_1 >>> 2 | 0;
        label$6 : {
          if ($2_1 >>> 0 > 131 >>> 0) {
          break label$6
          }
          if ($9_1 >>> 0 >= $3_1 >>> 0) {
          break label$6
          }
          $9_1 = $6_1;
          break label$2;
        }
        $10_1 = $638($7_1 | 0, $5_1 + 12 | 0 | 0, ($9_1 >>> 0 < $3_1 >>> 0 ? $9_1 : $3_1) | 0, $4_1 | 0) | 0;
        $9_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
        label$7 : {
          if (($10_1 | 0) != (-1 | 0)) {
          break label$7
          }
          $3_1 = 0;
          $8_1 = -1;
          break label$3;
        }
        $11_1 = ($7_1 | 0) == ($5_1 + 16 | 0 | 0) ? 0 : $10_1;
        $3_1 = $3_1 - $11_1 | 0;
        $7_1 = $7_1 + ($11_1 << 2 | 0) | 0;
        $2_1 = $9_1 ? ($2_1 + $6_1 | 0) - $9_1 | 0 : 0;
        $8_1 = $10_1 + $8_1 | 0;
        if (!$9_1) {
          break label$3
        }
        $6_1 = $9_1;
        if ($3_1) {
          continue label$5
        }
        break label$3;
        };
      }
      $9_1 = $6_1;
      }
      if (!$9_1) {
      break label$1
      }
    }
    if (!$3_1) {
      break label$1
    }
    if (!$2_1) {
      break label$1
    }
    $10_1 = $8_1;
    label$8 : while (1) {
      label$9 : {
      label$10 : {
        label$11 : {
        $8_1 = $463($7_1 | 0, $9_1 | 0, $2_1 | 0, $4_1 | 0) | 0;
        if (($8_1 + 2 | 0) >>> 0 > 2 >>> 0) {
          break label$11
        }
        label$12 : {
          switch ($8_1 + 1 | 0 | 0) {
          case 1:
          HEAP32[($5_1 + 12 | 0) >> 2] = 0;
          break label$10;
          case 0:
          break label$1;
          default:
          break label$12;
          };
        }
        HEAP32[$4_1 >> 2] = 0;
        break label$10;
        }
        $9_1 = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + $8_1 | 0;
        HEAP32[($5_1 + 12 | 0) >> 2] = $9_1;
        $10_1 = $10_1 + 1 | 0;
        $3_1 = $3_1 + -1 | 0;
        if ($3_1) {
        break label$9
        }
      }
      $8_1 = $10_1;
      break label$1;
      }
      $7_1 = $7_1 + 4 | 0;
      $2_1 = $2_1 - $8_1 | 0;
      $8_1 = $10_1;
      if ($2_1) {
      continue label$8
      }
      break label$8;
    };
    }
    label$14 : {
    if (!$0_1) {
      break label$14
    }
    HEAP32[$1_1 >> 2] = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
    }
    global$0 = $5_1 + 1040 | 0;
    return $8_1 | 0;
  }
  
  function $640() {
    return (HEAP32[(HEAP32[(($118() | 0) + 96 | 0) >> 2] | 0) >> 2] | 0 ? 4 : 1) | 0;
  }
  
  function $641($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    return $463(0 | 0, $0_1 | 0, $1_1 | 0, ($2_1 ? $2_1 : 88956) | 0) | 0 | 0;
  }
  
  function $642($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0, $2_1 = 0;
    $1_1 = $118() | 0;
    $2_1 = HEAP32[($1_1 + 96 | 0) >> 2] | 0;
    label$1 : {
    if (!$0_1) {
      break label$1
    }
    HEAP32[($1_1 + 96 | 0) >> 2] = ($0_1 | 0) == (-1 | 0) ? 84908 : $0_1;
    }
    return (($2_1 | 0) == (84908 | 0) ? -1 : $2_1) | 0;
  }
  
  function $643($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    label$1 : {
    if (!$2_1) {
      break label$1
    }
    label$2 : while (1) {
      label$3 : {
      if ((HEAP32[$0_1 >> 2] | 0 | 0) != ($1_1 | 0)) {
        break label$3
      }
      return $0_1 | 0;
      }
      $0_1 = $0_1 + 4 | 0;
      $2_1 = $2_1 + -1 | 0;
      if ($2_1) {
      continue label$2
      }
      break label$2;
    };
    }
    return 0 | 0;
  }
  
  function $644($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $11_1 = 0, $11$hi = 0, $14_1 = 0, $14$hi = 0, $3_1 = Math_fround(0);
    $2_1 = global$0 - 16 | 0;
    global$0 = $2_1;
    $645($2_1 | 0, $0_1 | 0, $1_1 | 0, 0 | 0);
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$0 = HEAP32[$2_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
    $11_1 = i64toi32_i32$0;
    $11$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $2_1 + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $14_1 = i64toi32_i32$1;
    $14$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $11$hi;
    i64toi32_i32$1 = $14$hi;
    $3_1 = Math_fround($566($11_1 | 0, i64toi32_i32$0 | 0, $14_1 | 0, i64toi32_i32$1 | 0));
    global$0 = $2_1 + 16 | 0;
    return Math_fround($3_1);
  }
  
  function $645($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    var $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $5_1 = 0, $5$hi = 0, $6_1 = 0, $6$hi = 0;
    $4_1 = global$0 - 160 | 0;
    global$0 = $4_1;
    HEAP32[($4_1 + 60 | 0) >> 2] = $1_1;
    HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
    HEAP32[($4_1 + 24 | 0) >> 2] = -1;
    i64toi32_i32$0 = 0;
    $536($4_1 + 16 | 0 | 0, 0 | 0, i64toi32_i32$0 | 0);
    $559($4_1 | 0, $4_1 + 16 | 0 | 0, $3_1 | 0, 1 | 0);
    i64toi32_i32$2 = $4_1 + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $5_1 = i64toi32_i32$0;
    $5$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = HEAP32[$4_1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
    $6_1 = i64toi32_i32$1;
    $6$hi = i64toi32_i32$0;
    label$1 : {
    if (!$2_1) {
      break label$1
    }
    HEAP32[$2_1 >> 2] = ($1_1 + ((HEAP32[($4_1 + 20 | 0) >> 2] | 0) - (HEAP32[($4_1 + 60 | 0) >> 2] | 0) | 0) | 0) + (HEAP32[($4_1 + 136 | 0) >> 2] | 0) | 0;
    }
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$1 = $0_1;
    HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $5_1;
    HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = $6$hi;
    HEAP32[i64toi32_i32$1 >> 2] = $6_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    global$0 = $4_1 + 160 | 0;
  }
  
  function $646($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $11_1 = 0, $11$hi = 0, $14_1 = 0, $14$hi = 0, $3_1 = 0.0;
    $2_1 = global$0 - 16 | 0;
    global$0 = $2_1;
    $645($2_1 | 0, $0_1 | 0, $1_1 | 0, 1 | 0);
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$0 = HEAP32[$2_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
    $11_1 = i64toi32_i32$0;
    $11$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $2_1 + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $14_1 = i64toi32_i32$1;
    $14$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $11$hi;
    i64toi32_i32$1 = $14$hi;
    $3_1 = +$567($11_1 | 0, i64toi32_i32$0 | 0, $14_1 | 0, i64toi32_i32$1 | 0);
    global$0 = $2_1 + 16 | 0;
    return +$3_1;
  }
  
  function $647($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var i64toi32_i32$1 = 0, $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $4$hi = 0, $16_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    $645($3_1 | 0, $1_1 | 0, $2_1 | 0, 2 | 0);
    i64toi32_i32$2 = $3_1;
    i64toi32_i32$0 = HEAP32[$3_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$0;
    $4$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $3_1 + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $16_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1;
    HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $16_1;
    HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    HEAP32[i64toi32_i32$1 >> 2] = $4_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    global$0 = $3_1 + 16 | 0;
  }
  
  function $648($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    return Math_fround(Math_fround($644($0_1 | 0, $1_1 | 0)));
  }
  
  function $649($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    return +(+$646($0_1 | 0, $1_1 | 0));
  }
  
  function $650($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    var i64toi32_i32$1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $5_1 = 0, $5$hi = 0, $17_1 = 0;
    $4_1 = global$0 - 16 | 0;
    global$0 = $4_1;
    $647($4_1 | 0, $1_1 | 0, $2_1 | 0);
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$0 = HEAP32[$4_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
    $5_1 = i64toi32_i32$0;
    $5$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $4_1 + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $17_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1;
    HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $17_1;
    HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = $5$hi;
    HEAP32[i64toi32_i32$1 >> 2] = $5_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    global$0 = $4_1 + 16 | 0;
  }
  
  function $651($0_1) {
    $0_1 = $0_1 | 0;
    return $652($0_1 | 0) | 0 | 0;
  }
  
  function $652($0_1) {
    $0_1 = $0_1 | 0;
    return $1740($0_1 | 0) | 0 | 0;
  }
  
  function $653($0_1) {
    $0_1 = $0_1 | 0;
    $651($0_1 | 0) | 0;
    $1747($0_1 | 0, 8 | 0);
  }
  
  function $654($0_1, $1_1, $2_1, $3_1, $4_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    var $6_1 = 0, $7_1 = 0, $8_1 = 0, $5_1 = 0;
    $5_1 = $1_1 + ($4_1 - $3_1 | 0) | 0;
    label$1 : {
    label$2 : {
      label$3 : while (1) {
      if (($3_1 | 0) == ($4_1 | 0)) {
        break label$2
      }
      $6_1 = -1;
      if (($1_1 | 0) == ($2_1 | 0)) {
        break label$1
      }
      $7_1 = HEAP8[$1_1 >> 0] | 0;
      $8_1 = HEAP8[$3_1 >> 0] | 0;
      if (($7_1 | 0) < ($8_1 | 0)) {
        break label$1
      }
      label$4 : {
        if (($8_1 | 0) >= ($7_1 | 0)) {
        break label$4
        }
        return 1 | 0;
      }
      $3_1 = $3_1 + 1 | 0;
      $1_1 = $1_1 + 1 | 0;
      continue label$3;
      };
    }
    $6_1 = ($5_1 | 0) != ($2_1 | 0);
    }
    return $6_1 | 0;
  }
  
  function $655($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $656($0_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  }
  
  function $656($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    $0_1 = $436($0_1 | 0, $3_1 + 15 | 0 | 0, $3_1 + 14 | 0 | 0) | 0;
    $657($0_1 | 0, $1_1 | 0, $2_1 | 0);
    global$0 = $3_1 + 16 | 0;
    return $0_1 | 0;
  }
  
  function $657($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $1455($0_1 | 0, $1_1 | 0, $2_1 | 0, $1454($1_1 | 0, $2_1 | 0) | 0 | 0);
  }
  
  function $658($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0, $4_1 = 0;
    $3_1 = 0;
    label$1 : while (1) {
    label$2 : {
      if (($1_1 | 0) != ($2_1 | 0)) {
      break label$2
      }
      return $3_1 | 0;
    }
    $3_1 = ($3_1 << 4 | 0) + (HEAP8[$1_1 >> 0] | 0) | 0;
    $4_1 = $3_1 & -268435456 | 0;
    $3_1 = ($4_1 >>> 24 | 0 | $4_1 | 0) ^ $3_1 | 0;
    $1_1 = $1_1 + 1 | 0;
    continue label$1;
    };
  }
  
  function $659($0_1) {
    $0_1 = $0_1 | 0;
    return $652($0_1 | 0) | 0 | 0;
  }
  
  function $660($0_1) {
    $0_1 = $0_1 | 0;
    $659($0_1 | 0) | 0;
    $1747($0_1 | 0, 8 | 0);
  }
  
  function $661($0_1, $1_1, $2_1, $3_1, $4_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    var $5_1 = 0, $6_1 = 0, $7_1 = 0;
    label$1 : {
    label$2 : {
      label$3 : while (1) {
      if (($3_1 | 0) == ($4_1 | 0)) {
        break label$2
      }
      $5_1 = -1;
      if (($1_1 | 0) == ($2_1 | 0)) {
        break label$1
      }
      $6_1 = HEAP32[$1_1 >> 2] | 0;
      $7_1 = HEAP32[$3_1 >> 2] | 0;
      if (($6_1 | 0) < ($7_1 | 0)) {
        break label$1
      }
      label$4 : {
        if (($7_1 | 0) >= ($6_1 | 0)) {
        break label$4
        }
        return 1 | 0;
      }
      $3_1 = $3_1 + 4 | 0;
      $1_1 = $1_1 + 4 | 0;
      continue label$3;
      };
    }
    $5_1 = ($1_1 | 0) != ($2_1 | 0);
    }
    return $5_1 | 0;
  }
  
  function $662($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $663($0_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  }
  
  function $663($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    $0_1 = $664($0_1 | 0, $3_1 + 15 | 0 | 0, $3_1 + 14 | 0 | 0) | 0;
    $665($0_1 | 0, $1_1 | 0, $2_1 | 0);
    global$0 = $3_1 + 16 | 0;
    return $0_1 | 0;
  }
  
  function $664($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    return $1458($1457($0_1 | 0) | 0 | 0) | 0 | 0;
  }
  
  function $665($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $1460($0_1 | 0, $1_1 | 0, $2_1 | 0, $1459($1_1 | 0, $2_1 | 0) | 0 | 0);
  }
  
  function $666($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0, $4_1 = 0;
    $3_1 = 0;
    label$1 : while (1) {
    label$2 : {
      if (($1_1 | 0) != ($2_1 | 0)) {
      break label$2
      }
      return $3_1 | 0;
    }
    $3_1 = (HEAP32[$1_1 >> 2] | 0) + ($3_1 << 4 | 0) | 0;
    $4_1 = $3_1 & -268435456 | 0;
    $3_1 = ($4_1 >>> 24 | 0 | $4_1 | 0) ^ $3_1 | 0;
    $1_1 = $1_1 + 4 | 0;
    continue label$1;
    };
  }
  
  function $667($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    var $6_1 = 0;
    $6_1 = global$0 - 32 | 0;
    global$0 = $6_1;
    HEAP32[($6_1 + 28 | 0) >> 2] = $1_1;
    label$1 : {
    label$2 : {
      if (($196($3_1 | 0) | 0) & 1 | 0) {
      break label$2
      }
      HEAP32[$6_1 >> 2] = -1;
      $1_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $6_1) | 0;
      label$3 : {
      switch (HEAP32[$6_1 >> 2] | 0 | 0) {
      case 0:
        HEAP8[$5_1 >> 0] = 0;
        break label$1;
      case 1:
        HEAP8[$5_1 >> 0] = 1;
        break label$1;
      default:
        break label$3;
      };
      }
      HEAP8[$5_1 >> 0] = 1;
      HEAP32[$4_1 >> 2] = 4;
      break label$1;
    }
    $439($6_1 | 0, $3_1 | 0);
    $1_1 = $197($6_1 | 0) | 0;
    $668($6_1 | 0) | 0;
    $439($6_1 | 0, $3_1 | 0);
    $3_1 = $669($6_1 | 0) | 0;
    $668($6_1 | 0) | 0;
    $670($6_1 | 0, $3_1 | 0);
    $671($6_1 | 12 | 0 | 0, $3_1 | 0);
    $3_1 = $6_1 + 24 | 0;
    HEAP8[$5_1 >> 0] = ($672($6_1 + 28 | 0 | 0, $2_1 | 0, $6_1 | 0, $3_1 | 0, $1_1 | 0, $4_1 | 0, 1 | 0) | 0 | 0) == ($6_1 | 0);
    $1_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
    label$6 : while (1) {
      $3_1 = $1761($3_1 + -12 | 0 | 0) | 0;
      if (($3_1 | 0) != ($6_1 | 0)) {
      continue label$6
      }
      break label$6;
    };
    }
    global$0 = $6_1 + 32 | 0;
    return $1_1 | 0;
  }
  
  function $668($0_1) {
    $0_1 = $0_1 | 0;
    $1277(HEAP32[$0_1 >> 2] | 0 | 0);
    return $0_1 | 0;
  }
  
  function $669($0_1) {
    $0_1 = $0_1 | 0;
    return $673($0_1 | 0, 89368 | 0) | 0 | 0;
  }
  
  function $670($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1);
  }
  
  function $671($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1);
  }
  
  function $672($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $6_1 = $6_1 | 0;
    var $12_1 = 0, $7_1 = 0, $11_1 = 0, $8_1 = 0, $9_1 = 0, $17_1 = 0, $13_1 = 0, $15_1 = 0, $14_1 = 0, $16_1 = 0, $10_1 = 0;
    $7_1 = global$0 - 128 | 0;
    global$0 = $7_1;
    HEAP32[($7_1 + 124 | 0) >> 2] = $1_1;
    $8_1 = $674($2_1 | 0, $3_1 | 0) | 0;
    HEAP32[($7_1 + 16 | 0) >> 2] = 94;
    $9_1 = 0;
    $10_1 = $675($7_1 + 8 | 0 | 0, 0 | 0, $7_1 + 16 | 0 | 0) | 0;
    $11_1 = $7_1 + 16 | 0;
    label$1 : {
    label$2 : {
      label$3 : {
      label$4 : {
        if ($8_1 >>> 0 < 101 >>> 0) {
        break label$4
        }
        $11_1 = $126($8_1 | 0) | 0;
        if (!$11_1) {
        break label$3
        }
        $676($10_1 | 0, $11_1 | 0);
      }
      $12_1 = $11_1;
      $1_1 = $2_1;
      label$5 : while (1) {
        label$6 : {
        if (($1_1 | 0) != ($3_1 | 0)) {
          break label$6
        }
        $13_1 = 0;
        label$7 : while (1) {
          label$8 : {
          label$9 : {
            if ($198($0_1 | 0, $7_1 + 124 | 0 | 0) | 0) {
            break label$9
            }
            if ($8_1) {
            break label$8
            }
          }
          label$10 : {
            if (!($198($0_1 | 0, $7_1 + 124 | 0 | 0) | 0)) {
            break label$10
            }
            HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 2 | 0;
          }
          label$11 : while (1) {
            if (($2_1 | 0) == ($3_1 | 0)) {
            break label$2
            }
            if ((HEAPU8[$11_1 >> 0] | 0 | 0) == (2 | 0)) {
            break label$1
            }
            $11_1 = $11_1 + 1 | 0;
            $2_1 = $2_1 + 12 | 0;
            continue label$11;
          };
          }
          $14_1 = $199($0_1 | 0) | 0;
          label$12 : {
          if ($6_1) {
            break label$12
          }
          $14_1 = $677($4_1 | 0, $14_1 | 0) | 0;
          }
          $15_1 = $13_1 + 1 | 0;
          $16_1 = 0;
          $12_1 = $11_1;
          $1_1 = $2_1;
          label$13 : while (1) {
          label$14 : {
            if (($1_1 | 0) != ($3_1 | 0)) {
            break label$14
            }
            $13_1 = $15_1;
            if (!($16_1 & 1 | 0)) {
            continue label$7
            }
            $201($0_1 | 0) | 0;
            $13_1 = $15_1;
            $12_1 = $11_1;
            $1_1 = $2_1;
            if (($9_1 + $8_1 | 0) >>> 0 < 2 >>> 0) {
            continue label$7
            }
            label$15 : while (1) {
            label$16 : {
              if (($1_1 | 0) != ($3_1 | 0)) {
              break label$16
              }
              $13_1 = $15_1;
              continue label$7;
            }
            label$17 : {
              if ((HEAPU8[$12_1 >> 0] | 0 | 0) != (2 | 0)) {
              break label$17
              }
              if (($309($1_1 | 0) | 0 | 0) == ($15_1 | 0)) {
              break label$17
              }
              HEAP8[$12_1 >> 0] = 0;
              $9_1 = $9_1 + -1 | 0;
            }
            $12_1 = $12_1 + 1 | 0;
            $1_1 = $1_1 + 12 | 0;
            continue label$15;
            };
          }
          label$18 : {
            if ((HEAPU8[$12_1 >> 0] | 0 | 0) != (1 | 0)) {
            break label$18
            }
            $17_1 = HEAP8[($678($1_1 | 0, $13_1 | 0) | 0) >> 0] | 0;
            label$19 : {
            if ($6_1) {
              break label$19
            }
            $17_1 = $677($4_1 | 0, $17_1 | 0) | 0;
            }
            label$20 : {
            label$21 : {
              if (($14_1 | 0) != ($17_1 | 0)) {
              break label$21
              }
              $16_1 = 1;
              if (($309($1_1 | 0) | 0 | 0) != ($15_1 | 0)) {
              break label$18
              }
              HEAP8[$12_1 >> 0] = 2;
              $16_1 = 1;
              $9_1 = $9_1 + 1 | 0;
              break label$20;
            }
            HEAP8[$12_1 >> 0] = 0;
            }
            $8_1 = $8_1 + -1 | 0;
          }
          $12_1 = $12_1 + 1 | 0;
          $1_1 = $1_1 + 12 | 0;
          continue label$13;
          };
        };
        }
        $17_1 = $679($1_1 | 0) | 0;
        HEAP8[$12_1 >> 0] = $17_1 ? 2 : 1;
        $12_1 = $12_1 + 1 | 0;
        $1_1 = $1_1 + 12 | 0;
        $9_1 = $9_1 + $17_1 | 0;
        $8_1 = $8_1 - $17_1 | 0;
        continue label$5;
      };
      }
      $1755();
      wasm2js_trap();
    }
    HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
    }
    $680($10_1 | 0) | 0;
    global$0 = $7_1 + 128 | 0;
    return $2_1 | 0;
  }
  
  function $673($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $1246(HEAP32[$0_1 >> 2] | 0 | 0, $1206($1_1 | 0) | 0 | 0) | 0 | 0;
  }
  
  function $674($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $1711($0_1 | 0, $1_1 | 0) | 0 | 0;
  }
  
  function $675($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    HEAP32[($3_1 + 12 | 0) >> 2] = $1_1;
    $1_1 = $1705($0_1 | 0, $3_1 + 12 | 0 | 0, $2_1 | 0) | 0;
    global$0 = $3_1 + 16 | 0;
    return $1_1 | 0;
  }
  
  function $676($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0;
    $2_1 = HEAP32[($1706($0_1 | 0) | 0) >> 2] | 0;
    HEAP32[($1706($0_1 | 0) | 0) >> 2] = $1_1;
    label$1 : {
    if (!$2_1) {
      break label$1
    }
    FUNCTION_TABLE[HEAP32[($1707($0_1 | 0) | 0) >> 2] | 0 | 0]($2_1);
    }
  }
  
  function $677($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1, $1_1) | 0 | 0;
  }
  
  function $678($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return ($308($0_1 | 0) | 0) + $1_1 | 0 | 0;
  }
  
  function $679($0_1) {
    $0_1 = $0_1 | 0;
    return !($309($0_1 | 0) | 0) | 0;
  }
  
  function $680($0_1) {
    $0_1 = $0_1 | 0;
    $676($0_1 | 0, 0 | 0);
    return $0_1 | 0;
  }
  
  function $681($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    return $682($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
  }
  
  function $682($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    var $6_1 = 0, $7_1 = 0;
    $6_1 = global$0 - 256 | 0;
    global$0 = $6_1;
    HEAP32[($6_1 + 248 | 0) >> 2] = $2_1;
    HEAP32[($6_1 + 252 | 0) >> 2] = $1_1;
    $1_1 = $683($3_1 | 0) | 0;
    $0_1 = $684($0_1 | 0, $3_1 | 0, $6_1 + 208 | 0 | 0) | 0;
    $685($6_1 + 196 | 0 | 0, $3_1 | 0, $6_1 + 247 | 0 | 0);
    $3_1 = $286($6_1 + 184 | 0 | 0) | 0;
    $311($3_1 | 0, $310($3_1 | 0) | 0 | 0);
    $2_1 = $686($3_1 | 0, 0 | 0) | 0;
    HEAP32[($6_1 + 180 | 0) >> 2] = $2_1;
    HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
    HEAP32[($6_1 + 8 | 0) >> 2] = 0;
    label$1 : {
    label$2 : while (1) {
      if ($198($6_1 + 252 | 0 | 0, $6_1 + 248 | 0 | 0) | 0) {
      break label$1
      }
      label$3 : {
      if ((HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0) != ($2_1 + ($309($3_1 | 0) | 0) | 0 | 0)) {
        break label$3
      }
      $7_1 = $309($3_1 | 0) | 0;
      $311($3_1 | 0, ($309($3_1 | 0) | 0) << 1 | 0 | 0);
      $311($3_1 | 0, $310($3_1 | 0) | 0 | 0);
      $2_1 = $686($3_1 | 0, 0 | 0) | 0;
      HEAP32[($6_1 + 180 | 0) >> 2] = $7_1 + $2_1 | 0;
      }
      if ($687($199($6_1 + 252 | 0 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0, $6_1 + 180 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP8[($6_1 + 247 | 0) >> 0] | 0 | 0, $6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $0_1 | 0) | 0) {
      break label$1
      }
      $201($6_1 + 252 | 0 | 0) | 0;
      continue label$2;
    };
    }
    label$4 : {
    if (!($309($6_1 + 196 | 0 | 0) | 0)) {
      break label$4
    }
    $0_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
    if (($0_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
      break label$4
    }
    HEAP32[($6_1 + 12 | 0) >> 2] = $0_1 + 4 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
    }
    HEAP32[$5_1 >> 2] = $688($2_1 | 0, HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
    $689($6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
    label$5 : {
    if (!($198($6_1 + 252 | 0 | 0, $6_1 + 248 | 0 | 0) | 0)) {
      break label$5
    }
    HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
    }
    $2_1 = HEAP32[($6_1 + 252 | 0) >> 2] | 0;
    $1761($3_1 | 0) | 0;
    $1761($6_1 + 196 | 0 | 0) | 0;
    global$0 = $6_1 + 256 | 0;
    return $2_1 | 0;
  }
  
  function $683($0_1) {
    $0_1 = $0_1 | 0;
    label$1 : {
    label$2 : {
      $0_1 = ($196($0_1 | 0) | 0) & 74 | 0;
      if (!$0_1) {
      break label$2
      }
      label$3 : {
      if (($0_1 | 0) != (64 | 0)) {
        break label$3
      }
      return 8 | 0;
      }
      if (($0_1 | 0) != (8 | 0)) {
      break label$1
      }
      return 16 | 0;
    }
    return 0 | 0;
    }
    return 10 | 0;
  }
  
  function $684($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    return $764($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
  }
  
  function $685($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    $439($3_1 + 12 | 0 | 0, $1_1 | 0);
    $1_1 = $669($3_1 + 12 | 0 | 0) | 0;
    HEAP8[$2_1 >> 0] = $760($1_1 | 0) | 0;
    $761($0_1 | 0, $1_1 | 0);
    $668($3_1 + 12 | 0 | 0) | 0;
    global$0 = $3_1 + 16 | 0;
  }
  
  function $686($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return ($292($0_1 | 0) | 0) + $1_1 | 0 | 0;
  }
  
  function $687($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $6_1 = $6_1 | 0;
    $7_1 = $7_1 | 0;
    $8_1 = $8_1 | 0;
    $9_1 = $9_1 | 0;
    var $10_1 = 0, $11_1 = 0, $12_1 = 0;
    $10_1 = global$0 - 16 | 0;
    global$0 = $10_1;
    HEAP8[($10_1 + 15 | 0) >> 0] = $0_1;
    label$1 : {
    label$2 : {
      label$3 : {
      $11_1 = HEAP32[$3_1 >> 2] | 0;
      if (($11_1 | 0) != ($2_1 | 0)) {
        break label$3
      }
      label$4 : {
        label$5 : {
        $12_1 = $0_1 & 255 | 0;
        if (($12_1 | 0) != (HEAPU8[($9_1 + 24 | 0) >> 0] | 0 | 0)) {
          break label$5
        }
        $0_1 = 43;
        break label$4;
        }
        if (($12_1 | 0) != (HEAPU8[($9_1 + 25 | 0) >> 0] | 0 | 0)) {
        break label$3
        }
        $0_1 = 45;
      }
      HEAP32[$3_1 >> 2] = $11_1 + 1 | 0;
      HEAP8[$11_1 >> 0] = $0_1;
      break label$2;
      }
      label$6 : {
      if (!($309($6_1 | 0) | 0)) {
        break label$6
      }
      if (($0_1 | 0) != ($5_1 | 0)) {
        break label$6
      }
      $0_1 = 0;
      $9_1 = HEAP32[$8_1 >> 2] | 0;
      if (($9_1 - $7_1 | 0 | 0) > (159 | 0)) {
        break label$1
      }
      $0_1 = HEAP32[$4_1 >> 2] | 0;
      HEAP32[$8_1 >> 2] = $9_1 + 4 | 0;
      HEAP32[$9_1 >> 2] = $0_1;
      break label$2;
      }
      $0_1 = -1;
      $9_1 = ($720($9_1 | 0, $9_1 + 26 | 0 | 0, $10_1 + 15 | 0 | 0) | 0) - $9_1 | 0;
      if (($9_1 | 0) > (23 | 0)) {
      break label$1
      }
      label$7 : {
      label$8 : {
        switch ($1_1 + -8 | 0 | 0) {
        case 0:
        case 2:
        if (($9_1 | 0) < ($1_1 | 0)) {
          break label$7
        }
        break label$1;
        case 1:
        break label$7;
        default:
        break label$8;
        };
      }
      if (($1_1 | 0) != (16 | 0)) {
        break label$7
      }
      if (($9_1 | 0) < (22 | 0)) {
        break label$7
      }
      $6_1 = HEAP32[$3_1 >> 2] | 0;
      if (($6_1 | 0) == ($2_1 | 0)) {
        break label$1
      }
      if (($6_1 - $2_1 | 0 | 0) > (2 | 0)) {
        break label$1
      }
      $0_1 = -1;
      if ((HEAPU8[($6_1 + -1 | 0) >> 0] | 0 | 0) != (48 | 0)) {
        break label$1
      }
      $0_1 = 0;
      HEAP32[$4_1 >> 2] = 0;
      HEAP32[$3_1 >> 2] = $6_1 + 1 | 0;
      HEAP8[$6_1 >> 0] = HEAPU8[($9_1 + 74336 | 0) >> 0] | 0;
      break label$1;
      }
      $0_1 = HEAP32[$3_1 >> 2] | 0;
      HEAP32[$3_1 >> 2] = $0_1 + 1 | 0;
      HEAP8[$0_1 >> 0] = HEAPU8[($9_1 + 74336 | 0) >> 0] | 0;
      HEAP32[$4_1 >> 2] = (HEAP32[$4_1 >> 2] | 0) + 1 | 0;
      $0_1 = 0;
      break label$1;
    }
    $0_1 = 0;
    HEAP32[$4_1 >> 2] = 0;
    }
    global$0 = $10_1 + 16 | 0;
    return $0_1 | 0;
  }
  
  function $688($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $7$hi = 0, i64toi32_i32$3 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $6_1 = 0, $44_1 = 0, $44$hi = 0, $48_1 = 0, $48$hi = 0;
    $4_1 = global$0 - 16 | 0;
    global$0 = $4_1;
    label$1 : {
    label$2 : {
      label$3 : {
      label$4 : {
        label$5 : {
        if (($0_1 | 0) == ($1_1 | 0)) {
          break label$5
        }
        $5_1 = $124() | 0;
        $6_1 = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = 0;
        i64toi32_i32$0 = $1712($0_1 | 0, $4_1 + 12 | 0 | 0, $3_1 | 0, $718() | 0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $7_1 = i64toi32_i32$0;
        $7$hi = i64toi32_i32$1;
        label$6 : {
          label$7 : {
          $0_1 = HEAP32[$5_1 >> 2] | 0;
          if (!$0_1) {
            break label$7
          }
          if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
            break label$6
          }
          if (($0_1 | 0) == (68 | 0)) {
            break label$2
          }
          break label$3;
          }
          HEAP32[$5_1 >> 2] = $6_1;
          if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
          break label$3
          }
        }
        HEAP32[$2_1 >> 2] = 4;
        break label$4;
        }
        HEAP32[$2_1 >> 2] = 4;
      }
      $1_1 = 0;
      break label$1;
      }
      i64toi32_i32$1 = $7$hi;
      i64toi32_i32$0 = $1713() | 0;
      i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
      $44_1 = i64toi32_i32$0;
      $44$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $7$hi;
      i64toi32_i32$2 = $7_1;
      i64toi32_i32$0 = $44$hi;
      i64toi32_i32$3 = $44_1;
      if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
      $17_1 = 1
      } else {
      if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
        if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
        $18_1 = 0
        } else {
        $18_1 = 1
        }
        $19_1 = $18_1;
      } else {
        $19_1 = 0
      }
      $17_1 = $19_1;
      }
      if ($17_1) {
      break label$2
      }
      i64toi32_i32$2 = $7$hi;
      i64toi32_i32$1 = $214() | 0;
      i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
      $48_1 = i64toi32_i32$1;
      $48$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $7$hi;
      i64toi32_i32$3 = $7_1;
      i64toi32_i32$1 = $48$hi;
      i64toi32_i32$0 = $48_1;
      if ((i64toi32_i32$2 | 0) > (i64toi32_i32$1 | 0)) {
      $20_1 = 1
      } else {
      if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$1 | 0)) {
        if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$0 >>> 0) {
        $21_1 = 0
        } else {
        $21_1 = 1
        }
        $22_1 = $21_1;
      } else {
        $22_1 = 0
      }
      $20_1 = $22_1;
      }
      if ($20_1) {
      break label$2
      }
      i64toi32_i32$3 = $7$hi;
      i64toi32_i32$3 = $7$hi;
      $1_1 = $7_1;
      break label$1;
    }
    HEAP32[$2_1 >> 2] = 4;
    label$8 : {
      i64toi32_i32$3 = $7$hi;
      i64toi32_i32$3 = $7$hi;
      i64toi32_i32$0 = $7_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$1 = 1;
      if (($7$hi | 0) < (i64toi32_i32$2 | 0)) {
      $23_1 = 1
      } else {
      if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$2 | 0)) {
        if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$1 >>> 0) {
        $24_1 = 0
        } else {
        $24_1 = 1
        }
        $25_1 = $24_1;
      } else {
        $25_1 = 0
      }
      $23_1 = $25_1;
      }
      if ($23_1) {
      break label$8
      }
      $1_1 = $214() | 0;
      break label$1;
    }
    $1_1 = $1713() | 0;
    }
    global$0 = $4_1 + 16 | 0;
    return $1_1 | 0;
  }
  
  function $689($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    var $4_1 = 0, $5_1 = 0;
    $4_1 = $309($0_1 | 0) | 0;
    label$1 : {
    if (($2_1 - $1_1 | 0 | 0) < (5 | 0)) {
      break label$1
    }
    if (!$4_1) {
      break label$1
    }
    $1025($1_1 | 0, $2_1 | 0);
    $4_1 = $2_1 + -4 | 0;
    $2_1 = $308($0_1 | 0) | 0;
    $5_1 = $2_1 + ($309($0_1 | 0) | 0) | 0;
    label$2 : {
      label$3 : {
      label$4 : while (1) {
        $0_1 = HEAP8[$2_1 >> 0] | 0;
        if ($1_1 >>> 0 >= $4_1 >>> 0) {
        break label$3
        }
        label$5 : {
        if (($0_1 | 0) < (1 | 0)) {
          break label$5
        }
        if (($0_1 | 0) >= ($911() | 0 | 0)) {
          break label$5
        }
        if ((HEAP32[$1_1 >> 2] | 0 | 0) != (HEAP8[$2_1 >> 0] | 0 | 0)) {
          break label$2
        }
        }
        $1_1 = $1_1 + 4 | 0;
        $2_1 = $2_1 + (($5_1 - $2_1 | 0 | 0) > (1 | 0)) | 0;
        continue label$4;
      };
      }
      if (($0_1 | 0) < (1 | 0)) {
      break label$1
      }
      if (($0_1 | 0) >= ($911() | 0 | 0)) {
      break label$1
      }
      if (((HEAP32[$4_1 >> 2] | 0) + -1 | 0) >>> 0 < (HEAP8[$2_1 >> 0] | 0) >>> 0) {
      break label$1
      }
    }
    HEAP32[$3_1 >> 2] = 4;
    }
  }
  
  function $690($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    return $691($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
  }
  
  function $691($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    var $6_1 = 0, i64toi32_i32$0 = 0, $7_1 = 0, i64toi32_i32$1 = 0, $113_1 = 0;
    $6_1 = global$0 - 256 | 0;
    global$0 = $6_1;
    HEAP32[($6_1 + 248 | 0) >> 2] = $2_1;
    HEAP32[($6_1 + 252 | 0) >> 2] = $1_1;
    $1_1 = $683($3_1 | 0) | 0;
    $0_1 = $684($0_1 | 0, $3_1 | 0, $6_1 + 208 | 0 | 0) | 0;
    $685($6_1 + 196 | 0 | 0, $3_1 | 0, $6_1 + 247 | 0 | 0);
    $3_1 = $286($6_1 + 184 | 0 | 0) | 0;
    $311($3_1 | 0, $310($3_1 | 0) | 0 | 0);
    $2_1 = $686($3_1 | 0, 0 | 0) | 0;
    HEAP32[($6_1 + 180 | 0) >> 2] = $2_1;
    HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
    HEAP32[($6_1 + 8 | 0) >> 2] = 0;
    label$1 : {
    label$2 : while (1) {
      if ($198($6_1 + 252 | 0 | 0, $6_1 + 248 | 0 | 0) | 0) {
      break label$1
      }
      label$3 : {
      if ((HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0) != ($2_1 + ($309($3_1 | 0) | 0) | 0 | 0)) {
        break label$3
      }
      $7_1 = $309($3_1 | 0) | 0;
      $311($3_1 | 0, ($309($3_1 | 0) | 0) << 1 | 0 | 0);
      $311($3_1 | 0, $310($3_1 | 0) | 0 | 0);
      $2_1 = $686($3_1 | 0, 0 | 0) | 0;
      HEAP32[($6_1 + 180 | 0) >> 2] = $7_1 + $2_1 | 0;
      }
      if ($687($199($6_1 + 252 | 0 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0, $6_1 + 180 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP8[($6_1 + 247 | 0) >> 0] | 0 | 0, $6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $0_1 | 0) | 0) {
      break label$1
      }
      $201($6_1 + 252 | 0 | 0) | 0;
      continue label$2;
    };
    }
    label$4 : {
    if (!($309($6_1 + 196 | 0 | 0) | 0)) {
      break label$4
    }
    $0_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
    if (($0_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
      break label$4
    }
    HEAP32[($6_1 + 12 | 0) >> 2] = $0_1 + 4 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
    }
    i64toi32_i32$0 = $692($2_1 | 0, HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $113_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $5_1;
    HEAP32[i64toi32_i32$0 >> 2] = $113_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    $689($6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
    label$5 : {
    if (!($198($6_1 + 252 | 0 | 0, $6_1 + 248 | 0 | 0) | 0)) {
      break label$5
    }
    HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
    }
    $2_1 = HEAP32[($6_1 + 252 | 0) >> 2] | 0;
    $1761($3_1 | 0) | 0;
    $1761($6_1 + 196 | 0 | 0) | 0;
    global$0 = $6_1 + 256 | 0;
    return $2_1 | 0;
  }
  
  function $692($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $7$hi = 0, $7_1 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $5_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $6_1 = 0, $43_1 = 0, $43$hi = 0, $45$hi = 0;
    $4_1 = global$0 - 16 | 0;
    global$0 = $4_1;
    label$1 : {
    label$2 : {
      label$3 : {
      label$4 : {
        label$5 : {
        if (($0_1 | 0) == ($1_1 | 0)) {
          break label$5
        }
        $5_1 = $124() | 0;
        $6_1 = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = 0;
        i64toi32_i32$0 = $1712($0_1 | 0, $4_1 + 12 | 0 | 0, $3_1 | 0, $718() | 0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $7_1 = i64toi32_i32$0;
        $7$hi = i64toi32_i32$1;
        label$6 : {
          label$7 : {
          $0_1 = HEAP32[$5_1 >> 2] | 0;
          if (!$0_1) {
            break label$7
          }
          if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
            break label$6
          }
          if (($0_1 | 0) == (68 | 0)) {
            break label$2
          }
          break label$3;
          }
          HEAP32[$5_1 >> 2] = $6_1;
          if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
          break label$3
          }
        }
        HEAP32[$2_1 >> 2] = 4;
        break label$4;
        }
        HEAP32[$2_1 >> 2] = 4;
      }
      i64toi32_i32$1 = 0;
      $7_1 = 0;
      $7$hi = i64toi32_i32$1;
      break label$1;
      }
      i64toi32_i32$1 = $7$hi;
      i64toi32_i32$1 = $1715() | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $43_1 = i64toi32_i32$1;
      $43$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $7$hi;
      i64toi32_i32$2 = $7_1;
      i64toi32_i32$1 = $43$hi;
      i64toi32_i32$3 = $43_1;
      if ((i64toi32_i32$0 | 0) < (i64toi32_i32$1 | 0)) {
      $16_1 = 1
      } else {
      if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$1 | 0)) {
        if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
        $17_1 = 0
        } else {
        $17_1 = 1
        }
        $18_1 = $17_1;
      } else {
        $18_1 = 0
      }
      $16_1 = $18_1;
      }
      if ($16_1) {
      break label$2
      }
      i64toi32_i32$2 = $1716() | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $45$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $7$hi;
      i64toi32_i32$0 = $45$hi;
      i64toi32_i32$3 = i64toi32_i32$2;
      i64toi32_i32$2 = $7$hi;
      i64toi32_i32$1 = $7_1;
      if ((i64toi32_i32$0 | 0) > ($7$hi | 0)) {
      $19_1 = 1
      } else {
      if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$2 | 0)) {
        if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
        $20_1 = 0
        } else {
        $20_1 = 1
        }
        $21_1 = $20_1;
      } else {
        $21_1 = 0
      }
      $19_1 = $21_1;
      }
      if ($19_1) {
      break label$1
      }
    }
    HEAP32[$2_1 >> 2] = 4;
    label$8 : {
      i64toi32_i32$3 = $7$hi;
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$2 = 1;
      if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
      $22_1 = 1
      } else {
      if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
        if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$2 >>> 0) {
        $23_1 = 0
        } else {
        $23_1 = 1
        }
        $24_1 = $23_1;
      } else {
        $24_1 = 0
      }
      $22_1 = $24_1;
      }
      if ($22_1) {
      break label$8
      }
      i64toi32_i32$1 = $1716() | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $7_1 = i64toi32_i32$1;
      $7$hi = i64toi32_i32$3;
      break label$1;
    }
    i64toi32_i32$3 = $1715() | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $7_1 = i64toi32_i32$3;
    $7$hi = i64toi32_i32$1;
    }
    global$0 = $4_1 + 16 | 0;
    i64toi32_i32$1 = $7$hi;
    i64toi32_i32$3 = $7_1;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
    return i64toi32_i32$3 | 0;
  }
  
  function $693($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    return $694($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
  }
  
  function $694($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    var $6_1 = 0, $7_1 = 0;
    $6_1 = global$0 - 256 | 0;
    global$0 = $6_1;
    HEAP32[($6_1 + 248 | 0) >> 2] = $2_1;
    HEAP32[($6_1 + 252 | 0) >> 2] = $1_1;
    $1_1 = $683($3_1 | 0) | 0;
    $0_1 = $684($0_1 | 0, $3_1 | 0, $6_1 + 208 | 0 | 0) | 0;
    $685($6_1 + 196 | 0 | 0, $3_1 | 0, $6_1 + 247 | 0 | 0);
    $3_1 = $286($6_1 + 184 | 0 | 0) | 0;
    $311($3_1 | 0, $310($3_1 | 0) | 0 | 0);
    $2_1 = $686($3_1 | 0, 0 | 0) | 0;
    HEAP32[($6_1 + 180 | 0) >> 2] = $2_1;
    HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
    HEAP32[($6_1 + 8 | 0) >> 2] = 0;
    label$1 : {
    label$2 : while (1) {
      if ($198($6_1 + 252 | 0 | 0, $6_1 + 248 | 0 | 0) | 0) {
      break label$1
      }
      label$3 : {
      if ((HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0) != ($2_1 + ($309($3_1 | 0) | 0) | 0 | 0)) {
        break label$3
      }
      $7_1 = $309($3_1 | 0) | 0;
      $311($3_1 | 0, ($309($3_1 | 0) | 0) << 1 | 0 | 0);
      $311($3_1 | 0, $310($3_1 | 0) | 0 | 0);
      $2_1 = $686($3_1 | 0, 0 | 0) | 0;
      HEAP32[($6_1 + 180 | 0) >> 2] = $7_1 + $2_1 | 0;
      }
      if ($687($199($6_1 + 252 | 0 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0, $6_1 + 180 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP8[($6_1 + 247 | 0) >> 0] | 0 | 0, $6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $0_1 | 0) | 0) {
      break label$1
      }
      $201($6_1 + 252 | 0 | 0) | 0;
      continue label$2;
    };
    }
    label$4 : {
    if (!($309($6_1 + 196 | 0 | 0) | 0)) {
      break label$4
    }
    $0_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
    if (($0_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
      break label$4
    }
    HEAP32[($6_1 + 12 | 0) >> 2] = $0_1 + 4 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
    }
    HEAP16[$5_1 >> 1] = $695($2_1 | 0, HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
    $689($6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
    label$5 : {
    if (!($198($6_1 + 252 | 0 | 0, $6_1 + 248 | 0 | 0) | 0)) {
      break label$5
    }
    HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
    }
    $2_1 = HEAP32[($6_1 + 252 | 0) >> 2] | 0;
    $1761($3_1 | 0) | 0;
    $1761($6_1 + 196 | 0 | 0) | 0;
    global$0 = $6_1 + 256 | 0;
    return $2_1 | 0;
  }
  
  function $695($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    var i64toi32_i32$1 = 0, $4_1 = 0, $6_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $8_1 = 0, $8$hi = 0, $7_1 = 0, $55$hi = 0;
    $4_1 = global$0 - 16 | 0;
    global$0 = $4_1;
    label$1 : {
    label$2 : {
      label$3 : {
      label$4 : {
        label$5 : {
        label$6 : {
          if (($0_1 | 0) == ($1_1 | 0)) {
          break label$6
          }
          label$7 : {
          $5_1 = HEAPU8[$0_1 >> 0] | 0;
          if (($5_1 | 0) != (45 | 0)) {
            break label$7
          }
          $0_1 = $0_1 + 1 | 0;
          if (($0_1 | 0) != ($1_1 | 0)) {
            break label$7
          }
          HEAP32[$2_1 >> 2] = 4;
          break label$5;
          }
          $6_1 = $124() | 0;
          $7_1 = HEAP32[$6_1 >> 2] | 0;
          HEAP32[$6_1 >> 2] = 0;
          i64toi32_i32$0 = $1719($0_1 | 0, $4_1 + 12 | 0 | 0, $3_1 | 0, $718() | 0 | 0) | 0;
          i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
          $8_1 = i64toi32_i32$0;
          $8$hi = i64toi32_i32$1;
          label$8 : {
          label$9 : {
            $0_1 = HEAP32[$6_1 >> 2] | 0;
            if (!$0_1) {
            break label$9
            }
            if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
            break label$8
            }
            if (($0_1 | 0) == (68 | 0)) {
            break label$3
            }
            break label$4;
          }
          HEAP32[$6_1 >> 2] = $7_1;
          if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
            break label$4
          }
          }
          HEAP32[$2_1 >> 2] = 4;
          break label$5;
        }
        HEAP32[$2_1 >> 2] = 4;
        }
        $0_1 = 0;
        break label$1;
      }
      i64toi32_i32$1 = $8$hi;
      i64toi32_i32$1 = 0;
      $55$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $8$hi;
      i64toi32_i32$0 = $55$hi;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & $8_1 >>> 0 <= ($1720() | 0) >>> 0 | 0) | 0) {
        break label$2
      }
      }
      HEAP32[$2_1 >> 2] = 4;
      $0_1 = $1720() | 0;
      break label$1;
    }
    $0_1 = $8_1;
    $0_1 = ($5_1 | 0) == (45 | 0) ? 0 - $0_1 | 0 : $0_1;
    }
    global$0 = $4_1 + 16 | 0;
    return $0_1 & 65535 | 0 | 0;
  }
  
  function $696($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    return $697($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
  }
  
  function $697($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    var $6_1 = 0, $7_1 = 0;
    $6_1 = global$0 - 256 | 0;
    global$0 = $6_1;
    HEAP32[($6_1 + 248 | 0) >> 2] = $2_1;
    HEAP32[($6_1 + 252 | 0) >> 2] = $1_1;
    $1_1 = $683($3_1 | 0) | 0;
    $0_1 = $684($0_1 | 0, $3_1 | 0, $6_1 + 208 | 0 | 0) | 0;
    $685($6_1 + 196 | 0 | 0, $3_1 | 0, $6_1 + 247 | 0 | 0);
    $3_1 = $286($6_1 + 184 | 0 | 0) | 0;
    $311($3_1 | 0, $310($3_1 | 0) | 0 | 0);
    $2_1 = $686($3_1 | 0, 0 | 0) | 0;
    HEAP32[($6_1 + 180 | 0) >> 2] = $2_1;
    HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
    HEAP32[($6_1 + 8 | 0) >> 2] = 0;
    label$1 : {
    label$2 : while (1) {
      if ($198($6_1 + 252 | 0 | 0, $6_1 + 248 | 0 | 0) | 0) {
      break label$1
      }
      label$3 : {
      if ((HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0) != ($2_1 + ($309($3_1 | 0) | 0) | 0 | 0)) {
        break label$3
      }
      $7_1 = $309($3_1 | 0) | 0;
      $311($3_1 | 0, ($309($3_1 | 0) | 0) << 1 | 0 | 0);
      $311($3_1 | 0, $310($3_1 | 0) | 0 | 0);
      $2_1 = $686($3_1 | 0, 0 | 0) | 0;
      HEAP32[($6_1 + 180 | 0) >> 2] = $7_1 + $2_1 | 0;
      }
      if ($687($199($6_1 + 252 | 0 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0, $6_1 + 180 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP8[($6_1 + 247 | 0) >> 0] | 0 | 0, $6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $0_1 | 0) | 0) {
      break label$1
      }
      $201($6_1 + 252 | 0 | 0) | 0;
      continue label$2;
    };
    }
    label$4 : {
    if (!($309($6_1 + 196 | 0 | 0) | 0)) {
      break label$4
    }
    $0_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
    if (($0_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
      break label$4
    }
    HEAP32[($6_1 + 12 | 0) >> 2] = $0_1 + 4 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
    }
    HEAP32[$5_1 >> 2] = $698($2_1 | 0, HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
    $689($6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
    label$5 : {
    if (!($198($6_1 + 252 | 0 | 0, $6_1 + 248 | 0 | 0) | 0)) {
      break label$5
    }
    HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
    }
    $2_1 = HEAP32[($6_1 + 252 | 0) >> 2] | 0;
    $1761($3_1 | 0) | 0;
    $1761($6_1 + 196 | 0 | 0) | 0;
    global$0 = $6_1 + 256 | 0;
    return $2_1 | 0;
  }
  
  function $698($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    var i64toi32_i32$1 = 0, $4_1 = 0, $6_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $8_1 = 0, $8$hi = 0, $7_1 = 0, $55$hi = 0;
    $4_1 = global$0 - 16 | 0;
    global$0 = $4_1;
    label$1 : {
    label$2 : {
      label$3 : {
      label$4 : {
        label$5 : {
        label$6 : {
          if (($0_1 | 0) == ($1_1 | 0)) {
          break label$6
          }
          label$7 : {
          $5_1 = HEAPU8[$0_1 >> 0] | 0;
          if (($5_1 | 0) != (45 | 0)) {
            break label$7
          }
          $0_1 = $0_1 + 1 | 0;
          if (($0_1 | 0) != ($1_1 | 0)) {
            break label$7
          }
          HEAP32[$2_1 >> 2] = 4;
          break label$5;
          }
          $6_1 = $124() | 0;
          $7_1 = HEAP32[$6_1 >> 2] | 0;
          HEAP32[$6_1 >> 2] = 0;
          i64toi32_i32$0 = $1719($0_1 | 0, $4_1 + 12 | 0 | 0, $3_1 | 0, $718() | 0 | 0) | 0;
          i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
          $8_1 = i64toi32_i32$0;
          $8$hi = i64toi32_i32$1;
          label$8 : {
          label$9 : {
            $0_1 = HEAP32[$6_1 >> 2] | 0;
            if (!$0_1) {
            break label$9
            }
            if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
            break label$8
            }
            if (($0_1 | 0) == (68 | 0)) {
            break label$3
            }
            break label$4;
          }
          HEAP32[$6_1 >> 2] = $7_1;
          if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
            break label$4
          }
          }
          HEAP32[$2_1 >> 2] = 4;
          break label$5;
        }
        HEAP32[$2_1 >> 2] = 4;
        }
        $0_1 = 0;
        break label$1;
      }
      i64toi32_i32$1 = $8$hi;
      i64toi32_i32$1 = 0;
      $55$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $8$hi;
      i64toi32_i32$0 = $55$hi;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & $8_1 >>> 0 <= ($1102() | 0) >>> 0 | 0) | 0) {
        break label$2
      }
      }
      HEAP32[$2_1 >> 2] = 4;
      $0_1 = $1102() | 0;
      break label$1;
    }
    $0_1 = $8_1;
    $0_1 = ($5_1 | 0) == (45 | 0) ? 0 - $0_1 | 0 : $0_1;
    }
    global$0 = $4_1 + 16 | 0;
    return $0_1 | 0;
  }
  
  function $699($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    return $700($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
  }
  
  function $700($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    var $6_1 = 0, $7_1 = 0;
    $6_1 = global$0 - 256 | 0;
    global$0 = $6_1;
    HEAP32[($6_1 + 248 | 0) >> 2] = $2_1;
    HEAP32[($6_1 + 252 | 0) >> 2] = $1_1;
    $1_1 = $683($3_1 | 0) | 0;
    $0_1 = $684($0_1 | 0, $3_1 | 0, $6_1 + 208 | 0 | 0) | 0;
    $685($6_1 + 196 | 0 | 0, $3_1 | 0, $6_1 + 247 | 0 | 0);
    $3_1 = $286($6_1 + 184 | 0 | 0) | 0;
    $311($3_1 | 0, $310($3_1 | 0) | 0 | 0);
    $2_1 = $686($3_1 | 0, 0 | 0) | 0;
    HEAP32[($6_1 + 180 | 0) >> 2] = $2_1;
    HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
    HEAP32[($6_1 + 8 | 0) >> 2] = 0;
    label$1 : {
    label$2 : while (1) {
      if ($198($6_1 + 252 | 0 | 0, $6_1 + 248 | 0 | 0) | 0) {
      break label$1
      }
      label$3 : {
      if ((HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0) != ($2_1 + ($309($3_1 | 0) | 0) | 0 | 0)) {
        break label$3
      }
      $7_1 = $309($3_1 | 0) | 0;
      $311($3_1 | 0, ($309($3_1 | 0) | 0) << 1 | 0 | 0);
      $311($3_1 | 0, $310($3_1 | 0) | 0 | 0);
      $2_1 = $686($3_1 | 0, 0 | 0) | 0;
      HEAP32[($6_1 + 180 | 0) >> 2] = $7_1 + $2_1 | 0;
      }
      if ($687($199($6_1 + 252 | 0 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0, $6_1 + 180 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP8[($6_1 + 247 | 0) >> 0] | 0 | 0, $6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $0_1 | 0) | 0) {
      break label$1
      }
      $201($6_1 + 252 | 0 | 0) | 0;
      continue label$2;
    };
    }
    label$4 : {
    if (!($309($6_1 + 196 | 0 | 0) | 0)) {
      break label$4
    }
    $0_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
    if (($0_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
      break label$4
    }
    HEAP32[($6_1 + 12 | 0) >> 2] = $0_1 + 4 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
    }
    HEAP32[$5_1 >> 2] = $701($2_1 | 0, HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
    $689($6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
    label$5 : {
    if (!($198($6_1 + 252 | 0 | 0, $6_1 + 248 | 0 | 0) | 0)) {
      break label$5
    }
    HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
    }
    $2_1 = HEAP32[($6_1 + 252 | 0) >> 2] | 0;
    $1761($3_1 | 0) | 0;
    $1761($6_1 + 196 | 0 | 0) | 0;
    global$0 = $6_1 + 256 | 0;
    return $2_1 | 0;
  }
  
  function $701($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    var i64toi32_i32$1 = 0, $4_1 = 0, $6_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $8_1 = 0, $8$hi = 0, $7_1 = 0, $55$hi = 0;
    $4_1 = global$0 - 16 | 0;
    global$0 = $4_1;
    label$1 : {
    label$2 : {
      label$3 : {
      label$4 : {
        label$5 : {
        label$6 : {
          if (($0_1 | 0) == ($1_1 | 0)) {
          break label$6
          }
          label$7 : {
          $5_1 = HEAPU8[$0_1 >> 0] | 0;
          if (($5_1 | 0) != (45 | 0)) {
            break label$7
          }
          $0_1 = $0_1 + 1 | 0;
          if (($0_1 | 0) != ($1_1 | 0)) {
            break label$7
          }
          HEAP32[$2_1 >> 2] = 4;
          break label$5;
          }
          $6_1 = $124() | 0;
          $7_1 = HEAP32[$6_1 >> 2] | 0;
          HEAP32[$6_1 >> 2] = 0;
          i64toi32_i32$0 = $1719($0_1 | 0, $4_1 + 12 | 0 | 0, $3_1 | 0, $718() | 0 | 0) | 0;
          i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
          $8_1 = i64toi32_i32$0;
          $8$hi = i64toi32_i32$1;
          label$8 : {
          label$9 : {
            $0_1 = HEAP32[$6_1 >> 2] | 0;
            if (!$0_1) {
            break label$9
            }
            if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
            break label$8
            }
            if (($0_1 | 0) == (68 | 0)) {
            break label$3
            }
            break label$4;
          }
          HEAP32[$6_1 >> 2] = $7_1;
          if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
            break label$4
          }
          }
          HEAP32[$2_1 >> 2] = 4;
          break label$5;
        }
        HEAP32[$2_1 >> 2] = 4;
        }
        $0_1 = 0;
        break label$1;
      }
      i64toi32_i32$1 = $8$hi;
      i64toi32_i32$1 = 0;
      $55$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $8$hi;
      i64toi32_i32$0 = $55$hi;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & $8_1 >>> 0 <= ($417() | 0) >>> 0 | 0) | 0) {
        break label$2
      }
      }
      HEAP32[$2_1 >> 2] = 4;
      $0_1 = $417() | 0;
      break label$1;
    }
    $0_1 = $8_1;
    $0_1 = ($5_1 | 0) == (45 | 0) ? 0 - $0_1 | 0 : $0_1;
    }
    global$0 = $4_1 + 16 | 0;
    return $0_1 | 0;
  }
  
  function $702($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    return $703($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
  }
  
  function $703($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    var $6_1 = 0, i64toi32_i32$0 = 0, $7_1 = 0, i64toi32_i32$1 = 0, $113_1 = 0;
    $6_1 = global$0 - 256 | 0;
    global$0 = $6_1;
    HEAP32[($6_1 + 248 | 0) >> 2] = $2_1;
    HEAP32[($6_1 + 252 | 0) >> 2] = $1_1;
    $1_1 = $683($3_1 | 0) | 0;
    $0_1 = $684($0_1 | 0, $3_1 | 0, $6_1 + 208 | 0 | 0) | 0;
    $685($6_1 + 196 | 0 | 0, $3_1 | 0, $6_1 + 247 | 0 | 0);
    $3_1 = $286($6_1 + 184 | 0 | 0) | 0;
    $311($3_1 | 0, $310($3_1 | 0) | 0 | 0);
    $2_1 = $686($3_1 | 0, 0 | 0) | 0;
    HEAP32[($6_1 + 180 | 0) >> 2] = $2_1;
    HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
    HEAP32[($6_1 + 8 | 0) >> 2] = 0;
    label$1 : {
    label$2 : while (1) {
      if ($198($6_1 + 252 | 0 | 0, $6_1 + 248 | 0 | 0) | 0) {
      break label$1
      }
      label$3 : {
      if ((HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0) != ($2_1 + ($309($3_1 | 0) | 0) | 0 | 0)) {
        break label$3
      }
      $7_1 = $309($3_1 | 0) | 0;
      $311($3_1 | 0, ($309($3_1 | 0) | 0) << 1 | 0 | 0);
      $311($3_1 | 0, $310($3_1 | 0) | 0 | 0);
      $2_1 = $686($3_1 | 0, 0 | 0) | 0;
      HEAP32[($6_1 + 180 | 0) >> 2] = $7_1 + $2_1 | 0;
      }
      if ($687($199($6_1 + 252 | 0 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0, $6_1 + 180 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP8[($6_1 + 247 | 0) >> 0] | 0 | 0, $6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $0_1 | 0) | 0) {
      break label$1
      }
      $201($6_1 + 252 | 0 | 0) | 0;
      continue label$2;
    };
    }
    label$4 : {
    if (!($309($6_1 + 196 | 0 | 0) | 0)) {
      break label$4
    }
    $0_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
    if (($0_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
      break label$4
    }
    HEAP32[($6_1 + 12 | 0) >> 2] = $0_1 + 4 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
    }
    i64toi32_i32$0 = $704($2_1 | 0, HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $113_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $5_1;
    HEAP32[i64toi32_i32$0 >> 2] = $113_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    $689($6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
    label$5 : {
    if (!($198($6_1 + 252 | 0 | 0, $6_1 + 248 | 0 | 0) | 0)) {
      break label$5
    }
    HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
    }
    $2_1 = HEAP32[($6_1 + 252 | 0) >> 2] | 0;
    $1761($3_1 | 0) | 0;
    $1761($6_1 + 196 | 0 | 0) | 0;
    global$0 = $6_1 + 256 | 0;
    return $2_1 | 0;
  }
  
  function $704($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $8$hi = 0, $8_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, $4_1 = 0, $6_1 = 0, i64toi32_i32$3 = 0, $5_1 = 0, $7_1 = 0, $53$hi = 0, $59$hi = 0, $17_1 = 0;
    $4_1 = global$0 - 16 | 0;
    global$0 = $4_1;
    label$1 : {
    label$2 : {
      label$3 : {
      label$4 : {
        label$5 : {
        label$6 : {
          if (($0_1 | 0) == ($1_1 | 0)) {
          break label$6
          }
          label$7 : {
          $5_1 = HEAPU8[$0_1 >> 0] | 0;
          if (($5_1 | 0) != (45 | 0)) {
            break label$7
          }
          $0_1 = $0_1 + 1 | 0;
          if (($0_1 | 0) != ($1_1 | 0)) {
            break label$7
          }
          HEAP32[$2_1 >> 2] = 4;
          break label$5;
          }
          $6_1 = $124() | 0;
          $7_1 = HEAP32[$6_1 >> 2] | 0;
          HEAP32[$6_1 >> 2] = 0;
          i64toi32_i32$0 = $1719($0_1 | 0, $4_1 + 12 | 0 | 0, $3_1 | 0, $718() | 0 | 0) | 0;
          i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
          $8_1 = i64toi32_i32$0;
          $8$hi = i64toi32_i32$1;
          label$8 : {
          label$9 : {
            $0_1 = HEAP32[$6_1 >> 2] | 0;
            if (!$0_1) {
            break label$9
            }
            if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
            break label$8
            }
            if (($0_1 | 0) == (68 | 0)) {
            break label$3
            }
            break label$4;
          }
          HEAP32[$6_1 >> 2] = $7_1;
          if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
            break label$4
          }
          }
          HEAP32[$2_1 >> 2] = 4;
          break label$5;
        }
        HEAP32[$2_1 >> 2] = 4;
        }
        i64toi32_i32$1 = 0;
        $8_1 = 0;
        $8$hi = i64toi32_i32$1;
        break label$1;
      }
      i64toi32_i32$1 = $1722() | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $53$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $8$hi;
      i64toi32_i32$0 = $53$hi;
      i64toi32_i32$2 = i64toi32_i32$1;
      i64toi32_i32$1 = $8$hi;
      i64toi32_i32$3 = $8_1;
      if (i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 >= $8_1 >>> 0 | 0) | 0) {
        break label$2
      }
      }
      HEAP32[$2_1 >> 2] = 4;
      i64toi32_i32$2 = $1722() | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $8_1 = i64toi32_i32$2;
      $8$hi = i64toi32_i32$0;
      break label$1;
    }
    i64toi32_i32$0 = $8$hi;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = $8$hi;
    i64toi32_i32$1 = $8_1;
    i64toi32_i32$5 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) + $8$hi | 0;
    i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
    $59$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $8$hi;
    i64toi32_i32$2 = ($5_1 | 0) == (45 | 0);
    i64toi32_i32$5 = $59$hi;
    $17_1 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
    i64toi32_i32$3 = $8$hi;
    i64toi32_i32$1 = i64toi32_i32$2 ? $17_1 : i64toi32_i32$1;
    i64toi32_i32$0 = i64toi32_i32$2 ? i64toi32_i32$5 : $8$hi;
    $8_1 = i64toi32_i32$1;
    $8$hi = i64toi32_i32$0;
    }
    global$0 = $4_1 + 16 | 0;
    i64toi32_i32$0 = $8$hi;
    i64toi32_i32$1 = $8_1;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
    return i64toi32_i32$1 | 0;
  }
  
  function $705($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    return $706($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
  }
  
  function $706($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    var $6_1 = 0;
    $6_1 = global$0 - 256 | 0;
    global$0 = $6_1;
    HEAP32[($6_1 + 248 | 0) >> 2] = $2_1;
    HEAP32[($6_1 + 252 | 0) >> 2] = $1_1;
    $707($6_1 + 192 | 0 | 0, $3_1 | 0, $6_1 + 208 | 0 | 0, $6_1 + 207 | 0 | 0, $6_1 + 206 | 0 | 0);
    $2_1 = $286($6_1 + 180 | 0 | 0) | 0;
    $311($2_1 | 0, $310($2_1 | 0) | 0 | 0);
    $1_1 = $686($2_1 | 0, 0 | 0) | 0;
    HEAP32[($6_1 + 176 | 0) >> 2] = $1_1;
    HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
    HEAP32[($6_1 + 8 | 0) >> 2] = 0;
    HEAP8[($6_1 + 7 | 0) >> 0] = 1;
    HEAP8[($6_1 + 6 | 0) >> 0] = 69;
    label$1 : {
    label$2 : while (1) {
      if ($198($6_1 + 252 | 0 | 0, $6_1 + 248 | 0 | 0) | 0) {
      break label$1
      }
      label$3 : {
      if ((HEAP32[($6_1 + 176 | 0) >> 2] | 0 | 0) != ($1_1 + ($309($2_1 | 0) | 0) | 0 | 0)) {
        break label$3
      }
      $3_1 = $309($2_1 | 0) | 0;
      $311($2_1 | 0, ($309($2_1 | 0) | 0) << 1 | 0 | 0);
      $311($2_1 | 0, $310($2_1 | 0) | 0 | 0);
      $1_1 = $686($2_1 | 0, 0 | 0) | 0;
      HEAP32[($6_1 + 176 | 0) >> 2] = $3_1 + $1_1 | 0;
      }
      if ($708($199($6_1 + 252 | 0 | 0) | 0 | 0, $6_1 + 7 | 0 | 0, $6_1 + 6 | 0 | 0, $1_1 | 0, $6_1 + 176 | 0 | 0, HEAP8[($6_1 + 207 | 0) >> 0] | 0 | 0, HEAP8[($6_1 + 206 | 0) >> 0] | 0 | 0, $6_1 + 192 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $6_1 + 8 | 0 | 0, $6_1 + 208 | 0 | 0) | 0) {
      break label$1
      }
      $201($6_1 + 252 | 0 | 0) | 0;
      continue label$2;
    };
    }
    label$4 : {
    if (!($309($6_1 + 192 | 0 | 0) | 0)) {
      break label$4
    }
    if ((HEAPU8[($6_1 + 7 | 0) >> 0] | 0 | 0) != (1 | 0)) {
      break label$4
    }
    $3_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
    if (($3_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
      break label$4
    }
    HEAP32[($6_1 + 12 | 0) >> 2] = $3_1 + 4 | 0;
    HEAP32[$3_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
    }
    HEAPF32[$5_1 >> 2] = Math_fround($709($1_1 | 0, HEAP32[($6_1 + 176 | 0) >> 2] | 0 | 0, $4_1 | 0));
    $689($6_1 + 192 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
    label$5 : {
    if (!($198($6_1 + 252 | 0 | 0, $6_1 + 248 | 0 | 0) | 0)) {
      break label$5
    }
    HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
    }
    $1_1 = HEAP32[($6_1 + 252 | 0) >> 2] | 0;
    $1761($2_1 | 0) | 0;
    $1761($6_1 + 192 | 0 | 0) | 0;
    global$0 = $6_1 + 256 | 0;
    return $1_1 | 0;
  }
  
  function $707($0_1, $1_1, $2_1, $3_1, $4_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    var $5_1 = 0;
    $5_1 = global$0 - 16 | 0;
    global$0 = $5_1;
    $439($5_1 + 12 | 0 | 0, $1_1 | 0);
    $717($197($5_1 + 12 | 0 | 0) | 0 | 0, 74336 | 0, 74368 | 0, $2_1 | 0) | 0;
    $1_1 = $669($5_1 + 12 | 0 | 0) | 0;
    HEAP8[$3_1 >> 0] = $759($1_1 | 0) | 0;
    HEAP8[$4_1 >> 0] = $760($1_1 | 0) | 0;
    $761($0_1 | 0, $1_1 | 0);
    $668($5_1 + 12 | 0 | 0) | 0;
    global$0 = $5_1 + 16 | 0;
  }
  
  function $708($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $6_1 = $6_1 | 0;
    $7_1 = $7_1 | 0;
    $8_1 = $8_1 | 0;
    $9_1 = $9_1 | 0;
    $10_1 = $10_1 | 0;
    $11_1 = $11_1 | 0;
    var $12_1 = 0;
    $12_1 = global$0 - 16 | 0;
    global$0 = $12_1;
    HEAP8[($12_1 + 15 | 0) >> 0] = $0_1;
    label$1 : {
    label$2 : {
      label$3 : {
      if (($0_1 | 0) != ($5_1 | 0)) {
        break label$3
      }
      if ((HEAPU8[$1_1 >> 0] | 0 | 0) != (1 | 0)) {
        break label$2
      }
      $0_1 = 0;
      HEAP8[$1_1 >> 0] = 0;
      $11_1 = HEAP32[$4_1 >> 2] | 0;
      HEAP32[$4_1 >> 2] = $11_1 + 1 | 0;
      HEAP8[$11_1 >> 0] = 46;
      if (!($309($7_1 | 0) | 0)) {
        break label$1
      }
      $11_1 = HEAP32[$9_1 >> 2] | 0;
      if (($11_1 - $8_1 | 0 | 0) > (159 | 0)) {
        break label$1
      }
      $5_1 = HEAP32[$10_1 >> 2] | 0;
      HEAP32[$9_1 >> 2] = $11_1 + 4 | 0;
      HEAP32[$11_1 >> 2] = $5_1;
      break label$1;
      }
      label$4 : {
      label$5 : {
        if (($0_1 | 0) != ($6_1 | 0)) {
        break label$5
        }
        if (!($309($7_1 | 0) | 0)) {
        break label$5
        }
        if ((HEAPU8[$1_1 >> 0] | 0 | 0) != (1 | 0)) {
        break label$2
        }
        $0_1 = HEAP32[$9_1 >> 2] | 0;
        if (($0_1 - $8_1 | 0 | 0) > (159 | 0)) {
        break label$4
        }
        $11_1 = HEAP32[$10_1 >> 2] | 0;
        HEAP32[$9_1 >> 2] = $0_1 + 4 | 0;
        HEAP32[$0_1 >> 2] = $11_1;
        $0_1 = 0;
        HEAP32[$10_1 >> 2] = 0;
        break label$1;
      }
      $11_1 = ($762($11_1 | 0, $11_1 + 32 | 0 | 0, $12_1 + 15 | 0 | 0) | 0) - $11_1 | 0;
      if (($11_1 | 0) > (31 | 0)) {
        break label$2
      }
      $5_1 = HEAP8[($11_1 + 74336 | 0) >> 0] | 0;
      label$6 : {
        label$7 : {
        switch (($11_1 & -2 | 0) + -22 | 0 | 0) {
        case 2:
          label$10 : {
          $11_1 = HEAP32[$4_1 >> 2] | 0;
          if (($11_1 | 0) == ($3_1 | 0)) {
            break label$10
          }
          $0_1 = -1;
          if (($585(HEAP8[($11_1 + -1 | 0) >> 0] | 0 | 0) | 0 | 0) != ($585(HEAP8[$2_1 >> 0] | 0 | 0) | 0 | 0)) {
            break label$1
          }
          }
          HEAP32[$4_1 >> 2] = $11_1 + 1 | 0;
          HEAP8[$11_1 >> 0] = $5_1;
          break label$4;
        case 0:
          HEAP8[$2_1 >> 0] = 80;
          break label$6;
        default:
          break label$7;
        };
        }
        $0_1 = $585($5_1 | 0) | 0;
        if (($0_1 | 0) != (HEAP8[$2_1 >> 0] | 0 | 0)) {
        break label$6
        }
        HEAP8[$2_1 >> 0] = $586($0_1 | 0) | 0;
        if ((HEAPU8[$1_1 >> 0] | 0 | 0) != (1 | 0)) {
        break label$6
        }
        HEAP8[$1_1 >> 0] = 0;
        if (!($309($7_1 | 0) | 0)) {
        break label$6
        }
        $0_1 = HEAP32[$9_1 >> 2] | 0;
        if (($0_1 - $8_1 | 0 | 0) > (159 | 0)) {
        break label$6
        }
        $1_1 = HEAP32[$10_1 >> 2] | 0;
        HEAP32[$9_1 >> 2] = $0_1 + 4 | 0;
        HEAP32[$0_1 >> 2] = $1_1;
      }
      $0_1 = HEAP32[$4_1 >> 2] | 0;
      HEAP32[$4_1 >> 2] = $0_1 + 1 | 0;
      HEAP8[$0_1 >> 0] = $5_1;
      $0_1 = 0;
      if (($11_1 | 0) > (21 | 0)) {
        break label$1
      }
      HEAP32[$10_1 >> 2] = (HEAP32[$10_1 >> 2] | 0) + 1 | 0;
      break label$1;
      }
      $0_1 = 0;
      break label$1;
    }
    $0_1 = -1;
    }
    global$0 = $12_1 + 16 | 0;
    return $0_1 | 0;
  }
  
  function $709($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0, $4_1 = 0, $6_1 = Math_fround(0), $5_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    label$1 : {
    label$2 : {
      label$3 : {
      label$4 : {
        if (($0_1 | 0) == ($1_1 | 0)) {
        break label$4
        }
        $4_1 = $124() | 0;
        $5_1 = HEAP32[$4_1 >> 2] | 0;
        HEAP32[$4_1 >> 2] = 0;
        $6_1 = Math_fround($1724($0_1 | 0, $3_1 + 12 | 0 | 0));
        label$5 : {
        label$6 : {
          $0_1 = HEAP32[$4_1 >> 2] | 0;
          if (!$0_1) {
          break label$6
          }
          if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
          break label$5
          }
          break label$3;
        }
        HEAP32[$4_1 >> 2] = $5_1;
        if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
          break label$3
        }
        break label$1;
        }
        if (($0_1 | 0) != (68 | 0)) {
        break label$1
        }
        break label$2;
      }
      HEAP32[$2_1 >> 2] = 4;
      $6_1 = Math_fround(0.0);
      break label$1;
      }
      $6_1 = Math_fround(0.0);
    }
    HEAP32[$2_1 >> 2] = 4;
    }
    global$0 = $3_1 + 16 | 0;
    return Math_fround($6_1);
  }
  
  function $710($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    return $711($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
  }
  
  function $711($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    var $6_1 = 0;
    $6_1 = global$0 - 256 | 0;
    global$0 = $6_1;
    HEAP32[($6_1 + 248 | 0) >> 2] = $2_1;
    HEAP32[($6_1 + 252 | 0) >> 2] = $1_1;
    $707($6_1 + 192 | 0 | 0, $3_1 | 0, $6_1 + 208 | 0 | 0, $6_1 + 207 | 0 | 0, $6_1 + 206 | 0 | 0);
    $2_1 = $286($6_1 + 180 | 0 | 0) | 0;
    $311($2_1 | 0, $310($2_1 | 0) | 0 | 0);
    $1_1 = $686($2_1 | 0, 0 | 0) | 0;
    HEAP32[($6_1 + 176 | 0) >> 2] = $1_1;
    HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
    HEAP32[($6_1 + 8 | 0) >> 2] = 0;
    HEAP8[($6_1 + 7 | 0) >> 0] = 1;
    HEAP8[($6_1 + 6 | 0) >> 0] = 69;
    label$1 : {
    label$2 : while (1) {
      if ($198($6_1 + 252 | 0 | 0, $6_1 + 248 | 0 | 0) | 0) {
      break label$1
      }
      label$3 : {
      if ((HEAP32[($6_1 + 176 | 0) >> 2] | 0 | 0) != ($1_1 + ($309($2_1 | 0) | 0) | 0 | 0)) {
        break label$3
      }
      $3_1 = $309($2_1 | 0) | 0;
      $311($2_1 | 0, ($309($2_1 | 0) | 0) << 1 | 0 | 0);
      $311($2_1 | 0, $310($2_1 | 0) | 0 | 0);
      $1_1 = $686($2_1 | 0, 0 | 0) | 0;
      HEAP32[($6_1 + 176 | 0) >> 2] = $3_1 + $1_1 | 0;
      }
      if ($708($199($6_1 + 252 | 0 | 0) | 0 | 0, $6_1 + 7 | 0 | 0, $6_1 + 6 | 0 | 0, $1_1 | 0, $6_1 + 176 | 0 | 0, HEAP8[($6_1 + 207 | 0) >> 0] | 0 | 0, HEAP8[($6_1 + 206 | 0) >> 0] | 0 | 0, $6_1 + 192 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $6_1 + 8 | 0 | 0, $6_1 + 208 | 0 | 0) | 0) {
      break label$1
      }
      $201($6_1 + 252 | 0 | 0) | 0;
      continue label$2;
    };
    }
    label$4 : {
    if (!($309($6_1 + 192 | 0 | 0) | 0)) {
      break label$4
    }
    if ((HEAPU8[($6_1 + 7 | 0) >> 0] | 0 | 0) != (1 | 0)) {
      break label$4
    }
    $3_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
    if (($3_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
      break label$4
    }
    HEAP32[($6_1 + 12 | 0) >> 2] = $3_1 + 4 | 0;
    HEAP32[$3_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
    }
    HEAPF64[$5_1 >> 3] = +$712($1_1 | 0, HEAP32[($6_1 + 176 | 0) >> 2] | 0 | 0, $4_1 | 0);
    $689($6_1 + 192 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
    label$5 : {
    if (!($198($6_1 + 252 | 0 | 0, $6_1 + 248 | 0 | 0) | 0)) {
      break label$5
    }
    HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
    }
    $1_1 = HEAP32[($6_1 + 252 | 0) >> 2] | 0;
    $1761($2_1 | 0) | 0;
    $1761($6_1 + 192 | 0 | 0) | 0;
    global$0 = $6_1 + 256 | 0;
    return $1_1 | 0;
  }
  
  function $712($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0, $4_1 = 0, $6_1 = 0.0, $5_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    label$1 : {
    label$2 : {
      label$3 : {
      label$4 : {
        if (($0_1 | 0) == ($1_1 | 0)) {
        break label$4
        }
        $4_1 = $124() | 0;
        $5_1 = HEAP32[$4_1 >> 2] | 0;
        HEAP32[$4_1 >> 2] = 0;
        $6_1 = +$1725($0_1 | 0, $3_1 + 12 | 0 | 0);
        label$5 : {
        label$6 : {
          $0_1 = HEAP32[$4_1 >> 2] | 0;
          if (!$0_1) {
          break label$6
          }
          if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
          break label$5
          }
          break label$3;
        }
        HEAP32[$4_1 >> 2] = $5_1;
        if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
          break label$3
        }
        break label$1;
        }
        if (($0_1 | 0) != (68 | 0)) {
        break label$1
        }
        break label$2;
      }
      HEAP32[$2_1 >> 2] = 4;
      $6_1 = 0.0;
      break label$1;
      }
      $6_1 = 0.0;
    }
    HEAP32[$2_1 >> 2] = 4;
    }
    global$0 = $3_1 + 16 | 0;
    return +$6_1;
  }
  
  function $713($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    return $714($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
  }
  
  function $714($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    var $6_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $7_1 = 0, $7$hi = 0, $125_1 = 0;
    $6_1 = global$0 - 272 | 0;
    global$0 = $6_1;
    HEAP32[($6_1 + 264 | 0) >> 2] = $2_1;
    HEAP32[($6_1 + 268 | 0) >> 2] = $1_1;
    $707($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0, $6_1 + 223 | 0 | 0, $6_1 + 222 | 0 | 0);
    $2_1 = $286($6_1 + 196 | 0 | 0) | 0;
    $311($2_1 | 0, $310($2_1 | 0) | 0 | 0);
    $1_1 = $686($2_1 | 0, 0 | 0) | 0;
    HEAP32[($6_1 + 192 | 0) >> 2] = $1_1;
    HEAP32[($6_1 + 28 | 0) >> 2] = $6_1 + 32 | 0;
    HEAP32[($6_1 + 24 | 0) >> 2] = 0;
    HEAP8[($6_1 + 23 | 0) >> 0] = 1;
    HEAP8[($6_1 + 22 | 0) >> 0] = 69;
    label$1 : {
    label$2 : while (1) {
      if ($198($6_1 + 268 | 0 | 0, $6_1 + 264 | 0 | 0) | 0) {
      break label$1
      }
      label$3 : {
      if ((HEAP32[($6_1 + 192 | 0) >> 2] | 0 | 0) != ($1_1 + ($309($2_1 | 0) | 0) | 0 | 0)) {
        break label$3
      }
      $3_1 = $309($2_1 | 0) | 0;
      $311($2_1 | 0, ($309($2_1 | 0) | 0) << 1 | 0 | 0);
      $311($2_1 | 0, $310($2_1 | 0) | 0 | 0);
      $1_1 = $686($2_1 | 0, 0 | 0) | 0;
      HEAP32[($6_1 + 192 | 0) >> 2] = $3_1 + $1_1 | 0;
      }
      if ($708($199($6_1 + 268 | 0 | 0) | 0 | 0, $6_1 + 23 | 0 | 0, $6_1 + 22 | 0 | 0, $1_1 | 0, $6_1 + 192 | 0 | 0, HEAP8[($6_1 + 223 | 0) >> 0] | 0 | 0, HEAP8[($6_1 + 222 | 0) >> 0] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 32 | 0 | 0, $6_1 + 28 | 0 | 0, $6_1 + 24 | 0 | 0, $6_1 + 224 | 0 | 0) | 0) {
      break label$1
      }
      $201($6_1 + 268 | 0 | 0) | 0;
      continue label$2;
    };
    }
    label$4 : {
    if (!($309($6_1 + 208 | 0 | 0) | 0)) {
      break label$4
    }
    if ((HEAPU8[($6_1 + 23 | 0) >> 0] | 0 | 0) != (1 | 0)) {
      break label$4
    }
    $3_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
    if (($3_1 - ($6_1 + 32 | 0) | 0 | 0) > (159 | 0)) {
      break label$4
    }
    HEAP32[($6_1 + 28 | 0) >> 2] = $3_1 + 4 | 0;
    HEAP32[$3_1 >> 2] = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
    }
    $715($6_1 | 0, $1_1 | 0, HEAP32[($6_1 + 192 | 0) >> 2] | 0 | 0, $4_1 | 0);
    i64toi32_i32$2 = $6_1;
    i64toi32_i32$0 = HEAP32[$6_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
    $7_1 = i64toi32_i32$0;
    $7$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $6_1 + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $125_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $5_1;
    HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $125_1;
    HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = $7$hi;
    HEAP32[i64toi32_i32$1 >> 2] = $7_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $689($6_1 + 208 | 0 | 0, $6_1 + 32 | 0 | 0, HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, $4_1 | 0);
    label$5 : {
    if (!($198($6_1 + 268 | 0 | 0, $6_1 + 264 | 0 | 0) | 0)) {
      break label$5
    }
    HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
    }
    $1_1 = HEAP32[($6_1 + 268 | 0) >> 2] | 0;
    $1761($2_1 | 0) | 0;
    $1761($6_1 + 208 | 0 | 0) | 0;
    global$0 = $6_1 + 272 | 0;
    return $1_1 | 0;
  }
  
  function $715($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    var i64toi32_i32$0 = 0, $4_1 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $7_1 = 0, $7$hi = 0, $8$hi = 0, i64toi32_i32$2 = 0, $8_1 = 0, $9_1 = 0, $9$hi = 0, $10_1 = 0, $10$hi = 0, $6_1 = 0;
    $4_1 = global$0 - 32 | 0;
    global$0 = $4_1;
    label$1 : {
    label$2 : {
      label$3 : {
      label$4 : {
        if (($1_1 | 0) == ($2_1 | 0)) {
        break label$4
        }
        $5_1 = $124() | 0;
        $6_1 = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = 0;
        $1726($4_1 + 8 | 0 | 0, $1_1 | 0, $4_1 + 28 | 0 | 0);
        i64toi32_i32$2 = $4_1 + 16 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $7_1 = i64toi32_i32$0;
        $7$hi = i64toi32_i32$1;
        i64toi32_i32$2 = $4_1;
        i64toi32_i32$1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
        $8_1 = i64toi32_i32$1;
        $8$hi = i64toi32_i32$0;
        $1_1 = HEAP32[$5_1 >> 2] | 0;
        if (!$1_1) {
        break label$3
        }
        i64toi32_i32$0 = 0;
        $9_1 = 0;
        $9$hi = i64toi32_i32$0;
        i64toi32_i32$0 = 0;
        $10_1 = 0;
        $10$hi = i64toi32_i32$0;
        if ((HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
        break label$2
        }
        i64toi32_i32$0 = $8$hi;
        $9_1 = i64toi32_i32$1;
        $9$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $7$hi;
        $10_1 = $7_1;
        $10$hi = i64toi32_i32$0;
        if (($1_1 | 0) != (68 | 0)) {
        break label$1
        }
        break label$2;
      }
      HEAP32[$3_1 >> 2] = 4;
      i64toi32_i32$0 = 0;
      $8_1 = 0;
      $8$hi = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      $7_1 = 0;
      $7$hi = i64toi32_i32$0;
      break label$1;
      }
      HEAP32[$5_1 >> 2] = $6_1;
      i64toi32_i32$0 = 0;
      $9_1 = 0;
      $9$hi = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      $10_1 = 0;
      $10$hi = i64toi32_i32$0;
      if ((HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) == ($2_1 | 0)) {
      break label$1
      }
    }
    HEAP32[$3_1 >> 2] = 4;
    i64toi32_i32$0 = $9$hi;
    $8_1 = $9_1;
    $8$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $10$hi;
    $7_1 = $10_1;
    $7$hi = i64toi32_i32$0;
    }
    i64toi32_i32$0 = $8$hi;
    i64toi32_i32$1 = $0_1;
    HEAP32[i64toi32_i32$1 >> 2] = $8_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = $7$hi;
    HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $7_1;
    HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
    global$0 = $4_1 + 32 | 0;
  }
  
  function $716($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    var $6_1 = 0, $7_1 = 0;
    $6_1 = global$0 - 256 | 0;
    global$0 = $6_1;
    HEAP32[($6_1 + 248 | 0) >> 2] = $2_1;
    HEAP32[($6_1 + 252 | 0) >> 2] = $1_1;
    $7_1 = $286($6_1 + 196 | 0 | 0) | 0;
    $439($6_1 + 16 | 0 | 0, $3_1 | 0);
    $717($197($6_1 + 16 | 0 | 0) | 0 | 0, 74336 | 0, 74362 | 0, $6_1 + 208 | 0 | 0) | 0;
    $668($6_1 + 16 | 0 | 0) | 0;
    $2_1 = $286($6_1 + 184 | 0 | 0) | 0;
    $311($2_1 | 0, $310($2_1 | 0) | 0 | 0);
    $1_1 = $686($2_1 | 0, 0 | 0) | 0;
    HEAP32[($6_1 + 180 | 0) >> 2] = $1_1;
    HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
    HEAP32[($6_1 + 8 | 0) >> 2] = 0;
    label$1 : {
    label$2 : while (1) {
      if ($198($6_1 + 252 | 0 | 0, $6_1 + 248 | 0 | 0) | 0) {
      break label$1
      }
      label$3 : {
      if ((HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0) != ($1_1 + ($309($2_1 | 0) | 0) | 0 | 0)) {
        break label$3
      }
      $3_1 = $309($2_1 | 0) | 0;
      $311($2_1 | 0, ($309($2_1 | 0) | 0) << 1 | 0 | 0);
      $311($2_1 | 0, $310($2_1 | 0) | 0 | 0);
      $1_1 = $686($2_1 | 0, 0 | 0) | 0;
      HEAP32[($6_1 + 180 | 0) >> 2] = $3_1 + $1_1 | 0;
      }
      if ($687($199($6_1 + 252 | 0 | 0) | 0 | 0, 16 | 0, $1_1 | 0, $6_1 + 180 | 0 | 0, $6_1 + 8 | 0 | 0, 0 | 0, $7_1 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $6_1 + 208 | 0 | 0) | 0) {
      break label$1
      }
      $201($6_1 + 252 | 0 | 0) | 0;
      continue label$2;
    };
    }
    $311($2_1 | 0, (HEAP32[($6_1 + 180 | 0) >> 2] | 0) - $1_1 | 0 | 0);
    $1_1 = $315($2_1 | 0) | 0;
    $3_1 = $718() | 0;
    HEAP32[$6_1 >> 2] = $5_1;
    label$4 : {
    if (($719($1_1 | 0, $3_1 | 0, 65978 | 0, $6_1 | 0) | 0 | 0) == (1 | 0)) {
      break label$4
    }
    HEAP32[$4_1 >> 2] = 4;
    }
    label$5 : {
    if (!($198($6_1 + 252 | 0 | 0, $6_1 + 248 | 0 | 0) | 0)) {
      break label$5
    }
    HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
    }
    $1_1 = HEAP32[($6_1 + 252 | 0) >> 2] | 0;
    $1761($2_1 | 0) | 0;
    $1761($7_1 | 0) | 0;
    global$0 = $6_1 + 256 | 0;
    return $1_1 | 0;
  }
  
  function $717($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1) | 0 | 0;
  }
  
  function $718() {
    var $0_1 = 0;
    label$1 : {
    if (!(HEAPU8[(0 + 89124 | 0) >> 0] | 0)) {
      break label$1
    }
    return HEAP32[(0 + 89120 | 0) >> 2] | 0 | 0;
    }
    $0_1 = $583(2147483647 | 0, 66347 | 0, 0 | 0) | 0;
    HEAP8[(0 + 89124 | 0) >> 0] = 1;
    HEAP32[(0 + 89120 | 0) >> 2] = $0_1;
    return $0_1 | 0;
  }
  
  function $719($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    var $4_1 = 0;
    $4_1 = global$0 - 16 | 0;
    global$0 = $4_1;
    HEAP32[($4_1 + 12 | 0) >> 2] = $1_1;
    HEAP32[($4_1 + 8 | 0) >> 2] = $3_1;
    $3_1 = $721($4_1 + 4 | 0 | 0, $4_1 + 12 | 0 | 0) | 0;
    $1_1 = $574($0_1 | 0, $2_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
    $722($3_1 | 0) | 0;
    global$0 = $4_1 + 16 | 0;
    return $1_1 | 0;
  }
  
  function $720($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    $0_1 = $349($0_1 | 0, $765($342($0_1 | 0) | 0 | 0, $342($1_1 | 0) | 0 | 0, $2_1 | 0, $3_1 + 15 | 0 | 0) | 0 | 0) | 0;
    global$0 = $3_1 + 16 | 0;
    return $0_1 | 0;
  }
  
  function $721($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    HEAP32[$0_1 >> 2] = $642(HEAP32[$1_1 >> 2] | 0 | 0) | 0;
    return $0_1 | 0;
  }
  
  function $722($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0;
    label$1 : {
    $1_1 = HEAP32[$0_1 >> 2] | 0;
    if (!$1_1) {
      break label$1
    }
    $642($1_1 | 0) | 0;
    }
    return $0_1 | 0;
  }
  
  function $723($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    var $6_1 = 0;
    $6_1 = global$0 - 32 | 0;
    global$0 = $6_1;
    HEAP32[($6_1 + 28 | 0) >> 2] = $1_1;
    label$1 : {
    label$2 : {
      if (($196($3_1 | 0) | 0) & 1 | 0) {
      break label$2
      }
      HEAP32[$6_1 >> 2] = -1;
      $1_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $6_1) | 0;
      label$3 : {
      switch (HEAP32[$6_1 >> 2] | 0 | 0) {
      case 0:
        HEAP8[$5_1 >> 0] = 0;
        break label$1;
      case 1:
        HEAP8[$5_1 >> 0] = 1;
        break label$1;
      default:
        break label$3;
      };
      }
      HEAP8[$5_1 >> 0] = 1;
      HEAP32[$4_1 >> 2] = 4;
      break label$1;
    }
    $439($6_1 | 0, $3_1 | 0);
    $1_1 = $261($6_1 | 0) | 0;
    $668($6_1 | 0) | 0;
    $439($6_1 | 0, $3_1 | 0);
    $3_1 = $724($6_1 | 0) | 0;
    $668($6_1 | 0) | 0;
    $725($6_1 | 0, $3_1 | 0);
    $726($6_1 | 12 | 0 | 0, $3_1 | 0);
    $3_1 = $6_1 + 24 | 0;
    HEAP8[$5_1 >> 0] = ($727($6_1 + 28 | 0 | 0, $2_1 | 0, $6_1 | 0, $3_1 | 0, $1_1 | 0, $4_1 | 0, 1 | 0) | 0 | 0) == ($6_1 | 0);
    $1_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
    label$6 : while (1) {
      $3_1 = $1775($3_1 + -12 | 0 | 0) | 0;
      if (($3_1 | 0) != ($6_1 | 0)) {
      continue label$6
      }
      break label$6;
    };
    }
    global$0 = $6_1 + 32 | 0;
    return $1_1 | 0;
  }
  
  function $724($0_1) {
    $0_1 = $0_1 | 0;
    return $673($0_1 | 0, 89376 | 0) | 0 | 0;
  }
  
  function $725($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1);
  }
  
  function $726($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1);
  }
  
  function $727($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $6_1 = $6_1 | 0;
    var $12_1 = 0, $7_1 = 0, $11_1 = 0, $8_1 = 0, $9_1 = 0, $17_1 = 0, $13_1 = 0, $15_1 = 0, $14_1 = 0, $16_1 = 0, $10_1 = 0;
    $7_1 = global$0 - 128 | 0;
    global$0 = $7_1;
    HEAP32[($7_1 + 124 | 0) >> 2] = $1_1;
    $8_1 = $728($2_1 | 0, $3_1 | 0) | 0;
    HEAP32[($7_1 + 16 | 0) >> 2] = 94;
    $9_1 = 0;
    $10_1 = $675($7_1 + 8 | 0 | 0, 0 | 0, $7_1 + 16 | 0 | 0) | 0;
    $11_1 = $7_1 + 16 | 0;
    label$1 : {
    label$2 : {
      label$3 : {
      label$4 : {
        if ($8_1 >>> 0 < 101 >>> 0) {
        break label$4
        }
        $11_1 = $126($8_1 | 0) | 0;
        if (!$11_1) {
        break label$3
        }
        $676($10_1 | 0, $11_1 | 0);
      }
      $12_1 = $11_1;
      $1_1 = $2_1;
      label$5 : while (1) {
        label$6 : {
        if (($1_1 | 0) != ($3_1 | 0)) {
          break label$6
        }
        $13_1 = 0;
        label$7 : while (1) {
          label$8 : {
          label$9 : {
            if ($262($0_1 | 0, $7_1 + 124 | 0 | 0) | 0) {
            break label$9
            }
            if ($8_1) {
            break label$8
            }
          }
          label$10 : {
            if (!($262($0_1 | 0, $7_1 + 124 | 0 | 0) | 0)) {
            break label$10
            }
            HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 2 | 0;
          }
          label$11 : while (1) {
            if (($2_1 | 0) == ($3_1 | 0)) {
            break label$2
            }
            if ((HEAPU8[$11_1 >> 0] | 0 | 0) == (2 | 0)) {
            break label$1
            }
            $11_1 = $11_1 + 1 | 0;
            $2_1 = $2_1 + 12 | 0;
            continue label$11;
          };
          }
          $14_1 = $263($0_1 | 0) | 0;
          label$12 : {
          if ($6_1) {
            break label$12
          }
          $14_1 = $729($4_1 | 0, $14_1 | 0) | 0;
          }
          $15_1 = $13_1 + 1 | 0;
          $16_1 = 0;
          $12_1 = $11_1;
          $1_1 = $2_1;
          label$13 : while (1) {
          label$14 : {
            if (($1_1 | 0) != ($3_1 | 0)) {
            break label$14
            }
            $13_1 = $15_1;
            if (!($16_1 & 1 | 0)) {
            continue label$7
            }
            $265($0_1 | 0) | 0;
            $13_1 = $15_1;
            $12_1 = $11_1;
            $1_1 = $2_1;
            if (($9_1 + $8_1 | 0) >>> 0 < 2 >>> 0) {
            continue label$7
            }
            label$15 : while (1) {
            label$16 : {
              if (($1_1 | 0) != ($3_1 | 0)) {
              break label$16
              }
              $13_1 = $15_1;
              continue label$7;
            }
            label$17 : {
              if ((HEAPU8[$12_1 >> 0] | 0 | 0) != (2 | 0)) {
              break label$17
              }
              if (($730($1_1 | 0) | 0 | 0) == ($15_1 | 0)) {
              break label$17
              }
              HEAP8[$12_1 >> 0] = 0;
              $9_1 = $9_1 + -1 | 0;
            }
            $12_1 = $12_1 + 1 | 0;
            $1_1 = $1_1 + 12 | 0;
            continue label$15;
            };
          }
          label$18 : {
            if ((HEAPU8[$12_1 >> 0] | 0 | 0) != (1 | 0)) {
            break label$18
            }
            $17_1 = HEAP32[($731($1_1 | 0, $13_1 | 0) | 0) >> 2] | 0;
            label$19 : {
            if ($6_1) {
              break label$19
            }
            $17_1 = $729($4_1 | 0, $17_1 | 0) | 0;
            }
            label$20 : {
            label$21 : {
              if (($14_1 | 0) != ($17_1 | 0)) {
              break label$21
              }
              $16_1 = 1;
              if (($730($1_1 | 0) | 0 | 0) != ($15_1 | 0)) {
              break label$18
              }
              HEAP8[$12_1 >> 0] = 2;
              $16_1 = 1;
              $9_1 = $9_1 + 1 | 0;
              break label$20;
            }
            HEAP8[$12_1 >> 0] = 0;
            }
            $8_1 = $8_1 + -1 | 0;
          }
          $12_1 = $12_1 + 1 | 0;
          $1_1 = $1_1 + 12 | 0;
          continue label$13;
          };
        };
        }
        $17_1 = $732($1_1 | 0) | 0;
        HEAP8[$12_1 >> 0] = $17_1 ? 2 : 1;
        $12_1 = $12_1 + 1 | 0;
        $1_1 = $1_1 + 12 | 0;
        $9_1 = $9_1 + $17_1 | 0;
        $8_1 = $8_1 - $17_1 | 0;
        continue label$5;
      };
      }
      $1755();
      wasm2js_trap();
    }
    HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
    }
    $680($10_1 | 0) | 0;
    global$0 = $7_1 + 128 | 0;
    return $2_1 | 0;
  }
  
  function $728($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $1727($0_1 | 0, $1_1 | 0) | 0 | 0;
  }
  
  function $729($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1) | 0 | 0;
  }
  
  function $730($0_1) {
    $0_1 = $0_1 | 0;
    label$1 : {
    if (!($875($0_1 | 0) | 0)) {
      break label$1
    }
    return $876($0_1 | 0) | 0 | 0;
    }
    return $877($0_1 | 0) | 0 | 0;
  }
  
  function $731($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return ($873($0_1 | 0) | 0) + ($1_1 << 2 | 0) | 0 | 0;
  }
  
  function $732($0_1) {
    $0_1 = $0_1 | 0;
    return !($730($0_1 | 0) | 0) | 0;
  }
  
  function $733($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    return $734($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
  }
  
  function $734($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    var $6_1 = 0, $7_1 = 0;
    $6_1 = global$0 - 336 | 0;
    global$0 = $6_1;
    HEAP32[($6_1 + 328 | 0) >> 2] = $2_1;
    HEAP32[($6_1 + 332 | 0) >> 2] = $1_1;
    $1_1 = $683($3_1 | 0) | 0;
    $0_1 = $735($0_1 | 0, $3_1 | 0, $6_1 + 208 | 0 | 0) | 0;
    $736($6_1 + 196 | 0 | 0, $3_1 | 0, $6_1 + 324 | 0 | 0);
    $3_1 = $286($6_1 + 184 | 0 | 0) | 0;
    $311($3_1 | 0, $310($3_1 | 0) | 0 | 0);
    $2_1 = $686($3_1 | 0, 0 | 0) | 0;
    HEAP32[($6_1 + 180 | 0) >> 2] = $2_1;
    HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
    HEAP32[($6_1 + 8 | 0) >> 2] = 0;
    label$1 : {
    label$2 : while (1) {
      if ($262($6_1 + 332 | 0 | 0, $6_1 + 328 | 0 | 0) | 0) {
      break label$1
      }
      label$3 : {
      if ((HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0) != ($2_1 + ($309($3_1 | 0) | 0) | 0 | 0)) {
        break label$3
      }
      $7_1 = $309($3_1 | 0) | 0;
      $311($3_1 | 0, ($309($3_1 | 0) | 0) << 1 | 0 | 0);
      $311($3_1 | 0, $310($3_1 | 0) | 0 | 0);
      $2_1 = $686($3_1 | 0, 0 | 0) | 0;
      HEAP32[($6_1 + 180 | 0) >> 2] = $7_1 + $2_1 | 0;
      }
      if ($737($263($6_1 + 332 | 0 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0, $6_1 + 180 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($6_1 + 324 | 0) >> 2] | 0 | 0, $6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $0_1 | 0) | 0) {
      break label$1
      }
      $265($6_1 + 332 | 0 | 0) | 0;
      continue label$2;
    };
    }
    label$4 : {
    if (!($309($6_1 + 196 | 0 | 0) | 0)) {
      break label$4
    }
    $0_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
    if (($0_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
      break label$4
    }
    HEAP32[($6_1 + 12 | 0) >> 2] = $0_1 + 4 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
    }
    HEAP32[$5_1 >> 2] = $688($2_1 | 0, HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
    $689($6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
    label$5 : {
    if (!($262($6_1 + 332 | 0 | 0, $6_1 + 328 | 0 | 0) | 0)) {
      break label$5
    }
    HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
    }
    $2_1 = HEAP32[($6_1 + 332 | 0) >> 2] | 0;
    $1761($3_1 | 0) | 0;
    $1761($6_1 + 196 | 0 | 0) | 0;
    global$0 = $6_1 + 336 | 0;
    return $2_1 | 0;
  }
  
  function $735($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    return $771($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
  }
  
  function $736($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    $439($3_1 + 12 | 0 | 0, $1_1 | 0);
    $1_1 = $724($3_1 + 12 | 0 | 0) | 0;
    HEAP32[$2_1 >> 2] = $767($1_1 | 0) | 0;
    $768($0_1 | 0, $1_1 | 0);
    $668($3_1 + 12 | 0 | 0) | 0;
    global$0 = $3_1 + 16 | 0;
  }
  
  function $737($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $6_1 = $6_1 | 0;
    $7_1 = $7_1 | 0;
    $8_1 = $8_1 | 0;
    $9_1 = $9_1 | 0;
    var $10_1 = 0, $11_1 = 0;
    $10_1 = global$0 - 16 | 0;
    global$0 = $10_1;
    HEAP32[($10_1 + 12 | 0) >> 2] = $0_1;
    label$1 : {
    label$2 : {
      label$3 : {
      $11_1 = HEAP32[$3_1 >> 2] | 0;
      if (($11_1 | 0) != ($2_1 | 0)) {
        break label$3
      }
      label$4 : {
        label$5 : {
        if (($0_1 | 0) != (HEAP32[($9_1 + 96 | 0) >> 2] | 0 | 0)) {
          break label$5
        }
        $0_1 = 43;
        break label$4;
        }
        if (($0_1 | 0) != (HEAP32[($9_1 + 100 | 0) >> 2] | 0 | 0)) {
        break label$3
        }
        $0_1 = 45;
      }
      HEAP32[$3_1 >> 2] = $11_1 + 1 | 0;
      HEAP8[$11_1 >> 0] = $0_1;
      break label$2;
      }
      label$6 : {
      if (!($309($6_1 | 0) | 0)) {
        break label$6
      }
      if (($0_1 | 0) != ($5_1 | 0)) {
        break label$6
      }
      $0_1 = 0;
      $9_1 = HEAP32[$8_1 >> 2] | 0;
      if (($9_1 - $7_1 | 0 | 0) > (159 | 0)) {
        break label$1
      }
      $0_1 = HEAP32[$4_1 >> 2] | 0;
      HEAP32[$8_1 >> 2] = $9_1 + 4 | 0;
      HEAP32[$9_1 >> 2] = $0_1;
      break label$2;
      }
      $0_1 = -1;
      $9_1 = (($758($9_1 | 0, $9_1 + 104 | 0 | 0, $10_1 + 12 | 0 | 0) | 0) - $9_1 | 0) >> 2 | 0;
      if (($9_1 | 0) > (23 | 0)) {
      break label$1
      }
      label$7 : {
      label$8 : {
        switch ($1_1 + -8 | 0 | 0) {
        case 0:
        case 2:
        if (($9_1 | 0) < ($1_1 | 0)) {
          break label$7
        }
        break label$1;
        case 1:
        break label$7;
        default:
        break label$8;
        };
      }
      if (($1_1 | 0) != (16 | 0)) {
        break label$7
      }
      if (($9_1 | 0) < (22 | 0)) {
        break label$7
      }
      $6_1 = HEAP32[$3_1 >> 2] | 0;
      if (($6_1 | 0) == ($2_1 | 0)) {
        break label$1
      }
      if (($6_1 - $2_1 | 0 | 0) > (2 | 0)) {
        break label$1
      }
      $0_1 = -1;
      if ((HEAPU8[($6_1 + -1 | 0) >> 0] | 0 | 0) != (48 | 0)) {
        break label$1
      }
      $0_1 = 0;
      HEAP32[$4_1 >> 2] = 0;
      HEAP32[$3_1 >> 2] = $6_1 + 1 | 0;
      HEAP8[$6_1 >> 0] = HEAPU8[($9_1 + 74336 | 0) >> 0] | 0;
      break label$1;
      }
      $0_1 = HEAP32[$3_1 >> 2] | 0;
      HEAP32[$3_1 >> 2] = $0_1 + 1 | 0;
      HEAP8[$0_1 >> 0] = HEAPU8[($9_1 + 74336 | 0) >> 0] | 0;
      HEAP32[$4_1 >> 2] = (HEAP32[$4_1 >> 2] | 0) + 1 | 0;
      $0_1 = 0;
      break label$1;
    }
    $0_1 = 0;
    HEAP32[$4_1 >> 2] = 0;
    }
    global$0 = $10_1 + 16 | 0;
    return $0_1 | 0;
  }
  
  function $738($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    return $739($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
  }
  
  function $739($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    var $6_1 = 0, i64toi32_i32$0 = 0, $7_1 = 0, i64toi32_i32$1 = 0, $113_1 = 0;
    $6_1 = global$0 - 336 | 0;
    global$0 = $6_1;
    HEAP32[($6_1 + 328 | 0) >> 2] = $2_1;
    HEAP32[($6_1 + 332 | 0) >> 2] = $1_1;
    $1_1 = $683($3_1 | 0) | 0;
    $0_1 = $735($0_1 | 0, $3_1 | 0, $6_1 + 208 | 0 | 0) | 0;
    $736($6_1 + 196 | 0 | 0, $3_1 | 0, $6_1 + 324 | 0 | 0);
    $3_1 = $286($6_1 + 184 | 0 | 0) | 0;
    $311($3_1 | 0, $310($3_1 | 0) | 0 | 0);
    $2_1 = $686($3_1 | 0, 0 | 0) | 0;
    HEAP32[($6_1 + 180 | 0) >> 2] = $2_1;
    HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
    HEAP32[($6_1 + 8 | 0) >> 2] = 0;
    label$1 : {
    label$2 : while (1) {
      if ($262($6_1 + 332 | 0 | 0, $6_1 + 328 | 0 | 0) | 0) {
      break label$1
      }
      label$3 : {
      if ((HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0) != ($2_1 + ($309($3_1 | 0) | 0) | 0 | 0)) {
        break label$3
      }
      $7_1 = $309($3_1 | 0) | 0;
      $311($3_1 | 0, ($309($3_1 | 0) | 0) << 1 | 0 | 0);
      $311($3_1 | 0, $310($3_1 | 0) | 0 | 0);
      $2_1 = $686($3_1 | 0, 0 | 0) | 0;
      HEAP32[($6_1 + 180 | 0) >> 2] = $7_1 + $2_1 | 0;
      }
      if ($737($263($6_1 + 332 | 0 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0, $6_1 + 180 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($6_1 + 324 | 0) >> 2] | 0 | 0, $6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $0_1 | 0) | 0) {
      break label$1
      }
      $265($6_1 + 332 | 0 | 0) | 0;
      continue label$2;
    };
    }
    label$4 : {
    if (!($309($6_1 + 196 | 0 | 0) | 0)) {
      break label$4
    }
    $0_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
    if (($0_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
      break label$4
    }
    HEAP32[($6_1 + 12 | 0) >> 2] = $0_1 + 4 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
    }
    i64toi32_i32$0 = $692($2_1 | 0, HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $113_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $5_1;
    HEAP32[i64toi32_i32$0 >> 2] = $113_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    $689($6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
    label$5 : {
    if (!($262($6_1 + 332 | 0 | 0, $6_1 + 328 | 0 | 0) | 0)) {
      break label$5
    }
    HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
    }
    $2_1 = HEAP32[($6_1 + 332 | 0) >> 2] | 0;
    $1761($3_1 | 0) | 0;
    $1761($6_1 + 196 | 0 | 0) | 0;
    global$0 = $6_1 + 336 | 0;
    return $2_1 | 0;
  }
  
  function $740($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    return $741($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
  }
  
  function $741($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    var $6_1 = 0, $7_1 = 0;
    $6_1 = global$0 - 336 | 0;
    global$0 = $6_1;
    HEAP32[($6_1 + 328 | 0) >> 2] = $2_1;
    HEAP32[($6_1 + 332 | 0) >> 2] = $1_1;
    $1_1 = $683($3_1 | 0) | 0;
    $0_1 = $735($0_1 | 0, $3_1 | 0, $6_1 + 208 | 0 | 0) | 0;
    $736($6_1 + 196 | 0 | 0, $3_1 | 0, $6_1 + 324 | 0 | 0);
    $3_1 = $286($6_1 + 184 | 0 | 0) | 0;
    $311($3_1 | 0, $310($3_1 | 0) | 0 | 0);
    $2_1 = $686($3_1 | 0, 0 | 0) | 0;
    HEAP32[($6_1 + 180 | 0) >> 2] = $2_1;
    HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
    HEAP32[($6_1 + 8 | 0) >> 2] = 0;
    label$1 : {
    label$2 : while (1) {
      if ($262($6_1 + 332 | 0 | 0, $6_1 + 328 | 0 | 0) | 0) {
      break label$1
      }
      label$3 : {
      if ((HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0) != ($2_1 + ($309($3_1 | 0) | 0) | 0 | 0)) {
        break label$3
      }
      $7_1 = $309($3_1 | 0) | 0;
      $311($3_1 | 0, ($309($3_1 | 0) | 0) << 1 | 0 | 0);
      $311($3_1 | 0, $310($3_1 | 0) | 0 | 0);
      $2_1 = $686($3_1 | 0, 0 | 0) | 0;
      HEAP32[($6_1 + 180 | 0) >> 2] = $7_1 + $2_1 | 0;
      }
      if ($737($263($6_1 + 332 | 0 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0, $6_1 + 180 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($6_1 + 324 | 0) >> 2] | 0 | 0, $6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $0_1 | 0) | 0) {
      break label$1
      }
      $265($6_1 + 332 | 0 | 0) | 0;
      continue label$2;
    };
    }
    label$4 : {
    if (!($309($6_1 + 196 | 0 | 0) | 0)) {
      break label$4
    }
    $0_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
    if (($0_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
      break label$4
    }
    HEAP32[($6_1 + 12 | 0) >> 2] = $0_1 + 4 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
    }
    HEAP16[$5_1 >> 1] = $695($2_1 | 0, HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
    $689($6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
    label$5 : {
    if (!($262($6_1 + 332 | 0 | 0, $6_1 + 328 | 0 | 0) | 0)) {
      break label$5
    }
    HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
    }
    $2_1 = HEAP32[($6_1 + 332 | 0) >> 2] | 0;
    $1761($3_1 | 0) | 0;
    $1761($6_1 + 196 | 0 | 0) | 0;
    global$0 = $6_1 + 336 | 0;
    return $2_1 | 0;
  }
  
  function $742($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    return $743($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
  }
  
  function $743($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    var $6_1 = 0, $7_1 = 0;
    $6_1 = global$0 - 336 | 0;
    global$0 = $6_1;
    HEAP32[($6_1 + 328 | 0) >> 2] = $2_1;
    HEAP32[($6_1 + 332 | 0) >> 2] = $1_1;
    $1_1 = $683($3_1 | 0) | 0;
    $0_1 = $735($0_1 | 0, $3_1 | 0, $6_1 + 208 | 0 | 0) | 0;
    $736($6_1 + 196 | 0 | 0, $3_1 | 0, $6_1 + 324 | 0 | 0);
    $3_1 = $286($6_1 + 184 | 0 | 0) | 0;
    $311($3_1 | 0, $310($3_1 | 0) | 0 | 0);
    $2_1 = $686($3_1 | 0, 0 | 0) | 0;
    HEAP32[($6_1 + 180 | 0) >> 2] = $2_1;
    HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
    HEAP32[($6_1 + 8 | 0) >> 2] = 0;
    label$1 : {
    label$2 : while (1) {
      if ($262($6_1 + 332 | 0 | 0, $6_1 + 328 | 0 | 0) | 0) {
      break label$1
      }
      label$3 : {
      if ((HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0) != ($2_1 + ($309($3_1 | 0) | 0) | 0 | 0)) {
        break label$3
      }
      $7_1 = $309($3_1 | 0) | 0;
      $311($3_1 | 0, ($309($3_1 | 0) | 0) << 1 | 0 | 0);
      $311($3_1 | 0, $310($3_1 | 0) | 0 | 0);
      $2_1 = $686($3_1 | 0, 0 | 0) | 0;
      HEAP32[($6_1 + 180 | 0) >> 2] = $7_1 + $2_1 | 0;
      }
      if ($737($263($6_1 + 332 | 0 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0, $6_1 + 180 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($6_1 + 324 | 0) >> 2] | 0 | 0, $6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $0_1 | 0) | 0) {
      break label$1
      }
      $265($6_1 + 332 | 0 | 0) | 0;
      continue label$2;
    };
    }
    label$4 : {
    if (!($309($6_1 + 196 | 0 | 0) | 0)) {
      break label$4
    }
    $0_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
    if (($0_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
      break label$4
    }
    HEAP32[($6_1 + 12 | 0) >> 2] = $0_1 + 4 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
    }
    HEAP32[$5_1 >> 2] = $698($2_1 | 0, HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
    $689($6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
    label$5 : {
    if (!($262($6_1 + 332 | 0 | 0, $6_1 + 328 | 0 | 0) | 0)) {
      break label$5
    }
    HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
    }
    $2_1 = HEAP32[($6_1 + 332 | 0) >> 2] | 0;
    $1761($3_1 | 0) | 0;
    $1761($6_1 + 196 | 0 | 0) | 0;
    global$0 = $6_1 + 336 | 0;
    return $2_1 | 0;
  }
  
  function $744($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    return $745($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
  }
  
  function $745($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    var $6_1 = 0, $7_1 = 0;
    $6_1 = global$0 - 336 | 0;
    global$0 = $6_1;
    HEAP32[($6_1 + 328 | 0) >> 2] = $2_1;
    HEAP32[($6_1 + 332 | 0) >> 2] = $1_1;
    $1_1 = $683($3_1 | 0) | 0;
    $0_1 = $735($0_1 | 0, $3_1 | 0, $6_1 + 208 | 0 | 0) | 0;
    $736($6_1 + 196 | 0 | 0, $3_1 | 0, $6_1 + 324 | 0 | 0);
    $3_1 = $286($6_1 + 184 | 0 | 0) | 0;
    $311($3_1 | 0, $310($3_1 | 0) | 0 | 0);
    $2_1 = $686($3_1 | 0, 0 | 0) | 0;
    HEAP32[($6_1 + 180 | 0) >> 2] = $2_1;
    HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
    HEAP32[($6_1 + 8 | 0) >> 2] = 0;
    label$1 : {
    label$2 : while (1) {
      if ($262($6_1 + 332 | 0 | 0, $6_1 + 328 | 0 | 0) | 0) {
      break label$1
      }
      label$3 : {
      if ((HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0) != ($2_1 + ($309($3_1 | 0) | 0) | 0 | 0)) {
        break label$3
      }
      $7_1 = $309($3_1 | 0) | 0;
      $311($3_1 | 0, ($309($3_1 | 0) | 0) << 1 | 0 | 0);
      $311($3_1 | 0, $310($3_1 | 0) | 0 | 0);
      $2_1 = $686($3_1 | 0, 0 | 0) | 0;
      HEAP32[($6_1 + 180 | 0) >> 2] = $7_1 + $2_1 | 0;
      }
      if ($737($263($6_1 + 332 | 0 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0, $6_1 + 180 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($6_1 + 324 | 0) >> 2] | 0 | 0, $6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $0_1 | 0) | 0) {
      break label$1
      }
      $265($6_1 + 332 | 0 | 0) | 0;
      continue label$2;
    };
    }
    label$4 : {
    if (!($309($6_1 + 196 | 0 | 0) | 0)) {
      break label$4
    }
    $0_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
    if (($0_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
      break label$4
    }
    HEAP32[($6_1 + 12 | 0) >> 2] = $0_1 + 4 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
    }
    HEAP32[$5_1 >> 2] = $701($2_1 | 0, HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
    $689($6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
    label$5 : {
    if (!($262($6_1 + 332 | 0 | 0, $6_1 + 328 | 0 | 0) | 0)) {
      break label$5
    }
    HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
    }
    $2_1 = HEAP32[($6_1 + 332 | 0) >> 2] | 0;
    $1761($3_1 | 0) | 0;
    $1761($6_1 + 196 | 0 | 0) | 0;
    global$0 = $6_1 + 336 | 0;
    return $2_1 | 0;
  }
  
  function $746($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    return $747($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
  }
  
  function $747($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    var $6_1 = 0, i64toi32_i32$0 = 0, $7_1 = 0, i64toi32_i32$1 = 0, $113_1 = 0;
    $6_1 = global$0 - 336 | 0;
    global$0 = $6_1;
    HEAP32[($6_1 + 328 | 0) >> 2] = $2_1;
    HEAP32[($6_1 + 332 | 0) >> 2] = $1_1;
    $1_1 = $683($3_1 | 0) | 0;
    $0_1 = $735($0_1 | 0, $3_1 | 0, $6_1 + 208 | 0 | 0) | 0;
    $736($6_1 + 196 | 0 | 0, $3_1 | 0, $6_1 + 324 | 0 | 0);
    $3_1 = $286($6_1 + 184 | 0 | 0) | 0;
    $311($3_1 | 0, $310($3_1 | 0) | 0 | 0);
    $2_1 = $686($3_1 | 0, 0 | 0) | 0;
    HEAP32[($6_1 + 180 | 0) >> 2] = $2_1;
    HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
    HEAP32[($6_1 + 8 | 0) >> 2] = 0;
    label$1 : {
    label$2 : while (1) {
      if ($262($6_1 + 332 | 0 | 0, $6_1 + 328 | 0 | 0) | 0) {
      break label$1
      }
      label$3 : {
      if ((HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0) != ($2_1 + ($309($3_1 | 0) | 0) | 0 | 0)) {
        break label$3
      }
      $7_1 = $309($3_1 | 0) | 0;
      $311($3_1 | 0, ($309($3_1 | 0) | 0) << 1 | 0 | 0);
      $311($3_1 | 0, $310($3_1 | 0) | 0 | 0);
      $2_1 = $686($3_1 | 0, 0 | 0) | 0;
      HEAP32[($6_1 + 180 | 0) >> 2] = $7_1 + $2_1 | 0;
      }
      if ($737($263($6_1 + 332 | 0 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0, $6_1 + 180 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($6_1 + 324 | 0) >> 2] | 0 | 0, $6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $0_1 | 0) | 0) {
      break label$1
      }
      $265($6_1 + 332 | 0 | 0) | 0;
      continue label$2;
    };
    }
    label$4 : {
    if (!($309($6_1 + 196 | 0 | 0) | 0)) {
      break label$4
    }
    $0_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
    if (($0_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
      break label$4
    }
    HEAP32[($6_1 + 12 | 0) >> 2] = $0_1 + 4 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
    }
    i64toi32_i32$0 = $704($2_1 | 0, HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $113_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $5_1;
    HEAP32[i64toi32_i32$0 >> 2] = $113_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    $689($6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
    label$5 : {
    if (!($262($6_1 + 332 | 0 | 0, $6_1 + 328 | 0 | 0) | 0)) {
      break label$5
    }
    HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
    }
    $2_1 = HEAP32[($6_1 + 332 | 0) >> 2] | 0;
    $1761($3_1 | 0) | 0;
    $1761($6_1 + 196 | 0 | 0) | 0;
    global$0 = $6_1 + 336 | 0;
    return $2_1 | 0;
  }
  
  function $748($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    return $749($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
  }
  
  function $749($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    var $6_1 = 0;
    $6_1 = global$0 - 368 | 0;
    global$0 = $6_1;
    HEAP32[($6_1 + 360 | 0) >> 2] = $2_1;
    HEAP32[($6_1 + 364 | 0) >> 2] = $1_1;
    $750($6_1 + 204 | 0 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0, $6_1 + 220 | 0 | 0, $6_1 + 216 | 0 | 0);
    $2_1 = $286($6_1 + 192 | 0 | 0) | 0;
    $311($2_1 | 0, $310($2_1 | 0) | 0 | 0);
    $1_1 = $686($2_1 | 0, 0 | 0) | 0;
    HEAP32[($6_1 + 188 | 0) >> 2] = $1_1;
    HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
    HEAP32[($6_1 + 8 | 0) >> 2] = 0;
    HEAP8[($6_1 + 7 | 0) >> 0] = 1;
    HEAP8[($6_1 + 6 | 0) >> 0] = 69;
    label$1 : {
    label$2 : while (1) {
      if ($262($6_1 + 364 | 0 | 0, $6_1 + 360 | 0 | 0) | 0) {
      break label$1
      }
      label$3 : {
      if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($1_1 + ($309($2_1 | 0) | 0) | 0 | 0)) {
        break label$3
      }
      $3_1 = $309($2_1 | 0) | 0;
      $311($2_1 | 0, ($309($2_1 | 0) | 0) << 1 | 0 | 0);
      $311($2_1 | 0, $310($2_1 | 0) | 0 | 0);
      $1_1 = $686($2_1 | 0, 0 | 0) | 0;
      HEAP32[($6_1 + 188 | 0) >> 2] = $3_1 + $1_1 | 0;
      }
      if ($751($263($6_1 + 364 | 0 | 0) | 0 | 0, $6_1 + 7 | 0 | 0, $6_1 + 6 | 0 | 0, $1_1 | 0, $6_1 + 188 | 0 | 0, HEAP32[($6_1 + 220 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 216 | 0) >> 2] | 0 | 0, $6_1 + 204 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $6_1 + 8 | 0 | 0, $6_1 + 224 | 0 | 0) | 0) {
      break label$1
      }
      $265($6_1 + 364 | 0 | 0) | 0;
      continue label$2;
    };
    }
    label$4 : {
    if (!($309($6_1 + 204 | 0 | 0) | 0)) {
      break label$4
    }
    if ((HEAPU8[($6_1 + 7 | 0) >> 0] | 0 | 0) != (1 | 0)) {
      break label$4
    }
    $3_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
    if (($3_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
      break label$4
    }
    HEAP32[($6_1 + 12 | 0) >> 2] = $3_1 + 4 | 0;
    HEAP32[$3_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
    }
    HEAPF32[$5_1 >> 2] = Math_fround($709($1_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0));
    $689($6_1 + 204 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
    label$5 : {
    if (!($262($6_1 + 364 | 0 | 0, $6_1 + 360 | 0 | 0) | 0)) {
      break label$5
    }
    HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
    }
    $1_1 = HEAP32[($6_1 + 364 | 0) >> 2] | 0;
    $1761($2_1 | 0) | 0;
    $1761($6_1 + 204 | 0 | 0) | 0;
    global$0 = $6_1 + 368 | 0;
    return $1_1 | 0;
  }
  
  function $750($0_1, $1_1, $2_1, $3_1, $4_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    var $5_1 = 0;
    $5_1 = global$0 - 16 | 0;
    global$0 = $5_1;
    $439($5_1 + 12 | 0 | 0, $1_1 | 0);
    $757($261($5_1 + 12 | 0 | 0) | 0 | 0, 74336 | 0, 74368 | 0, $2_1 | 0) | 0;
    $1_1 = $724($5_1 + 12 | 0 | 0) | 0;
    HEAP32[$3_1 >> 2] = $766($1_1 | 0) | 0;
    HEAP32[$4_1 >> 2] = $767($1_1 | 0) | 0;
    $768($0_1 | 0, $1_1 | 0);
    $668($5_1 + 12 | 0 | 0) | 0;
    global$0 = $5_1 + 16 | 0;
  }
  
  function $751($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $6_1 = $6_1 | 0;
    $7_1 = $7_1 | 0;
    $8_1 = $8_1 | 0;
    $9_1 = $9_1 | 0;
    $10_1 = $10_1 | 0;
    $11_1 = $11_1 | 0;
    var $12_1 = 0;
    $12_1 = global$0 - 16 | 0;
    global$0 = $12_1;
    HEAP32[($12_1 + 12 | 0) >> 2] = $0_1;
    label$1 : {
    label$2 : {
      label$3 : {
      if (($0_1 | 0) != ($5_1 | 0)) {
        break label$3
      }
      if ((HEAPU8[$1_1 >> 0] | 0 | 0) != (1 | 0)) {
        break label$2
      }
      $0_1 = 0;
      HEAP8[$1_1 >> 0] = 0;
      $11_1 = HEAP32[$4_1 >> 2] | 0;
      HEAP32[$4_1 >> 2] = $11_1 + 1 | 0;
      HEAP8[$11_1 >> 0] = 46;
      if (!($309($7_1 | 0) | 0)) {
        break label$1
      }
      $11_1 = HEAP32[$9_1 >> 2] | 0;
      if (($11_1 - $8_1 | 0 | 0) > (159 | 0)) {
        break label$1
      }
      $5_1 = HEAP32[$10_1 >> 2] | 0;
      HEAP32[$9_1 >> 2] = $11_1 + 4 | 0;
      HEAP32[$11_1 >> 2] = $5_1;
      break label$1;
      }
      label$4 : {
      label$5 : {
        if (($0_1 | 0) != ($6_1 | 0)) {
        break label$5
        }
        if (!($309($7_1 | 0) | 0)) {
        break label$5
        }
        if ((HEAPU8[$1_1 >> 0] | 0 | 0) != (1 | 0)) {
        break label$2
        }
        $0_1 = HEAP32[$9_1 >> 2] | 0;
        if (($0_1 - $8_1 | 0 | 0) > (159 | 0)) {
        break label$4
        }
        $11_1 = HEAP32[$10_1 >> 2] | 0;
        HEAP32[$9_1 >> 2] = $0_1 + 4 | 0;
        HEAP32[$0_1 >> 2] = $11_1;
        $0_1 = 0;
        HEAP32[$10_1 >> 2] = 0;
        break label$1;
      }
      $0_1 = ($769($11_1 | 0, $11_1 + 128 | 0 | 0, $12_1 + 12 | 0 | 0) | 0) - $11_1 | 0;
      $11_1 = $0_1 >> 2 | 0;
      if (($11_1 | 0) > (31 | 0)) {
        break label$2
      }
      $5_1 = HEAP8[($11_1 + 74336 | 0) >> 0] | 0;
      label$6 : {
        label$7 : {
        label$8 : {
          $0_1 = $0_1 & -5 | 0;
          if (($0_1 | 0) == (88 | 0)) {
          break label$8
          }
          if (($0_1 | 0) != (96 | 0)) {
          break label$7
          }
          label$9 : {
          $11_1 = HEAP32[$4_1 >> 2] | 0;
          if (($11_1 | 0) == ($3_1 | 0)) {
            break label$9
          }
          $0_1 = -1;
          if (($585(HEAP8[($11_1 + -1 | 0) >> 0] | 0 | 0) | 0 | 0) != ($585(HEAP8[$2_1 >> 0] | 0 | 0) | 0 | 0)) {
            break label$1
          }
          }
          HEAP32[$4_1 >> 2] = $11_1 + 1 | 0;
          HEAP8[$11_1 >> 0] = $5_1;
          break label$4;
        }
        HEAP8[$2_1 >> 0] = 80;
        break label$6;
        }
        $0_1 = $585($5_1 | 0) | 0;
        if (($0_1 | 0) != (HEAP8[$2_1 >> 0] | 0 | 0)) {
        break label$6
        }
        HEAP8[$2_1 >> 0] = $586($0_1 | 0) | 0;
        if ((HEAPU8[$1_1 >> 0] | 0 | 0) != (1 | 0)) {
        break label$6
        }
        HEAP8[$1_1 >> 0] = 0;
        if (!($309($7_1 | 0) | 0)) {
        break label$6
        }
        $0_1 = HEAP32[$9_1 >> 2] | 0;
        if (($0_1 - $8_1 | 0 | 0) > (159 | 0)) {
        break label$6
        }
        $1_1 = HEAP32[$10_1 >> 2] | 0;
        HEAP32[$9_1 >> 2] = $0_1 + 4 | 0;
        HEAP32[$0_1 >> 2] = $1_1;
      }
      $0_1 = HEAP32[$4_1 >> 2] | 0;
      HEAP32[$4_1 >> 2] = $0_1 + 1 | 0;
      HEAP8[$0_1 >> 0] = $5_1;
      $0_1 = 0;
      if (($11_1 | 0) > (21 | 0)) {
        break label$1
      }
      HEAP32[$10_1 >> 2] = (HEAP32[$10_1 >> 2] | 0) + 1 | 0;
      break label$1;
      }
      $0_1 = 0;
      break label$1;
    }
    $0_1 = -1;
    }
    global$0 = $12_1 + 16 | 0;
    return $0_1 | 0;
  }
  
  function $752($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    return $753($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
  }
  
  function $753($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    var $6_1 = 0;
    $6_1 = global$0 - 368 | 0;
    global$0 = $6_1;
    HEAP32[($6_1 + 360 | 0) >> 2] = $2_1;
    HEAP32[($6_1 + 364 | 0) >> 2] = $1_1;
    $750($6_1 + 204 | 0 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0, $6_1 + 220 | 0 | 0, $6_1 + 216 | 0 | 0);
    $2_1 = $286($6_1 + 192 | 0 | 0) | 0;
    $311($2_1 | 0, $310($2_1 | 0) | 0 | 0);
    $1_1 = $686($2_1 | 0, 0 | 0) | 0;
    HEAP32[($6_1 + 188 | 0) >> 2] = $1_1;
    HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
    HEAP32[($6_1 + 8 | 0) >> 2] = 0;
    HEAP8[($6_1 + 7 | 0) >> 0] = 1;
    HEAP8[($6_1 + 6 | 0) >> 0] = 69;
    label$1 : {
    label$2 : while (1) {
      if ($262($6_1 + 364 | 0 | 0, $6_1 + 360 | 0 | 0) | 0) {
      break label$1
      }
      label$3 : {
      if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($1_1 + ($309($2_1 | 0) | 0) | 0 | 0)) {
        break label$3
      }
      $3_1 = $309($2_1 | 0) | 0;
      $311($2_1 | 0, ($309($2_1 | 0) | 0) << 1 | 0 | 0);
      $311($2_1 | 0, $310($2_1 | 0) | 0 | 0);
      $1_1 = $686($2_1 | 0, 0 | 0) | 0;
      HEAP32[($6_1 + 188 | 0) >> 2] = $3_1 + $1_1 | 0;
      }
      if ($751($263($6_1 + 364 | 0 | 0) | 0 | 0, $6_1 + 7 | 0 | 0, $6_1 + 6 | 0 | 0, $1_1 | 0, $6_1 + 188 | 0 | 0, HEAP32[($6_1 + 220 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 216 | 0) >> 2] | 0 | 0, $6_1 + 204 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $6_1 + 8 | 0 | 0, $6_1 + 224 | 0 | 0) | 0) {
      break label$1
      }
      $265($6_1 + 364 | 0 | 0) | 0;
      continue label$2;
    };
    }
    label$4 : {
    if (!($309($6_1 + 204 | 0 | 0) | 0)) {
      break label$4
    }
    if ((HEAPU8[($6_1 + 7 | 0) >> 0] | 0 | 0) != (1 | 0)) {
      break label$4
    }
    $3_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
    if (($3_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
      break label$4
    }
    HEAP32[($6_1 + 12 | 0) >> 2] = $3_1 + 4 | 0;
    HEAP32[$3_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
    }
    HEAPF64[$5_1 >> 3] = +$712($1_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0);
    $689($6_1 + 204 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
    label$5 : {
    if (!($262($6_1 + 364 | 0 | 0, $6_1 + 360 | 0 | 0) | 0)) {
      break label$5
    }
    HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
    }
    $1_1 = HEAP32[($6_1 + 364 | 0) >> 2] | 0;
    $1761($2_1 | 0) | 0;
    $1761($6_1 + 204 | 0 | 0) | 0;
    global$0 = $6_1 + 368 | 0;
    return $1_1 | 0;
  }
  
  function $754($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    return $755($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
  }
  
  function $755($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    var $6_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $7_1 = 0, $7$hi = 0, $125_1 = 0;
    $6_1 = global$0 - 384 | 0;
    global$0 = $6_1;
    HEAP32[($6_1 + 376 | 0) >> 2] = $2_1;
    HEAP32[($6_1 + 380 | 0) >> 2] = $1_1;
    $750($6_1 + 220 | 0 | 0, $3_1 | 0, $6_1 + 240 | 0 | 0, $6_1 + 236 | 0 | 0, $6_1 + 232 | 0 | 0);
    $2_1 = $286($6_1 + 208 | 0 | 0) | 0;
    $311($2_1 | 0, $310($2_1 | 0) | 0 | 0);
    $1_1 = $686($2_1 | 0, 0 | 0) | 0;
    HEAP32[($6_1 + 204 | 0) >> 2] = $1_1;
    HEAP32[($6_1 + 28 | 0) >> 2] = $6_1 + 32 | 0;
    HEAP32[($6_1 + 24 | 0) >> 2] = 0;
    HEAP8[($6_1 + 23 | 0) >> 0] = 1;
    HEAP8[($6_1 + 22 | 0) >> 0] = 69;
    label$1 : {
    label$2 : while (1) {
      if ($262($6_1 + 380 | 0 | 0, $6_1 + 376 | 0 | 0) | 0) {
      break label$1
      }
      label$3 : {
      if ((HEAP32[($6_1 + 204 | 0) >> 2] | 0 | 0) != ($1_1 + ($309($2_1 | 0) | 0) | 0 | 0)) {
        break label$3
      }
      $3_1 = $309($2_1 | 0) | 0;
      $311($2_1 | 0, ($309($2_1 | 0) | 0) << 1 | 0 | 0);
      $311($2_1 | 0, $310($2_1 | 0) | 0 | 0);
      $1_1 = $686($2_1 | 0, 0 | 0) | 0;
      HEAP32[($6_1 + 204 | 0) >> 2] = $3_1 + $1_1 | 0;
      }
      if ($751($263($6_1 + 380 | 0 | 0) | 0 | 0, $6_1 + 23 | 0 | 0, $6_1 + 22 | 0 | 0, $1_1 | 0, $6_1 + 204 | 0 | 0, HEAP32[($6_1 + 236 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 232 | 0) >> 2] | 0 | 0, $6_1 + 220 | 0 | 0, $6_1 + 32 | 0 | 0, $6_1 + 28 | 0 | 0, $6_1 + 24 | 0 | 0, $6_1 + 240 | 0 | 0) | 0) {
      break label$1
      }
      $265($6_1 + 380 | 0 | 0) | 0;
      continue label$2;
    };
    }
    label$4 : {
    if (!($309($6_1 + 220 | 0 | 0) | 0)) {
      break label$4
    }
    if ((HEAPU8[($6_1 + 23 | 0) >> 0] | 0 | 0) != (1 | 0)) {
      break label$4
    }
    $3_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
    if (($3_1 - ($6_1 + 32 | 0) | 0 | 0) > (159 | 0)) {
      break label$4
    }
    HEAP32[($6_1 + 28 | 0) >> 2] = $3_1 + 4 | 0;
    HEAP32[$3_1 >> 2] = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
    }
    $715($6_1 | 0, $1_1 | 0, HEAP32[($6_1 + 204 | 0) >> 2] | 0 | 0, $4_1 | 0);
    i64toi32_i32$2 = $6_1;
    i64toi32_i32$0 = HEAP32[$6_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
    $7_1 = i64toi32_i32$0;
    $7$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $6_1 + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $125_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $5_1;
    HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $125_1;
    HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = $7$hi;
    HEAP32[i64toi32_i32$1 >> 2] = $7_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $689($6_1 + 220 | 0 | 0, $6_1 + 32 | 0 | 0, HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, $4_1 | 0);
    label$5 : {
    if (!($262($6_1 + 380 | 0 | 0, $6_1 + 376 | 0 | 0) | 0)) {
      break label$5
    }
    HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
    }
    $1_1 = HEAP32[($6_1 + 380 | 0) >> 2] | 0;
    $1761($2_1 | 0) | 0;
    $1761($6_1 + 220 | 0 | 0) | 0;
    global$0 = $6_1 + 384 | 0;
    return $1_1 | 0;
  }
  
  function $756($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    var $6_1 = 0, $7_1 = 0;
    $6_1 = global$0 - 320 | 0;
    global$0 = $6_1;
    HEAP32[($6_1 + 312 | 0) >> 2] = $2_1;
    HEAP32[($6_1 + 316 | 0) >> 2] = $1_1;
    $7_1 = $286($6_1 + 196 | 0 | 0) | 0;
    $439($6_1 + 16 | 0 | 0, $3_1 | 0);
    $757($261($6_1 + 16 | 0 | 0) | 0 | 0, 74336 | 0, 74362 | 0, $6_1 + 208 | 0 | 0) | 0;
    $668($6_1 + 16 | 0 | 0) | 0;
    $2_1 = $286($6_1 + 184 | 0 | 0) | 0;
    $311($2_1 | 0, $310($2_1 | 0) | 0 | 0);
    $1_1 = $686($2_1 | 0, 0 | 0) | 0;
    HEAP32[($6_1 + 180 | 0) >> 2] = $1_1;
    HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
    HEAP32[($6_1 + 8 | 0) >> 2] = 0;
    label$1 : {
    label$2 : while (1) {
      if ($262($6_1 + 316 | 0 | 0, $6_1 + 312 | 0 | 0) | 0) {
      break label$1
      }
      label$3 : {
      if ((HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0) != ($1_1 + ($309($2_1 | 0) | 0) | 0 | 0)) {
        break label$3
      }
      $3_1 = $309($2_1 | 0) | 0;
      $311($2_1 | 0, ($309($2_1 | 0) | 0) << 1 | 0 | 0);
      $311($2_1 | 0, $310($2_1 | 0) | 0 | 0);
      $1_1 = $686($2_1 | 0, 0 | 0) | 0;
      HEAP32[($6_1 + 180 | 0) >> 2] = $3_1 + $1_1 | 0;
      }
      if ($737($263($6_1 + 316 | 0 | 0) | 0 | 0, 16 | 0, $1_1 | 0, $6_1 + 180 | 0 | 0, $6_1 + 8 | 0 | 0, 0 | 0, $7_1 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $6_1 + 208 | 0 | 0) | 0) {
      break label$1
      }
      $265($6_1 + 316 | 0 | 0) | 0;
      continue label$2;
    };
    }
    $311($2_1 | 0, (HEAP32[($6_1 + 180 | 0) >> 2] | 0) - $1_1 | 0 | 0);
    $1_1 = $315($2_1 | 0) | 0;
    $3_1 = $718() | 0;
    HEAP32[$6_1 >> 2] = $5_1;
    label$4 : {
    if (($719($1_1 | 0, $3_1 | 0, 65978 | 0, $6_1 | 0) | 0 | 0) == (1 | 0)) {
      break label$4
    }
    HEAP32[$4_1 >> 2] = 4;
    }
    label$5 : {
    if (!($262($6_1 + 316 | 0 | 0, $6_1 + 312 | 0 | 0) | 0)) {
      break label$5
    }
    HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
    }
    $1_1 = HEAP32[($6_1 + 316 | 0) >> 2] | 0;
    $1761($2_1 | 0) | 0;
    $1761($7_1 | 0) | 0;
    global$0 = $6_1 + 320 | 0;
    return $1_1 | 0;
  }
  
  function $757($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1) | 0 | 0;
  }
  
  function $758($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    $0_1 = $375($0_1 | 0, $772($367($0_1 | 0) | 0 | 0, $367($1_1 | 0) | 0 | 0, $2_1 | 0, $3_1 + 15 | 0 | 0) | 0 | 0) | 0;
    global$0 = $3_1 + 16 | 0;
    return $0_1 | 0;
  }
  
  function $759($0_1) {
    $0_1 = $0_1 | 0;
    return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
  }
  
  function $760($0_1) {
    $0_1 = $0_1 | 0;
    return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
  }
  
  function $761($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1);
  }
  
  function $762($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    $0_1 = $334($0_1 | 0, $763($331($0_1 | 0) | 0 | 0, $331($1_1 | 0) | 0 | 0, $2_1 | 0, $3_1 + 15 | 0 | 0) | 0 | 0) | 0;
    global$0 = $3_1 + 16 | 0;
    return $0_1 | 0;
  }
  
  function $763($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $0_1 = $1489($0_1 | 0, HEAP8[$2_1 >> 0] | 0 | 0, $1_1 - $0_1 | 0 | 0) | 0;
    return ($0_1 ? $0_1 : $1_1) | 0;
  }
  
  function $764($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    return 74336 | 0;
  }
  
  function $765($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $0_1 = $1490($0_1 | 0, HEAP8[$2_1 >> 0] | 0 | 0, $1_1 - $0_1 | 0 | 0) | 0;
    return ($0_1 ? $0_1 : $1_1) | 0;
  }
  
  function $766($0_1) {
    $0_1 = $0_1 | 0;
    return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
  }
  
  function $767($0_1) {
    $0_1 = $0_1 | 0;
    return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
  }
  
  function $768($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1);
  }
  
  function $769($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    $0_1 = $359($0_1 | 0, $770($356($0_1 | 0) | 0 | 0, $356($1_1 | 0) | 0 | 0, $2_1 | 0, $3_1 + 15 | 0 | 0) | 0 | 0) | 0;
    global$0 = $3_1 + 16 | 0;
    return $0_1 | 0;
  }
  
  function $770($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $0_1 = $1491($0_1 | 0, HEAP32[$2_1 >> 2] | 0 | 0, ($1_1 - $0_1 | 0) >> 2 | 0 | 0) | 0;
    return ($0_1 ? $0_1 : $1_1) | 0;
  }
  
  function $771($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    $439($3_1 + 12 | 0 | 0, $1_1 | 0);
    $757($261($3_1 + 12 | 0 | 0) | 0 | 0, 74336 | 0, 74362 | 0, $2_1 | 0) | 0;
    $668($3_1 + 12 | 0 | 0) | 0;
    global$0 = $3_1 + 16 | 0;
    return $2_1 | 0;
  }
  
  function $772($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $0_1 = $1492($0_1 | 0, HEAP32[$2_1 >> 2] | 0 | 0, ($1_1 - $0_1 | 0) >> 2 | 0 | 0) | 0;
    return ($0_1 ? $0_1 : $1_1) | 0;
  }
  
  function $773($0_1, $1_1, $2_1, $3_1, $4_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    var $5_1 = 0;
    $5_1 = global$0 - 32 | 0;
    global$0 = $5_1;
    HEAP32[($5_1 + 28 | 0) >> 2] = $1_1;
    label$1 : {
    label$2 : {
      if (($196($2_1 | 0) | 0) & 1 | 0) {
      break label$2
      }
      $2_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1) | 0;
      break label$1;
    }
    $439($5_1 + 16 | 0 | 0, $2_1 | 0);
    $2_1 = $669($5_1 + 16 | 0 | 0) | 0;
    $668($5_1 + 16 | 0 | 0) | 0;
    label$3 : {
      label$4 : {
      if (!$4_1) {
        break label$4
      }
      $670($5_1 + 16 | 0 | 0, $2_1 | 0);
      break label$3;
      }
      $671($5_1 + 16 | 0 | 0, $2_1 | 0);
    }
    HEAP32[($5_1 + 12 | 0) >> 2] = $774($5_1 + 16 | 0 | 0) | 0;
    label$5 : while (1) {
      HEAP32[($5_1 + 8 | 0) >> 2] = $775($5_1 + 16 | 0 | 0) | 0;
      label$6 : {
      if ($776($5_1 + 12 | 0 | 0, $5_1 + 8 | 0 | 0) | 0) {
        break label$6
      }
      $2_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
      $1761($5_1 + 16 | 0 | 0) | 0;
      break label$1;
      }
      $2_1 = HEAP8[($777($5_1 + 12 | 0 | 0) | 0) >> 0] | 0;
      $226($225($5_1 + 28 | 0 | 0) | 0 | 0, $2_1 | 0) | 0;
      $778($5_1 + 12 | 0 | 0) | 0;
      $227($5_1 + 28 | 0 | 0) | 0;
      continue label$5;
    };
    }
    global$0 = $5_1 + 32 | 0;
    return $2_1 | 0;
  }
  
  function $774($0_1) {
    $0_1 = $0_1 | 0;
    return $779($0_1 | 0, $292($0_1 | 0) | 0 | 0) | 0 | 0;
  }
  
  function $775($0_1) {
    $0_1 = $0_1 | 0;
    return $779($0_1 | 0, ($292($0_1 | 0) | 0) + ($309($0_1 | 0) | 0) | 0 | 0) | 0 | 0;
  }
  
  function $776($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return ($780($0_1 | 0, $1_1 | 0) | 0) ^ 1 | 0 | 0;
  }
  
  function $777($0_1) {
    $0_1 = $0_1 | 0;
    return HEAP32[$0_1 >> 2] | 0 | 0;
  }
  
  function $778($0_1) {
    $0_1 = $0_1 | 0;
    HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + 1 | 0;
    return $0_1 | 0;
  }
  
  function $779($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0;
    $2_1 = global$0 - 16 | 0;
    global$0 = $2_1;
    $1_1 = HEAP32[($1493($2_1 + 12 | 0 | 0, $1_1 | 0) | 0) >> 2] | 0;
    global$0 = $2_1 + 16 | 0;
    return $1_1 | 0;
  }
  
  function $780($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return ($1014($0_1 | 0) | 0 | 0) == ($1014($1_1 | 0) | 0 | 0) | 0;
  }
  
  function $781($0_1, $1_1, $2_1, $3_1, $4_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    return $782($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, 66031 | 0) | 0 | 0;
  }
  
  function $782($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    var $6_1 = 0;
    $6_1 = global$0 - 64 | 0;
    global$0 = $6_1;
    HEAP32[($6_1 + 56 | 0) >> 2] = 37;
    HEAP32[($6_1 + 60 | 0) >> 2] = 0;
    $783($6_1 + 56 | 0 | 1 | 0 | 0, $5_1 | 0, 1 | 0, $196($2_1 | 0) | 0 | 0);
    $5_1 = $718() | 0;
    HEAP32[$6_1 >> 2] = $4_1;
    $5_1 = ($6_1 + 43 | 0) + ($784($6_1 + 43 | 0 | 0, 13 | 0, $5_1 | 0, $6_1 + 56 | 0 | 0, $6_1 | 0) | 0) | 0;
    $4_1 = $785($6_1 + 43 | 0 | 0, $5_1 | 0, $2_1 | 0) | 0;
    $439($6_1 + 4 | 0 | 0, $2_1 | 0);
    $786($6_1 + 43 | 0 | 0, $4_1 | 0, $5_1 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $6_1 + 8 | 0 | 0, $6_1 + 4 | 0 | 0);
    $668($6_1 + 4 | 0 | 0) | 0;
    $2_1 = $787($1_1 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
    global$0 = $6_1 + 64 | 0;
    return $2_1 | 0;
  }
  
  function $783($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    var $4_1 = 0;
    label$1 : {
    if (!($3_1 & 2048 | 0)) {
      break label$1
    }
    $4_1 = $3_1 & 74 | 0;
    if (($4_1 | 0) == (8 | 0)) {
      break label$1
    }
    if (($4_1 | 0) == (64 | 0)) {
      break label$1
    }
    if (!$2_1) {
      break label$1
    }
    HEAP8[$0_1 >> 0] = 43;
    $0_1 = $0_1 + 1 | 0;
    }
    label$2 : {
    if (!($3_1 & 512 | 0)) {
      break label$2
    }
    HEAP8[$0_1 >> 0] = 35;
    $0_1 = $0_1 + 1 | 0;
    }
    label$3 : {
    label$4 : while (1) {
      $4_1 = HEAPU8[$1_1 >> 0] | 0;
      if (!$4_1) {
      break label$3
      }
      HEAP8[$0_1 >> 0] = $4_1;
      $0_1 = $0_1 + 1 | 0;
      $1_1 = $1_1 + 1 | 0;
      continue label$4;
    };
    }
    label$5 : {
    label$6 : {
      $1_1 = $3_1 & 74 | 0;
      if (($1_1 | 0) != (64 | 0)) {
      break label$6
      }
      $1_1 = 111;
      break label$5;
    }
    label$7 : {
      if (($1_1 | 0) != (8 | 0)) {
      break label$7
      }
      $1_1 = $3_1 & 16384 | 0 ? 88 : 120;
      break label$5;
    }
    $1_1 = $2_1 ? 100 : 117;
    }
    HEAP8[$0_1 >> 0] = $1_1;
  }
  
  function $784($0_1, $1_1, $2_1, $3_1, $4_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    var $5_1 = 0;
    $5_1 = global$0 - 16 | 0;
    global$0 = $5_1;
    HEAP32[($5_1 + 12 | 0) >> 2] = $2_1;
    HEAP32[($5_1 + 8 | 0) >> 2] = $4_1;
    $4_1 = $721($5_1 + 4 | 0 | 0, $5_1 + 12 | 0 | 0) | 0;
    $2_1 = $602($0_1 | 0, $1_1 | 0, $3_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
    $722($4_1 | 0) | 0;
    global$0 = $5_1 + 16 | 0;
    return $2_1 | 0;
  }
  
  function $785($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    label$1 : {
    $2_1 = ($196($2_1 | 0) | 0) & 176 | 0;
    if (($2_1 | 0) != (32 | 0)) {
      break label$1
    }
    return $1_1 | 0;
    }
    label$2 : {
    if (($2_1 | 0) != (16 | 0)) {
      break label$2
    }
    label$3 : {
      label$4 : {
      $2_1 = HEAPU8[$0_1 >> 0] | 0;
      switch ($2_1 + -43 | 0 | 0) {
      case 0:
      case 2:
        break label$4;
      default:
        break label$3;
      };
      }
      return $0_1 + 1 | 0 | 0;
    }
    if (($1_1 - $0_1 | 0 | 0) < (2 | 0)) {
      break label$2
    }
    if (($2_1 | 0) != (48 | 0)) {
      break label$2
    }
    if ((HEAPU8[($0_1 + 1 | 0) >> 0] | 0 | 32 | 0 | 0) != (120 | 0)) {
      break label$2
    }
    $0_1 = $0_1 + 2 | 0;
    }
    return $0_1 | 0;
  }
  
  function $786($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $6_1 = $6_1 | 0;
    var $10_1 = 0, $11_1 = 0, $9_1 = 0, $7_1 = 0, $8_1 = 0, $14_1 = 0, $12_1 = 0, $13_1 = 0;
    $7_1 = global$0 - 16 | 0;
    global$0 = $7_1;
    $8_1 = $197($6_1 | 0) | 0;
    $6_1 = $669($6_1 | 0) | 0;
    $761($7_1 + 4 | 0 | 0, $6_1 | 0);
    label$1 : {
    label$2 : {
      if (!($679($7_1 + 4 | 0 | 0) | 0)) {
      break label$2
      }
      $717($8_1 | 0, $0_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
      $6_1 = $3_1 + ($2_1 - $0_1 | 0) | 0;
      HEAP32[$5_1 >> 2] = $6_1;
      break label$1;
    }
    HEAP32[$5_1 >> 2] = $3_1;
    $9_1 = $0_1;
    label$3 : {
      label$4 : {
      $10_1 = HEAPU8[$9_1 >> 0] | 0;
      switch ($10_1 + -43 | 0 | 0) {
      case 0:
      case 2:
        break label$4;
      default:
        break label$3;
      };
      }
      $10_1 = $432($8_1 | 0, $10_1 << 24 >> 24 | 0) | 0;
      $11_1 = HEAP32[$5_1 >> 2] | 0;
      HEAP32[$5_1 >> 2] = $11_1 + 1 | 0;
      HEAP8[$11_1 >> 0] = $10_1;
      $9_1 = $0_1 + 1 | 0;
    }
    label$5 : {
      if (($2_1 - $9_1 | 0 | 0) < (2 | 0)) {
      break label$5
      }
      if ((HEAPU8[$9_1 >> 0] | 0 | 0) != (48 | 0)) {
      break label$5
      }
      if ((HEAPU8[($9_1 + 1 | 0) >> 0] | 0 | 32 | 0 | 0) != (120 | 0)) {
      break label$5
      }
      $10_1 = $432($8_1 | 0, 48 | 0) | 0;
      $11_1 = HEAP32[$5_1 >> 2] | 0;
      HEAP32[$5_1 >> 2] = $11_1 + 1 | 0;
      HEAP8[$11_1 >> 0] = $10_1;
      $10_1 = $432($8_1 | 0, HEAP8[($9_1 + 1 | 0) >> 0] | 0 | 0) | 0;
      $11_1 = HEAP32[$5_1 >> 2] | 0;
      HEAP32[$5_1 >> 2] = $11_1 + 1 | 0;
      HEAP8[$11_1 >> 0] = $10_1;
      $9_1 = $9_1 + 2 | 0;
    }
    $839($9_1 | 0, $2_1 | 0);
    $10_1 = 0;
    $12_1 = $760($6_1 | 0) | 0;
    $11_1 = 0;
    $6_1 = $9_1;
    label$6 : while (1) {
      label$7 : {
      if ($6_1 >>> 0 < $2_1 >>> 0) {
        break label$7
      }
      $839($3_1 + ($9_1 - $0_1 | 0) | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0);
      $6_1 = HEAP32[$5_1 >> 2] | 0;
      break label$1;
      }
      label$8 : {
      if (!(HEAPU8[($686($7_1 + 4 | 0 | 0, $11_1 | 0) | 0) >> 0] | 0)) {
        break label$8
      }
      if (($10_1 | 0) != (HEAP8[($686($7_1 + 4 | 0 | 0, $11_1 | 0) | 0) >> 0] | 0 | 0)) {
        break label$8
      }
      $10_1 = HEAP32[$5_1 >> 2] | 0;
      HEAP32[$5_1 >> 2] = $10_1 + 1 | 0;
      HEAP8[$10_1 >> 0] = $12_1;
      $11_1 = $11_1 + ($11_1 >>> 0 < (($309($7_1 + 4 | 0 | 0) | 0) + -1 | 0) >>> 0) | 0;
      $10_1 = 0;
      }
      $13_1 = $432($8_1 | 0, HEAP8[$6_1 >> 0] | 0 | 0) | 0;
      $14_1 = HEAP32[$5_1 >> 2] | 0;
      HEAP32[$5_1 >> 2] = $14_1 + 1 | 0;
      HEAP8[$14_1 >> 0] = $13_1;
      $6_1 = $6_1 + 1 | 0;
      $10_1 = $10_1 + 1 | 0;
      continue label$6;
    };
    }
    HEAP32[$4_1 >> 2] = ($1_1 | 0) == ($2_1 | 0) ? $6_1 : $3_1 + ($1_1 - $0_1 | 0) | 0;
    $1761($7_1 + 4 | 0 | 0) | 0;
    global$0 = $7_1 + 16 | 0;
  }
  
  function $787($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    var $7_1 = 0, $8_1 = 0, $6_1 = 0;
    $6_1 = global$0 - 16 | 0;
    global$0 = $6_1;
    label$1 : {
    label$2 : {
      if (!$0_1) {
      break label$2
      }
      $7_1 = $806($4_1 | 0) | 0;
      label$3 : {
      $8_1 = $2_1 - $1_1 | 0;
      if (($8_1 | 0) < (1 | 0)) {
        break label$3
      }
      if (($229($0_1 | 0, $1_1 | 0, $8_1 | 0) | 0 | 0) != ($8_1 | 0)) {
        break label$2
      }
      }
      label$4 : {
      $1_1 = $3_1 - $1_1 | 0;
      $1_1 = ($7_1 | 0) > ($1_1 | 0) ? $7_1 - $1_1 | 0 : 0;
      if (($1_1 | 0) < (1 | 0)) {
        break label$4
      }
      $7_1 = $807($6_1 + 4 | 0 | 0, $1_1 | 0, $5_1 | 0) | 0;
      $8_1 = $229($0_1 | 0, $289($7_1 | 0) | 0 | 0, $1_1 | 0) | 0;
      $1761($7_1 | 0) | 0;
      if (($8_1 | 0) != ($1_1 | 0)) {
        break label$2
      }
      }
      label$5 : {
      $1_1 = $3_1 - $2_1 | 0;
      if (($1_1 | 0) < (1 | 0)) {
        break label$5
      }
      if (($229($0_1 | 0, $2_1 | 0, $1_1 | 0) | 0 | 0) != ($1_1 | 0)) {
        break label$2
      }
      }
      $808($4_1 | 0, 0 | 0) | 0;
      break label$1;
    }
    $0_1 = 0;
    }
    global$0 = $6_1 + 16 | 0;
    return $0_1 | 0;
  }
  
  function $788($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $4$hi = $4$hi | 0;
    var i64toi32_i32$0 = 0;
    i64toi32_i32$0 = $4$hi;
    return $789($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, 66024 | 0) | 0 | 0;
  }
  
  function $789($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $4$hi = $4$hi | 0;
    $5_1 = $5_1 | 0;
    var $6_1 = 0, i64toi32_i32$0 = 0, $7_1 = 0;
    $6_1 = global$0 - 112 | 0;
    global$0 = $6_1;
    i64toi32_i32$0 = 0;
    HEAP32[($6_1 + 104 | 0) >> 2] = 37;
    HEAP32[($6_1 + 108 | 0) >> 2] = i64toi32_i32$0;
    $783($6_1 + 104 | 0 | 1 | 0 | 0, $5_1 | 0, 1 | 0, $196($2_1 | 0) | 0 | 0);
    $5_1 = $718() | 0;
    i64toi32_i32$0 = $4$hi;
    HEAP32[$6_1 >> 2] = $4_1;
    HEAP32[($6_1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $5_1 = ($6_1 + 80 | 0) + ($784($6_1 + 80 | 0 | 0, 24 | 0, $5_1 | 0, $6_1 + 104 | 0 | 0, $6_1 | 0) | 0) | 0;
    $7_1 = $785($6_1 + 80 | 0 | 0, $5_1 | 0, $2_1 | 0) | 0;
    $439($6_1 + 20 | 0 | 0, $2_1 | 0);
    $786($6_1 + 80 | 0 | 0, $7_1 | 0, $5_1 | 0, $6_1 + 32 | 0 | 0, $6_1 + 28 | 0 | 0, $6_1 + 24 | 0 | 0, $6_1 + 20 | 0 | 0);
    $668($6_1 + 20 | 0 | 0) | 0;
    $2_1 = $787($1_1 | 0, $6_1 + 32 | 0 | 0, HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
    global$0 = $6_1 + 112 | 0;
    return $2_1 | 0;
  }
  
  function $790($0_1, $1_1, $2_1, $3_1, $4_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    return $791($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, 66031 | 0) | 0 | 0;
  }
  
  function $791($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    var $6_1 = 0;
    $6_1 = global$0 - 64 | 0;
    global$0 = $6_1;
    HEAP32[($6_1 + 56 | 0) >> 2] = 37;
    HEAP32[($6_1 + 60 | 0) >> 2] = 0;
    $783($6_1 + 56 | 0 | 1 | 0 | 0, $5_1 | 0, 0 | 0, $196($2_1 | 0) | 0 | 0);
    $5_1 = $718() | 0;
    HEAP32[$6_1 >> 2] = $4_1;
    $5_1 = ($6_1 + 43 | 0) + ($784($6_1 + 43 | 0 | 0, 13 | 0, $5_1 | 0, $6_1 + 56 | 0 | 0, $6_1 | 0) | 0) | 0;
    $4_1 = $785($6_1 + 43 | 0 | 0, $5_1 | 0, $2_1 | 0) | 0;
    $439($6_1 + 4 | 0 | 0, $2_1 | 0);
    $786($6_1 + 43 | 0 | 0, $4_1 | 0, $5_1 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $6_1 + 8 | 0 | 0, $6_1 + 4 | 0 | 0);
    $668($6_1 + 4 | 0 | 0) | 0;
    $2_1 = $787($1_1 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
    global$0 = $6_1 + 64 | 0;
    return $2_1 | 0;
  }
  
  function $792($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $4$hi = $4$hi | 0;
    var i64toi32_i32$0 = 0;
    i64toi32_i32$0 = $4$hi;
    return $793($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, 66024 | 0) | 0 | 0;
  }
  
  function $793($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $4$hi = $4$hi | 0;
    $5_1 = $5_1 | 0;
    var $6_1 = 0, i64toi32_i32$0 = 0, $7_1 = 0;
    $6_1 = global$0 - 112 | 0;
    global$0 = $6_1;
    i64toi32_i32$0 = 0;
    HEAP32[($6_1 + 104 | 0) >> 2] = 37;
    HEAP32[($6_1 + 108 | 0) >> 2] = i64toi32_i32$0;
    $783($6_1 + 104 | 0 | 1 | 0 | 0, $5_1 | 0, 0 | 0, $196($2_1 | 0) | 0 | 0);
    $5_1 = $718() | 0;
    i64toi32_i32$0 = $4$hi;
    HEAP32[$6_1 >> 2] = $4_1;
    HEAP32[($6_1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $5_1 = ($6_1 + 80 | 0) + ($784($6_1 + 80 | 0 | 0, 24 | 0, $5_1 | 0, $6_1 + 104 | 0 | 0, $6_1 | 0) | 0) | 0;
    $7_1 = $785($6_1 + 80 | 0 | 0, $5_1 | 0, $2_1 | 0) | 0;
    $439($6_1 + 20 | 0 | 0, $2_1 | 0);
    $786($6_1 + 80 | 0 | 0, $7_1 | 0, $5_1 | 0, $6_1 + 32 | 0 | 0, $6_1 + 28 | 0 | 0, $6_1 + 24 | 0 | 0, $6_1 + 20 | 0 | 0);
    $668($6_1 + 20 | 0 | 0) | 0;
    $2_1 = $787($1_1 | 0, $6_1 + 32 | 0 | 0, HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
    global$0 = $6_1 + 112 | 0;
    return $2_1 | 0;
  }
  
  function $794($0_1, $1_1, $2_1, $3_1, $4_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = +$4_1;
    return $795($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, +$4_1, 67181 | 0) | 0 | 0;
  }
  
  function $795($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = +$4_1;
    $5_1 = $5_1 | 0;
    var $6_1 = 0, $8_1 = 0, $7_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
    $6_1 = global$0 - 208 | 0;
    global$0 = $6_1;
    HEAP32[($6_1 + 200 | 0) >> 2] = 37;
    HEAP32[($6_1 + 204 | 0) >> 2] = 0;
    $7_1 = $796($6_1 + 200 | 0 | 1 | 0 | 0, $5_1 | 0, $196($2_1 | 0) | 0 | 0) | 0;
    HEAP32[($6_1 + 156 | 0) >> 2] = $6_1 + 160 | 0;
    $5_1 = $718() | 0;
    label$1 : {
    label$2 : {
      if (!$7_1) {
      break label$2
      }
      $8_1 = $797($2_1 | 0) | 0;
      HEAPF64[($6_1 + 40 | 0) >> 3] = $4_1;
      HEAP32[($6_1 + 32 | 0) >> 2] = $8_1;
      $5_1 = $784($6_1 + 160 | 0 | 0, 30 | 0, $5_1 | 0, $6_1 + 200 | 0 | 0, $6_1 + 32 | 0 | 0) | 0;
      break label$1;
    }
    HEAPF64[($6_1 + 48 | 0) >> 3] = $4_1;
    $5_1 = $784($6_1 + 160 | 0 | 0, 30 | 0, $5_1 | 0, $6_1 + 200 | 0 | 0, $6_1 + 48 | 0 | 0) | 0;
    }
    HEAP32[($6_1 + 80 | 0) >> 2] = 94;
    $9_1 = $798($6_1 + 148 | 0 | 0, 0 | 0, $6_1 + 80 | 0 | 0) | 0;
    $8_1 = $6_1 + 160 | 0;
    label$3 : {
    label$4 : {
      if (($5_1 | 0) < (30 | 0)) {
      break label$4
      }
      $5_1 = $718() | 0;
      label$5 : {
      label$6 : {
        if (!$7_1) {
        break label$6
        }
        $8_1 = $797($2_1 | 0) | 0;
        HEAPF64[($6_1 + 8 | 0) >> 3] = $4_1;
        HEAP32[$6_1 >> 2] = $8_1;
        $5_1 = $799($6_1 + 156 | 0 | 0, $5_1 | 0, $6_1 + 200 | 0 | 0, $6_1 | 0) | 0;
        break label$5;
      }
      HEAPF64[($6_1 + 16 | 0) >> 3] = $4_1;
      $5_1 = $799($6_1 + 156 | 0 | 0, $5_1 | 0, $6_1 + 200 | 0 | 0, $6_1 + 16 | 0 | 0) | 0;
      }
      if (($5_1 | 0) == (-1 | 0)) {
      break label$3
      }
      $800($9_1 | 0, HEAP32[($6_1 + 156 | 0) >> 2] | 0 | 0);
      $8_1 = HEAP32[($6_1 + 156 | 0) >> 2] | 0;
    }
    $10_1 = $8_1 + $5_1 | 0;
    $11_1 = $785($8_1 | 0, $10_1 | 0, $2_1 | 0) | 0;
    HEAP32[($6_1 + 80 | 0) >> 2] = 94;
    $8_1 = $798($6_1 + 72 | 0 | 0, 0 | 0, $6_1 + 80 | 0 | 0) | 0;
    label$7 : {
      label$8 : {
      $7_1 = HEAP32[($6_1 + 156 | 0) >> 2] | 0;
      if (($7_1 | 0) != ($6_1 + 160 | 0 | 0)) {
        break label$8
      }
      $5_1 = $6_1 + 80 | 0;
      break label$7;
      }
      $5_1 = $126($5_1 << 1 | 0 | 0) | 0;
      if (!$5_1) {
      break label$3
      }
      $800($8_1 | 0, $5_1 | 0);
      $7_1 = HEAP32[($6_1 + 156 | 0) >> 2] | 0;
    }
    $439($6_1 + 60 | 0 | 0, $2_1 | 0);
    $801($7_1 | 0, $11_1 | 0, $10_1 | 0, $5_1 | 0, $6_1 + 68 | 0 | 0, $6_1 + 64 | 0 | 0, $6_1 + 60 | 0 | 0);
    $668($6_1 + 60 | 0 | 0) | 0;
    $2_1 = $787($1_1 | 0, $5_1 | 0, HEAP32[($6_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 64 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
    $802($8_1 | 0) | 0;
    $802($9_1 | 0) | 0;
    global$0 = $6_1 + 208 | 0;
    return $2_1 | 0;
    }
    $1755();
    wasm2js_trap();
  }
  
  function $796($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0, $4_1 = 0, $5_1 = 0;
    label$1 : {
    if (!($2_1 & 2048 | 0)) {
      break label$1
    }
    HEAP8[$0_1 >> 0] = 43;
    $0_1 = $0_1 + 1 | 0;
    }
    label$2 : {
    if (!($2_1 & 1024 | 0)) {
      break label$2
    }
    HEAP8[$0_1 >> 0] = 35;
    $0_1 = $0_1 + 1 | 0;
    }
    label$3 : {
    $3_1 = $2_1 & 260 | 0;
    if (($3_1 | 0) == (260 | 0)) {
      break label$3
    }
    $5_1 = 10798;
    HEAP8[$0_1 >> 0] = $5_1;
    HEAP8[($0_1 + 1 | 0) >> 0] = $5_1 >>> 8 | 0;
    $0_1 = $0_1 + 2 | 0;
    }
    $4_1 = $2_1 & 16384 | 0;
    label$4 : {
    label$5 : while (1) {
      $2_1 = HEAPU8[$1_1 >> 0] | 0;
      if (!$2_1) {
      break label$4
      }
      HEAP8[$0_1 >> 0] = $2_1;
      $0_1 = $0_1 + 1 | 0;
      $1_1 = $1_1 + 1 | 0;
      continue label$5;
    };
    }
    label$6 : {
    label$7 : {
      label$8 : {
      if (($3_1 | 0) == (256 | 0)) {
        break label$8
      }
      if (($3_1 | 0) != (4 | 0)) {
        break label$7
      }
      $1_1 = $4_1 ? 70 : 102;
      break label$6;
      }
      $1_1 = $4_1 ? 69 : 101;
      break label$6;
    }
    label$9 : {
      if (($3_1 | 0) != (260 | 0)) {
      break label$9
      }
      $1_1 = $4_1 ? 65 : 97;
      break label$6;
    }
    $1_1 = $4_1 ? 71 : 103;
    }
    HEAP8[$0_1 >> 0] = $1_1;
    return ($3_1 | 0) != (260 | 0) | 0;
  }
  
  function $797($0_1) {
    $0_1 = $0_1 | 0;
    return HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0;
  }
  
  function $798($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    HEAP32[($3_1 + 12 | 0) >> 2] = $1_1;
    $1_1 = $968($0_1 | 0, $3_1 + 12 | 0 | 0, $2_1 | 0) | 0;
    global$0 = $3_1 + 16 | 0;
    return $1_1 | 0;
  }
  
  function $799($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    var $4_1 = 0;
    $4_1 = global$0 - 16 | 0;
    global$0 = $4_1;
    HEAP32[($4_1 + 12 | 0) >> 2] = $1_1;
    HEAP32[($4_1 + 8 | 0) >> 2] = $3_1;
    $3_1 = $721($4_1 + 4 | 0 | 0, $4_1 + 12 | 0 | 0) | 0;
    $1_1 = $625($0_1 | 0, $2_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
    $722($3_1 | 0) | 0;
    global$0 = $4_1 + 16 | 0;
    return $1_1 | 0;
  }
  
  function $800($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0;
    $2_1 = HEAP32[($985($0_1 | 0) | 0) >> 2] | 0;
    HEAP32[($985($0_1 | 0) | 0) >> 2] = $1_1;
    label$1 : {
    if (!$2_1) {
      break label$1
    }
    FUNCTION_TABLE[HEAP32[($986($0_1 | 0) | 0) >> 2] | 0 | 0]($2_1);
    }
  }
  
  function $801($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $6_1 = $6_1 | 0;
    var $11_1 = 0, $12_1 = 0, $10_1 = 0, $7_1 = 0, $8_1 = 0, $14_1 = 0, $9_1 = 0, $16_1 = 0, $13_1 = 0, $15_1 = 0;
    $7_1 = global$0 - 16 | 0;
    global$0 = $7_1;
    $8_1 = $197($6_1 | 0) | 0;
    $9_1 = $669($6_1 | 0) | 0;
    $761($7_1 + 4 | 0 | 0, $9_1 | 0);
    HEAP32[$5_1 >> 2] = $3_1;
    $10_1 = $0_1;
    label$1 : {
    label$2 : {
      $6_1 = HEAPU8[$10_1 >> 0] | 0;
      switch ($6_1 + -43 | 0 | 0) {
      case 0:
      case 2:
      break label$2;
      default:
      break label$1;
      };
    }
    $6_1 = $432($8_1 | 0, $6_1 << 24 >> 24 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 1 | 0;
    HEAP8[$11_1 >> 0] = $6_1;
    $10_1 = $0_1 + 1 | 0;
    }
    $6_1 = $10_1;
    label$3 : {
    label$4 : {
      if (($2_1 - $6_1 | 0 | 0) <= (1 | 0)) {
      break label$4
      }
      if ((HEAPU8[$6_1 >> 0] | 0 | 0) != (48 | 0)) {
      break label$4
      }
      if ((HEAPU8[($6_1 + 1 | 0) >> 0] | 0 | 32 | 0 | 0) != (120 | 0)) {
      break label$4
      }
      $6_1 = $432($8_1 | 0, 48 | 0) | 0;
      $11_1 = HEAP32[$5_1 >> 2] | 0;
      HEAP32[$5_1 >> 2] = $11_1 + 1 | 0;
      HEAP8[$11_1 >> 0] = $6_1;
      $6_1 = $432($8_1 | 0, HEAP8[($10_1 + 1 | 0) >> 0] | 0 | 0) | 0;
      $11_1 = HEAP32[$5_1 >> 2] | 0;
      HEAP32[$5_1 >> 2] = $11_1 + 1 | 0;
      HEAP8[$11_1 >> 0] = $6_1;
      $10_1 = $10_1 + 2 | 0;
      $6_1 = $10_1;
      label$5 : while (1) {
      if ($6_1 >>> 0 >= $2_1 >>> 0) {
        break label$3
      }
      if (!($605(HEAP8[$6_1 >> 0] | 0 | 0, $718() | 0 | 0) | 0)) {
        break label$3
      }
      $6_1 = $6_1 + 1 | 0;
      continue label$5;
      };
    }
    label$6 : while (1) {
      if ($6_1 >>> 0 >= $2_1 >>> 0) {
      break label$3
      }
      if (!($607(HEAP8[$6_1 >> 0] | 0 | 0, $718() | 0 | 0) | 0)) {
      break label$3
      }
      $6_1 = $6_1 + 1 | 0;
      continue label$6;
    };
    }
    label$7 : {
    label$8 : {
      if (!($679($7_1 + 4 | 0 | 0) | 0)) {
      break label$8
      }
      $717($8_1 | 0, $10_1 | 0, $6_1 | 0, HEAP32[$5_1 >> 2] | 0 | 0) | 0;
      HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + ($6_1 - $10_1 | 0) | 0;
      break label$7;
    }
    $839($10_1 | 0, $6_1 | 0);
    $12_1 = 0;
    $13_1 = $760($9_1 | 0) | 0;
    $14_1 = 0;
    $11_1 = $10_1;
    label$9 : while (1) {
      label$10 : {
      if ($11_1 >>> 0 < $6_1 >>> 0) {
        break label$10
      }
      $839($3_1 + ($10_1 - $0_1 | 0) | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0);
      break label$7;
      }
      label$11 : {
      if ((HEAP8[($686($7_1 + 4 | 0 | 0, $14_1 | 0) | 0) >> 0] | 0 | 0) < (1 | 0)) {
        break label$11
      }
      if (($12_1 | 0) != (HEAP8[($686($7_1 + 4 | 0 | 0, $14_1 | 0) | 0) >> 0] | 0 | 0)) {
        break label$11
      }
      $12_1 = HEAP32[$5_1 >> 2] | 0;
      HEAP32[$5_1 >> 2] = $12_1 + 1 | 0;
      HEAP8[$12_1 >> 0] = $13_1;
      $14_1 = $14_1 + ($14_1 >>> 0 < (($309($7_1 + 4 | 0 | 0) | 0) + -1 | 0) >>> 0) | 0;
      $12_1 = 0;
      }
      $15_1 = $432($8_1 | 0, HEAP8[$11_1 >> 0] | 0 | 0) | 0;
      $16_1 = HEAP32[$5_1 >> 2] | 0;
      HEAP32[$5_1 >> 2] = $16_1 + 1 | 0;
      HEAP8[$16_1 >> 0] = $15_1;
      $11_1 = $11_1 + 1 | 0;
      $12_1 = $12_1 + 1 | 0;
      continue label$9;
    };
    }
    label$12 : while (1) {
    label$13 : {
      label$14 : {
      label$15 : {
        if ($6_1 >>> 0 < $2_1 >>> 0) {
        break label$15
        }
        $11_1 = $6_1;
        break label$14;
      }
      $11_1 = $6_1 + 1 | 0;
      $6_1 = HEAP8[$6_1 >> 0] | 0;
      if (($6_1 | 0) != (46 | 0)) {
        break label$13
      }
      $6_1 = $759($9_1 | 0) | 0;
      $12_1 = HEAP32[$5_1 >> 2] | 0;
      HEAP32[$5_1 >> 2] = $12_1 + 1 | 0;
      HEAP8[$12_1 >> 0] = $6_1;
      }
      $717($8_1 | 0, $11_1 | 0, $2_1 | 0, HEAP32[$5_1 >> 2] | 0 | 0) | 0;
      $6_1 = (HEAP32[$5_1 >> 2] | 0) + ($2_1 - $11_1 | 0) | 0;
      HEAP32[$5_1 >> 2] = $6_1;
      HEAP32[$4_1 >> 2] = ($1_1 | 0) == ($2_1 | 0) ? $6_1 : $3_1 + ($1_1 - $0_1 | 0) | 0;
      $1761($7_1 + 4 | 0 | 0) | 0;
      global$0 = $7_1 + 16 | 0;
      return;
    }
    $6_1 = $432($8_1 | 0, $6_1 | 0) | 0;
    $12_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $12_1 + 1 | 0;
    HEAP8[$12_1 >> 0] = $6_1;
    $6_1 = $11_1;
    continue label$12;
    };
  }
  
  function $802($0_1) {
    $0_1 = $0_1 | 0;
    $800($0_1 | 0, 0 | 0);
    return $0_1 | 0;
  }
  
  function $803($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi, $5_1, $5$hi) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $4$hi = $4$hi | 0;
    $5_1 = $5_1 | 0;
    $5$hi = $5$hi | 0;
    var i64toi32_i32$0 = 0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$0 = $4$hi;
    return $804($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, $5_1 | 0, $5$hi | 0, 66330 | 0) | 0 | 0;
  }
  
  function $804($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi, $5_1, $5$hi, $6_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $4$hi = $4$hi | 0;
    $5_1 = $5_1 | 0;
    $5$hi = $5$hi | 0;
    $6_1 = $6_1 | 0;
    var $7_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $9_1 = 0, $8_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0;
    $7_1 = global$0 - 256 | 0;
    global$0 = $7_1;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$0 = 0;
    HEAP32[($7_1 + 248 | 0) >> 2] = 37;
    HEAP32[($7_1 + 252 | 0) >> 2] = i64toi32_i32$0;
    $8_1 = $796($7_1 + 248 | 0 | 1 | 0 | 0, $6_1 | 0, $196($2_1 | 0) | 0 | 0) | 0;
    HEAP32[($7_1 + 204 | 0) >> 2] = $7_1 + 208 | 0;
    $6_1 = $718() | 0;
    label$1 : {
    label$2 : {
      if (!$8_1) {
      break label$2
      }
      $9_1 = $797($2_1 | 0) | 0;
      i64toi32_i32$0 = $5$hi;
      i64toi32_i32$1 = $7_1 + 64 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $5_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$1 = $7_1;
      HEAP32[($7_1 + 56 | 0) >> 2] = $4_1;
      HEAP32[($7_1 + 60 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[($7_1 + 48 | 0) >> 2] = $9_1;
      $6_1 = $784($7_1 + 208 | 0 | 0, 30 | 0, $6_1 | 0, $7_1 + 248 | 0 | 0, $7_1 + 48 | 0 | 0) | 0;
      break label$1;
    }
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$1 = $7_1;
    HEAP32[($7_1 + 80 | 0) >> 2] = $4_1;
    HEAP32[($7_1 + 84 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$1 = $7_1;
    HEAP32[($7_1 + 88 | 0) >> 2] = $5_1;
    HEAP32[($7_1 + 92 | 0) >> 2] = i64toi32_i32$0;
    $6_1 = $784($7_1 + 208 | 0 | 0, 30 | 0, $6_1 | 0, $7_1 + 248 | 0 | 0, $7_1 + 80 | 0 | 0) | 0;
    }
    HEAP32[($7_1 + 128 | 0) >> 2] = 94;
    $10_1 = $798($7_1 + 196 | 0 | 0, 0 | 0, $7_1 + 128 | 0 | 0) | 0;
    $9_1 = $7_1 + 208 | 0;
    label$3 : {
    label$4 : {
      if (($6_1 | 0) < (30 | 0)) {
      break label$4
      }
      $6_1 = $718() | 0;
      label$5 : {
      label$6 : {
        if (!$8_1) {
        break label$6
        }
        $9_1 = $797($2_1 | 0) | 0;
        i64toi32_i32$0 = $5$hi;
        i64toi32_i32$1 = $7_1 + 16 | 0;
        HEAP32[i64toi32_i32$1 >> 2] = $5_1;
        HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
        i64toi32_i32$0 = $4$hi;
        i64toi32_i32$1 = $7_1;
        HEAP32[($7_1 + 8 | 0) >> 2] = $4_1;
        HEAP32[($7_1 + 12 | 0) >> 2] = i64toi32_i32$0;
        HEAP32[$7_1 >> 2] = $9_1;
        $6_1 = $799($7_1 + 204 | 0 | 0, $6_1 | 0, $7_1 + 248 | 0 | 0, $7_1 | 0) | 0;
        break label$5;
      }
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$1 = $7_1;
      HEAP32[($7_1 + 32 | 0) >> 2] = $4_1;
      HEAP32[($7_1 + 36 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$0 = $5$hi;
      i64toi32_i32$1 = $7_1;
      HEAP32[($7_1 + 40 | 0) >> 2] = $5_1;
      HEAP32[($7_1 + 44 | 0) >> 2] = i64toi32_i32$0;
      $6_1 = $799($7_1 + 204 | 0 | 0, $6_1 | 0, $7_1 + 248 | 0 | 0, $7_1 + 32 | 0 | 0) | 0;
      }
      if (($6_1 | 0) == (-1 | 0)) {
      break label$3
      }
      $800($10_1 | 0, HEAP32[($7_1 + 204 | 0) >> 2] | 0 | 0);
      $9_1 = HEAP32[($7_1 + 204 | 0) >> 2] | 0;
    }
    $11_1 = $9_1 + $6_1 | 0;
    $12_1 = $785($9_1 | 0, $11_1 | 0, $2_1 | 0) | 0;
    HEAP32[($7_1 + 128 | 0) >> 2] = 94;
    $9_1 = $798($7_1 + 120 | 0 | 0, 0 | 0, $7_1 + 128 | 0 | 0) | 0;
    label$7 : {
      label$8 : {
      $8_1 = HEAP32[($7_1 + 204 | 0) >> 2] | 0;
      if (($8_1 | 0) != ($7_1 + 208 | 0 | 0)) {
        break label$8
      }
      $6_1 = $7_1 + 128 | 0;
      break label$7;
      }
      $6_1 = $126($6_1 << 1 | 0 | 0) | 0;
      if (!$6_1) {
      break label$3
      }
      $800($9_1 | 0, $6_1 | 0);
      $8_1 = HEAP32[($7_1 + 204 | 0) >> 2] | 0;
    }
    $439($7_1 + 108 | 0 | 0, $2_1 | 0);
    $801($8_1 | 0, $12_1 | 0, $11_1 | 0, $6_1 | 0, $7_1 + 116 | 0 | 0, $7_1 + 112 | 0 | 0, $7_1 + 108 | 0 | 0);
    $668($7_1 + 108 | 0 | 0) | 0;
    $2_1 = $787($1_1 | 0, $6_1 | 0, HEAP32[($7_1 + 116 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 112 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
    $802($9_1 | 0) | 0;
    $802($10_1 | 0) | 0;
    global$0 = $7_1 + 256 | 0;
    return $2_1 | 0;
    }
    $1755();
    wasm2js_trap();
  }
  
  function $805($0_1, $1_1, $2_1, $3_1, $4_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    var $5_1 = 0, $7_1 = 0, $6_1 = 0, $8_1 = 0;
    $5_1 = global$0 - 96 | 0;
    global$0 = $5_1;
    $6_1 = $718() | 0;
    HEAP32[$5_1 >> 2] = $4_1;
    $7_1 = $784($5_1 + 64 | 0 | 0, 20 | 0, $6_1 | 0, 65978 | 0, $5_1 | 0) | 0;
    $4_1 = ($5_1 + 64 | 0) + $7_1 | 0;
    $6_1 = $785($5_1 + 64 | 0 | 0, $4_1 | 0, $2_1 | 0) | 0;
    $439($5_1 + 16 | 0 | 0, $2_1 | 0);
    $8_1 = $197($5_1 + 16 | 0 | 0) | 0;
    $668($5_1 + 16 | 0 | 0) | 0;
    $717($8_1 | 0, $5_1 + 64 | 0 | 0, $4_1 | 0, $5_1 + 16 | 0 | 0) | 0;
    $7_1 = $7_1 + ($5_1 + 16 | 0) | 0;
    $2_1 = $787($1_1 | 0, $5_1 + 16 | 0 | 0, (($6_1 | 0) == ($4_1 | 0) ? $7_1 : ($5_1 + 16 | 0) + ($6_1 - ($5_1 + 64 | 0) | 0) | 0) | 0, $7_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
    global$0 = $5_1 + 96 | 0;
    return $2_1 | 0;
  }
  
  function $806($0_1) {
    $0_1 = $0_1 | 0;
    return HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0;
  }
  
  function $807($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    $0_1 = $436($0_1 | 0, $3_1 + 15 | 0 | 0, $3_1 + 14 | 0 | 0) | 0;
    $1769($0_1 | 0, $1_1 | 0, $2_1 | 0);
    global$0 = $3_1 + 16 | 0;
    return $0_1 | 0;
  }
  
  function $808($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0;
    $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
    return $2_1 | 0;
  }
  
  function $809($0_1, $1_1, $2_1, $3_1, $4_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    var $5_1 = 0;
    $5_1 = global$0 - 32 | 0;
    global$0 = $5_1;
    HEAP32[($5_1 + 28 | 0) >> 2] = $1_1;
    label$1 : {
    label$2 : {
      if (($196($2_1 | 0) | 0) & 1 | 0) {
      break label$2
      }
      $2_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1) | 0;
      break label$1;
    }
    $439($5_1 + 16 | 0 | 0, $2_1 | 0);
    $2_1 = $724($5_1 + 16 | 0 | 0) | 0;
    $668($5_1 + 16 | 0 | 0) | 0;
    label$3 : {
      label$4 : {
      if (!$4_1) {
        break label$4
      }
      $725($5_1 + 16 | 0 | 0, $2_1 | 0);
      break label$3;
      }
      $726($5_1 + 16 | 0 | 0, $2_1 | 0);
    }
    HEAP32[($5_1 + 12 | 0) >> 2] = $810($5_1 + 16 | 0 | 0) | 0;
    label$5 : while (1) {
      HEAP32[($5_1 + 8 | 0) >> 2] = $811($5_1 + 16 | 0 | 0) | 0;
      label$6 : {
      if ($812($5_1 + 12 | 0 | 0, $5_1 + 8 | 0 | 0) | 0) {
        break label$6
      }
      $2_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
      $1775($5_1 + 16 | 0 | 0) | 0;
      break label$1;
      }
      $2_1 = HEAP32[($813($5_1 + 12 | 0 | 0) | 0) >> 2] | 0;
      $283($282($5_1 + 28 | 0 | 0) | 0 | 0, $2_1 | 0) | 0;
      $814($5_1 + 12 | 0 | 0) | 0;
      $284($5_1 + 28 | 0 | 0) | 0;
      continue label$5;
    };
    }
    global$0 = $5_1 + 32 | 0;
    return $2_1 | 0;
  }
  
  function $810($0_1) {
    $0_1 = $0_1 | 0;
    return $816($0_1 | 0, $815($0_1 | 0) | 0 | 0) | 0 | 0;
  }
  
  function $811($0_1) {
    $0_1 = $0_1 | 0;
    return $816($0_1 | 0, ($815($0_1 | 0) | 0) + (($730($0_1 | 0) | 0) << 2 | 0) | 0 | 0) | 0 | 0;
  }
  
  function $812($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return ($817($0_1 | 0, $1_1 | 0) | 0) ^ 1 | 0 | 0;
  }
  
  function $813($0_1) {
    $0_1 = $0_1 | 0;
    return HEAP32[$0_1 >> 2] | 0 | 0;
  }
  
  function $814($0_1) {
    $0_1 = $0_1 | 0;
    HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + 4 | 0;
    return $0_1 | 0;
  }
  
  function $815($0_1) {
    $0_1 = $0_1 | 0;
    label$1 : {
    if (!($875($0_1 | 0) | 0)) {
      break label$1
    }
    return $1048($0_1 | 0) | 0 | 0;
    }
    return $1051($0_1 | 0) | 0 | 0;
  }
  
  function $816($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0;
    $2_1 = global$0 - 16 | 0;
    global$0 = $2_1;
    $1_1 = HEAP32[($1494($2_1 + 12 | 0 | 0, $1_1 | 0) | 0) >> 2] | 0;
    global$0 = $2_1 + 16 | 0;
    return $1_1 | 0;
  }
  
  function $817($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return ($1082($0_1 | 0) | 0 | 0) == ($1082($1_1 | 0) | 0 | 0) | 0;
  }
  
  function $818($0_1, $1_1, $2_1, $3_1, $4_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    return $819($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, 66031 | 0) | 0 | 0;
  }
  
  function $819($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    var $6_1 = 0;
    $6_1 = global$0 - 144 | 0;
    global$0 = $6_1;
    HEAP32[($6_1 + 136 | 0) >> 2] = 37;
    HEAP32[($6_1 + 140 | 0) >> 2] = 0;
    $783($6_1 + 136 | 0 | 1 | 0 | 0, $5_1 | 0, 1 | 0, $196($2_1 | 0) | 0 | 0);
    $5_1 = $718() | 0;
    HEAP32[$6_1 >> 2] = $4_1;
    $5_1 = ($6_1 + 123 | 0) + ($784($6_1 + 123 | 0 | 0, 13 | 0, $5_1 | 0, $6_1 + 136 | 0 | 0, $6_1 | 0) | 0) | 0;
    $4_1 = $785($6_1 + 123 | 0 | 0, $5_1 | 0, $2_1 | 0) | 0;
    $439($6_1 + 4 | 0 | 0, $2_1 | 0);
    $820($6_1 + 123 | 0 | 0, $4_1 | 0, $5_1 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $6_1 + 8 | 0 | 0, $6_1 + 4 | 0 | 0);
    $668($6_1 + 4 | 0 | 0) | 0;
    $2_1 = $821($1_1 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
    global$0 = $6_1 + 144 | 0;
    return $2_1 | 0;
  }
  
  function $820($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $6_1 = $6_1 | 0;
    var $10_1 = 0, $11_1 = 0, $9_1 = 0, $7_1 = 0, $8_1 = 0, $14_1 = 0, $12_1 = 0, $13_1 = 0;
    $7_1 = global$0 - 16 | 0;
    global$0 = $7_1;
    $8_1 = $261($6_1 | 0) | 0;
    $6_1 = $724($6_1 | 0) | 0;
    $768($7_1 + 4 | 0 | 0, $6_1 | 0);
    label$1 : {
    label$2 : {
      if (!($679($7_1 + 4 | 0 | 0) | 0)) {
      break label$2
      }
      $757($8_1 | 0, $0_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
      $6_1 = $3_1 + (($2_1 - $0_1 | 0) << 2 | 0) | 0;
      HEAP32[$5_1 >> 2] = $6_1;
      break label$1;
    }
    HEAP32[$5_1 >> 2] = $3_1;
    $9_1 = $0_1;
    label$3 : {
      label$4 : {
      $10_1 = HEAPU8[$9_1 >> 0] | 0;
      switch ($10_1 + -43 | 0 | 0) {
      case 0:
      case 2:
        break label$4;
      default:
        break label$3;
      };
      }
      $10_1 = $434($8_1 | 0, $10_1 << 24 >> 24 | 0) | 0;
      $11_1 = HEAP32[$5_1 >> 2] | 0;
      HEAP32[$5_1 >> 2] = $11_1 + 4 | 0;
      HEAP32[$11_1 >> 2] = $10_1;
      $9_1 = $0_1 + 1 | 0;
    }
    label$5 : {
      if (($2_1 - $9_1 | 0 | 0) < (2 | 0)) {
      break label$5
      }
      if ((HEAPU8[$9_1 >> 0] | 0 | 0) != (48 | 0)) {
      break label$5
      }
      if ((HEAPU8[($9_1 + 1 | 0) >> 0] | 0 | 32 | 0 | 0) != (120 | 0)) {
      break label$5
      }
      $10_1 = $434($8_1 | 0, 48 | 0) | 0;
      $11_1 = HEAP32[$5_1 >> 2] | 0;
      HEAP32[$5_1 >> 2] = $11_1 + 4 | 0;
      HEAP32[$11_1 >> 2] = $10_1;
      $10_1 = $434($8_1 | 0, HEAP8[($9_1 + 1 | 0) >> 0] | 0 | 0) | 0;
      $11_1 = HEAP32[$5_1 >> 2] | 0;
      HEAP32[$5_1 >> 2] = $11_1 + 4 | 0;
      HEAP32[$11_1 >> 2] = $10_1;
      $9_1 = $9_1 + 2 | 0;
    }
    $839($9_1 | 0, $2_1 | 0);
    $10_1 = 0;
    $12_1 = $767($6_1 | 0) | 0;
    $11_1 = 0;
    $6_1 = $9_1;
    label$6 : while (1) {
      label$7 : {
      if ($6_1 >>> 0 < $2_1 >>> 0) {
        break label$7
      }
      $841($3_1 + (($9_1 - $0_1 | 0) << 2 | 0) | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0);
      $6_1 = HEAP32[$5_1 >> 2] | 0;
      break label$1;
      }
      label$8 : {
      if (!(HEAPU8[($686($7_1 + 4 | 0 | 0, $11_1 | 0) | 0) >> 0] | 0)) {
        break label$8
      }
      if (($10_1 | 0) != (HEAP8[($686($7_1 + 4 | 0 | 0, $11_1 | 0) | 0) >> 0] | 0 | 0)) {
        break label$8
      }
      $10_1 = HEAP32[$5_1 >> 2] | 0;
      HEAP32[$5_1 >> 2] = $10_1 + 4 | 0;
      HEAP32[$10_1 >> 2] = $12_1;
      $11_1 = $11_1 + ($11_1 >>> 0 < (($309($7_1 + 4 | 0 | 0) | 0) + -1 | 0) >>> 0) | 0;
      $10_1 = 0;
      }
      $13_1 = $434($8_1 | 0, HEAP8[$6_1 >> 0] | 0 | 0) | 0;
      $14_1 = HEAP32[$5_1 >> 2] | 0;
      HEAP32[$5_1 >> 2] = $14_1 + 4 | 0;
      HEAP32[$14_1 >> 2] = $13_1;
      $6_1 = $6_1 + 1 | 0;
      $10_1 = $10_1 + 1 | 0;
      continue label$6;
    };
    }
    HEAP32[$4_1 >> 2] = ($1_1 | 0) == ($2_1 | 0) ? $6_1 : $3_1 + (($1_1 - $0_1 | 0) << 2 | 0) | 0;
    $1761($7_1 + 4 | 0 | 0) | 0;
    global$0 = $7_1 + 16 | 0;
  }
  
  function $821($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    var $7_1 = 0, $8_1 = 0, $6_1 = 0;
    $6_1 = global$0 - 16 | 0;
    global$0 = $6_1;
    label$1 : {
    label$2 : {
      if (!$0_1) {
      break label$2
      }
      $7_1 = $806($4_1 | 0) | 0;
      label$3 : {
      $8_1 = ($2_1 - $1_1 | 0) >> 2 | 0;
      if (($8_1 | 0) < (1 | 0)) {
        break label$3
      }
      if (($285($0_1 | 0, $1_1 | 0, $8_1 | 0) | 0 | 0) != ($8_1 | 0)) {
        break label$2
      }
      }
      label$4 : {
      $1_1 = ($3_1 - $1_1 | 0) >> 2 | 0;
      $1_1 = ($7_1 | 0) > ($1_1 | 0) ? $7_1 - $1_1 | 0 : 0;
      if (($1_1 | 0) < (1 | 0)) {
        break label$4
      }
      $7_1 = $837($6_1 + 4 | 0 | 0, $1_1 | 0, $5_1 | 0) | 0;
      $8_1 = $285($0_1 | 0, $838($7_1 | 0) | 0 | 0, $1_1 | 0) | 0;
      $1775($7_1 | 0) | 0;
      if (($8_1 | 0) != ($1_1 | 0)) {
        break label$2
      }
      }
      label$5 : {
      $1_1 = ($3_1 - $2_1 | 0) >> 2 | 0;
      if (($1_1 | 0) < (1 | 0)) {
        break label$5
      }
      if (($285($0_1 | 0, $2_1 | 0, $1_1 | 0) | 0 | 0) != ($1_1 | 0)) {
        break label$2
      }
      }
      $808($4_1 | 0, 0 | 0) | 0;
      break label$1;
    }
    $0_1 = 0;
    }
    global$0 = $6_1 + 16 | 0;
    return $0_1 | 0;
  }
  
  function $822($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $4$hi = $4$hi | 0;
    var i64toi32_i32$0 = 0;
    i64toi32_i32$0 = $4$hi;
    return $823($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, 66024 | 0) | 0 | 0;
  }
  
  function $823($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $4$hi = $4$hi | 0;
    $5_1 = $5_1 | 0;
    var $6_1 = 0, i64toi32_i32$0 = 0, $7_1 = 0;
    $6_1 = global$0 - 256 | 0;
    global$0 = $6_1;
    i64toi32_i32$0 = 0;
    HEAP32[($6_1 + 248 | 0) >> 2] = 37;
    HEAP32[($6_1 + 252 | 0) >> 2] = i64toi32_i32$0;
    $783($6_1 + 248 | 0 | 1 | 0 | 0, $5_1 | 0, 1 | 0, $196($2_1 | 0) | 0 | 0);
    $5_1 = $718() | 0;
    i64toi32_i32$0 = $4$hi;
    HEAP32[$6_1 >> 2] = $4_1;
    HEAP32[($6_1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $5_1 = ($6_1 + 224 | 0) + ($784($6_1 + 224 | 0 | 0, 24 | 0, $5_1 | 0, $6_1 + 248 | 0 | 0, $6_1 | 0) | 0) | 0;
    $7_1 = $785($6_1 + 224 | 0 | 0, $5_1 | 0, $2_1 | 0) | 0;
    $439($6_1 + 20 | 0 | 0, $2_1 | 0);
    $820($6_1 + 224 | 0 | 0, $7_1 | 0, $5_1 | 0, $6_1 + 32 | 0 | 0, $6_1 + 28 | 0 | 0, $6_1 + 24 | 0 | 0, $6_1 + 20 | 0 | 0);
    $668($6_1 + 20 | 0 | 0) | 0;
    $2_1 = $821($1_1 | 0, $6_1 + 32 | 0 | 0, HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
    global$0 = $6_1 + 256 | 0;
    return $2_1 | 0;
  }
  
  function $824($0_1, $1_1, $2_1, $3_1, $4_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    return $825($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, 66031 | 0) | 0 | 0;
  }
  
  function $825($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    var $6_1 = 0;
    $6_1 = global$0 - 144 | 0;
    global$0 = $6_1;
    HEAP32[($6_1 + 136 | 0) >> 2] = 37;
    HEAP32[($6_1 + 140 | 0) >> 2] = 0;
    $783($6_1 + 136 | 0 | 1 | 0 | 0, $5_1 | 0, 0 | 0, $196($2_1 | 0) | 0 | 0);
    $5_1 = $718() | 0;
    HEAP32[$6_1 >> 2] = $4_1;
    $5_1 = ($6_1 + 123 | 0) + ($784($6_1 + 123 | 0 | 0, 13 | 0, $5_1 | 0, $6_1 + 136 | 0 | 0, $6_1 | 0) | 0) | 0;
    $4_1 = $785($6_1 + 123 | 0 | 0, $5_1 | 0, $2_1 | 0) | 0;
    $439($6_1 + 4 | 0 | 0, $2_1 | 0);
    $820($6_1 + 123 | 0 | 0, $4_1 | 0, $5_1 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $6_1 + 8 | 0 | 0, $6_1 + 4 | 0 | 0);
    $668($6_1 + 4 | 0 | 0) | 0;
    $2_1 = $821($1_1 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
    global$0 = $6_1 + 144 | 0;
    return $2_1 | 0;
  }
  
  function $826($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $4$hi = $4$hi | 0;
    var i64toi32_i32$0 = 0;
    i64toi32_i32$0 = $4$hi;
    return $827($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, 66024 | 0) | 0 | 0;
  }
  
  function $827($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $4$hi = $4$hi | 0;
    $5_1 = $5_1 | 0;
    var $6_1 = 0, i64toi32_i32$0 = 0, $7_1 = 0;
    $6_1 = global$0 - 256 | 0;
    global$0 = $6_1;
    i64toi32_i32$0 = 0;
    HEAP32[($6_1 + 248 | 0) >> 2] = 37;
    HEAP32[($6_1 + 252 | 0) >> 2] = i64toi32_i32$0;
    $783($6_1 + 248 | 0 | 1 | 0 | 0, $5_1 | 0, 0 | 0, $196($2_1 | 0) | 0 | 0);
    $5_1 = $718() | 0;
    i64toi32_i32$0 = $4$hi;
    HEAP32[$6_1 >> 2] = $4_1;
    HEAP32[($6_1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $5_1 = ($6_1 + 224 | 0) + ($784($6_1 + 224 | 0 | 0, 24 | 0, $5_1 | 0, $6_1 + 248 | 0 | 0, $6_1 | 0) | 0) | 0;
    $7_1 = $785($6_1 + 224 | 0 | 0, $5_1 | 0, $2_1 | 0) | 0;
    $439($6_1 + 20 | 0 | 0, $2_1 | 0);
    $820($6_1 + 224 | 0 | 0, $7_1 | 0, $5_1 | 0, $6_1 + 32 | 0 | 0, $6_1 + 28 | 0 | 0, $6_1 + 24 | 0 | 0, $6_1 + 20 | 0 | 0);
    $668($6_1 + 20 | 0 | 0) | 0;
    $2_1 = $821($1_1 | 0, $6_1 + 32 | 0 | 0, HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
    global$0 = $6_1 + 256 | 0;
    return $2_1 | 0;
  }
  
  function $828($0_1, $1_1, $2_1, $3_1, $4_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = +$4_1;
    return $829($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, +$4_1, 67181 | 0) | 0 | 0;
  }
  
  function $829($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = +$4_1;
    $5_1 = $5_1 | 0;
    var $6_1 = 0, $8_1 = 0, $7_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
    $6_1 = global$0 - 368 | 0;
    global$0 = $6_1;
    HEAP32[($6_1 + 360 | 0) >> 2] = 37;
    HEAP32[($6_1 + 364 | 0) >> 2] = 0;
    $7_1 = $796($6_1 + 360 | 0 | 1 | 0 | 0, $5_1 | 0, $196($2_1 | 0) | 0 | 0) | 0;
    HEAP32[($6_1 + 316 | 0) >> 2] = $6_1 + 320 | 0;
    $5_1 = $718() | 0;
    label$1 : {
    label$2 : {
      if (!$7_1) {
      break label$2
      }
      $8_1 = $797($2_1 | 0) | 0;
      HEAPF64[($6_1 + 40 | 0) >> 3] = $4_1;
      HEAP32[($6_1 + 32 | 0) >> 2] = $8_1;
      $5_1 = $784($6_1 + 320 | 0 | 0, 30 | 0, $5_1 | 0, $6_1 + 360 | 0 | 0, $6_1 + 32 | 0 | 0) | 0;
      break label$1;
    }
    HEAPF64[($6_1 + 48 | 0) >> 3] = $4_1;
    $5_1 = $784($6_1 + 320 | 0 | 0, 30 | 0, $5_1 | 0, $6_1 + 360 | 0 | 0, $6_1 + 48 | 0 | 0) | 0;
    }
    HEAP32[($6_1 + 80 | 0) >> 2] = 94;
    $9_1 = $798($6_1 + 308 | 0 | 0, 0 | 0, $6_1 + 80 | 0 | 0) | 0;
    $8_1 = $6_1 + 320 | 0;
    label$3 : {
    label$4 : {
      if (($5_1 | 0) < (30 | 0)) {
      break label$4
      }
      $5_1 = $718() | 0;
      label$5 : {
      label$6 : {
        if (!$7_1) {
        break label$6
        }
        $8_1 = $797($2_1 | 0) | 0;
        HEAPF64[($6_1 + 8 | 0) >> 3] = $4_1;
        HEAP32[$6_1 >> 2] = $8_1;
        $5_1 = $799($6_1 + 316 | 0 | 0, $5_1 | 0, $6_1 + 360 | 0 | 0, $6_1 | 0) | 0;
        break label$5;
      }
      HEAPF64[($6_1 + 16 | 0) >> 3] = $4_1;
      $5_1 = $799($6_1 + 316 | 0 | 0, $5_1 | 0, $6_1 + 360 | 0 | 0, $6_1 + 16 | 0 | 0) | 0;
      }
      if (($5_1 | 0) == (-1 | 0)) {
      break label$3
      }
      $800($9_1 | 0, HEAP32[($6_1 + 316 | 0) >> 2] | 0 | 0);
      $8_1 = HEAP32[($6_1 + 316 | 0) >> 2] | 0;
    }
    $10_1 = $8_1 + $5_1 | 0;
    $11_1 = $785($8_1 | 0, $10_1 | 0, $2_1 | 0) | 0;
    HEAP32[($6_1 + 80 | 0) >> 2] = 94;
    $8_1 = $830($6_1 + 72 | 0 | 0, 0 | 0, $6_1 + 80 | 0 | 0) | 0;
    label$7 : {
      label$8 : {
      $7_1 = HEAP32[($6_1 + 316 | 0) >> 2] | 0;
      if (($7_1 | 0) != ($6_1 + 320 | 0 | 0)) {
        break label$8
      }
      $5_1 = $6_1 + 80 | 0;
      break label$7;
      }
      $5_1 = $126($5_1 << 3 | 0 | 0) | 0;
      if (!$5_1) {
      break label$3
      }
      $831($8_1 | 0, $5_1 | 0);
      $7_1 = HEAP32[($6_1 + 316 | 0) >> 2] | 0;
    }
    $439($6_1 + 60 | 0 | 0, $2_1 | 0);
    $832($7_1 | 0, $11_1 | 0, $10_1 | 0, $5_1 | 0, $6_1 + 68 | 0 | 0, $6_1 + 64 | 0 | 0, $6_1 + 60 | 0 | 0);
    $668($6_1 + 60 | 0 | 0) | 0;
    $2_1 = $821($1_1 | 0, $5_1 | 0, HEAP32[($6_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 64 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
    $833($8_1 | 0) | 0;
    $802($9_1 | 0) | 0;
    global$0 = $6_1 + 368 | 0;
    return $2_1 | 0;
    }
    $1755();
    wasm2js_trap();
  }
  
  function $830($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    HEAP32[($3_1 + 12 | 0) >> 2] = $1_1;
    $1_1 = $1031($0_1 | 0, $3_1 + 12 | 0 | 0, $2_1 | 0) | 0;
    global$0 = $3_1 + 16 | 0;
    return $1_1 | 0;
  }
  
  function $831($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0;
    $2_1 = HEAP32[($1108($0_1 | 0) | 0) >> 2] | 0;
    HEAP32[($1108($0_1 | 0) | 0) >> 2] = $1_1;
    label$1 : {
    if (!$2_1) {
      break label$1
    }
    FUNCTION_TABLE[HEAP32[($1109($0_1 | 0) | 0) >> 2] | 0 | 0]($2_1);
    }
  }
  
  function $832($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $6_1 = $6_1 | 0;
    var $11_1 = 0, $12_1 = 0, $10_1 = 0, $7_1 = 0, $14_1 = 0, $8_1 = 0, $9_1 = 0, $16_1 = 0, $13_1 = 0, $15_1 = 0;
    $7_1 = global$0 - 16 | 0;
    global$0 = $7_1;
    $8_1 = $261($6_1 | 0) | 0;
    $9_1 = $724($6_1 | 0) | 0;
    $768($7_1 + 4 | 0 | 0, $9_1 | 0);
    HEAP32[$5_1 >> 2] = $3_1;
    $10_1 = $0_1;
    label$1 : {
    label$2 : {
      $6_1 = HEAPU8[$10_1 >> 0] | 0;
      switch ($6_1 + -43 | 0 | 0) {
      case 0:
      case 2:
      break label$2;
      default:
      break label$1;
      };
    }
    $6_1 = $434($8_1 | 0, $6_1 << 24 >> 24 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 4 | 0;
    HEAP32[$11_1 >> 2] = $6_1;
    $10_1 = $0_1 + 1 | 0;
    }
    $6_1 = $10_1;
    label$3 : {
    label$4 : {
      if (($2_1 - $6_1 | 0 | 0) <= (1 | 0)) {
      break label$4
      }
      if ((HEAPU8[$6_1 >> 0] | 0 | 0) != (48 | 0)) {
      break label$4
      }
      if ((HEAPU8[($6_1 + 1 | 0) >> 0] | 0 | 32 | 0 | 0) != (120 | 0)) {
      break label$4
      }
      $6_1 = $434($8_1 | 0, 48 | 0) | 0;
      $11_1 = HEAP32[$5_1 >> 2] | 0;
      HEAP32[$5_1 >> 2] = $11_1 + 4 | 0;
      HEAP32[$11_1 >> 2] = $6_1;
      $6_1 = $434($8_1 | 0, HEAP8[($10_1 + 1 | 0) >> 0] | 0 | 0) | 0;
      $11_1 = HEAP32[$5_1 >> 2] | 0;
      HEAP32[$5_1 >> 2] = $11_1 + 4 | 0;
      HEAP32[$11_1 >> 2] = $6_1;
      $10_1 = $10_1 + 2 | 0;
      $6_1 = $10_1;
      label$5 : while (1) {
      if ($6_1 >>> 0 >= $2_1 >>> 0) {
        break label$3
      }
      if (!($605(HEAP8[$6_1 >> 0] | 0 | 0, $718() | 0 | 0) | 0)) {
        break label$3
      }
      $6_1 = $6_1 + 1 | 0;
      continue label$5;
      };
    }
    label$6 : while (1) {
      if ($6_1 >>> 0 >= $2_1 >>> 0) {
      break label$3
      }
      if (!($607(HEAP8[$6_1 >> 0] | 0 | 0, $718() | 0 | 0) | 0)) {
      break label$3
      }
      $6_1 = $6_1 + 1 | 0;
      continue label$6;
    };
    }
    label$7 : {
    label$8 : {
      if (!($679($7_1 + 4 | 0 | 0) | 0)) {
      break label$8
      }
      $757($8_1 | 0, $10_1 | 0, $6_1 | 0, HEAP32[$5_1 >> 2] | 0 | 0) | 0;
      HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + (($6_1 - $10_1 | 0) << 2 | 0) | 0;
      break label$7;
    }
    $839($10_1 | 0, $6_1 | 0);
    $12_1 = 0;
    $13_1 = $767($9_1 | 0) | 0;
    $14_1 = 0;
    $11_1 = $10_1;
    label$9 : while (1) {
      label$10 : {
      if ($11_1 >>> 0 < $6_1 >>> 0) {
        break label$10
      }
      $841($3_1 + (($10_1 - $0_1 | 0) << 2 | 0) | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0);
      break label$7;
      }
      label$11 : {
      if ((HEAP8[($686($7_1 + 4 | 0 | 0, $14_1 | 0) | 0) >> 0] | 0 | 0) < (1 | 0)) {
        break label$11
      }
      if (($12_1 | 0) != (HEAP8[($686($7_1 + 4 | 0 | 0, $14_1 | 0) | 0) >> 0] | 0 | 0)) {
        break label$11
      }
      $12_1 = HEAP32[$5_1 >> 2] | 0;
      HEAP32[$5_1 >> 2] = $12_1 + 4 | 0;
      HEAP32[$12_1 >> 2] = $13_1;
      $14_1 = $14_1 + ($14_1 >>> 0 < (($309($7_1 + 4 | 0 | 0) | 0) + -1 | 0) >>> 0) | 0;
      $12_1 = 0;
      }
      $15_1 = $434($8_1 | 0, HEAP8[$11_1 >> 0] | 0 | 0) | 0;
      $16_1 = HEAP32[$5_1 >> 2] | 0;
      HEAP32[$5_1 >> 2] = $16_1 + 4 | 0;
      HEAP32[$16_1 >> 2] = $15_1;
      $11_1 = $11_1 + 1 | 0;
      $12_1 = $12_1 + 1 | 0;
      continue label$9;
    };
    }
    label$12 : {
    label$13 : {
      label$14 : while (1) {
      if ($6_1 >>> 0 >= $2_1 >>> 0) {
        break label$13
      }
      $11_1 = $6_1 + 1 | 0;
      label$15 : {
        $6_1 = HEAP8[$6_1 >> 0] | 0;
        if (($6_1 | 0) == (46 | 0)) {
        break label$15
        }
        $6_1 = $434($8_1 | 0, $6_1 | 0) | 0;
        $12_1 = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = $12_1 + 4 | 0;
        HEAP32[$12_1 >> 2] = $6_1;
        $6_1 = $11_1;
        continue label$14;
      }
      break label$14;
      };
      $6_1 = $766($9_1 | 0) | 0;
      $14_1 = HEAP32[$5_1 >> 2] | 0;
      $12_1 = $14_1 + 4 | 0;
      HEAP32[$5_1 >> 2] = $12_1;
      HEAP32[$14_1 >> 2] = $6_1;
      break label$12;
    }
    $12_1 = HEAP32[$5_1 >> 2] | 0;
    $11_1 = $6_1;
    }
    $757($8_1 | 0, $11_1 | 0, $2_1 | 0, $12_1 | 0) | 0;
    $6_1 = (HEAP32[$5_1 >> 2] | 0) + (($2_1 - $11_1 | 0) << 2 | 0) | 0;
    HEAP32[$5_1 >> 2] = $6_1;
    HEAP32[$4_1 >> 2] = ($1_1 | 0) == ($2_1 | 0) ? $6_1 : $3_1 + (($1_1 - $0_1 | 0) << 2 | 0) | 0;
    $1761($7_1 + 4 | 0 | 0) | 0;
    global$0 = $7_1 + 16 | 0;
  }
  
  function $833($0_1) {
    $0_1 = $0_1 | 0;
    $831($0_1 | 0, 0 | 0);
    return $0_1 | 0;
  }
  
  function $834($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi, $5_1, $5$hi) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $4$hi = $4$hi | 0;
    $5_1 = $5_1 | 0;
    $5$hi = $5$hi | 0;
    var i64toi32_i32$0 = 0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$0 = $4$hi;
    return $835($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, $5_1 | 0, $5$hi | 0, 66330 | 0) | 0 | 0;
  }
  
  function $835($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi, $5_1, $5$hi, $6_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $4$hi = $4$hi | 0;
    $5_1 = $5_1 | 0;
    $5$hi = $5$hi | 0;
    $6_1 = $6_1 | 0;
    var $7_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $9_1 = 0, $8_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0;
    $7_1 = global$0 - 416 | 0;
    global$0 = $7_1;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$0 = 0;
    HEAP32[($7_1 + 408 | 0) >> 2] = 37;
    HEAP32[($7_1 + 412 | 0) >> 2] = i64toi32_i32$0;
    $8_1 = $796($7_1 + 408 | 0 | 1 | 0 | 0, $6_1 | 0, $196($2_1 | 0) | 0 | 0) | 0;
    HEAP32[($7_1 + 364 | 0) >> 2] = $7_1 + 368 | 0;
    $6_1 = $718() | 0;
    label$1 : {
    label$2 : {
      if (!$8_1) {
      break label$2
      }
      $9_1 = $797($2_1 | 0) | 0;
      i64toi32_i32$0 = $5$hi;
      i64toi32_i32$1 = $7_1 + 64 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $5_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$1 = $7_1;
      HEAP32[($7_1 + 56 | 0) >> 2] = $4_1;
      HEAP32[($7_1 + 60 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[($7_1 + 48 | 0) >> 2] = $9_1;
      $6_1 = $784($7_1 + 368 | 0 | 0, 30 | 0, $6_1 | 0, $7_1 + 408 | 0 | 0, $7_1 + 48 | 0 | 0) | 0;
      break label$1;
    }
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$1 = $7_1;
    HEAP32[($7_1 + 80 | 0) >> 2] = $4_1;
    HEAP32[($7_1 + 84 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$1 = $7_1;
    HEAP32[($7_1 + 88 | 0) >> 2] = $5_1;
    HEAP32[($7_1 + 92 | 0) >> 2] = i64toi32_i32$0;
    $6_1 = $784($7_1 + 368 | 0 | 0, 30 | 0, $6_1 | 0, $7_1 + 408 | 0 | 0, $7_1 + 80 | 0 | 0) | 0;
    }
    HEAP32[($7_1 + 128 | 0) >> 2] = 94;
    $10_1 = $798($7_1 + 356 | 0 | 0, 0 | 0, $7_1 + 128 | 0 | 0) | 0;
    $9_1 = $7_1 + 368 | 0;
    label$3 : {
    label$4 : {
      if (($6_1 | 0) < (30 | 0)) {
      break label$4
      }
      $6_1 = $718() | 0;
      label$5 : {
      label$6 : {
        if (!$8_1) {
        break label$6
        }
        $9_1 = $797($2_1 | 0) | 0;
        i64toi32_i32$0 = $5$hi;
        i64toi32_i32$1 = $7_1 + 16 | 0;
        HEAP32[i64toi32_i32$1 >> 2] = $5_1;
        HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
        i64toi32_i32$0 = $4$hi;
        i64toi32_i32$1 = $7_1;
        HEAP32[($7_1 + 8 | 0) >> 2] = $4_1;
        HEAP32[($7_1 + 12 | 0) >> 2] = i64toi32_i32$0;
        HEAP32[$7_1 >> 2] = $9_1;
        $6_1 = $799($7_1 + 364 | 0 | 0, $6_1 | 0, $7_1 + 408 | 0 | 0, $7_1 | 0) | 0;
        break label$5;
      }
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$1 = $7_1;
      HEAP32[($7_1 + 32 | 0) >> 2] = $4_1;
      HEAP32[($7_1 + 36 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$0 = $5$hi;
      i64toi32_i32$1 = $7_1;
      HEAP32[($7_1 + 40 | 0) >> 2] = $5_1;
      HEAP32[($7_1 + 44 | 0) >> 2] = i64toi32_i32$0;
      $6_1 = $799($7_1 + 364 | 0 | 0, $6_1 | 0, $7_1 + 408 | 0 | 0, $7_1 + 32 | 0 | 0) | 0;
      }
      if (($6_1 | 0) == (-1 | 0)) {
      break label$3
      }
      $800($10_1 | 0, HEAP32[($7_1 + 364 | 0) >> 2] | 0 | 0);
      $9_1 = HEAP32[($7_1 + 364 | 0) >> 2] | 0;
    }
    $11_1 = $9_1 + $6_1 | 0;
    $12_1 = $785($9_1 | 0, $11_1 | 0, $2_1 | 0) | 0;
    HEAP32[($7_1 + 128 | 0) >> 2] = 94;
    $9_1 = $830($7_1 + 120 | 0 | 0, 0 | 0, $7_1 + 128 | 0 | 0) | 0;
    label$7 : {
      label$8 : {
      $8_1 = HEAP32[($7_1 + 364 | 0) >> 2] | 0;
      if (($8_1 | 0) != ($7_1 + 368 | 0 | 0)) {
        break label$8
      }
      $6_1 = $7_1 + 128 | 0;
      break label$7;
      }
      $6_1 = $126($6_1 << 3 | 0 | 0) | 0;
      if (!$6_1) {
      break label$3
      }
      $831($9_1 | 0, $6_1 | 0);
      $8_1 = HEAP32[($7_1 + 364 | 0) >> 2] | 0;
    }
    $439($7_1 + 108 | 0 | 0, $2_1 | 0);
    $832($8_1 | 0, $12_1 | 0, $11_1 | 0, $6_1 | 0, $7_1 + 116 | 0 | 0, $7_1 + 112 | 0 | 0, $7_1 + 108 | 0 | 0);
    $668($7_1 + 108 | 0 | 0) | 0;
    $2_1 = $821($1_1 | 0, $6_1 | 0, HEAP32[($7_1 + 116 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 112 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
    $833($9_1 | 0) | 0;
    $802($10_1 | 0) | 0;
    global$0 = $7_1 + 416 | 0;
    return $2_1 | 0;
    }
    $1755();
    wasm2js_trap();
  }
  
  function $836($0_1, $1_1, $2_1, $3_1, $4_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    var $5_1 = 0, $7_1 = 0, $6_1 = 0, $8_1 = 0;
    $5_1 = global$0 - 208 | 0;
    global$0 = $5_1;
    $6_1 = $718() | 0;
    HEAP32[$5_1 >> 2] = $4_1;
    $7_1 = $784($5_1 + 176 | 0 | 0, 20 | 0, $6_1 | 0, 65978 | 0, $5_1 | 0) | 0;
    $4_1 = ($5_1 + 176 | 0) + $7_1 | 0;
    $6_1 = $785($5_1 + 176 | 0 | 0, $4_1 | 0, $2_1 | 0) | 0;
    $439($5_1 + 16 | 0 | 0, $2_1 | 0);
    $8_1 = $261($5_1 + 16 | 0 | 0) | 0;
    $668($5_1 + 16 | 0 | 0) | 0;
    $757($8_1 | 0, $5_1 + 176 | 0 | 0, $4_1 | 0, $5_1 + 16 | 0 | 0) | 0;
    $7_1 = ($5_1 + 16 | 0) + ($7_1 << 2 | 0) | 0;
    $2_1 = $821($1_1 | 0, $5_1 + 16 | 0 | 0, (($6_1 | 0) == ($4_1 | 0) ? $7_1 : ($5_1 + 16 | 0) + (($6_1 - ($5_1 + 176 | 0) | 0) << 2 | 0) | 0) | 0, $7_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
    global$0 = $5_1 + 208 | 0;
    return $2_1 | 0;
  }
  
  function $837($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    $0_1 = $664($0_1 | 0, $3_1 + 15 | 0 | 0, $3_1 + 14 | 0 | 0) | 0;
    $1783($0_1 | 0, $1_1 | 0, $2_1 | 0);
    global$0 = $3_1 + 16 | 0;
    return $0_1 | 0;
  }
  
  function $838($0_1) {
    $0_1 = $0_1 | 0;
    return $374($815($0_1 | 0) | 0 | 0) | 0 | 0;
  }
  
  function $839($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $840($0_1 | 0, $1_1 | 0);
  }
  
  function $840($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1495($0_1 | 0, $1_1 | 0);
  }
  
  function $841($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $842($0_1 | 0, $1_1 | 0);
  }
  
  function $842($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1498($0_1 | 0, $1_1 | 0);
  }
  
  function $843($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $6_1 = $6_1 | 0;
    $7_1 = $7_1 | 0;
    var $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
    $8_1 = global$0 - 16 | 0;
    global$0 = $8_1;
    HEAP32[($8_1 + 8 | 0) >> 2] = $2_1;
    HEAP32[($8_1 + 12 | 0) >> 2] = $1_1;
    $439($8_1 + 4 | 0 | 0, $3_1 | 0);
    $2_1 = $197($8_1 + 4 | 0 | 0) | 0;
    $668($8_1 + 4 | 0 | 0) | 0;
    HEAP32[$4_1 >> 2] = 0;
    $1_1 = 0;
    label$1 : {
    label$2 : while (1) {
      if (($6_1 | 0) == ($7_1 | 0)) {
      break label$1
      }
      if ($1_1) {
      break label$1
      }
      label$3 : {
      if ($198($8_1 + 12 | 0 | 0, $8_1 + 8 | 0 | 0) | 0) {
        break label$3
      }
      label$4 : {
        label$5 : {
        if (($844($2_1 | 0, HEAP8[$6_1 >> 0] | 0 | 0, 0 | 0) | 0 | 0) != (37 | 0)) {
          break label$5
        }
        $1_1 = $6_1 + 1 | 0;
        if (($1_1 | 0) == ($7_1 | 0)) {
          break label$3
        }
        $9_1 = 0;
        label$6 : {
          label$7 : {
          $1_1 = $844($2_1 | 0, HEAP8[$1_1 >> 0] | 0 | 0, 0 | 0) | 0;
          if (($1_1 | 0) == (69 | 0)) {
            break label$7
          }
          $10_1 = 1;
          if (($1_1 & 255 | 0 | 0) == (48 | 0)) {
            break label$7
          }
          $11_1 = $1_1;
          break label$6;
          }
          $9_1 = $6_1 + 2 | 0;
          if (($9_1 | 0) == ($7_1 | 0)) {
          break label$3
          }
          $10_1 = 2;
          $11_1 = $844($2_1 | 0, HEAP8[$9_1 >> 0] | 0 | 0, 0 | 0) | 0;
          $9_1 = $1_1;
        }
        HEAP32[($8_1 + 12 | 0) >> 2] = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1, HEAP32[($8_1 + 12 | 0) >> 2] | 0, HEAP32[($8_1 + 8 | 0) >> 2] | 0, $3_1, $4_1, $5_1, $11_1, $9_1) | 0;
        $6_1 = ($6_1 + $10_1 | 0) + 1 | 0;
        break label$4;
        }
        label$8 : {
        if (!($200($2_1 | 0, 1 | 0, HEAP8[$6_1 >> 0] | 0 | 0) | 0)) {
          break label$8
        }
        label$9 : {
          label$10 : while (1) {
          $6_1 = $6_1 + 1 | 0;
          if (($6_1 | 0) == ($7_1 | 0)) {
            break label$9
          }
          if ($200($2_1 | 0, 1 | 0, HEAP8[$6_1 >> 0] | 0 | 0) | 0) {
            continue label$10
          }
          break label$10;
          };
        }
        label$11 : while (1) {
          if ($198($8_1 + 12 | 0 | 0, $8_1 + 8 | 0 | 0) | 0) {
          break label$4
          }
          if (!($200($2_1 | 0, 1 | 0, $199($8_1 + 12 | 0 | 0) | 0 | 0) | 0)) {
          break label$4
          }
          $201($8_1 + 12 | 0 | 0) | 0;
          continue label$11;
        };
        }
        label$12 : {
        if (($677($2_1 | 0, $199($8_1 + 12 | 0 | 0) | 0 | 0) | 0 | 0) != ($677($2_1 | 0, HEAP8[$6_1 >> 0] | 0 | 0) | 0 | 0)) {
          break label$12
        }
        $6_1 = $6_1 + 1 | 0;
        $201($8_1 + 12 | 0 | 0) | 0;
        break label$4;
        }
        HEAP32[$4_1 >> 2] = 4;
      }
      $1_1 = HEAP32[$4_1 >> 2] | 0;
      continue label$2;
      }
      break label$2;
    };
    HEAP32[$4_1 >> 2] = 4;
    }
    label$13 : {
    if (!($198($8_1 + 12 | 0 | 0, $8_1 + 8 | 0 | 0) | 0)) {
      break label$13
    }
    HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
    }
    $6_1 = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
    global$0 = $8_1 + 16 | 0;
    return $6_1 | 0;
  }
  
  function $844($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1) | 0 | 0;
  }
  
  function $845($0_1) {
    $0_1 = $0_1 | 0;
    return 2 | 0;
  }
  
  function $846($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    var $6_1 = 0;
    $6_1 = global$0 - 16 | 0;
    global$0 = $6_1;
    HEAP32[($6_1 + 8 | 0) >> 2] = 624576549;
    HEAP32[($6_1 + 12 | 0) >> 2] = 1394948685;
    $5_1 = $843($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $6_1 + 8 | 0 | 0, $6_1 + 16 | 0 | 0) | 0;
    global$0 = $6_1 + 16 | 0;
    return $5_1 | 0;
  }
  
  function $847($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    var $6_1 = 0;
    $6_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
    return $843($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $308($6_1 | 0) | 0 | 0, ($308($6_1 | 0) | 0) + ($309($6_1 | 0) | 0) | 0 | 0) | 0 | 0;
  }
  
  function $848($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    var $6_1 = 0;
    $6_1 = global$0 - 16 | 0;
    global$0 = $6_1;
    HEAP32[($6_1 + 12 | 0) >> 2] = $1_1;
    $439($6_1 + 8 | 0 | 0, $3_1 | 0);
    $1_1 = $197($6_1 + 8 | 0 | 0) | 0;
    $668($6_1 + 8 | 0 | 0) | 0;
    $849($0_1 | 0, $5_1 + 24 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $1_1 | 0);
    $1_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
    global$0 = $6_1 + 16 | 0;
    return $1_1 | 0;
  }
  
  function $849($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    label$1 : {
    $0_1 = FUNCTION_TABLE[HEAP32[(HEAP32[($0_1 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
    $0_1 = ($672($2_1 | 0, $3_1 | 0, $0_1 | 0, $0_1 + 168 | 0 | 0, $5_1 | 0, $4_1 | 0, 0 | 0) | 0) - $0_1 | 0;
    if (($0_1 | 0) > (167 | 0)) {
      break label$1
    }
    HEAP32[$1_1 >> 2] = (($0_1 | 0) / (12 | 0) | 0 | 0) % (7 | 0) | 0;
    }
  }
  
  function $850($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    var $6_1 = 0;
    $6_1 = global$0 - 16 | 0;
    global$0 = $6_1;
    HEAP32[($6_1 + 12 | 0) >> 2] = $1_1;
    $439($6_1 + 8 | 0 | 0, $3_1 | 0);
    $1_1 = $197($6_1 + 8 | 0 | 0) | 0;
    $668($6_1 + 8 | 0 | 0) | 0;
    $851($0_1 | 0, $5_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $1_1 | 0);
    $1_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
    global$0 = $6_1 + 16 | 0;
    return $1_1 | 0;
  }
  
  function $851($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    label$1 : {
    $0_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
    $0_1 = ($672($2_1 | 0, $3_1 | 0, $0_1 | 0, $0_1 + 288 | 0 | 0, $5_1 | 0, $4_1 | 0, 0 | 0) | 0) - $0_1 | 0;
    if (($0_1 | 0) > (287 | 0)) {
      break label$1
    }
    HEAP32[$1_1 >> 2] = (($0_1 | 0) / (12 | 0) | 0 | 0) % (12 | 0) | 0;
    }
  }
  
  function $852($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    var $6_1 = 0;
    $6_1 = global$0 - 16 | 0;
    global$0 = $6_1;
    HEAP32[($6_1 + 12 | 0) >> 2] = $1_1;
    $439($6_1 + 8 | 0 | 0, $3_1 | 0);
    $1_1 = $197($6_1 + 8 | 0 | 0) | 0;
    $668($6_1 + 8 | 0 | 0) | 0;
    $853($0_1 | 0, $5_1 + 20 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $1_1 | 0);
    $1_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
    global$0 = $6_1 + 16 | 0;
    return $1_1 | 0;
  }
  
  function $853($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $5_1 = $854($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 4 | 0) | 0;
    label$1 : {
    if ((HEAPU8[$4_1 >> 0] | 0) & 4 | 0) {
      break label$1
    }
    HEAP32[$1_1 >> 2] = (($5_1 | 0) < (69 | 0) ? $5_1 + 2e3 | 0 : $5_1 >>> 0 < 100 >>> 0 ? $5_1 + 1900 | 0 : $5_1) + -1900 | 0;
    }
  }
  
  function $854($0_1, $1_1, $2_1, $3_1, $4_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    var $5_1 = 0, $6_1 = 0;
    $5_1 = global$0 - 16 | 0;
    global$0 = $5_1;
    HEAP32[($5_1 + 12 | 0) >> 2] = $1_1;
    $1_1 = 0;
    label$1 : {
    label$2 : {
      label$3 : {
      if (!($198($0_1 | 0, $5_1 + 12 | 0 | 0) | 0)) {
        break label$3
      }
      $0_1 = 6;
      break label$2;
      }
      label$4 : {
      $6_1 = $199($0_1 | 0) | 0;
      if ($200($3_1 | 0, 64 | 0, $6_1 | 0) | 0) {
        break label$4
      }
      $0_1 = 4;
      break label$2;
      }
      $1_1 = $844($3_1 | 0, $6_1 | 0, 0 | 0) | 0;
      label$5 : {
      label$6 : while (1) {
        $201($0_1 | 0) | 0;
        $1_1 = $1_1 + -48 | 0;
        if ($198($0_1 | 0, $5_1 + 12 | 0 | 0) | 0) {
        break label$5
        }
        if (($4_1 | 0) < (2 | 0)) {
        break label$5
        }
        $6_1 = $199($0_1 | 0) | 0;
        if (!($200($3_1 | 0, 64 | 0, $6_1 | 0) | 0)) {
        break label$1
        }
        $4_1 = $4_1 + -1 | 0;
        $1_1 = Math_imul($1_1, 10) + ($844($3_1 | 0, $6_1 | 0, 0 | 0) | 0) | 0;
        continue label$6;
      };
      }
      if (!($198($0_1 | 0, $5_1 + 12 | 0 | 0) | 0)) {
      break label$1
      }
      $0_1 = 2;
    }
    HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] | 0 | $0_1 | 0;
    }
    global$0 = $5_1 + 16 | 0;
    return $1_1 | 0;
  }
  
  function $855($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $6_1 = $6_1 | 0;
    $7_1 = $7_1 | 0;
    var $8_1 = 0, $9_1 = 0, $13_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $151_1 = 0;
    $8_1 = global$0 - 16 | 0;
    global$0 = $8_1;
    HEAP32[($8_1 + 12 | 0) >> 2] = $1_1;
    HEAP32[$4_1 >> 2] = 0;
    $439($8_1 | 0, $3_1 | 0);
    $9_1 = $197($8_1 | 0) | 0;
    $668($8_1 | 0) | 0;
    label$1 : {
    label$2 : {
      label$3 : {
      label$4 : {
        switch ($6_1 + -65 | 0 | 0) {
        case 0:
        case 32:
        $849($0_1 | 0, $5_1 + 24 | 0 | 0, $8_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
        break label$2;
        case 1:
        case 33:
        case 39:
        $851($0_1 | 0, $5_1 + 16 | 0 | 0, $8_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
        break label$2;
        case 34:
        $1_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
        HEAP32[($8_1 + 12 | 0) >> 2] = $843($0_1 | 0, HEAP32[($8_1 + 12 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $308($1_1 | 0) | 0 | 0, ($308($1_1 | 0) | 0) + ($309($1_1 | 0) | 0) | 0 | 0) | 0;
        break label$2;
        case 35:
        case 36:
        $856($0_1 | 0, $5_1 + 12 | 0 | 0, $8_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
        break label$2;
        case 3:
        i64toi32_i32$1 = $8_1;
        i64toi32_i32$0 = 2032480100;
        HEAP32[$8_1 >> 2] = 623865125;
        HEAP32[($8_1 + 4 | 0) >> 2] = i64toi32_i32$0;
        HEAP32[($8_1 + 12 | 0) >> 2] = $843($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 | 0, $8_1 + 8 | 0 | 0) | 0;
        break label$2;
        case 5:
        i64toi32_i32$1 = $8_1;
        i64toi32_i32$0 = 1680158061;
        HEAP32[$8_1 >> 2] = 623728933;
        HEAP32[($8_1 + 4 | 0) >> 2] = i64toi32_i32$0;
        HEAP32[($8_1 + 12 | 0) >> 2] = $843($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 | 0, $8_1 + 8 | 0 | 0) | 0;
        break label$2;
        case 7:
        $857($0_1 | 0, $5_1 + 8 | 0 | 0, $8_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
        break label$2;
        case 8:
        $858($0_1 | 0, $5_1 + 8 | 0 | 0, $8_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
        break label$2;
        case 41:
        $859($0_1 | 0, $5_1 + 28 | 0 | 0, $8_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
        break label$2;
        case 44:
        $860($0_1 | 0, $5_1 + 16 | 0 | 0, $8_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
        break label$2;
        case 12:
        $861($0_1 | 0, $5_1 + 4 | 0 | 0, $8_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
        break label$2;
        case 45:
        case 51:
        $862($0_1 | 0, $8_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
        break label$2;
        case 47:
        $863($0_1 | 0, $5_1 + 8 | 0 | 0, $8_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
        break label$2;
        case 49:
        $14_1 = 0;
        $15_1 = HEAPU8[($14_1 + 74376 | 0) >> 0] | 0 | ((HEAPU8[($14_1 + 74377 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($14_1 + 74378 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($14_1 + 74379 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
        HEAP8[($8_1 + 7 | 0) >> 0] = $15_1;
        HEAP8[($8_1 + 8 | 0) >> 0] = $15_1 >>> 8 | 0;
        HEAP8[($8_1 + 9 | 0) >> 0] = $15_1 >>> 16 | 0;
        HEAP8[($8_1 + 10 | 0) >> 0] = $15_1 >>> 24 | 0;
        $13_1 = 0;
        i64toi32_i32$0 = HEAPU8[($13_1 + 74369 | 0) >> 0] | 0 | ((HEAPU8[($13_1 + 74370 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($13_1 + 74371 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($13_1 + 74372 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
        i64toi32_i32$1 = HEAPU8[($13_1 + 74373 | 0) >> 0] | 0 | ((HEAPU8[($13_1 + 74374 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($13_1 + 74375 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($13_1 + 74376 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
        $151_1 = i64toi32_i32$0;
        i64toi32_i32$0 = $8_1;
        HEAP32[$8_1 >> 2] = $151_1;
        HEAP32[($8_1 + 4 | 0) >> 2] = i64toi32_i32$1;
        HEAP32[($8_1 + 12 | 0) >> 2] = $843($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 | 0, $8_1 + 11 | 0 | 0) | 0;
        break label$2;
        case 17:
        HEAP8[($8_1 + 4 | 0) >> 0] = HEAPU8[(0 + 74384 | 0) >> 0] | 0;
        $16_1 = 0;
        HEAP32[$8_1 >> 2] = HEAPU8[($16_1 + 74380 | 0) >> 0] | 0 | ((HEAPU8[($16_1 + 74381 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($16_1 + 74382 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($16_1 + 74383 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
        HEAP32[($8_1 + 12 | 0) >> 2] = $843($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 | 0, $8_1 + 5 | 0 | 0) | 0;
        break label$2;
        case 18:
        $864($0_1 | 0, $5_1 | 0, $8_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
        break label$2;
        case 19:
        i64toi32_i32$0 = $8_1;
        i64toi32_i32$1 = 1394948685;
        HEAP32[$8_1 >> 2] = 624576549;
        HEAP32[($8_1 + 4 | 0) >> 2] = i64toi32_i32$1;
        HEAP32[($8_1 + 12 | 0) >> 2] = $843($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 | 0, $8_1 + 8 | 0 | 0) | 0;
        break label$2;
        case 54:
        $865($0_1 | 0, $5_1 + 24 | 0 | 0, $8_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
        break label$2;
        case 55:
        $4_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) | 0;
        break label$1;
        case 23:
        $1_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
        HEAP32[($8_1 + 12 | 0) >> 2] = $843($0_1 | 0, HEAP32[($8_1 + 12 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $308($1_1 | 0) | 0 | 0, ($308($1_1 | 0) | 0) + ($309($1_1 | 0) | 0) | 0 | 0) | 0;
        break label$2;
        case 56:
        $853($0_1 | 0, $5_1 + 20 | 0 | 0, $8_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
        break label$2;
        case 24:
        $866($0_1 | 0, $5_1 + 20 | 0 | 0, $8_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
        break label$2;
        default:
        if (($6_1 | 0) == (37 | 0)) {
          break label$3
        }
        break;
        case 2:
        case 4:
        case 6:
        case 9:
        case 10:
        case 11:
        case 13:
        case 14:
        case 15:
        case 16:
        case 20:
        case 21:
        case 22:
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 31:
        case 37:
        case 38:
        case 40:
        case 42:
        case 43:
        case 46:
        case 48:
        case 50:
        case 52:
        case 53:
        break label$4;
        };
      }
      HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 4 | 0;
      break label$2;
      }
      $867($0_1 | 0, $8_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
    }
    $4_1 = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
    }
    global$0 = $8_1 + 16 | 0;
    return $4_1 | 0;
  }
  
  function $856($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $5_1 = $854($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
    $3_1 = HEAP32[$4_1 >> 2] | 0;
    label$1 : {
    if (($5_1 + -1 | 0) >>> 0 > 30 >>> 0) {
      break label$1
    }
    if ($3_1 & 4 | 0) {
      break label$1
    }
    HEAP32[$1_1 >> 2] = $5_1;
    return;
    }
    HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
  }
  
  function $857($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $5_1 = $854($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
    $3_1 = HEAP32[$4_1 >> 2] | 0;
    label$1 : {
    if (($5_1 | 0) > (23 | 0)) {
      break label$1
    }
    if ($3_1 & 4 | 0) {
      break label$1
    }
    HEAP32[$1_1 >> 2] = $5_1;
    return;
    }
    HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
  }
  
  function $858($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $5_1 = $854($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
    $3_1 = HEAP32[$4_1 >> 2] | 0;
    label$1 : {
    if (($5_1 + -1 | 0) >>> 0 > 11 >>> 0) {
      break label$1
    }
    if ($3_1 & 4 | 0) {
      break label$1
    }
    HEAP32[$1_1 >> 2] = $5_1;
    return;
    }
    HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
  }
  
  function $859($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $5_1 = $854($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 3 | 0) | 0;
    $3_1 = HEAP32[$4_1 >> 2] | 0;
    label$1 : {
    if (($5_1 | 0) > (365 | 0)) {
      break label$1
    }
    if ($3_1 & 4 | 0) {
      break label$1
    }
    HEAP32[$1_1 >> 2] = $5_1;
    return;
    }
    HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
  }
  
  function $860($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $3_1 = $854($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
    $5_1 = HEAP32[$4_1 >> 2] | 0;
    label$1 : {
    $3_1 = $3_1 + -1 | 0;
    if ($3_1 >>> 0 > 11 >>> 0) {
      break label$1
    }
    if ($5_1 & 4 | 0) {
      break label$1
    }
    HEAP32[$1_1 >> 2] = $3_1;
    return;
    }
    HEAP32[$4_1 >> 2] = $5_1 | 4 | 0;
  }
  
  function $861($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $5_1 = $854($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
    $3_1 = HEAP32[$4_1 >> 2] | 0;
    label$1 : {
    if (($5_1 | 0) > (59 | 0)) {
      break label$1
    }
    if ($3_1 & 4 | 0) {
      break label$1
    }
    HEAP32[$1_1 >> 2] = $5_1;
    return;
    }
    HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
  }
  
  function $862($0_1, $1_1, $2_1, $3_1, $4_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    var $5_1 = 0;
    $5_1 = global$0 - 16 | 0;
    global$0 = $5_1;
    HEAP32[($5_1 + 12 | 0) >> 2] = $2_1;
    label$1 : {
    label$2 : while (1) {
      if ($198($1_1 | 0, $5_1 + 12 | 0 | 0) | 0) {
      break label$1
      }
      if (!($200($4_1 | 0, 1 | 0, $199($1_1 | 0) | 0 | 0) | 0)) {
      break label$1
      }
      $201($1_1 | 0) | 0;
      continue label$2;
    };
    }
    label$3 : {
    if (!($198($1_1 | 0, $5_1 + 12 | 0 | 0) | 0)) {
      break label$3
    }
    HEAP32[$3_1 >> 2] = HEAP32[$3_1 >> 2] | 0 | 2 | 0;
    }
    global$0 = $5_1 + 16 | 0;
  }
  
  function $863($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    label$1 : {
    $0_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
    if (($309($0_1 | 0) | 0 | 0) != (0 - ($309($0_1 + 12 | 0 | 0) | 0) | 0 | 0)) {
      break label$1
    }
    HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 4 | 0;
    return;
    }
    $4_1 = $672($2_1 | 0, $3_1 | 0, $0_1 | 0, $0_1 + 24 | 0 | 0, $5_1 | 0, $4_1 | 0, 0 | 0) | 0;
    $5_1 = HEAP32[$1_1 >> 2] | 0;
    label$2 : {
    if (($4_1 | 0) != ($0_1 | 0)) {
      break label$2
    }
    if (($5_1 | 0) != (12 | 0)) {
      break label$2
    }
    HEAP32[$1_1 >> 2] = 0;
    return;
    }
    label$3 : {
    if (($4_1 - $0_1 | 0 | 0) != (12 | 0)) {
      break label$3
    }
    if (($5_1 | 0) > (11 | 0)) {
      break label$3
    }
    HEAP32[$1_1 >> 2] = $5_1 + 12 | 0;
    }
  }
  
  function $864($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $5_1 = $854($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
    $3_1 = HEAP32[$4_1 >> 2] | 0;
    label$1 : {
    if (($5_1 | 0) > (60 | 0)) {
      break label$1
    }
    if ($3_1 & 4 | 0) {
      break label$1
    }
    HEAP32[$1_1 >> 2] = $5_1;
    return;
    }
    HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
  }
  
  function $865($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $5_1 = $854($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 1 | 0) | 0;
    $3_1 = HEAP32[$4_1 >> 2] | 0;
    label$1 : {
    if (($5_1 | 0) > (6 | 0)) {
      break label$1
    }
    if ($3_1 & 4 | 0) {
      break label$1
    }
    HEAP32[$1_1 >> 2] = $5_1;
    return;
    }
    HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
  }
  
  function $866($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $5_1 = $854($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 4 | 0) | 0;
    label$1 : {
    if ((HEAPU8[$4_1 >> 0] | 0) & 4 | 0) {
      break label$1
    }
    HEAP32[$1_1 >> 2] = $5_1 + -1900 | 0;
    }
  }
  
  function $867($0_1, $1_1, $2_1, $3_1, $4_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    var $5_1 = 0;
    $5_1 = global$0 - 16 | 0;
    global$0 = $5_1;
    HEAP32[($5_1 + 12 | 0) >> 2] = $2_1;
    label$1 : {
    label$2 : {
      label$3 : {
      if (!($198($1_1 | 0, $5_1 + 12 | 0 | 0) | 0)) {
        break label$3
      }
      $1_1 = 6;
      break label$2;
      }
      label$4 : {
      if (($844($4_1 | 0, $199($1_1 | 0) | 0 | 0, 0 | 0) | 0 | 0) == (37 | 0)) {
        break label$4
      }
      $1_1 = 4;
      break label$2;
      }
      if (!($198($201($1_1 | 0) | 0 | 0, $5_1 + 12 | 0 | 0) | 0)) {
      break label$1
      }
      $1_1 = 2;
    }
    HEAP32[$3_1 >> 2] = HEAP32[$3_1 >> 2] | 0 | $1_1 | 0;
    }
    global$0 = $5_1 + 16 | 0;
  }
  
  function $868($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $6_1 = $6_1 | 0;
    $7_1 = $7_1 | 0;
    var $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
    $8_1 = global$0 - 16 | 0;
    global$0 = $8_1;
    HEAP32[($8_1 + 8 | 0) >> 2] = $2_1;
    HEAP32[($8_1 + 12 | 0) >> 2] = $1_1;
    $439($8_1 + 4 | 0 | 0, $3_1 | 0);
    $2_1 = $261($8_1 + 4 | 0 | 0) | 0;
    $668($8_1 + 4 | 0 | 0) | 0;
    HEAP32[$4_1 >> 2] = 0;
    $1_1 = 0;
    label$1 : {
    label$2 : while (1) {
      if (($6_1 | 0) == ($7_1 | 0)) {
      break label$1
      }
      if ($1_1) {
      break label$1
      }
      label$3 : {
      if ($262($8_1 + 12 | 0 | 0, $8_1 + 8 | 0 | 0) | 0) {
        break label$3
      }
      label$4 : {
        label$5 : {
        if (($869($2_1 | 0, HEAP32[$6_1 >> 2] | 0 | 0, 0 | 0) | 0 | 0) != (37 | 0)) {
          break label$5
        }
        $1_1 = $6_1 + 4 | 0;
        if (($1_1 | 0) == ($7_1 | 0)) {
          break label$3
        }
        $9_1 = 0;
        label$6 : {
          label$7 : {
          $1_1 = $869($2_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0, 0 | 0) | 0;
          if (($1_1 | 0) == (69 | 0)) {
            break label$7
          }
          $10_1 = 4;
          if (($1_1 & 255 | 0 | 0) == (48 | 0)) {
            break label$7
          }
          $11_1 = $1_1;
          break label$6;
          }
          $9_1 = $6_1 + 8 | 0;
          if (($9_1 | 0) == ($7_1 | 0)) {
          break label$3
          }
          $10_1 = 8;
          $11_1 = $869($2_1 | 0, HEAP32[$9_1 >> 2] | 0 | 0, 0 | 0) | 0;
          $9_1 = $1_1;
        }
        HEAP32[($8_1 + 12 | 0) >> 2] = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1, HEAP32[($8_1 + 12 | 0) >> 2] | 0, HEAP32[($8_1 + 8 | 0) >> 2] | 0, $3_1, $4_1, $5_1, $11_1, $9_1) | 0;
        $6_1 = ($6_1 + $10_1 | 0) + 4 | 0;
        break label$4;
        }
        label$8 : {
        if (!($264($2_1 | 0, 1 | 0, HEAP32[$6_1 >> 2] | 0 | 0) | 0)) {
          break label$8
        }
        label$9 : {
          label$10 : while (1) {
          $6_1 = $6_1 + 4 | 0;
          if (($6_1 | 0) == ($7_1 | 0)) {
            break label$9
          }
          if ($264($2_1 | 0, 1 | 0, HEAP32[$6_1 >> 2] | 0 | 0) | 0) {
            continue label$10
          }
          break label$10;
          };
        }
        label$11 : while (1) {
          if ($262($8_1 + 12 | 0 | 0, $8_1 + 8 | 0 | 0) | 0) {
          break label$4
          }
          if (!($264($2_1 | 0, 1 | 0, $263($8_1 + 12 | 0 | 0) | 0 | 0) | 0)) {
          break label$4
          }
          $265($8_1 + 12 | 0 | 0) | 0;
          continue label$11;
        };
        }
        label$12 : {
        if (($729($2_1 | 0, $263($8_1 + 12 | 0 | 0) | 0 | 0) | 0 | 0) != ($729($2_1 | 0, HEAP32[$6_1 >> 2] | 0 | 0) | 0 | 0)) {
          break label$12
        }
        $6_1 = $6_1 + 4 | 0;
        $265($8_1 + 12 | 0 | 0) | 0;
        break label$4;
        }
        HEAP32[$4_1 >> 2] = 4;
      }
      $1_1 = HEAP32[$4_1 >> 2] | 0;
      continue label$2;
      }
      break label$2;
    };
    HEAP32[$4_1 >> 2] = 4;
    }
    label$13 : {
    if (!($262($8_1 + 12 | 0 | 0, $8_1 + 8 | 0 | 0) | 0)) {
      break label$13
    }
    HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
    }
    $6_1 = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
    global$0 = $8_1 + 16 | 0;
    return $6_1 | 0;
  }
  
  function $869($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1) | 0 | 0;
  }
  
  function $870($0_1) {
    $0_1 = $0_1 | 0;
    return 2 | 0;
  }
  
  function $871($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $6_1 = 0, $12_1 = 0, $15_1 = 0, $17_1 = 0, $19_1 = 0;
    $6_1 = global$0 - 32 | 0;
    global$0 = $6_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 74568 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 74572 | 0) >> 2] | 0;
    $12_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $6_1 + 24 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $12_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 74560 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 74564 | 0) >> 2] | 0;
    $15_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $6_1 + 16 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $15_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 74552 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 74556 | 0) >> 2] | 0;
    $17_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $6_1;
    HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $17_1;
    HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 74544 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 74548 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $6_1;
    HEAP32[i64toi32_i32$1 >> 2] = $19_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $5_1 = $868($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$1 + 32 | 0 | 0) | 0;
    global$0 = i64toi32_i32$1 + 32 | 0;
    return $5_1 | 0;
  }
  
  function $872($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    var $6_1 = 0;
    $6_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
    return $868($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $873($6_1 | 0) | 0 | 0, ($873($6_1 | 0) | 0) + (($730($6_1 | 0) | 0) << 2 | 0) | 0 | 0) | 0 | 0;
  }
  
  function $873($0_1) {
    $0_1 = $0_1 | 0;
    return $370($874($0_1 | 0) | 0 | 0) | 0 | 0;
  }
  
  function $874($0_1) {
    $0_1 = $0_1 | 0;
    label$1 : {
    if (!($875($0_1 | 0) | 0)) {
      break label$1
    }
    return $962($0_1 | 0) | 0 | 0;
    }
    return $1502($0_1 | 0) | 0 | 0;
  }
  
  function $875($0_1) {
    $0_1 = $0_1 | 0;
    return (HEAPU8[(($960($0_1 | 0) | 0) + 11 | 0) >> 0] | 0) >>> 7 | 0 | 0;
  }
  
  function $876($0_1) {
    $0_1 = $0_1 | 0;
    return HEAP32[(($960($0_1 | 0) | 0) + 4 | 0) >> 2] | 0 | 0;
  }
  
  function $877($0_1) {
    $0_1 = $0_1 | 0;
    return (HEAPU8[(($960($0_1 | 0) | 0) + 11 | 0) >> 0] | 0) & 127 | 0 | 0;
  }
  
  function $878($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    var $6_1 = 0;
    $6_1 = global$0 - 16 | 0;
    global$0 = $6_1;
    HEAP32[($6_1 + 12 | 0) >> 2] = $1_1;
    $439($6_1 + 8 | 0 | 0, $3_1 | 0);
    $1_1 = $261($6_1 + 8 | 0 | 0) | 0;
    $668($6_1 + 8 | 0 | 0) | 0;
    $879($0_1 | 0, $5_1 + 24 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $1_1 | 0);
    $1_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
    global$0 = $6_1 + 16 | 0;
    return $1_1 | 0;
  }
  
  function $879($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    label$1 : {
    $0_1 = FUNCTION_TABLE[HEAP32[(HEAP32[($0_1 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
    $0_1 = ($727($2_1 | 0, $3_1 | 0, $0_1 | 0, $0_1 + 168 | 0 | 0, $5_1 | 0, $4_1 | 0, 0 | 0) | 0) - $0_1 | 0;
    if (($0_1 | 0) > (167 | 0)) {
      break label$1
    }
    HEAP32[$1_1 >> 2] = (($0_1 | 0) / (12 | 0) | 0 | 0) % (7 | 0) | 0;
    }
  }
  
  function $880($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    var $6_1 = 0;
    $6_1 = global$0 - 16 | 0;
    global$0 = $6_1;
    HEAP32[($6_1 + 12 | 0) >> 2] = $1_1;
    $439($6_1 + 8 | 0 | 0, $3_1 | 0);
    $1_1 = $261($6_1 + 8 | 0 | 0) | 0;
    $668($6_1 + 8 | 0 | 0) | 0;
    $881($0_1 | 0, $5_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $1_1 | 0);
    $1_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
    global$0 = $6_1 + 16 | 0;
    return $1_1 | 0;
  }
  
  function $881($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    label$1 : {
    $0_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
    $0_1 = ($727($2_1 | 0, $3_1 | 0, $0_1 | 0, $0_1 + 288 | 0 | 0, $5_1 | 0, $4_1 | 0, 0 | 0) | 0) - $0_1 | 0;
    if (($0_1 | 0) > (287 | 0)) {
      break label$1
    }
    HEAP32[$1_1 >> 2] = (($0_1 | 0) / (12 | 0) | 0 | 0) % (12 | 0) | 0;
    }
  }
  
  function $882($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    var $6_1 = 0;
    $6_1 = global$0 - 16 | 0;
    global$0 = $6_1;
    HEAP32[($6_1 + 12 | 0) >> 2] = $1_1;
    $439($6_1 + 8 | 0 | 0, $3_1 | 0);
    $1_1 = $261($6_1 + 8 | 0 | 0) | 0;
    $668($6_1 + 8 | 0 | 0) | 0;
    $883($0_1 | 0, $5_1 + 20 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $1_1 | 0);
    $1_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
    global$0 = $6_1 + 16 | 0;
    return $1_1 | 0;
  }
  
  function $883($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $5_1 = $884($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 4 | 0) | 0;
    label$1 : {
    if ((HEAPU8[$4_1 >> 0] | 0) & 4 | 0) {
      break label$1
    }
    HEAP32[$1_1 >> 2] = (($5_1 | 0) < (69 | 0) ? $5_1 + 2e3 | 0 : $5_1 >>> 0 < 100 >>> 0 ? $5_1 + 1900 | 0 : $5_1) + -1900 | 0;
    }
  }
  
  function $884($0_1, $1_1, $2_1, $3_1, $4_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    var $5_1 = 0, $6_1 = 0;
    $5_1 = global$0 - 16 | 0;
    global$0 = $5_1;
    HEAP32[($5_1 + 12 | 0) >> 2] = $1_1;
    $1_1 = 0;
    label$1 : {
    label$2 : {
      label$3 : {
      if (!($262($0_1 | 0, $5_1 + 12 | 0 | 0) | 0)) {
        break label$3
      }
      $0_1 = 6;
      break label$2;
      }
      label$4 : {
      $6_1 = $263($0_1 | 0) | 0;
      if ($264($3_1 | 0, 64 | 0, $6_1 | 0) | 0) {
        break label$4
      }
      $0_1 = 4;
      break label$2;
      }
      $1_1 = $869($3_1 | 0, $6_1 | 0, 0 | 0) | 0;
      label$5 : {
      label$6 : while (1) {
        $265($0_1 | 0) | 0;
        $1_1 = $1_1 + -48 | 0;
        if ($262($0_1 | 0, $5_1 + 12 | 0 | 0) | 0) {
        break label$5
        }
        if (($4_1 | 0) < (2 | 0)) {
        break label$5
        }
        $6_1 = $263($0_1 | 0) | 0;
        if (!($264($3_1 | 0, 64 | 0, $6_1 | 0) | 0)) {
        break label$1
        }
        $4_1 = $4_1 + -1 | 0;
        $1_1 = Math_imul($1_1, 10) + ($869($3_1 | 0, $6_1 | 0, 0 | 0) | 0) | 0;
        continue label$6;
      };
      }
      if (!($262($0_1 | 0, $5_1 + 12 | 0 | 0) | 0)) {
      break label$1
      }
      $0_1 = 2;
    }
    HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] | 0 | $0_1 | 0;
    }
    global$0 = $5_1 + 16 | 0;
    return $1_1 | 0;
  }
  
  function $885($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $6_1 = $6_1 | 0;
    $7_1 = $7_1 | 0;
    var $8_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $9_1 = 0, $73_1 = 0, $76_1 = 0, $78_1 = 0, $80_1 = 0, $94_1 = 0, $97_1 = 0, $99_1 = 0, $101_1 = 0, $184_1 = 0, $186_1 = 0, $207_1 = 0, $210_1 = 0, $212_1 = 0, $214_1 = 0;
    $8_1 = global$0 - 48 | 0;
    global$0 = $8_1;
    HEAP32[($8_1 + 44 | 0) >> 2] = $1_1;
    HEAP32[$4_1 >> 2] = 0;
    $439($8_1 | 0, $3_1 | 0);
    $9_1 = $261($8_1 | 0) | 0;
    $668($8_1 | 0) | 0;
    label$1 : {
    label$2 : {
      label$3 : {
      label$4 : {
        switch ($6_1 + -65 | 0 | 0) {
        case 0:
        case 32:
        $879($0_1 | 0, $5_1 + 24 | 0 | 0, $8_1 + 44 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
        break label$2;
        case 1:
        case 33:
        case 39:
        $881($0_1 | 0, $5_1 + 16 | 0 | 0, $8_1 + 44 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
        break label$2;
        case 34:
        $1_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
        HEAP32[($8_1 + 44 | 0) >> 2] = $868($0_1 | 0, HEAP32[($8_1 + 44 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $873($1_1 | 0) | 0 | 0, ($873($1_1 | 0) | 0) + (($730($1_1 | 0) | 0) << 2 | 0) | 0 | 0) | 0;
        break label$2;
        case 35:
        case 36:
        $886($0_1 | 0, $5_1 + 12 | 0 | 0, $8_1 + 44 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
        break label$2;
        case 3:
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 74424 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 74428 | 0) >> 2] | 0;
        $73_1 = i64toi32_i32$0;
        i64toi32_i32$0 = $8_1 + 24 | 0;
        HEAP32[i64toi32_i32$0 >> 2] = $73_1;
        HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
        i64toi32_i32$2 = 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 74416 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 74420 | 0) >> 2] | 0;
        $76_1 = i64toi32_i32$1;
        i64toi32_i32$1 = $8_1 + 16 | 0;
        HEAP32[i64toi32_i32$1 >> 2] = $76_1;
        HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 74408 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 74412 | 0) >> 2] | 0;
        $78_1 = i64toi32_i32$0;
        i64toi32_i32$0 = $8_1;
        HEAP32[($8_1 + 8 | 0) >> 2] = $78_1;
        HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$1;
        i64toi32_i32$2 = 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 74400 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 74404 | 0) >> 2] | 0;
        $80_1 = i64toi32_i32$1;
        i64toi32_i32$1 = $8_1;
        HEAP32[$8_1 >> 2] = $80_1;
        HEAP32[($8_1 + 4 | 0) >> 2] = i64toi32_i32$0;
        HEAP32[($8_1 + 44 | 0) >> 2] = $868($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 | 0, $8_1 + 32 | 0 | 0) | 0;
        break label$2;
        case 5:
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 74456 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 74460 | 0) >> 2] | 0;
        $94_1 = i64toi32_i32$0;
        i64toi32_i32$0 = $8_1 + 24 | 0;
        HEAP32[i64toi32_i32$0 >> 2] = $94_1;
        HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
        i64toi32_i32$2 = 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 74448 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 74452 | 0) >> 2] | 0;
        $97_1 = i64toi32_i32$1;
        i64toi32_i32$1 = $8_1 + 16 | 0;
        HEAP32[i64toi32_i32$1 >> 2] = $97_1;
        HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 74440 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 74444 | 0) >> 2] | 0;
        $99_1 = i64toi32_i32$0;
        i64toi32_i32$0 = $8_1;
        HEAP32[($8_1 + 8 | 0) >> 2] = $99_1;
        HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$1;
        i64toi32_i32$2 = 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 74432 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 74436 | 0) >> 2] | 0;
        $101_1 = i64toi32_i32$1;
        i64toi32_i32$1 = $8_1;
        HEAP32[$8_1 >> 2] = $101_1;
        HEAP32[($8_1 + 4 | 0) >> 2] = i64toi32_i32$0;
        HEAP32[($8_1 + 44 | 0) >> 2] = $868($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 | 0, $8_1 + 32 | 0 | 0) | 0;
        break label$2;
        case 7:
        $887($0_1 | 0, $5_1 + 8 | 0 | 0, $8_1 + 44 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
        break label$2;
        case 8:
        $888($0_1 | 0, $5_1 + 8 | 0 | 0, $8_1 + 44 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
        break label$2;
        case 41:
        $889($0_1 | 0, $5_1 + 28 | 0 | 0, $8_1 + 44 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
        break label$2;
        case 44:
        $890($0_1 | 0, $5_1 + 16 | 0 | 0, $8_1 + 44 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
        break label$2;
        case 12:
        $891($0_1 | 0, $5_1 + 4 | 0 | 0, $8_1 + 44 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
        break label$2;
        case 45:
        case 51:
        $892($0_1 | 0, $8_1 + 44 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
        break label$2;
        case 47:
        $893($0_1 | 0, $5_1 + 8 | 0 | 0, $8_1 + 44 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
        break label$2;
        case 49:
        $6_1 = $120($8_1 | 0, 74464 | 0, 44 | 0) | 0;
        HEAP32[($6_1 + 44 | 0) >> 2] = $868($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $6_1 | 0, $6_1 + 44 | 0 | 0) | 0;
        break label$2;
        case 17:
        HEAP32[($8_1 + 16 | 0) >> 2] = HEAP32[(0 + 74528 | 0) >> 2] | 0;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 74520 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 74524 | 0) >> 2] | 0;
        $184_1 = i64toi32_i32$0;
        i64toi32_i32$0 = $8_1;
        HEAP32[($8_1 + 8 | 0) >> 2] = $184_1;
        HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$1;
        i64toi32_i32$2 = 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 74512 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 74516 | 0) >> 2] | 0;
        $186_1 = i64toi32_i32$1;
        i64toi32_i32$1 = $8_1;
        HEAP32[$8_1 >> 2] = $186_1;
        HEAP32[($8_1 + 4 | 0) >> 2] = i64toi32_i32$0;
        HEAP32[($8_1 + 44 | 0) >> 2] = $868($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 | 0, $8_1 + 20 | 0 | 0) | 0;
        break label$2;
        case 18:
        $894($0_1 | 0, $5_1 | 0, $8_1 + 44 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
        break label$2;
        case 19:
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 74568 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 74572 | 0) >> 2] | 0;
        $207_1 = i64toi32_i32$0;
        i64toi32_i32$0 = $8_1 + 24 | 0;
        HEAP32[i64toi32_i32$0 >> 2] = $207_1;
        HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
        i64toi32_i32$2 = 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 74560 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 74564 | 0) >> 2] | 0;
        $210_1 = i64toi32_i32$1;
        i64toi32_i32$1 = $8_1 + 16 | 0;
        HEAP32[i64toi32_i32$1 >> 2] = $210_1;
        HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 74552 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 74556 | 0) >> 2] | 0;
        $212_1 = i64toi32_i32$0;
        i64toi32_i32$0 = $8_1;
        HEAP32[($8_1 + 8 | 0) >> 2] = $212_1;
        HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$1;
        i64toi32_i32$2 = 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 74544 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 74548 | 0) >> 2] | 0;
        $214_1 = i64toi32_i32$1;
        i64toi32_i32$1 = $8_1;
        HEAP32[$8_1 >> 2] = $214_1;
        HEAP32[($8_1 + 4 | 0) >> 2] = i64toi32_i32$0;
        HEAP32[($8_1 + 44 | 0) >> 2] = $868($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 | 0, $8_1 + 32 | 0 | 0) | 0;
        break label$2;
        case 54:
        $895($0_1 | 0, $5_1 + 24 | 0 | 0, $8_1 + 44 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
        break label$2;
        case 55:
        $4_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) | 0;
        break label$1;
        case 23:
        $1_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
        HEAP32[($8_1 + 44 | 0) >> 2] = $868($0_1 | 0, HEAP32[($8_1 + 44 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $873($1_1 | 0) | 0 | 0, ($873($1_1 | 0) | 0) + (($730($1_1 | 0) | 0) << 2 | 0) | 0 | 0) | 0;
        break label$2;
        case 56:
        $883($0_1 | 0, $5_1 + 20 | 0 | 0, $8_1 + 44 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
        break label$2;
        case 24:
        $896($0_1 | 0, $5_1 + 20 | 0 | 0, $8_1 + 44 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
        break label$2;
        default:
        if (($6_1 | 0) == (37 | 0)) {
          break label$3
        }
        break;
        case 2:
        case 4:
        case 6:
        case 9:
        case 10:
        case 11:
        case 13:
        case 14:
        case 15:
        case 16:
        case 20:
        case 21:
        case 22:
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 31:
        case 37:
        case 38:
        case 40:
        case 42:
        case 43:
        case 46:
        case 48:
        case 50:
        case 52:
        case 53:
        break label$4;
        };
      }
      HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 4 | 0;
      break label$2;
      }
      $897($0_1 | 0, $8_1 + 44 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
    }
    $4_1 = HEAP32[($8_1 + 44 | 0) >> 2] | 0;
    }
    global$0 = $8_1 + 48 | 0;
    return $4_1 | 0;
  }
  
  function $886($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $5_1 = $884($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
    $3_1 = HEAP32[$4_1 >> 2] | 0;
    label$1 : {
    if (($5_1 + -1 | 0) >>> 0 > 30 >>> 0) {
      break label$1
    }
    if ($3_1 & 4 | 0) {
      break label$1
    }
    HEAP32[$1_1 >> 2] = $5_1;
    return;
    }
    HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
  }
  
  function $887($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $5_1 = $884($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
    $3_1 = HEAP32[$4_1 >> 2] | 0;
    label$1 : {
    if (($5_1 | 0) > (23 | 0)) {
      break label$1
    }
    if ($3_1 & 4 | 0) {
      break label$1
    }
    HEAP32[$1_1 >> 2] = $5_1;
    return;
    }
    HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
  }
  
  function $888($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $5_1 = $884($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
    $3_1 = HEAP32[$4_1 >> 2] | 0;
    label$1 : {
    if (($5_1 + -1 | 0) >>> 0 > 11 >>> 0) {
      break label$1
    }
    if ($3_1 & 4 | 0) {
      break label$1
    }
    HEAP32[$1_1 >> 2] = $5_1;
    return;
    }
    HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
  }
  
  function $889($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $5_1 = $884($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 3 | 0) | 0;
    $3_1 = HEAP32[$4_1 >> 2] | 0;
    label$1 : {
    if (($5_1 | 0) > (365 | 0)) {
      break label$1
    }
    if ($3_1 & 4 | 0) {
      break label$1
    }
    HEAP32[$1_1 >> 2] = $5_1;
    return;
    }
    HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
  }
  
  function $890($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $3_1 = $884($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
    $5_1 = HEAP32[$4_1 >> 2] | 0;
    label$1 : {
    $3_1 = $3_1 + -1 | 0;
    if ($3_1 >>> 0 > 11 >>> 0) {
      break label$1
    }
    if ($5_1 & 4 | 0) {
      break label$1
    }
    HEAP32[$1_1 >> 2] = $3_1;
    return;
    }
    HEAP32[$4_1 >> 2] = $5_1 | 4 | 0;
  }
  
  function $891($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $5_1 = $884($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
    $3_1 = HEAP32[$4_1 >> 2] | 0;
    label$1 : {
    if (($5_1 | 0) > (59 | 0)) {
      break label$1
    }
    if ($3_1 & 4 | 0) {
      break label$1
    }
    HEAP32[$1_1 >> 2] = $5_1;
    return;
    }
    HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
  }
  
  function $892($0_1, $1_1, $2_1, $3_1, $4_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    var $5_1 = 0;
    $5_1 = global$0 - 16 | 0;
    global$0 = $5_1;
    HEAP32[($5_1 + 12 | 0) >> 2] = $2_1;
    label$1 : {
    label$2 : while (1) {
      if ($262($1_1 | 0, $5_1 + 12 | 0 | 0) | 0) {
      break label$1
      }
      if (!($264($4_1 | 0, 1 | 0, $263($1_1 | 0) | 0 | 0) | 0)) {
      break label$1
      }
      $265($1_1 | 0) | 0;
      continue label$2;
    };
    }
    label$3 : {
    if (!($262($1_1 | 0, $5_1 + 12 | 0 | 0) | 0)) {
      break label$3
    }
    HEAP32[$3_1 >> 2] = HEAP32[$3_1 >> 2] | 0 | 2 | 0;
    }
    global$0 = $5_1 + 16 | 0;
  }
  
  function $893($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    label$1 : {
    $0_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
    if (($730($0_1 | 0) | 0 | 0) != (0 - ($730($0_1 + 12 | 0 | 0) | 0) | 0 | 0)) {
      break label$1
    }
    HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 4 | 0;
    return;
    }
    $4_1 = $727($2_1 | 0, $3_1 | 0, $0_1 | 0, $0_1 + 24 | 0 | 0, $5_1 | 0, $4_1 | 0, 0 | 0) | 0;
    $5_1 = HEAP32[$1_1 >> 2] | 0;
    label$2 : {
    if (($4_1 | 0) != ($0_1 | 0)) {
      break label$2
    }
    if (($5_1 | 0) != (12 | 0)) {
      break label$2
    }
    HEAP32[$1_1 >> 2] = 0;
    return;
    }
    label$3 : {
    if (($4_1 - $0_1 | 0 | 0) != (12 | 0)) {
      break label$3
    }
    if (($5_1 | 0) > (11 | 0)) {
      break label$3
    }
    HEAP32[$1_1 >> 2] = $5_1 + 12 | 0;
    }
  }
  
  function $894($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $5_1 = $884($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
    $3_1 = HEAP32[$4_1 >> 2] | 0;
    label$1 : {
    if (($5_1 | 0) > (60 | 0)) {
      break label$1
    }
    if ($3_1 & 4 | 0) {
      break label$1
    }
    HEAP32[$1_1 >> 2] = $5_1;
    return;
    }
    HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
  }
  
  function $895($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $5_1 = $884($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 1 | 0) | 0;
    $3_1 = HEAP32[$4_1 >> 2] | 0;
    label$1 : {
    if (($5_1 | 0) > (6 | 0)) {
      break label$1
    }
    if ($3_1 & 4 | 0) {
      break label$1
    }
    HEAP32[$1_1 >> 2] = $5_1;
    return;
    }
    HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
  }
  
  function $896($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $5_1 = $884($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 4 | 0) | 0;
    label$1 : {
    if ((HEAPU8[$4_1 >> 0] | 0) & 4 | 0) {
      break label$1
    }
    HEAP32[$1_1 >> 2] = $5_1 + -1900 | 0;
    }
  }
  
  function $897($0_1, $1_1, $2_1, $3_1, $4_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    var $5_1 = 0;
    $5_1 = global$0 - 16 | 0;
    global$0 = $5_1;
    HEAP32[($5_1 + 12 | 0) >> 2] = $2_1;
    label$1 : {
    label$2 : {
      label$3 : {
      if (!($262($1_1 | 0, $5_1 + 12 | 0 | 0) | 0)) {
        break label$3
      }
      $1_1 = 6;
      break label$2;
      }
      label$4 : {
      if (($869($4_1 | 0, $263($1_1 | 0) | 0 | 0, 0 | 0) | 0 | 0) == (37 | 0)) {
        break label$4
      }
      $1_1 = 4;
      break label$2;
      }
      if (!($262($265($1_1 | 0) | 0 | 0, $5_1 + 12 | 0 | 0) | 0)) {
      break label$1
      }
      $1_1 = 2;
    }
    HEAP32[$3_1 >> 2] = HEAP32[$3_1 >> 2] | 0 | $1_1 | 0;
    }
    global$0 = $5_1 + 16 | 0;
  }
  
  function $898($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $6_1 = $6_1 | 0;
    var $7_1 = 0;
    $7_1 = global$0 - 128 | 0;
    global$0 = $7_1;
    HEAP32[($7_1 + 12 | 0) >> 2] = $7_1 + 116 | 0;
    $899($0_1 + 8 | 0 | 0, $7_1 + 16 | 0 | 0, $7_1 + 12 | 0 | 0, $4_1 | 0, $5_1 | 0, $6_1 | 0);
    $0_1 = $900($7_1 + 16 | 0 | 0, HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0, $1_1 | 0) | 0;
    global$0 = $7_1 + 128 | 0;
    return $0_1 | 0;
  }
  
  function $899($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    var $6_1 = 0;
    $6_1 = global$0 - 16 | 0;
    global$0 = $6_1;
    HEAP8[($6_1 + 15 | 0) >> 0] = 0;
    HEAP8[($6_1 + 14 | 0) >> 0] = $5_1;
    HEAP8[($6_1 + 13 | 0) >> 0] = $4_1;
    HEAP8[($6_1 + 12 | 0) >> 0] = 37;
    label$1 : {
    if (!$5_1) {
      break label$1
    }
    $901($6_1 + 13 | 0 | 0, $6_1 + 14 | 0 | 0);
    }
    HEAP32[$2_1 >> 2] = $1_1 + ($622($1_1 | 0, $902($1_1 | 0, HEAP32[$2_1 >> 2] | 0 | 0) | 0 | 0, $6_1 + 12 | 0 | 0, $3_1 | 0, HEAP32[$0_1 >> 2] | 0 | 0) | 0) | 0;
    global$0 = $6_1 + 16 | 0;
  }
  
  function $900($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    $903($3_1 + 8 | 0 | 0, $0_1 | 0, $1_1 | 0, $2_1 | 0);
    $2_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
    global$0 = $3_1 + 16 | 0;
    return $2_1 | 0;
  }
  
  function $901($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0;
    $2_1 = HEAPU8[$0_1 >> 0] | 0;
    HEAP8[$0_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
    HEAP8[$1_1 >> 0] = $2_1;
  }
  
  function $902($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $1_1 - $0_1 | 0 | 0;
  }
  
  function $903($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $1504($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
  }
  
  function $904($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $6_1 = $6_1 | 0;
    var $7_1 = 0;
    $7_1 = global$0 - 416 | 0;
    global$0 = $7_1;
    HEAP32[($7_1 + 12 | 0) >> 2] = $7_1 + 416 | 0;
    $905($0_1 + 8 | 0 | 0, $7_1 + 16 | 0 | 0, $7_1 + 12 | 0 | 0, $4_1 | 0, $5_1 | 0, $6_1 | 0);
    $0_1 = $906($7_1 + 16 | 0 | 0, HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0, $1_1 | 0) | 0;
    global$0 = $7_1 + 416 | 0;
    return $0_1 | 0;
  }
  
  function $905($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    var $6_1 = 0;
    $6_1 = global$0 - 144 | 0;
    global$0 = $6_1;
    HEAP32[($6_1 + 28 | 0) >> 2] = $6_1 + 132 | 0;
    $899($0_1 | 0, $6_1 + 32 | 0 | 0, $6_1 + 28 | 0 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0);
    HEAP32[($6_1 + 16 | 0) >> 2] = 0;
    HEAP32[($6_1 + 20 | 0) >> 2] = 0;
    HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 32 | 0;
    label$1 : {
    $0_1 = $908($1_1 | 0, $6_1 + 12 | 0 | 0, $907($1_1 | 0, HEAP32[$2_1 >> 2] | 0 | 0) | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[$0_1 >> 2] | 0 | 0) | 0;
    if (($0_1 | 0) != (-1 | 0)) {
      break label$1
    }
    $1756(66211 | 0);
    wasm2js_trap();
    }
    HEAP32[$2_1 >> 2] = $1_1 + ($0_1 << 2 | 0) | 0;
    global$0 = $6_1 + 144 | 0;
  }
  
  function $906($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    $909($3_1 + 8 | 0 | 0, $0_1 | 0, $1_1 | 0, $2_1 | 0);
    $2_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
    global$0 = $3_1 + 16 | 0;
    return $2_1 | 0;
  }
  
  function $907($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return ($1_1 - $0_1 | 0) >> 2 | 0 | 0;
  }
  
  function $908($0_1, $1_1, $2_1, $3_1, $4_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    var $5_1 = 0;
    $5_1 = global$0 - 16 | 0;
    global$0 = $5_1;
    HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
    $4_1 = $721($5_1 + 8 | 0 | 0, $5_1 + 12 | 0 | 0) | 0;
    $3_1 = $638($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
    $722($4_1 | 0) | 0;
    global$0 = $5_1 + 16 | 0;
    return $3_1 | 0;
  }
  
  function $909($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $1518($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
  }
  
  function $910($0_1) {
    $0_1 = $0_1 | 0;
    return $911() | 0 | 0;
  }
  
  function $911() {
    return $912() | 0 | 0;
  }
  
  function $912() {
    return 127 | 0;
  }
  
  function $913($0_1) {
    $0_1 = $0_1 | 0;
    return $911() | 0 | 0;
  }
  
  function $914($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $286($0_1 | 0) | 0;
  }
  
  function $915($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $286($0_1 | 0) | 0;
  }
  
  function $916($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $286($0_1 | 0) | 0;
  }
  
  function $917($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $807($0_1 | 0, 1 | 0, 45 | 0) | 0;
  }
  
  function $918($0_1) {
    $0_1 = $0_1 | 0;
    return 0 | 0;
  }
  
  function $919($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0, $3_1 = 0;
    $2_1 = $0_1;
    $3_1 = 67109634;
    HEAP8[$2_1 >> 0] = $3_1;
    HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
    HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
    HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
  }
  
  function $920($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0, $3_1 = 0;
    $2_1 = $0_1;
    $3_1 = 67109634;
    HEAP8[$2_1 >> 0] = $3_1;
    HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
    HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
    HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
  }
  
  function $921($0_1) {
    $0_1 = $0_1 | 0;
    return $911() | 0 | 0;
  }
  
  function $922($0_1) {
    $0_1 = $0_1 | 0;
    return $911() | 0 | 0;
  }
  
  function $923($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $286($0_1 | 0) | 0;
  }
  
  function $924($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $286($0_1 | 0) | 0;
  }
  
  function $925($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $286($0_1 | 0) | 0;
  }
  
  function $926($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $807($0_1 | 0, 1 | 0, 45 | 0) | 0;
  }
  
  function $927($0_1) {
    $0_1 = $0_1 | 0;
    return 0 | 0;
  }
  
  function $928($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0, $3_1 = 0;
    $2_1 = $0_1;
    $3_1 = 67109634;
    HEAP8[$2_1 >> 0] = $3_1;
    HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
    HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
    HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
  }
  
  function $929($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0, $3_1 = 0;
    $2_1 = $0_1;
    $3_1 = 67109634;
    HEAP8[$2_1 >> 0] = $3_1;
    HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
    HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
    HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
  }
  
  function $930($0_1) {
    $0_1 = $0_1 | 0;
    return $931() | 0 | 0;
  }
  
  function $931() {
    return $932() | 0 | 0;
  }
  
  function $932() {
    return 2147483647 | 0;
  }
  
  function $933($0_1) {
    $0_1 = $0_1 | 0;
    return $931() | 0 | 0;
  }
  
  function $934($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $286($0_1 | 0) | 0;
  }
  
  function $935($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $936($0_1 | 0) | 0;
  }
  
  function $936($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0;
    $1_1 = global$0 - 16 | 0;
    global$0 = $1_1;
    $0_1 = $937($0_1 | 0, $1_1 + 15 | 0 | 0, $1_1 + 14 | 0 | 0) | 0;
    $938($0_1 | 0, 0 | 0);
    global$0 = $1_1 + 16 | 0;
    return $0_1 | 0;
  }
  
  function $937($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    return $1458($1532($0_1 | 0) | 0 | 0) | 0 | 0;
  }
  
  function $938($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
  }
  
  function $939($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $936($0_1 | 0) | 0;
  }
  
  function $940($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $837($0_1 | 0, 1 | 0, 45 | 0) | 0;
  }
  
  function $941($0_1) {
    $0_1 = $0_1 | 0;
    return 0 | 0;
  }
  
  function $942($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0, $3_1 = 0;
    $2_1 = $0_1;
    $3_1 = 67109634;
    HEAP8[$2_1 >> 0] = $3_1;
    HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
    HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
    HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
  }
  
  function $943($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0, $3_1 = 0;
    $2_1 = $0_1;
    $3_1 = 67109634;
    HEAP8[$2_1 >> 0] = $3_1;
    HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
    HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
    HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
  }
  
  function $944($0_1) {
    $0_1 = $0_1 | 0;
    return $931() | 0 | 0;
  }
  
  function $945($0_1) {
    $0_1 = $0_1 | 0;
    return $931() | 0 | 0;
  }
  
  function $946($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $286($0_1 | 0) | 0;
  }
  
  function $947($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $936($0_1 | 0) | 0;
  }
  
  function $948($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $936($0_1 | 0) | 0;
  }
  
  function $949($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $837($0_1 | 0, 1 | 0, 45 | 0) | 0;
  }
  
  function $950($0_1) {
    $0_1 = $0_1 | 0;
    return 0 | 0;
  }
  
  function $951($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0, $3_1 = 0;
    $2_1 = $0_1;
    $3_1 = 67109634;
    HEAP8[$2_1 >> 0] = $3_1;
    HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
    HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
    HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
  }
  
  function $952($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0, $3_1 = 0;
    $2_1 = $0_1;
    $3_1 = 67109634;
    HEAP8[$2_1 >> 0] = $3_1;
    HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
    HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
    HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
  }
  
  function $953($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0, i64toi32_i32$0 = 0, $3_1 = 0, i64toi32_i32$1 = 0, $28_1 = 0;
    $2_1 = global$0 - 16 | 0;
    global$0 = $2_1;
    $954($302($1_1 | 0) | 0 | 0);
    $0_1 = $955($0_1 | 0, $2_1 + 15 | 0 | 0, $2_1 + 14 | 0 | 0) | 0;
    label$1 : {
    label$2 : {
      if ($296($1_1 | 0) | 0) {
      break label$2
      }
      $1_1 = $306($1_1 | 0) | 0;
      $3_1 = $298($0_1 | 0) | 0;
      HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      $28_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $3_1;
      HEAP32[i64toi32_i32$0 >> 2] = $28_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      $288($0_1 | 0, $300($0_1 | 0) | 0 | 0);
      break label$1;
    }
    $1765($0_1 | 0, $345($427($1_1 | 0) | 0 | 0) | 0 | 0, $314($1_1 | 0) | 0 | 0);
    }
    global$0 = $2_1 + 16 | 0;
    return $0_1 | 0;
  }
  
  function $954($0_1) {
    $0_1 = $0_1 | 0;
  }
  
  function $955($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    return $1533($402($0_1 | 0) | 0 | 0, $2_1 | 0) | 0 | 0;
  }
  
  function $956($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0, i64toi32_i32$0 = 0, $3_1 = 0, i64toi32_i32$1 = 0, $28_1 = 0;
    $2_1 = global$0 - 16 | 0;
    global$0 = $2_1;
    $958($957($1_1 | 0) | 0 | 0);
    $0_1 = $959($0_1 | 0, $2_1 + 15 | 0 | 0, $2_1 + 14 | 0 | 0) | 0;
    label$1 : {
    label$2 : {
      if ($875($1_1 | 0) | 0) {
      break label$2
      }
      $1_1 = $960($1_1 | 0) | 0;
      $3_1 = $961($0_1 | 0) | 0;
      HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      $28_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $3_1;
      HEAP32[i64toi32_i32$0 >> 2] = $28_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      $938($0_1 | 0, $877($0_1 | 0) | 0 | 0);
      break label$1;
    }
    $1779($0_1 | 0, $370($962($1_1 | 0) | 0 | 0) | 0 | 0, $876($1_1 | 0) | 0 | 0);
    }
    global$0 = $2_1 + 16 | 0;
    return $0_1 | 0;
  }
  
  function $957($0_1) {
    $0_1 = $0_1 | 0;
    return $1477($0_1 | 0) | 0 | 0;
  }
  
  function $958($0_1) {
    $0_1 = $0_1 | 0;
  }
  
  function $959($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    return $1534($1457($0_1 | 0) | 0 | 0, $2_1 | 0) | 0 | 0;
  }
  
  function $960($0_1) {
    $0_1 = $0_1 | 0;
    return $1488($0_1 | 0) | 0 | 0;
  }
  
  function $961($0_1) {
    $0_1 = $0_1 | 0;
    return $1479($0_1 | 0) | 0 | 0;
  }
  
  function $962($0_1) {
    $0_1 = $0_1 | 0;
    return HEAP32[($960($0_1 | 0) | 0) >> 2] | 0 | 0;
  }
  
  function $963($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $6_1 = $6_1 | 0;
    var $7_1 = 0, $10_1 = 0, $8_1 = 0, $11_1 = 0, $12_1 = 0, i64toi32_i32$1 = 0;
    $7_1 = global$0 - 272 | 0;
    global$0 = $7_1;
    HEAP32[($7_1 + 264 | 0) >> 2] = $2_1;
    HEAP32[($7_1 + 268 | 0) >> 2] = $1_1;
    HEAP32[($7_1 + 16 | 0) >> 2] = 95;
    $1_1 = $798($7_1 + 152 | 0 | 0, $7_1 + 160 | 0 | 0, $7_1 + 16 | 0 | 0) | 0;
    $439($7_1 + 144 | 0 | 0, $4_1 | 0);
    $8_1 = $197($7_1 + 144 | 0 | 0) | 0;
    HEAP8[($7_1 + 143 | 0) >> 0] = 0;
    label$1 : {
    if (!($965($7_1 + 268 | 0 | 0, $2_1 | 0, $3_1 | 0, $7_1 + 144 | 0 | 0, $196($4_1 | 0) | 0 | 0, $5_1 | 0, $7_1 + 143 | 0 | 0, $8_1 | 0, $1_1 | 0, $7_1 + 148 | 0 | 0, $7_1 + 260 | 0 | 0) | 0)) {
      break label$1
    }
    $11_1 = 0;
    $12_1 = HEAPU8[($11_1 + 67031 | 0) >> 0] | 0 | ((HEAPU8[($11_1 + 67032 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($11_1 + 67033 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($11_1 + 67034 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    HEAP8[($7_1 + 135 | 0) >> 0] = $12_1;
    HEAP8[($7_1 + 136 | 0) >> 0] = $12_1 >>> 8 | 0;
    HEAP8[($7_1 + 137 | 0) >> 0] = $12_1 >>> 16 | 0;
    HEAP8[($7_1 + 138 | 0) >> 0] = $12_1 >>> 24 | 0;
    $10_1 = 0;
    i64toi32_i32$1 = HEAPU8[($10_1 + 67028 | 0) >> 0] | 0 | ((HEAPU8[($10_1 + 67029 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($10_1 + 67030 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($10_1 + 67031 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    HEAP32[($7_1 + 128 | 0) >> 2] = HEAPU8[($10_1 + 67024 | 0) >> 0] | 0 | ((HEAPU8[($10_1 + 67025 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($10_1 + 67026 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($10_1 + 67027 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    HEAP32[($7_1 + 132 | 0) >> 2] = i64toi32_i32$1;
    $717($8_1 | 0, $7_1 + 128 | 0 | 0, $7_1 + 138 | 0 | 0, $7_1 + 118 | 0 | 0) | 0;
    HEAP32[($7_1 + 16 | 0) >> 2] = 94;
    $8_1 = $798($7_1 + 8 | 0 | 0, 0 | 0, $7_1 + 16 | 0 | 0) | 0;
    $4_1 = $7_1 + 16 | 0;
    label$2 : {
      label$3 : {
      if (((HEAP32[($7_1 + 148 | 0) >> 2] | 0) - ($966($1_1 | 0) | 0) | 0 | 0) < (99 | 0)) {
        break label$3
      }
      $800($8_1 | 0, $126(((HEAP32[($7_1 + 148 | 0) >> 2] | 0) - ($966($1_1 | 0) | 0) | 0) + 2 | 0 | 0) | 0 | 0);
      if (!($966($8_1 | 0) | 0)) {
        break label$2
      }
      $4_1 = $966($8_1 | 0) | 0;
      }
      label$4 : {
      if ((HEAPU8[($7_1 + 143 | 0) >> 0] | 0 | 0) != (1 | 0)) {
        break label$4
      }
      HEAP8[$4_1 >> 0] = 45;
      $4_1 = $4_1 + 1 | 0;
      }
      $2_1 = $966($1_1 | 0) | 0;
      label$5 : {
      label$6 : while (1) {
        label$7 : {
        if ($2_1 >>> 0 < (HEAP32[($7_1 + 148 | 0) >> 2] | 0) >>> 0) {
          break label$7
        }
        HEAP8[$4_1 >> 0] = 0;
        HEAP32[$7_1 >> 2] = $6_1;
        if (($624($7_1 + 16 | 0 | 0, 66149 | 0, $7_1 | 0) | 0 | 0) != (1 | 0)) {
          break label$5
        }
        $802($8_1 | 0) | 0;
        break label$1;
        }
        HEAP8[$4_1 >> 0] = HEAPU8[(($7_1 + 128 | 0) + (($762($7_1 + 118 | 0 | 0, $967($7_1 + 118 | 0 | 0) | 0 | 0, $2_1 | 0) | 0) - ($7_1 + 118 | 0) | 0) | 0) >> 0] | 0;
        $4_1 = $4_1 + 1 | 0;
        $2_1 = $2_1 + 1 | 0;
        continue label$6;
      };
      }
      $1756(65824 | 0);
      wasm2js_trap();
    }
    $1755();
    wasm2js_trap();
    }
    label$8 : {
    if (!($198($7_1 + 268 | 0 | 0, $7_1 + 264 | 0 | 0) | 0)) {
      break label$8
    }
    HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 2 | 0;
    }
    $2_1 = HEAP32[($7_1 + 268 | 0) >> 2] | 0;
    $668($7_1 + 144 | 0 | 0) | 0;
    $802($1_1 | 0) | 0;
    global$0 = $7_1 + 272 | 0;
    return $2_1 | 0;
  }
  
  function $964($0_1) {
    $0_1 = $0_1 | 0;
  }
  
  function $965($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $6_1 = $6_1 | 0;
    $7_1 = $7_1 | 0;
    $8_1 = $8_1 | 0;
    $9_1 = $9_1 | 0;
    $10_1 = $10_1 | 0;
    var $11_1 = 0, $14_1 = 0, $16_1 = 0, $15_1 = 0, $12_1 = 0, $17_1 = 0, $13_1 = 0, $18_1 = 0, $373_1 = 0;
    $11_1 = global$0 - 528 | 0;
    global$0 = $11_1;
    HEAP32[($11_1 + 520 | 0) >> 2] = $10_1;
    HEAP32[($11_1 + 524 | 0) >> 2] = $1_1;
    label$1 : {
    label$2 : {
      if (!($198($0_1 | 0, $11_1 + 524 | 0 | 0) | 0)) {
      break label$2
      }
      HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
      $0_1 = 0;
      break label$1;
    }
    HEAP32[($11_1 + 76 | 0) >> 2] = 95;
    $12_1 = $969($11_1 + 104 | 0 | 0, $11_1 + 112 | 0 | 0, $11_1 + 76 | 0 | 0) | 0;
    $10_1 = $970($12_1 | 0) | 0;
    HEAP32[($11_1 + 100 | 0) >> 2] = $10_1;
    HEAP32[($11_1 + 96 | 0) >> 2] = $10_1 + 400 | 0;
    $13_1 = $286($11_1 + 76 | 0 | 0) | 0;
    $14_1 = $286($11_1 + 64 | 0 | 0) | 0;
    $15_1 = $286($11_1 + 52 | 0 | 0) | 0;
    $16_1 = $286($11_1 + 40 | 0 | 0) | 0;
    $17_1 = $286($11_1 + 28 | 0 | 0) | 0;
    $971($2_1 | 0, $3_1 | 0, $11_1 + 92 | 0 | 0, $11_1 + 91 | 0 | 0, $11_1 + 90 | 0 | 0, $13_1 | 0, $14_1 | 0, $15_1 | 0, $16_1 | 0, $11_1 + 24 | 0 | 0);
    HEAP32[$9_1 >> 2] = $966($8_1 | 0) | 0;
    $18_1 = $4_1 & 512 | 0;
    $3_1 = 0;
    $1_1 = 0;
    label$3 : while (1) {
      $2_1 = $1_1;
      label$4 : {
      label$5 : {
        label$6 : {
        label$7 : {
          if (($3_1 | 0) == (4 | 0)) {
          break label$7
          }
          if ($198($0_1 | 0, $11_1 + 524 | 0 | 0) | 0) {
          break label$7
          }
          $10_1 = 0;
          label$8 : {
          label$9 : {
            label$10 : {
            label$11 : {
              label$12 : {
              switch (HEAPU8[(($11_1 + 92 | 0) + $3_1 | 0) >> 0] | 0 | 0) {
              case 1:
                if (($3_1 | 0) == (3 | 0)) {
                break label$5
                }
                label$14 : {
                if (!($200($7_1 | 0, 1 | 0, $199($0_1 | 0) | 0 | 0) | 0)) {
                  break label$14
                }
                $972($11_1 + 16 | 0 | 0, $0_1 | 0, 0 | 0);
                $1770($17_1 | 0, $973($11_1 + 16 | 0 | 0) | 0 | 0);
                break label$11;
                }
                HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
                $0_1 = 0;
                break label$6;
              case 3:
                break label$10;
              case 0:
                break label$12;
              case 4:
                break label$8;
              case 2:
                break label$9;
              default:
                break label$4;
              };
              }
              if (($3_1 | 0) == (3 | 0)) {
              break label$5
              }
            }
            label$15 : while (1) {
              if ($198($0_1 | 0, $11_1 + 524 | 0 | 0) | 0) {
              break label$5
              }
              if (!($200($7_1 | 0, 1 | 0, $199($0_1 | 0) | 0 | 0) | 0)) {
              break label$5
              }
              $972($11_1 + 16 | 0 | 0, $0_1 | 0, 0 | 0);
              $1770($17_1 | 0, $973($11_1 + 16 | 0 | 0) | 0 | 0);
              continue label$15;
            };
            }
            label$16 : {
            if (!($309($15_1 | 0) | 0)) {
              break label$16
            }
            if ((($199($0_1 | 0) | 0) & 255 | 0 | 0) != (HEAPU8[($686($15_1 | 0, 0 | 0) | 0) >> 0] | 0 | 0)) {
              break label$16
            }
            $201($0_1 | 0) | 0;
            HEAP8[$6_1 >> 0] = 0;
            $1_1 = ($309($15_1 | 0) | 0) >>> 0 > 1 >>> 0 ? $15_1 : $2_1;
            break label$4;
            }
            label$17 : {
            if (!($309($16_1 | 0) | 0)) {
              break label$17
            }
            if ((($199($0_1 | 0) | 0) & 255 | 0 | 0) != (HEAPU8[($686($16_1 | 0, 0 | 0) | 0) >> 0] | 0 | 0)) {
              break label$17
            }
            $201($0_1 | 0) | 0;
            HEAP8[$6_1 >> 0] = 1;
            $1_1 = ($309($16_1 | 0) | 0) >>> 0 > 1 >>> 0 ? $16_1 : $2_1;
            break label$4;
            }
            label$18 : {
            if (!($309($15_1 | 0) | 0)) {
              break label$18
            }
            if (!($309($16_1 | 0) | 0)) {
              break label$18
            }
            HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
            $0_1 = 0;
            break label$6;
            }
            label$19 : {
            if ($309($15_1 | 0) | 0) {
              break label$19
            }
            if (!($309($16_1 | 0) | 0)) {
              break label$5
            }
            }
            HEAP8[$6_1 >> 0] = !($309($16_1 | 0) | 0);
            break label$5;
          }
          label$20 : {
            if ($3_1 >>> 0 < 2 >>> 0) {
            break label$20
            }
            if ($2_1) {
            break label$20
            }
            if ($18_1) {
            break label$20
            }
            $1_1 = 0;
            if (!(($3_1 | 0) == (2 | 0) & ((HEAPU8[($11_1 + 95 | 0) >> 0] | 0) & 255 | 0 | 0) != (0 | 0) | 0)) {
            break label$4
            }
          }
          HEAP32[($11_1 + 12 | 0) >> 2] = $774($14_1 | 0) | 0;
          $10_1 = $974($11_1 + 16 | 0 | 0, $11_1 + 12 | 0 | 0) | 0;
          label$21 : {
            if (!$3_1) {
            break label$21
            }
            if ((HEAPU8[(($3_1 + ($11_1 + 92 | 0) | 0) + -1 | 0) >> 0] | 0) >>> 0 > 1 >>> 0) {
            break label$21
            }
            label$22 : {
            label$23 : while (1) {
              HEAP32[($11_1 + 12 | 0) >> 2] = $775($14_1 | 0) | 0;
              if (!($975($10_1 | 0, $11_1 + 12 | 0 | 0) | 0)) {
              break label$22
              }
              if (!($200($7_1 | 0, 1 | 0, HEAP8[($976($10_1 | 0) | 0) >> 0] | 0 | 0) | 0)) {
              break label$22
              }
              $977($10_1 | 0) | 0;
              continue label$23;
            };
            }
            HEAP32[($11_1 + 12 | 0) >> 2] = $774($14_1 | 0) | 0;
            label$24 : {
            $1_1 = $978($10_1 | 0, $11_1 + 12 | 0 | 0) | 0;
            if ($1_1 >>> 0 > ($309($17_1 | 0) | 0) >>> 0) {
              break label$24
            }
            HEAP32[($11_1 + 12 | 0) >> 2] = $775($17_1 | 0) | 0;
            if ($980($979($11_1 + 12 | 0 | 0, $1_1 | 0) | 0 | 0, $775($17_1 | 0) | 0 | 0, $774($14_1 | 0) | 0 | 0) | 0) {
              break label$21
            }
            }
            HEAP32[($11_1 + 8 | 0) >> 2] = $774($14_1 | 0) | 0;
            HEAP32[$10_1 >> 2] = HEAP32[($974($11_1 + 12 | 0 | 0, $11_1 + 8 | 0 | 0) | 0) >> 2] | 0;
          }
          HEAP32[($11_1 + 12 | 0) >> 2] = HEAP32[$10_1 >> 2] | 0;
          label$25 : {
            label$26 : while (1) {
            HEAP32[($11_1 + 8 | 0) >> 2] = $775($14_1 | 0) | 0;
            if (!($975($11_1 + 12 | 0 | 0, $11_1 + 8 | 0 | 0) | 0)) {
              break label$25
            }
            if ($198($0_1 | 0, $11_1 + 524 | 0 | 0) | 0) {
              break label$25
            }
            if ((($199($0_1 | 0) | 0) & 255 | 0 | 0) != (HEAPU8[($976($11_1 + 12 | 0 | 0) | 0) >> 0] | 0 | 0)) {
              break label$25
            }
            $201($0_1 | 0) | 0;
            $977($11_1 + 12 | 0 | 0) | 0;
            continue label$26;
            };
          }
          if (!$18_1) {
            break label$5
          }
          HEAP32[($11_1 + 8 | 0) >> 2] = $775($14_1 | 0) | 0;
          if (!($975($11_1 + 12 | 0 | 0, $11_1 + 8 | 0 | 0) | 0)) {
            break label$5
          }
          HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
          $0_1 = 0;
          break label$6;
          }
          label$27 : {
          label$28 : while (1) {
            if ($198($0_1 | 0, $11_1 + 524 | 0 | 0) | 0) {
            break label$27
            }
            label$29 : {
            label$30 : {
              $1_1 = $199($0_1 | 0) | 0;
              if (!($200($7_1 | 0, 64 | 0, $1_1 | 0) | 0)) {
              break label$30
              }
              label$31 : {
              $4_1 = HEAP32[$9_1 >> 2] | 0;
              if (($4_1 | 0) != (HEAP32[($11_1 + 520 | 0) >> 2] | 0 | 0)) {
                break label$31
              }
              $981($8_1 | 0, $9_1 | 0, $11_1 + 520 | 0 | 0);
              $4_1 = HEAP32[$9_1 >> 2] | 0;
              }
              HEAP32[$9_1 >> 2] = $4_1 + 1 | 0;
              HEAP8[$4_1 >> 0] = $1_1;
              $10_1 = $10_1 + 1 | 0;
              break label$29;
            }
            if (!($309($13_1 | 0) | 0)) {
              break label$27
            }
            if (!$10_1) {
              break label$27
            }
            if (($1_1 & 255 | 0 | 0) != ((HEAPU8[($11_1 + 90 | 0) >> 0] | 0) & 255 | 0 | 0)) {
              break label$27
            }
            label$32 : {
              $1_1 = HEAP32[($11_1 + 100 | 0) >> 2] | 0;
              if (($1_1 | 0) != (HEAP32[($11_1 + 96 | 0) >> 2] | 0 | 0)) {
              break label$32
              }
              $982($12_1 | 0, $11_1 + 100 | 0 | 0, $11_1 + 96 | 0 | 0);
              $1_1 = HEAP32[($11_1 + 100 | 0) >> 2] | 0;
            }
            HEAP32[($11_1 + 100 | 0) >> 2] = $1_1 + 4 | 0;
            HEAP32[$1_1 >> 2] = $10_1;
            $10_1 = 0;
            }
            $201($0_1 | 0) | 0;
            continue label$28;
          };
          }
          label$33 : {
          $373_1 = $970($12_1 | 0) | 0;
          $1_1 = HEAP32[($11_1 + 100 | 0) >> 2] | 0;
          if (($373_1 | 0) == ($1_1 | 0)) {
            break label$33
          }
          if (!$10_1) {
            break label$33
          }
          label$34 : {
            if (($1_1 | 0) != (HEAP32[($11_1 + 96 | 0) >> 2] | 0 | 0)) {
            break label$34
            }
            $982($12_1 | 0, $11_1 + 100 | 0 | 0, $11_1 + 96 | 0 | 0);
            $1_1 = HEAP32[($11_1 + 100 | 0) >> 2] | 0;
          }
          HEAP32[($11_1 + 100 | 0) >> 2] = $1_1 + 4 | 0;
          HEAP32[$1_1 >> 2] = $10_1;
          }
          label$35 : {
          if ((HEAP32[($11_1 + 24 | 0) >> 2] | 0 | 0) < (1 | 0)) {
            break label$35
          }
          label$36 : {
            label$37 : {
            if ($198($0_1 | 0, $11_1 + 524 | 0 | 0) | 0) {
              break label$37
            }
            if ((($199($0_1 | 0) | 0) & 255 | 0 | 0) == (HEAPU8[($11_1 + 91 | 0) >> 0] | 0 | 0)) {
              break label$36
            }
            }
            HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
            $0_1 = 0;
            break label$6;
          }
          label$38 : while (1) {
            $201($0_1 | 0) | 0;
            if ((HEAP32[($11_1 + 24 | 0) >> 2] | 0 | 0) < (1 | 0)) {
            break label$35
            }
            label$39 : {
            label$40 : {
              if ($198($0_1 | 0, $11_1 + 524 | 0 | 0) | 0) {
              break label$40
              }
              if ($200($7_1 | 0, 64 | 0, $199($0_1 | 0) | 0 | 0) | 0) {
              break label$39
              }
            }
            HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
            $0_1 = 0;
            break label$6;
            }
            label$41 : {
            if ((HEAP32[$9_1 >> 2] | 0 | 0) != (HEAP32[($11_1 + 520 | 0) >> 2] | 0 | 0)) {
              break label$41
            }
            $981($8_1 | 0, $9_1 | 0, $11_1 + 520 | 0 | 0);
            }
            $10_1 = $199($0_1 | 0) | 0;
            $1_1 = HEAP32[$9_1 >> 2] | 0;
            HEAP32[$9_1 >> 2] = $1_1 + 1 | 0;
            HEAP8[$1_1 >> 0] = $10_1;
            HEAP32[($11_1 + 24 | 0) >> 2] = (HEAP32[($11_1 + 24 | 0) >> 2] | 0) + -1 | 0;
            continue label$38;
          };
          }
          $1_1 = $2_1;
          if ((HEAP32[$9_1 >> 2] | 0 | 0) != ($966($8_1 | 0) | 0 | 0)) {
          break label$4
          }
          HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
          $0_1 = 0;
          break label$6;
        }
        label$42 : {
          if (!$2_1) {
          break label$42
          }
          $10_1 = 1;
          label$43 : while (1) {
          if ($10_1 >>> 0 >= ($309($2_1 | 0) | 0) >>> 0) {
            break label$42
          }
          label$44 : {
            label$45 : {
            if ($198($0_1 | 0, $11_1 + 524 | 0 | 0) | 0) {
              break label$45
            }
            if ((($199($0_1 | 0) | 0) & 255 | 0 | 0) == (HEAPU8[($678($2_1 | 0, $10_1 | 0) | 0) >> 0] | 0 | 0)) {
              break label$44
            }
            }
            HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
            $0_1 = 0;
            break label$6;
          }
          $201($0_1 | 0) | 0;
          $10_1 = $10_1 + 1 | 0;
          continue label$43;
          };
        }
        $0_1 = 1;
        if (($970($12_1 | 0) | 0 | 0) == (HEAP32[($11_1 + 100 | 0) >> 2] | 0 | 0)) {
          break label$6
        }
        $0_1 = 0;
        HEAP32[($11_1 + 16 | 0) >> 2] = 0;
        $689($13_1 | 0, $970($12_1 | 0) | 0 | 0, HEAP32[($11_1 + 100 | 0) >> 2] | 0 | 0, $11_1 + 16 | 0 | 0);
        label$46 : {
          if (!(HEAP32[($11_1 + 16 | 0) >> 2] | 0)) {
          break label$46
          }
          HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
          break label$6;
        }
        $0_1 = 1;
        }
        $1761($17_1 | 0) | 0;
        $1761($16_1 | 0) | 0;
        $1761($15_1 | 0) | 0;
        $1761($14_1 | 0) | 0;
        $1761($13_1 | 0) | 0;
        $983($12_1 | 0) | 0;
        break label$1;
      }
      $1_1 = $2_1;
      }
      $3_1 = $3_1 + 1 | 0;
      continue label$3;
    };
    }
    global$0 = $11_1 + 528 | 0;
    return $0_1 | 0;
  }
  
  function $966($0_1) {
    $0_1 = $0_1 | 0;
    return HEAP32[($984($0_1 | 0) | 0) >> 2] | 0 | 0;
  }
  
  function $967($0_1) {
    $0_1 = $0_1 | 0;
    return $0_1 + 10 | 0 | 0;
  }
  
  function $968($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $1_1 = $1728($0_1 | 0, $1_1 | 0) | 0;
    $448($1_1 + 4 | 0 | 0, $2_1 | 0) | 0;
    return $1_1 | 0;
  }
  
  function $969($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    HEAP32[($3_1 + 12 | 0) >> 2] = $1_1;
    $1_1 = $993($0_1 | 0, $3_1 + 12 | 0 | 0, $2_1 | 0) | 0;
    global$0 = $3_1 + 16 | 0;
    return $1_1 | 0;
  }
  
  function $970($0_1) {
    $0_1 = $0_1 | 0;
    return HEAP32[($994($0_1 | 0) | 0) >> 2] | 0 | 0;
  }
  
  function $971($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $6_1 = $6_1 | 0;
    $7_1 = $7_1 | 0;
    $8_1 = $8_1 | 0;
    $9_1 = $9_1 | 0;
    var $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0;
    $10_1 = global$0 - 16 | 0;
    global$0 = $10_1;
    label$1 : {
    label$2 : {
      if (!$0_1) {
      break label$2
      }
      $1_1 = $995($1_1 | 0) | 0;
      $996($10_1 + 4 | 0 | 0, $1_1 | 0);
      $11_1 = $2_1;
      $12_1 = HEAP32[($10_1 + 4 | 0) >> 2] | 0;
      HEAP8[$11_1 >> 0] = $12_1;
      HEAP8[($11_1 + 1 | 0) >> 0] = $12_1 >>> 8 | 0;
      HEAP8[($11_1 + 2 | 0) >> 0] = $12_1 >>> 16 | 0;
      HEAP8[($11_1 + 3 | 0) >> 0] = $12_1 >>> 24 | 0;
      $997($10_1 + 4 | 0 | 0, $1_1 | 0);
      $290($8_1 | 0, $10_1 + 4 | 0 | 0) | 0;
      $1761($10_1 + 4 | 0 | 0) | 0;
      $998($10_1 + 4 | 0 | 0, $1_1 | 0);
      $290($7_1 | 0, $10_1 + 4 | 0 | 0) | 0;
      $1761($10_1 + 4 | 0 | 0) | 0;
      HEAP8[$3_1 >> 0] = $999($1_1 | 0) | 0;
      HEAP8[$4_1 >> 0] = $1000($1_1 | 0) | 0;
      $1001($10_1 + 4 | 0 | 0, $1_1 | 0);
      $290($5_1 | 0, $10_1 + 4 | 0 | 0) | 0;
      $1761($10_1 + 4 | 0 | 0) | 0;
      $1002($10_1 + 4 | 0 | 0, $1_1 | 0);
      $290($6_1 | 0, $10_1 + 4 | 0 | 0) | 0;
      $1761($10_1 + 4 | 0 | 0) | 0;
      $1_1 = $1003($1_1 | 0) | 0;
      break label$1;
    }
    $1_1 = $1004($1_1 | 0) | 0;
    $1005($10_1 + 4 | 0 | 0, $1_1 | 0);
    $13_1 = $2_1;
    $14_1 = HEAP32[($10_1 + 4 | 0) >> 2] | 0;
    HEAP8[$13_1 >> 0] = $14_1;
    HEAP8[($13_1 + 1 | 0) >> 0] = $14_1 >>> 8 | 0;
    HEAP8[($13_1 + 2 | 0) >> 0] = $14_1 >>> 16 | 0;
    HEAP8[($13_1 + 3 | 0) >> 0] = $14_1 >>> 24 | 0;
    $1006($10_1 + 4 | 0 | 0, $1_1 | 0);
    $290($8_1 | 0, $10_1 + 4 | 0 | 0) | 0;
    $1761($10_1 + 4 | 0 | 0) | 0;
    $1007($10_1 + 4 | 0 | 0, $1_1 | 0);
    $290($7_1 | 0, $10_1 + 4 | 0 | 0) | 0;
    $1761($10_1 + 4 | 0 | 0) | 0;
    HEAP8[$3_1 >> 0] = $1008($1_1 | 0) | 0;
    HEAP8[$4_1 >> 0] = $1009($1_1 | 0) | 0;
    $1010($10_1 + 4 | 0 | 0, $1_1 | 0);
    $290($5_1 | 0, $10_1 + 4 | 0 | 0) | 0;
    $1761($10_1 + 4 | 0 | 0) | 0;
    $1011($10_1 + 4 | 0 | 0, $1_1 | 0);
    $290($6_1 | 0, $10_1 + 4 | 0 | 0) | 0;
    $1761($10_1 + 4 | 0 | 0) | 0;
    $1_1 = $1012($1_1 | 0) | 0;
    }
    HEAP32[$9_1 >> 2] = $1_1;
    global$0 = $10_1 + 16 | 0;
  }
  
  function $972($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $1013($0_1 | 0, ($209(HEAP32[$1_1 >> 2] | 0 | 0) | 0) << 24 >> 24 | 0, HEAP32[$1_1 >> 2] | 0 | 0) | 0;
  }
  
  function $973($0_1) {
    $0_1 = $0_1 | 0;
    return HEAP8[$0_1 >> 0] | 0 | 0;
  }
  
  function $974($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    HEAP32[$0_1 >> 2] = $1014($1_1 | 0) | 0;
    return $0_1 | 0;
  }
  
  function $975($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return ($1015($0_1 | 0, $1_1 | 0) | 0) ^ 1 | 0 | 0;
  }
  
  function $976($0_1) {
    $0_1 = $0_1 | 0;
    return HEAP32[$0_1 >> 2] | 0 | 0;
  }
  
  function $977($0_1) {
    $0_1 = $0_1 | 0;
    HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + 1 | 0;
    return $0_1 | 0;
  }
  
  function $978($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return ($1016($0_1 | 0) | 0) - ($1014($1_1 | 0) | 0) | 0 | 0;
  }
  
  function $979($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $1018($0_1 | 0, 0 - $1_1 | 0 | 0) | 0 | 0;
  }
  
  function $980($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    return $1017($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
  }
  
  function $981($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $5_1 = 0, $3_1 = 0, $4_1 = 0, $8_1 = 0, $6_1 = 0, $7_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    $4_1 = HEAP32[($1019($0_1 | 0) | 0) >> 2] | 0;
    label$1 : {
    label$2 : {
      $5_1 = (HEAP32[$2_1 >> 2] | 0) - ($966($0_1 | 0) | 0) | 0;
      if ($5_1 >>> 0 >= (($417() | 0) >>> 1 | 0) >>> 0) {
      break label$2
      }
      $5_1 = $5_1 << 1 | 0;
      break label$1;
    }
    $5_1 = $417() | 0;
    }
    $5_1 = $5_1 >>> 0 > 1 >>> 0 ? $5_1 : 1;
    $6_1 = HEAP32[$1_1 >> 2] | 0;
    $7_1 = $966($0_1 | 0) | 0;
    label$3 : {
    label$4 : {
      if (($4_1 | 0) != (95 | 0)) {
      break label$4
      }
      $8_1 = 0;
      break label$3;
    }
    $8_1 = $966($0_1 | 0) | 0;
    }
    label$5 : {
    $8_1 = $129($8_1 | 0, $5_1 | 0) | 0;
    if (!$8_1) {
      break label$5
    }
    label$6 : {
      if (($4_1 | 0) == (95 | 0)) {
      break label$6
      }
      $1020($0_1 | 0) | 0;
    }
    HEAP32[($3_1 + 4 | 0) >> 2] = 94;
    $4_1 = $798($3_1 + 8 | 0 | 0, $8_1 | 0, $3_1 + 4 | 0 | 0) | 0;
    $1021($0_1 | 0, $4_1 | 0) | 0;
    $802($4_1 | 0) | 0;
    HEAP32[$1_1 >> 2] = ($966($0_1 | 0) | 0) + ($6_1 - $7_1 | 0) | 0;
    HEAP32[$2_1 >> 2] = ($966($0_1 | 0) | 0) + $5_1 | 0;
    global$0 = $3_1 + 16 | 0;
    return;
    }
    $1755();
    wasm2js_trap();
  }
  
  function $982($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $5_1 = 0, $3_1 = 0, $4_1 = 0, $8_1 = 0, $6_1 = 0, $7_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    $4_1 = HEAP32[($1022($0_1 | 0) | 0) >> 2] | 0;
    label$1 : {
    label$2 : {
      $5_1 = (HEAP32[$2_1 >> 2] | 0) - ($970($0_1 | 0) | 0) | 0;
      if ($5_1 >>> 0 >= (($417() | 0) >>> 1 | 0) >>> 0) {
      break label$2
      }
      $5_1 = $5_1 << 1 | 0;
      break label$1;
    }
    $5_1 = $417() | 0;
    }
    $5_1 = $5_1 ? $5_1 : 4;
    $6_1 = HEAP32[$1_1 >> 2] | 0;
    $7_1 = $970($0_1 | 0) | 0;
    label$3 : {
    label$4 : {
      if (($4_1 | 0) != (95 | 0)) {
      break label$4
      }
      $8_1 = 0;
      break label$3;
    }
    $8_1 = $970($0_1 | 0) | 0;
    }
    label$5 : {
    $8_1 = $129($8_1 | 0, $5_1 | 0) | 0;
    if (!$8_1) {
      break label$5
    }
    label$6 : {
      if (($4_1 | 0) == (95 | 0)) {
      break label$6
      }
      $1023($0_1 | 0) | 0;
    }
    HEAP32[($3_1 + 4 | 0) >> 2] = 94;
    $4_1 = $969($3_1 + 8 | 0 | 0, $8_1 | 0, $3_1 + 4 | 0 | 0) | 0;
    $1024($0_1 | 0, $4_1 | 0) | 0;
    $983($4_1 | 0) | 0;
    HEAP32[$1_1 >> 2] = ($970($0_1 | 0) | 0) + ($6_1 - $7_1 | 0) | 0;
    HEAP32[$2_1 >> 2] = ($970($0_1 | 0) | 0) + ($5_1 & -4 | 0) | 0;
    global$0 = $3_1 + 16 | 0;
    return;
    }
    $1755();
    wasm2js_trap();
  }
  
  function $983($0_1) {
    $0_1 = $0_1 | 0;
    $1026($0_1 | 0, 0 | 0);
    return $0_1 | 0;
  }
  
  function $984($0_1) {
    $0_1 = $0_1 | 0;
    return $1729($0_1 | 0) | 0 | 0;
  }
  
  function $985($0_1) {
    $0_1 = $0_1 | 0;
    return $1730($0_1 | 0) | 0 | 0;
  }
  
  function $986($0_1) {
    $0_1 = $0_1 | 0;
    return $449($0_1 + 4 | 0 | 0) | 0 | 0;
  }
  
  function $987($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $6_1 = $6_1 | 0;
    var $7_1 = 0, $8_1 = 0;
    $7_1 = global$0 - 144 | 0;
    global$0 = $7_1;
    HEAP32[($7_1 + 136 | 0) >> 2] = $2_1;
    HEAP32[($7_1 + 140 | 0) >> 2] = $1_1;
    HEAP32[($7_1 + 20 | 0) >> 2] = 95;
    $8_1 = $798($7_1 + 24 | 0 | 0, $7_1 + 32 | 0 | 0, $7_1 + 20 | 0 | 0) | 0;
    $439($7_1 + 16 | 0 | 0, $4_1 | 0);
    $1_1 = $197($7_1 + 16 | 0 | 0) | 0;
    HEAP8[($7_1 + 15 | 0) >> 0] = 0;
    label$1 : {
    if (!($965($7_1 + 140 | 0 | 0, $2_1 | 0, $3_1 | 0, $7_1 + 16 | 0 | 0, $196($4_1 | 0) | 0 | 0, $5_1 | 0, $7_1 + 15 | 0 | 0, $1_1 | 0, $8_1 | 0, $7_1 + 20 | 0 | 0, $7_1 + 132 | 0 | 0) | 0)) {
      break label$1
    }
    $988($6_1 | 0);
    label$2 : {
      if ((HEAPU8[($7_1 + 15 | 0) >> 0] | 0 | 0) != (1 | 0)) {
      break label$2
      }
      $1770($6_1 | 0, $432($1_1 | 0, 45 | 0) | 0 | 0);
    }
    $1_1 = $432($1_1 | 0, 48 | 0) | 0;
    $2_1 = $966($8_1 | 0) | 0;
    $3_1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
    $4_1 = $3_1 + -1 | 0;
    $1_1 = $1_1 & 255 | 0;
    label$3 : {
      label$4 : while (1) {
      if ($2_1 >>> 0 >= $4_1 >>> 0) {
        break label$3
      }
      if ((HEAPU8[$2_1 >> 0] | 0 | 0) != ($1_1 | 0)) {
        break label$3
      }
      $2_1 = $2_1 + 1 | 0;
      continue label$4;
      };
    }
    $989($6_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
    }
    label$5 : {
    if (!($198($7_1 + 140 | 0 | 0, $7_1 + 136 | 0 | 0) | 0)) {
      break label$5
    }
    HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 2 | 0;
    }
    $2_1 = HEAP32[($7_1 + 140 | 0) >> 2] | 0;
    $668($7_1 + 16 | 0 | 0) | 0;
    $802($8_1 | 0) | 0;
    global$0 = $7_1 + 144 | 0;
    return $2_1 | 0;
  }
  
  function $988($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0, $3_1 = 0, $2_1 = 0;
    $1_1 = global$0 - 16 | 0;
    global$0 = $1_1;
    $2_1 = $309($0_1 | 0) | 0;
    label$1 : {
    label$2 : {
      if (!($296($0_1 | 0) | 0)) {
      break label$2
      }
      $3_1 = $381($0_1 | 0) | 0;
      HEAP8[($1_1 + 15 | 0) >> 0] = 0;
      $389($3_1 | 0, $1_1 + 15 | 0 | 0);
      $414($0_1 | 0, 0 | 0);
      break label$1;
    }
    $3_1 = $382($0_1 | 0) | 0;
    HEAP8[($1_1 + 14 | 0) >> 0] = 0;
    $389($3_1 | 0, $1_1 + 14 | 0 | 0);
    $388($0_1 | 0, 0 | 0);
    }
    $307($0_1 | 0, $2_1 | 0);
    global$0 = $1_1 + 16 | 0;
  }
  
  function $989($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $5_1 = 0, $4_1 = 0, $3_1 = 0, $6_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    $4_1 = $309($0_1 | 0) | 0;
    $5_1 = $310($0_1 | 0) | 0;
    label$1 : {
    $6_1 = $404($1_1 | 0, $2_1 | 0) | 0;
    if (!$6_1) {
      break label$1
    }
    label$2 : {
      if ($990($0_1 | 0, $1_1 | 0) | 0) {
      break label$2
      }
      label$3 : {
      if (($5_1 - $4_1 | 0) >>> 0 >= $6_1 >>> 0) {
        break label$3
      }
      $991($0_1 | 0, $5_1 | 0, ($4_1 - $5_1 | 0) + $6_1 | 0 | 0, $4_1 | 0, $4_1 | 0, 0 | 0, 0 | 0);
      }
      $305($0_1 | 0, $6_1 | 0);
      $5_1 = ($292($0_1 | 0) | 0) + $4_1 | 0;
      label$4 : {
      label$5 : while (1) {
        if (($1_1 | 0) == ($2_1 | 0)) {
        break label$4
        }
        $389($5_1 | 0, $1_1 | 0);
        $1_1 = $1_1 + 1 | 0;
        $5_1 = $5_1 + 1 | 0;
        continue label$5;
      };
      }
      HEAP8[($3_1 + 15 | 0) >> 0] = 0;
      $389($5_1 | 0, $3_1 + 15 | 0 | 0);
      $992($0_1 | 0, $6_1 + $4_1 | 0 | 0);
      break label$1;
    }
    $1_1 = $301($3_1 | 0, $1_1 | 0, $2_1 | 0, $299($0_1 | 0) | 0 | 0) | 0;
    $1768($0_1 | 0, $308($1_1 | 0) | 0 | 0, $309($1_1 | 0) | 0 | 0) | 0;
    $1761($1_1 | 0) | 0;
    }
    global$0 = $3_1 + 16 | 0;
    return $0_1 | 0;
  }
  
  function $990($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $1535($308($0_1 | 0) | 0 | 0, (($308($0_1 | 0) | 0) + ($309($0_1 | 0) | 0) | 0) + 1 | 0 | 0, $1_1 | 0) | 0 | 0;
  }
  
  function $991($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $6_1 = $6_1 | 0;
    $1483($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $6_1 | 0);
    $6_1 = ($3_1 - $5_1 | 0) + $6_1 | 0;
    $414($0_1 | 0, $6_1 | 0);
    $288($0_1 | 0, $6_1 | 0);
  }
  
  function $992($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    label$1 : {
    if (!($296($0_1 | 0) | 0)) {
      break label$1
    }
    $414($0_1 | 0, $1_1 | 0);
    return;
    }
    $388($0_1 | 0, $1_1 | 0);
  }
  
  function $993($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $1_1 = $1731($0_1 | 0, $1_1 | 0) | 0;
    $448($1_1 + 4 | 0 | 0, $2_1 | 0) | 0;
    return $1_1 | 0;
  }
  
  function $994($0_1) {
    $0_1 = $0_1 | 0;
    return $1735($0_1 | 0) | 0 | 0;
  }
  
  function $995($0_1) {
    $0_1 = $0_1 | 0;
    return $673($0_1 | 0, 89048 | 0) | 0 | 0;
  }
  
  function $996($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 44 | 0) >> 2] | 0 | 0]($0_1, $1_1);
  }
  
  function $997($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, $1_1);
  }
  
  function $998($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1);
  }
  
  function $999($0_1) {
    $0_1 = $0_1 | 0;
    return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
  }
  
  function $1000($0_1) {
    $0_1 = $0_1 | 0;
    return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
  }
  
  function $1001($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1);
  }
  
  function $1002($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1);
  }
  
  function $1003($0_1) {
    $0_1 = $0_1 | 0;
    return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
  }
  
  function $1004($0_1) {
    $0_1 = $0_1 | 0;
    return $673($0_1 | 0, 89040 | 0) | 0 | 0;
  }
  
  function $1005($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 44 | 0) >> 2] | 0 | 0]($0_1, $1_1);
  }
  
  function $1006($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, $1_1);
  }
  
  function $1007($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1);
  }
  
  function $1008($0_1) {
    $0_1 = $0_1 | 0;
    return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
  }
  
  function $1009($0_1) {
    $0_1 = $0_1 | 0;
    return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
  }
  
  function $1010($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1);
  }
  
  function $1011($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1);
  }
  
  function $1012($0_1) {
    $0_1 = $0_1 | 0;
    return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
  }
  
  function $1013($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
    HEAP8[$0_1 >> 0] = $1_1;
    return $0_1 | 0;
  }
  
  function $1014($0_1) {
    $0_1 = $0_1 | 0;
    return HEAP32[$0_1 >> 2] | 0 | 0;
  }
  
  function $1015($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return ($1016($0_1 | 0) | 0 | 0) == ($1014($1_1 | 0) | 0 | 0) | 0;
  }
  
  function $1016($0_1) {
    $0_1 = $0_1 | 0;
    return HEAP32[$0_1 >> 2] | 0 | 0;
  }
  
  function $1017($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    $2_1 = $1538($1537($0_1 | 0) | 0 | 0, $1537($1_1 | 0) | 0 | 0, $1537($2_1 | 0) | 0 | 0, $3_1 + 15 | 0 | 0) | 0;
    global$0 = $3_1 + 16 | 0;
    return $2_1 | 0;
  }
  
  function $1018($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0;
    $2_1 = global$0 - 16 | 0;
    global$0 = $2_1;
    HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
    $1544($2_1 + 12 | 0 | 0, $1_1 | 0) | 0;
    $0_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
    global$0 = $2_1 + 16 | 0;
    return $0_1 | 0;
  }
  
  function $1019($0_1) {
    $0_1 = $0_1 | 0;
    return $986($0_1 | 0) | 0 | 0;
  }
  
  function $1020($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0;
    $1_1 = HEAP32[($985($0_1 | 0) | 0) >> 2] | 0;
    HEAP32[($985($0_1 | 0) | 0) >> 2] = 0;
    return $1_1 | 0;
  }
  
  function $1021($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $800($0_1 | 0, $1020($1_1 | 0) | 0 | 0);
    $1_1 = HEAP32[($1019($1_1 | 0) | 0) >> 2] | 0;
    HEAP32[($986($0_1 | 0) | 0) >> 2] = $1_1;
    return $0_1 | 0;
  }
  
  function $1022($0_1) {
    $0_1 = $0_1 | 0;
    return $1733($0_1 | 0) | 0 | 0;
  }
  
  function $1023($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0;
    $1_1 = HEAP32[($1732($0_1 | 0) | 0) >> 2] | 0;
    HEAP32[($1732($0_1 | 0) | 0) >> 2] = 0;
    return $1_1 | 0;
  }
  
  function $1024($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1026($0_1 | 0, $1023($1_1 | 0) | 0 | 0);
    $1_1 = HEAP32[($1022($1_1 | 0) | 0) >> 2] | 0;
    HEAP32[($1733($0_1 | 0) | 0) >> 2] = $1_1;
    return $0_1 | 0;
  }
  
  function $1025($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1392($0_1 | 0, $1_1 | 0);
  }
  
  function $1026($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0;
    $2_1 = HEAP32[($1732($0_1 | 0) | 0) >> 2] | 0;
    HEAP32[($1732($0_1 | 0) | 0) >> 2] = $1_1;
    label$1 : {
    if (!$2_1) {
      break label$1
    }
    FUNCTION_TABLE[HEAP32[($1733($0_1 | 0) | 0) >> 2] | 0 | 0]($2_1);
    }
  }
  
  function $1027($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $6_1 = $6_1 | 0;
    var $7_1 = 0, $10_1 = 0, $8_1 = 0, $11_1 = 0, $12_1 = 0, i64toi32_i32$1 = 0;
    $7_1 = global$0 - 624 | 0;
    global$0 = $7_1;
    HEAP32[($7_1 + 616 | 0) >> 2] = $2_1;
    HEAP32[($7_1 + 620 | 0) >> 2] = $1_1;
    HEAP32[($7_1 + 16 | 0) >> 2] = 95;
    $1_1 = $830($7_1 + 200 | 0 | 0, $7_1 + 208 | 0 | 0, $7_1 + 16 | 0 | 0) | 0;
    $439($7_1 + 192 | 0 | 0, $4_1 | 0);
    $8_1 = $261($7_1 + 192 | 0 | 0) | 0;
    HEAP8[($7_1 + 191 | 0) >> 0] = 0;
    label$1 : {
    if (!($1028($7_1 + 620 | 0 | 0, $2_1 | 0, $3_1 | 0, $7_1 + 192 | 0 | 0, $196($4_1 | 0) | 0 | 0, $5_1 | 0, $7_1 + 191 | 0 | 0, $8_1 | 0, $1_1 | 0, $7_1 + 196 | 0 | 0, $7_1 + 608 | 0 | 0) | 0)) {
      break label$1
    }
    $11_1 = 0;
    $12_1 = HEAPU8[($11_1 + 67031 | 0) >> 0] | 0 | ((HEAPU8[($11_1 + 67032 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($11_1 + 67033 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($11_1 + 67034 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    HEAP8[($7_1 + 183 | 0) >> 0] = $12_1;
    HEAP8[($7_1 + 184 | 0) >> 0] = $12_1 >>> 8 | 0;
    HEAP8[($7_1 + 185 | 0) >> 0] = $12_1 >>> 16 | 0;
    HEAP8[($7_1 + 186 | 0) >> 0] = $12_1 >>> 24 | 0;
    $10_1 = 0;
    i64toi32_i32$1 = HEAPU8[($10_1 + 67028 | 0) >> 0] | 0 | ((HEAPU8[($10_1 + 67029 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($10_1 + 67030 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($10_1 + 67031 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    HEAP32[($7_1 + 176 | 0) >> 2] = HEAPU8[($10_1 + 67024 | 0) >> 0] | 0 | ((HEAPU8[($10_1 + 67025 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($10_1 + 67026 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($10_1 + 67027 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    HEAP32[($7_1 + 180 | 0) >> 2] = i64toi32_i32$1;
    $757($8_1 | 0, $7_1 + 176 | 0 | 0, $7_1 + 186 | 0 | 0, $7_1 + 128 | 0 | 0) | 0;
    HEAP32[($7_1 + 16 | 0) >> 2] = 94;
    $8_1 = $798($7_1 + 8 | 0 | 0, 0 | 0, $7_1 + 16 | 0 | 0) | 0;
    $4_1 = $7_1 + 16 | 0;
    label$2 : {
      label$3 : {
      if (((HEAP32[($7_1 + 196 | 0) >> 2] | 0) - ($1029($1_1 | 0) | 0) | 0 | 0) < (393 | 0)) {
        break label$3
      }
      $800($8_1 | 0, $126((((HEAP32[($7_1 + 196 | 0) >> 2] | 0) - ($1029($1_1 | 0) | 0) | 0) >> 2 | 0) + 2 | 0 | 0) | 0 | 0);
      if (!($966($8_1 | 0) | 0)) {
        break label$2
      }
      $4_1 = $966($8_1 | 0) | 0;
      }
      label$4 : {
      if ((HEAPU8[($7_1 + 191 | 0) >> 0] | 0 | 0) != (1 | 0)) {
        break label$4
      }
      HEAP8[$4_1 >> 0] = 45;
      $4_1 = $4_1 + 1 | 0;
      }
      $2_1 = $1029($1_1 | 0) | 0;
      label$5 : {
      label$6 : while (1) {
        label$7 : {
        if ($2_1 >>> 0 < (HEAP32[($7_1 + 196 | 0) >> 2] | 0) >>> 0) {
          break label$7
        }
        HEAP8[$4_1 >> 0] = 0;
        HEAP32[$7_1 >> 2] = $6_1;
        if (($624($7_1 + 16 | 0 | 0, 66149 | 0, $7_1 | 0) | 0 | 0) != (1 | 0)) {
          break label$5
        }
        $802($8_1 | 0) | 0;
        break label$1;
        }
        HEAP8[$4_1 >> 0] = HEAPU8[(($7_1 + 176 | 0) + ((($769($7_1 + 128 | 0 | 0, $1030($7_1 + 128 | 0 | 0) | 0 | 0, $2_1 | 0) | 0) - ($7_1 + 128 | 0) | 0) >> 2 | 0) | 0) >> 0] | 0;
        $4_1 = $4_1 + 1 | 0;
        $2_1 = $2_1 + 4 | 0;
        continue label$6;
      };
      }
      $1756(65824 | 0);
      wasm2js_trap();
    }
    $1755();
    wasm2js_trap();
    }
    label$8 : {
    if (!($262($7_1 + 620 | 0 | 0, $7_1 + 616 | 0 | 0) | 0)) {
      break label$8
    }
    HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 2 | 0;
    }
    $2_1 = HEAP32[($7_1 + 620 | 0) >> 2] | 0;
    $668($7_1 + 192 | 0 | 0) | 0;
    $833($1_1 | 0) | 0;
    global$0 = $7_1 + 624 | 0;
    return $2_1 | 0;
  }
  
  function $1028($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $6_1 = $6_1 | 0;
    $7_1 = $7_1 | 0;
    $8_1 = $8_1 | 0;
    $9_1 = $9_1 | 0;
    $10_1 = $10_1 | 0;
    var $11_1 = 0, $14_1 = 0, $16_1 = 0, $15_1 = 0, $12_1 = 0, $17_1 = 0, $13_1 = 0, $18_1 = 0, $368_1 = 0;
    $11_1 = global$0 - 528 | 0;
    global$0 = $11_1;
    HEAP32[($11_1 + 520 | 0) >> 2] = $10_1;
    HEAP32[($11_1 + 524 | 0) >> 2] = $1_1;
    label$1 : {
    label$2 : {
      if (!($262($0_1 | 0, $11_1 + 524 | 0 | 0) | 0)) {
      break label$2
      }
      HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
      $0_1 = 0;
      break label$1;
    }
    HEAP32[($11_1 + 72 | 0) >> 2] = 95;
    $12_1 = $969($11_1 + 104 | 0 | 0, $11_1 + 112 | 0 | 0, $11_1 + 72 | 0 | 0) | 0;
    $10_1 = $970($12_1 | 0) | 0;
    HEAP32[($11_1 + 100 | 0) >> 2] = $10_1;
    HEAP32[($11_1 + 96 | 0) >> 2] = $10_1 + 400 | 0;
    $13_1 = $286($11_1 + 72 | 0 | 0) | 0;
    $14_1 = $936($11_1 + 60 | 0 | 0) | 0;
    $15_1 = $936($11_1 + 48 | 0 | 0) | 0;
    $16_1 = $936($11_1 + 36 | 0 | 0) | 0;
    $17_1 = $936($11_1 + 24 | 0 | 0) | 0;
    $1032($2_1 | 0, $3_1 | 0, $11_1 + 92 | 0 | 0, $11_1 + 88 | 0 | 0, $11_1 + 84 | 0 | 0, $13_1 | 0, $14_1 | 0, $15_1 | 0, $16_1 | 0, $11_1 + 20 | 0 | 0);
    HEAP32[$9_1 >> 2] = $1029($8_1 | 0) | 0;
    $18_1 = $4_1 & 512 | 0;
    $3_1 = 0;
    $1_1 = 0;
    label$3 : while (1) {
      $2_1 = $1_1;
      label$4 : {
      label$5 : {
        label$6 : {
        label$7 : {
          if (($3_1 | 0) == (4 | 0)) {
          break label$7
          }
          if ($262($0_1 | 0, $11_1 + 524 | 0 | 0) | 0) {
          break label$7
          }
          $10_1 = 0;
          label$8 : {
          label$9 : {
            label$10 : {
            label$11 : {
              label$12 : {
              switch (HEAPU8[(($11_1 + 92 | 0) + $3_1 | 0) >> 0] | 0 | 0) {
              case 1:
                if (($3_1 | 0) == (3 | 0)) {
                break label$5
                }
                label$14 : {
                if (!($264($7_1 | 0, 1 | 0, $263($0_1 | 0) | 0 | 0) | 0)) {
                  break label$14
                }
                $1033($11_1 + 12 | 0 | 0, $0_1 | 0, 0 | 0);
                $1784($17_1 | 0, $1034($11_1 + 12 | 0 | 0) | 0 | 0);
                break label$11;
                }
                HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
                $0_1 = 0;
                break label$6;
              case 3:
                break label$10;
              case 0:
                break label$12;
              case 4:
                break label$8;
              case 2:
                break label$9;
              default:
                break label$4;
              };
              }
              if (($3_1 | 0) == (3 | 0)) {
              break label$5
              }
            }
            label$15 : while (1) {
              if ($262($0_1 | 0, $11_1 + 524 | 0 | 0) | 0) {
              break label$5
              }
              if (!($264($7_1 | 0, 1 | 0, $263($0_1 | 0) | 0 | 0) | 0)) {
              break label$5
              }
              $1033($11_1 + 12 | 0 | 0, $0_1 | 0, 0 | 0);
              $1784($17_1 | 0, $1034($11_1 + 12 | 0 | 0) | 0 | 0);
              continue label$15;
            };
            }
            label$16 : {
            if (!($730($15_1 | 0) | 0)) {
              break label$16
            }
            if (($263($0_1 | 0) | 0 | 0) != (HEAP32[($1035($15_1 | 0, 0 | 0) | 0) >> 2] | 0 | 0)) {
              break label$16
            }
            $265($0_1 | 0) | 0;
            HEAP8[$6_1 >> 0] = 0;
            $1_1 = ($730($15_1 | 0) | 0) >>> 0 > 1 >>> 0 ? $15_1 : $2_1;
            break label$4;
            }
            label$17 : {
            if (!($730($16_1 | 0) | 0)) {
              break label$17
            }
            if (($263($0_1 | 0) | 0 | 0) != (HEAP32[($1035($16_1 | 0, 0 | 0) | 0) >> 2] | 0 | 0)) {
              break label$17
            }
            $265($0_1 | 0) | 0;
            HEAP8[$6_1 >> 0] = 1;
            $1_1 = ($730($16_1 | 0) | 0) >>> 0 > 1 >>> 0 ? $16_1 : $2_1;
            break label$4;
            }
            label$18 : {
            if (!($730($15_1 | 0) | 0)) {
              break label$18
            }
            if (!($730($16_1 | 0) | 0)) {
              break label$18
            }
            HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
            $0_1 = 0;
            break label$6;
            }
            label$19 : {
            if ($730($15_1 | 0) | 0) {
              break label$19
            }
            if (!($730($16_1 | 0) | 0)) {
              break label$5
            }
            }
            HEAP8[$6_1 >> 0] = !($730($16_1 | 0) | 0);
            break label$5;
          }
          label$20 : {
            if ($3_1 >>> 0 < 2 >>> 0) {
            break label$20
            }
            if ($2_1) {
            break label$20
            }
            if ($18_1) {
            break label$20
            }
            $1_1 = 0;
            if (!(($3_1 | 0) == (2 | 0) & ((HEAPU8[($11_1 + 95 | 0) >> 0] | 0) & 255 | 0 | 0) != (0 | 0) | 0)) {
            break label$4
            }
          }
          HEAP32[($11_1 + 8 | 0) >> 2] = $810($14_1 | 0) | 0;
          $10_1 = $1036($11_1 + 12 | 0 | 0, $11_1 + 8 | 0 | 0) | 0;
          label$21 : {
            if (!$3_1) {
            break label$21
            }
            if ((HEAPU8[(($3_1 + ($11_1 + 92 | 0) | 0) + -1 | 0) >> 0] | 0) >>> 0 > 1 >>> 0) {
            break label$21
            }
            label$22 : {
            label$23 : while (1) {
              HEAP32[($11_1 + 8 | 0) >> 2] = $811($14_1 | 0) | 0;
              if (!($1037($10_1 | 0, $11_1 + 8 | 0 | 0) | 0)) {
              break label$22
              }
              if (!($264($7_1 | 0, 1 | 0, HEAP32[($1038($10_1 | 0) | 0) >> 2] | 0 | 0) | 0)) {
              break label$22
              }
              $1039($10_1 | 0) | 0;
              continue label$23;
            };
            }
            HEAP32[($11_1 + 8 | 0) >> 2] = $810($14_1 | 0) | 0;
            label$24 : {
            $1_1 = $1040($10_1 | 0, $11_1 + 8 | 0 | 0) | 0;
            if ($1_1 >>> 0 > ($730($17_1 | 0) | 0) >>> 0) {
              break label$24
            }
            HEAP32[($11_1 + 8 | 0) >> 2] = $811($17_1 | 0) | 0;
            if ($1042($1041($11_1 + 8 | 0 | 0, $1_1 | 0) | 0 | 0, $811($17_1 | 0) | 0 | 0, $810($14_1 | 0) | 0 | 0) | 0) {
              break label$21
            }
            }
            HEAP32[($11_1 + 4 | 0) >> 2] = $810($14_1 | 0) | 0;
            HEAP32[$10_1 >> 2] = HEAP32[($1036($11_1 + 8 | 0 | 0, $11_1 + 4 | 0 | 0) | 0) >> 2] | 0;
          }
          HEAP32[($11_1 + 8 | 0) >> 2] = HEAP32[$10_1 >> 2] | 0;
          label$25 : {
            label$26 : while (1) {
            HEAP32[($11_1 + 4 | 0) >> 2] = $811($14_1 | 0) | 0;
            if (!($1037($11_1 + 8 | 0 | 0, $11_1 + 4 | 0 | 0) | 0)) {
              break label$25
            }
            if ($262($0_1 | 0, $11_1 + 524 | 0 | 0) | 0) {
              break label$25
            }
            if (($263($0_1 | 0) | 0 | 0) != (HEAP32[($1038($11_1 + 8 | 0 | 0) | 0) >> 2] | 0 | 0)) {
              break label$25
            }
            $265($0_1 | 0) | 0;
            $1039($11_1 + 8 | 0 | 0) | 0;
            continue label$26;
            };
          }
          if (!$18_1) {
            break label$5
          }
          HEAP32[($11_1 + 4 | 0) >> 2] = $811($14_1 | 0) | 0;
          if (!($1037($11_1 + 8 | 0 | 0, $11_1 + 4 | 0 | 0) | 0)) {
            break label$5
          }
          HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
          $0_1 = 0;
          break label$6;
          }
          label$27 : {
          label$28 : while (1) {
            if ($262($0_1 | 0, $11_1 + 524 | 0 | 0) | 0) {
            break label$27
            }
            label$29 : {
            label$30 : {
              $1_1 = $263($0_1 | 0) | 0;
              if (!($264($7_1 | 0, 64 | 0, $1_1 | 0) | 0)) {
              break label$30
              }
              label$31 : {
              $4_1 = HEAP32[$9_1 >> 2] | 0;
              if (($4_1 | 0) != (HEAP32[($11_1 + 520 | 0) >> 2] | 0 | 0)) {
                break label$31
              }
              $1043($8_1 | 0, $9_1 | 0, $11_1 + 520 | 0 | 0);
              $4_1 = HEAP32[$9_1 >> 2] | 0;
              }
              HEAP32[$9_1 >> 2] = $4_1 + 4 | 0;
              HEAP32[$4_1 >> 2] = $1_1;
              $10_1 = $10_1 + 1 | 0;
              break label$29;
            }
            if (!($309($13_1 | 0) | 0)) {
              break label$27
            }
            if (!$10_1) {
              break label$27
            }
            if (($1_1 | 0) != (HEAP32[($11_1 + 84 | 0) >> 2] | 0 | 0)) {
              break label$27
            }
            label$32 : {
              $1_1 = HEAP32[($11_1 + 100 | 0) >> 2] | 0;
              if (($1_1 | 0) != (HEAP32[($11_1 + 96 | 0) >> 2] | 0 | 0)) {
              break label$32
              }
              $982($12_1 | 0, $11_1 + 100 | 0 | 0, $11_1 + 96 | 0 | 0);
              $1_1 = HEAP32[($11_1 + 100 | 0) >> 2] | 0;
            }
            HEAP32[($11_1 + 100 | 0) >> 2] = $1_1 + 4 | 0;
            HEAP32[$1_1 >> 2] = $10_1;
            $10_1 = 0;
            }
            $265($0_1 | 0) | 0;
            continue label$28;
          };
          }
          label$33 : {
          $368_1 = $970($12_1 | 0) | 0;
          $1_1 = HEAP32[($11_1 + 100 | 0) >> 2] | 0;
          if (($368_1 | 0) == ($1_1 | 0)) {
            break label$33
          }
          if (!$10_1) {
            break label$33
          }
          label$34 : {
            if (($1_1 | 0) != (HEAP32[($11_1 + 96 | 0) >> 2] | 0 | 0)) {
            break label$34
            }
            $982($12_1 | 0, $11_1 + 100 | 0 | 0, $11_1 + 96 | 0 | 0);
            $1_1 = HEAP32[($11_1 + 100 | 0) >> 2] | 0;
          }
          HEAP32[($11_1 + 100 | 0) >> 2] = $1_1 + 4 | 0;
          HEAP32[$1_1 >> 2] = $10_1;
          }
          label$35 : {
          if ((HEAP32[($11_1 + 20 | 0) >> 2] | 0 | 0) < (1 | 0)) {
            break label$35
          }
          label$36 : {
            label$37 : {
            if ($262($0_1 | 0, $11_1 + 524 | 0 | 0) | 0) {
              break label$37
            }
            if (($263($0_1 | 0) | 0 | 0) == (HEAP32[($11_1 + 88 | 0) >> 2] | 0 | 0)) {
              break label$36
            }
            }
            HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
            $0_1 = 0;
            break label$6;
          }
          label$38 : while (1) {
            $265($0_1 | 0) | 0;
            if ((HEAP32[($11_1 + 20 | 0) >> 2] | 0 | 0) < (1 | 0)) {
            break label$35
            }
            label$39 : {
            label$40 : {
              if ($262($0_1 | 0, $11_1 + 524 | 0 | 0) | 0) {
              break label$40
              }
              if ($264($7_1 | 0, 64 | 0, $263($0_1 | 0) | 0 | 0) | 0) {
              break label$39
              }
            }
            HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
            $0_1 = 0;
            break label$6;
            }
            label$41 : {
            if ((HEAP32[$9_1 >> 2] | 0 | 0) != (HEAP32[($11_1 + 520 | 0) >> 2] | 0 | 0)) {
              break label$41
            }
            $1043($8_1 | 0, $9_1 | 0, $11_1 + 520 | 0 | 0);
            }
            $10_1 = $263($0_1 | 0) | 0;
            $1_1 = HEAP32[$9_1 >> 2] | 0;
            HEAP32[$9_1 >> 2] = $1_1 + 4 | 0;
            HEAP32[$1_1 >> 2] = $10_1;
            HEAP32[($11_1 + 20 | 0) >> 2] = (HEAP32[($11_1 + 20 | 0) >> 2] | 0) + -1 | 0;
            continue label$38;
          };
          }
          $1_1 = $2_1;
          if ((HEAP32[$9_1 >> 2] | 0 | 0) != ($1029($8_1 | 0) | 0 | 0)) {
          break label$4
          }
          HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
          $0_1 = 0;
          break label$6;
        }
        label$42 : {
          if (!$2_1) {
          break label$42
          }
          $10_1 = 1;
          label$43 : while (1) {
          if ($10_1 >>> 0 >= ($730($2_1 | 0) | 0) >>> 0) {
            break label$42
          }
          label$44 : {
            label$45 : {
            if ($262($0_1 | 0, $11_1 + 524 | 0 | 0) | 0) {
              break label$45
            }
            if (($263($0_1 | 0) | 0 | 0) == (HEAP32[($731($2_1 | 0, $10_1 | 0) | 0) >> 2] | 0 | 0)) {
              break label$44
            }
            }
            HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
            $0_1 = 0;
            break label$6;
          }
          $265($0_1 | 0) | 0;
          $10_1 = $10_1 + 1 | 0;
          continue label$43;
          };
        }
        $0_1 = 1;
        if (($970($12_1 | 0) | 0 | 0) == (HEAP32[($11_1 + 100 | 0) >> 2] | 0 | 0)) {
          break label$6
        }
        $0_1 = 0;
        HEAP32[($11_1 + 12 | 0) >> 2] = 0;
        $689($13_1 | 0, $970($12_1 | 0) | 0 | 0, HEAP32[($11_1 + 100 | 0) >> 2] | 0 | 0, $11_1 + 12 | 0 | 0);
        label$46 : {
          if (!(HEAP32[($11_1 + 12 | 0) >> 2] | 0)) {
          break label$46
          }
          HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
          break label$6;
        }
        $0_1 = 1;
        }
        $1775($17_1 | 0) | 0;
        $1775($16_1 | 0) | 0;
        $1775($15_1 | 0) | 0;
        $1775($14_1 | 0) | 0;
        $1761($13_1 | 0) | 0;
        $983($12_1 | 0) | 0;
        break label$1;
      }
      $1_1 = $2_1;
      }
      $3_1 = $3_1 + 1 | 0;
      continue label$3;
    };
    }
    global$0 = $11_1 + 528 | 0;
    return $0_1 | 0;
  }
  
  function $1029($0_1) {
    $0_1 = $0_1 | 0;
    return HEAP32[($1044($0_1 | 0) | 0) >> 2] | 0 | 0;
  }
  
  function $1030($0_1) {
    $0_1 = $0_1 | 0;
    return $0_1 + 40 | 0 | 0;
  }
  
  function $1031($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $1_1 = $1736($0_1 | 0, $1_1 | 0) | 0;
    $448($1_1 + 4 | 0 | 0, $2_1 | 0) | 0;
    return $1_1 | 0;
  }
  
  function $1032($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $6_1 = $6_1 | 0;
    $7_1 = $7_1 | 0;
    $8_1 = $8_1 | 0;
    $9_1 = $9_1 | 0;
    var $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0;
    $10_1 = global$0 - 16 | 0;
    global$0 = $10_1;
    label$1 : {
    label$2 : {
      if (!$0_1) {
      break label$2
      }
      $1_1 = $1062($1_1 | 0) | 0;
      $1063($10_1 + 4 | 0 | 0, $1_1 | 0);
      $11_1 = $2_1;
      $12_1 = HEAP32[($10_1 + 4 | 0) >> 2] | 0;
      HEAP8[$11_1 >> 0] = $12_1;
      HEAP8[($11_1 + 1 | 0) >> 0] = $12_1 >>> 8 | 0;
      HEAP8[($11_1 + 2 | 0) >> 0] = $12_1 >>> 16 | 0;
      HEAP8[($11_1 + 3 | 0) >> 0] = $12_1 >>> 24 | 0;
      $1064($10_1 + 4 | 0 | 0, $1_1 | 0);
      $1065($8_1 | 0, $10_1 + 4 | 0 | 0) | 0;
      $1775($10_1 + 4 | 0 | 0) | 0;
      $1066($10_1 + 4 | 0 | 0, $1_1 | 0);
      $1065($7_1 | 0, $10_1 + 4 | 0 | 0) | 0;
      $1775($10_1 + 4 | 0 | 0) | 0;
      HEAP32[$3_1 >> 2] = $1067($1_1 | 0) | 0;
      HEAP32[$4_1 >> 2] = $1068($1_1 | 0) | 0;
      $1069($10_1 + 4 | 0 | 0, $1_1 | 0);
      $290($5_1 | 0, $10_1 + 4 | 0 | 0) | 0;
      $1761($10_1 + 4 | 0 | 0) | 0;
      $1070($10_1 + 4 | 0 | 0, $1_1 | 0);
      $1065($6_1 | 0, $10_1 + 4 | 0 | 0) | 0;
      $1775($10_1 + 4 | 0 | 0) | 0;
      $1_1 = $1071($1_1 | 0) | 0;
      break label$1;
    }
    $1_1 = $1072($1_1 | 0) | 0;
    $1073($10_1 + 4 | 0 | 0, $1_1 | 0);
    $13_1 = $2_1;
    $14_1 = HEAP32[($10_1 + 4 | 0) >> 2] | 0;
    HEAP8[$13_1 >> 0] = $14_1;
    HEAP8[($13_1 + 1 | 0) >> 0] = $14_1 >>> 8 | 0;
    HEAP8[($13_1 + 2 | 0) >> 0] = $14_1 >>> 16 | 0;
    HEAP8[($13_1 + 3 | 0) >> 0] = $14_1 >>> 24 | 0;
    $1074($10_1 + 4 | 0 | 0, $1_1 | 0);
    $1065($8_1 | 0, $10_1 + 4 | 0 | 0) | 0;
    $1775($10_1 + 4 | 0 | 0) | 0;
    $1075($10_1 + 4 | 0 | 0, $1_1 | 0);
    $1065($7_1 | 0, $10_1 + 4 | 0 | 0) | 0;
    $1775($10_1 + 4 | 0 | 0) | 0;
    HEAP32[$3_1 >> 2] = $1076($1_1 | 0) | 0;
    HEAP32[$4_1 >> 2] = $1077($1_1 | 0) | 0;
    $1078($10_1 + 4 | 0 | 0, $1_1 | 0);
    $290($5_1 | 0, $10_1 + 4 | 0 | 0) | 0;
    $1761($10_1 + 4 | 0 | 0) | 0;
    $1079($10_1 + 4 | 0 | 0, $1_1 | 0);
    $1065($6_1 | 0, $10_1 + 4 | 0 | 0) | 0;
    $1775($10_1 + 4 | 0 | 0) | 0;
    $1_1 = $1080($1_1 | 0) | 0;
    }
    HEAP32[$9_1 >> 2] = $1_1;
    global$0 = $10_1 + 16 | 0;
  }
  
  function $1033($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $1081($0_1 | 0, $272(HEAP32[$1_1 >> 2] | 0 | 0) | 0 | 0, HEAP32[$1_1 >> 2] | 0 | 0) | 0;
  }
  
  function $1034($0_1) {
    $0_1 = $0_1 | 0;
    return HEAP32[$0_1 >> 2] | 0 | 0;
  }
  
  function $1035($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return ($815($0_1 | 0) | 0) + ($1_1 << 2 | 0) | 0 | 0;
  }
  
  function $1036($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    HEAP32[$0_1 >> 2] = $1082($1_1 | 0) | 0;
    return $0_1 | 0;
  }
  
  function $1037($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return ($1083($0_1 | 0, $1_1 | 0) | 0) ^ 1 | 0 | 0;
  }
  
  function $1038($0_1) {
    $0_1 = $0_1 | 0;
    return HEAP32[$0_1 >> 2] | 0 | 0;
  }
  
  function $1039($0_1) {
    $0_1 = $0_1 | 0;
    HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + 4 | 0;
    return $0_1 | 0;
  }
  
  function $1040($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return (($1084($0_1 | 0) | 0) - ($1082($1_1 | 0) | 0) | 0) >> 2 | 0 | 0;
  }
  
  function $1041($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $1086($0_1 | 0, 0 - $1_1 | 0 | 0) | 0 | 0;
  }
  
  function $1042($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    return $1085($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
  }
  
  function $1043($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $5_1 = 0, $3_1 = 0, $4_1 = 0, $8_1 = 0, $6_1 = 0, $7_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    $4_1 = HEAP32[($1087($0_1 | 0) | 0) >> 2] | 0;
    label$1 : {
    label$2 : {
      $5_1 = (HEAP32[$2_1 >> 2] | 0) - ($1029($0_1 | 0) | 0) | 0;
      if ($5_1 >>> 0 >= (($417() | 0) >>> 1 | 0) >>> 0) {
      break label$2
      }
      $5_1 = $5_1 << 1 | 0;
      break label$1;
    }
    $5_1 = $417() | 0;
    }
    $5_1 = $5_1 ? $5_1 : 4;
    $6_1 = HEAP32[$1_1 >> 2] | 0;
    $7_1 = $1029($0_1 | 0) | 0;
    label$3 : {
    label$4 : {
      if (($4_1 | 0) != (95 | 0)) {
      break label$4
      }
      $8_1 = 0;
      break label$3;
    }
    $8_1 = $1029($0_1 | 0) | 0;
    }
    label$5 : {
    $8_1 = $129($8_1 | 0, $5_1 | 0) | 0;
    if (!$8_1) {
      break label$5
    }
    label$6 : {
      if (($4_1 | 0) == (95 | 0)) {
      break label$6
      }
      $1088($0_1 | 0) | 0;
    }
    HEAP32[($3_1 + 4 | 0) >> 2] = 94;
    $4_1 = $830($3_1 + 8 | 0 | 0, $8_1 | 0, $3_1 + 4 | 0 | 0) | 0;
    $1089($0_1 | 0, $4_1 | 0) | 0;
    $833($4_1 | 0) | 0;
    HEAP32[$1_1 >> 2] = ($1029($0_1 | 0) | 0) + ($6_1 - $7_1 | 0) | 0;
    HEAP32[$2_1 >> 2] = ($1029($0_1 | 0) | 0) + ($5_1 & -4 | 0) | 0;
    global$0 = $3_1 + 16 | 0;
    return;
    }
    $1755();
    wasm2js_trap();
  }
  
  function $1044($0_1) {
    $0_1 = $0_1 | 0;
    return $1737($0_1 | 0) | 0 | 0;
  }
  
  function $1045($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $6_1 = $6_1 | 0;
    var $7_1 = 0, $8_1 = 0;
    $7_1 = global$0 - 448 | 0;
    global$0 = $7_1;
    HEAP32[($7_1 + 440 | 0) >> 2] = $2_1;
    HEAP32[($7_1 + 444 | 0) >> 2] = $1_1;
    HEAP32[($7_1 + 20 | 0) >> 2] = 95;
    $8_1 = $830($7_1 + 24 | 0 | 0, $7_1 + 32 | 0 | 0, $7_1 + 20 | 0 | 0) | 0;
    $439($7_1 + 16 | 0 | 0, $4_1 | 0);
    $1_1 = $261($7_1 + 16 | 0 | 0) | 0;
    HEAP8[($7_1 + 15 | 0) >> 0] = 0;
    label$1 : {
    if (!($1028($7_1 + 444 | 0 | 0, $2_1 | 0, $3_1 | 0, $7_1 + 16 | 0 | 0, $196($4_1 | 0) | 0 | 0, $5_1 | 0, $7_1 + 15 | 0 | 0, $1_1 | 0, $8_1 | 0, $7_1 + 20 | 0 | 0, $7_1 + 432 | 0 | 0) | 0)) {
      break label$1
    }
    $1046($6_1 | 0);
    label$2 : {
      if ((HEAPU8[($7_1 + 15 | 0) >> 0] | 0 | 0) != (1 | 0)) {
      break label$2
      }
      $1784($6_1 | 0, $434($1_1 | 0, 45 | 0) | 0 | 0);
    }
    $1_1 = $434($1_1 | 0, 48 | 0) | 0;
    $2_1 = $1029($8_1 | 0) | 0;
    $3_1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
    $4_1 = $3_1 + -4 | 0;
    label$3 : {
      label$4 : while (1) {
      if ($2_1 >>> 0 >= $4_1 >>> 0) {
        break label$3
      }
      if ((HEAP32[$2_1 >> 2] | 0 | 0) != ($1_1 | 0)) {
        break label$3
      }
      $2_1 = $2_1 + 4 | 0;
      continue label$4;
      };
    }
    $1047($6_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
    }
    label$5 : {
    if (!($262($7_1 + 444 | 0 | 0, $7_1 + 440 | 0 | 0) | 0)) {
      break label$5
    }
    HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 2 | 0;
    }
    $2_1 = HEAP32[($7_1 + 444 | 0) >> 2] | 0;
    $668($7_1 + 16 | 0 | 0) | 0;
    $833($8_1 | 0) | 0;
    global$0 = $7_1 + 448 | 0;
    return $2_1 | 0;
  }
  
  function $1046($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0, $3_1 = 0, $2_1 = 0;
    $1_1 = global$0 - 16 | 0;
    global$0 = $1_1;
    $2_1 = $730($0_1 | 0) | 0;
    label$1 : {
    label$2 : {
      if (!($875($0_1 | 0) | 0)) {
      break label$2
      }
      $3_1 = $1048($0_1 | 0) | 0;
      HEAP32[($1_1 + 12 | 0) >> 2] = 0;
      $1049($3_1 | 0, $1_1 + 12 | 0 | 0);
      $1050($0_1 | 0, 0 | 0);
      break label$1;
    }
    $3_1 = $1051($0_1 | 0) | 0;
    HEAP32[($1_1 + 8 | 0) >> 2] = 0;
    $1049($3_1 | 0, $1_1 + 8 | 0 | 0);
    $1052($0_1 | 0, 0 | 0);
    }
    $1053($0_1 | 0, $2_1 | 0);
    global$0 = $1_1 + 16 | 0;
  }
  
  function $1047($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $5_1 = 0, $4_1 = 0, $3_1 = 0, $6_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    $4_1 = $730($0_1 | 0) | 0;
    $5_1 = $1054($0_1 | 0) | 0;
    label$1 : {
    $6_1 = $1055($1_1 | 0, $2_1 | 0) | 0;
    if (!$6_1) {
      break label$1
    }
    label$2 : {
      if ($1056($0_1 | 0, $1_1 | 0) | 0) {
      break label$2
      }
      label$3 : {
      if (($5_1 - $4_1 | 0) >>> 0 >= $6_1 >>> 0) {
        break label$3
      }
      $1057($0_1 | 0, $5_1 | 0, ($4_1 - $5_1 | 0) + $6_1 | 0 | 0, $4_1 | 0, $4_1 | 0, 0 | 0, 0 | 0);
      }
      $1058($0_1 | 0, $6_1 | 0);
      $5_1 = ($815($0_1 | 0) | 0) + ($4_1 << 2 | 0) | 0;
      label$4 : {
      label$5 : while (1) {
        if (($1_1 | 0) == ($2_1 | 0)) {
        break label$4
        }
        $1049($5_1 | 0, $1_1 | 0);
        $1_1 = $1_1 + 4 | 0;
        $5_1 = $5_1 + 4 | 0;
        continue label$5;
      };
      }
      HEAP32[($3_1 + 4 | 0) >> 2] = 0;
      $1049($5_1 | 0, $3_1 + 4 | 0 | 0);
      $1059($0_1 | 0, $6_1 + $4_1 | 0 | 0);
      break label$1;
    }
    $1_1 = $1061($3_1 + 4 | 0 | 0, $1_1 | 0, $2_1 | 0, $1060($0_1 | 0) | 0 | 0) | 0;
    $1782($0_1 | 0, $873($1_1 | 0) | 0 | 0, $730($1_1 | 0) | 0 | 0) | 0;
    $1775($1_1 | 0) | 0;
    }
    global$0 = $3_1 + 16 | 0;
    return $0_1 | 0;
  }
  
  function $1048($0_1) {
    $0_1 = $0_1 | 0;
    return HEAP32[($961($0_1 | 0) | 0) >> 2] | 0 | 0;
  }
  
  function $1049($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  }
  
  function $1050($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    HEAP32[(($961($0_1 | 0) | 0) + 4 | 0) >> 2] = $1_1;
  }
  
  function $1051($0_1) {
    $0_1 = $0_1 | 0;
    return $1473($961($0_1 | 0) | 0 | 0) | 0 | 0;
  }
  
  function $1052($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0;
    $2_1 = $961($0_1 | 0) | 0;
    HEAP8[($2_1 + 11 | 0) >> 0] = (HEAPU8[($2_1 + 11 | 0) >> 0] | 0) & 128 | 0 | ($1_1 & 127 | 0) | 0;
    $0_1 = $961($0_1 | 0) | 0;
    HEAP8[($0_1 + 11 | 0) >> 0] = (HEAPU8[($0_1 + 11 | 0) >> 0] | 0) & 127 | 0;
  }
  
  function $1053($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
  }
  
  function $1054($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0;
    $1_1 = 1;
    label$1 : {
    if (!($875($0_1 | 0) | 0)) {
      break label$1
    }
    $1_1 = ($1487($0_1 | 0) | 0) + -1 | 0;
    }
    return $1_1 | 0;
  }
  
  function $1055($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $1546($0_1 | 0, $1_1 | 0) | 0 | 0;
  }
  
  function $1056($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $1547($873($0_1 | 0) | 0 | 0, (($873($0_1 | 0) | 0) + (($730($0_1 | 0) | 0) << 2 | 0) | 0) + 4 | 0 | 0, $1_1 | 0) | 0 | 0;
  }
  
  function $1057($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $6_1 = $6_1 | 0;
    $1545($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $6_1 | 0);
    $6_1 = ($3_1 - $5_1 | 0) + $6_1 | 0;
    $1050($0_1 | 0, $6_1 | 0);
    $938($0_1 | 0, $6_1 | 0);
  }
  
  function $1058($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
  }
  
  function $1059($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    label$1 : {
    if (!($875($0_1 | 0) | 0)) {
      break label$1
    }
    $1050($0_1 | 0, $1_1 | 0);
    return;
    }
    $1052($0_1 | 0, $1_1 | 0);
  }
  
  function $1060($0_1) {
    $0_1 = $0_1 | 0;
    return $1475($0_1 | 0) | 0 | 0;
  }
  
  function $1061($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    var $4_1 = 0;
    $4_1 = global$0 - 16 | 0;
    global$0 = $4_1;
    $3_1 = $1548($0_1 | 0, $4_1 + 15 | 0 | 0, $3_1 | 0) | 0;
    $1549($3_1 | 0, $1_1 | 0, $2_1 | 0);
    global$0 = $4_1 + 16 | 0;
    return $3_1 | 0;
  }
  
  function $1062($0_1) {
    $0_1 = $0_1 | 0;
    return $673($0_1 | 0, 89064 | 0) | 0 | 0;
  }
  
  function $1063($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 44 | 0) >> 2] | 0 | 0]($0_1, $1_1);
  }
  
  function $1064($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, $1_1);
  }
  
  function $1065($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1090($0_1 | 0, $1_1 | 0);
    return $0_1 | 0;
  }
  
  function $1066($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1);
  }
  
  function $1067($0_1) {
    $0_1 = $0_1 | 0;
    return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
  }
  
  function $1068($0_1) {
    $0_1 = $0_1 | 0;
    return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
  }
  
  function $1069($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1);
  }
  
  function $1070($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1);
  }
  
  function $1071($0_1) {
    $0_1 = $0_1 | 0;
    return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
  }
  
  function $1072($0_1) {
    $0_1 = $0_1 | 0;
    return $673($0_1 | 0, 89056 | 0) | 0 | 0;
  }
  
  function $1073($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 44 | 0) >> 2] | 0 | 0]($0_1, $1_1);
  }
  
  function $1074($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, $1_1);
  }
  
  function $1075($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1);
  }
  
  function $1076($0_1) {
    $0_1 = $0_1 | 0;
    return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
  }
  
  function $1077($0_1) {
    $0_1 = $0_1 | 0;
    return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
  }
  
  function $1078($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1);
  }
  
  function $1079($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1);
  }
  
  function $1080($0_1) {
    $0_1 = $0_1 | 0;
    return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
  }
  
  function $1081($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
    HEAP32[$0_1 >> 2] = $1_1;
    return $0_1 | 0;
  }
  
  function $1082($0_1) {
    $0_1 = $0_1 | 0;
    return HEAP32[$0_1 >> 2] | 0 | 0;
  }
  
  function $1083($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return ($1084($0_1 | 0) | 0 | 0) == ($1082($1_1 | 0) | 0 | 0) | 0;
  }
  
  function $1084($0_1) {
    $0_1 = $0_1 | 0;
    return HEAP32[$0_1 >> 2] | 0 | 0;
  }
  
  function $1085($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    $2_1 = $1554($1553($0_1 | 0) | 0 | 0, $1553($1_1 | 0) | 0 | 0, $1553($2_1 | 0) | 0 | 0, $3_1 + 15 | 0 | 0) | 0;
    global$0 = $3_1 + 16 | 0;
    return $2_1 | 0;
  }
  
  function $1086($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0;
    $2_1 = global$0 - 16 | 0;
    global$0 = $2_1;
    HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
    $1560($2_1 + 12 | 0 | 0, $1_1 | 0) | 0;
    $0_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
    global$0 = $2_1 + 16 | 0;
    return $0_1 | 0;
  }
  
  function $1087($0_1) {
    $0_1 = $0_1 | 0;
    return $1109($0_1 | 0) | 0 | 0;
  }
  
  function $1088($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0;
    $1_1 = HEAP32[($1108($0_1 | 0) | 0) >> 2] | 0;
    HEAP32[($1108($0_1 | 0) | 0) >> 2] = 0;
    return $1_1 | 0;
  }
  
  function $1089($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $831($0_1 | 0, $1088($1_1 | 0) | 0 | 0);
    $1_1 = HEAP32[($1087($1_1 | 0) | 0) >> 2] | 0;
    HEAP32[($1109($0_1 | 0) | 0) >> 2] = $1_1;
    return $0_1 | 0;
  }
  
  function $1090($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $5_1 = 0, $2_1 = 0, i64toi32_i32$0 = 0, $6_1 = 0, $3_1 = 0, $4_1 = 0, i64toi32_i32$1 = 0, $37_1 = 0;
    $2_1 = global$0 - 16 | 0;
    global$0 = $2_1;
    $1484($0_1 | 0);
    label$1 : {
    if (!($875($0_1 | 0) | 0)) {
      break label$1
    }
    $1485($1060($0_1 | 0) | 0 | 0, $1048($0_1 | 0) | 0 | 0, $1487($0_1 | 0) | 0 | 0);
    }
    $3_1 = $730($1_1 | 0) | 0;
    $4_1 = $875($1_1 | 0) | 0;
    $1561($0_1 | 0, $1_1 | 0);
    $5_1 = $961($1_1 | 0) | 0;
    $6_1 = $961($0_1 | 0) | 0;
    HEAP32[($6_1 + 8 | 0) >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[$5_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
    $37_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $6_1;
    HEAP32[i64toi32_i32$0 >> 2] = $37_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    $1052($1_1 | 0, 0 | 0);
    $5_1 = $1051($1_1 | 0) | 0;
    HEAP32[($2_1 + 12 | 0) >> 2] = 0;
    $1049($5_1 | 0, $2_1 + 12 | 0 | 0);
    label$2 : {
    label$3 : {
      $5_1 = ($0_1 | 0) == ($1_1 | 0);
      if ($5_1) {
      break label$3
      }
      if ($4_1) {
      break label$3
      }
      $1053($1_1 | 0, $3_1 | 0);
      break label$2;
    }
    $938($1_1 | 0, 0 | 0);
    }
    $1_1 = $875($0_1 | 0) | 0;
    label$4 : {
    if ($5_1) {
      break label$4
    }
    if ($1_1) {
      break label$4
    }
    $938($0_1 | 0, $877($0_1 | 0) | 0 | 0);
    }
    global$0 = $2_1 + 16 | 0;
  }
  
  function $1091($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $5$hi, $6_1, $6$hi) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $5$hi = $5$hi | 0;
    $6_1 = $6_1 | 0;
    $6$hi = $6$hi | 0;
    var $7_1 = 0, $8_1 = 0, $14_1 = 0, i64toi32_i32$0 = 0, $16_1 = 0, $11_1 = 0, $12_1 = 0, $9_1 = 0, $15_1 = 0, $17_1 = 0, $18_1 = 0, $10_1 = 0, $13_1 = 0;
    $7_1 = global$0 - 448 | 0;
    global$0 = $7_1;
    i64toi32_i32$0 = $5$hi;
    HEAP32[($7_1 + 16 | 0) >> 2] = $5_1;
    HEAP32[($7_1 + 20 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = $6$hi;
    HEAP32[($7_1 + 24 | 0) >> 2] = $6_1;
    HEAP32[($7_1 + 28 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($7_1 + 332 | 0) >> 2] = $7_1 + 336 | 0;
    $8_1 = $611($7_1 + 336 | 0 | 0, 100 | 0, 66143 | 0, $7_1 + 16 | 0 | 0) | 0;
    HEAP32[($7_1 + 224 | 0) >> 2] = 94;
    $9_1 = 0;
    $10_1 = $798($7_1 + 216 | 0 | 0, 0 | 0, $7_1 + 224 | 0 | 0) | 0;
    HEAP32[($7_1 + 224 | 0) >> 2] = 94;
    $11_1 = $798($7_1 + 208 | 0 | 0, 0 | 0, $7_1 + 224 | 0 | 0) | 0;
    $12_1 = $7_1 + 224 | 0;
    label$1 : {
    label$2 : {
      if ($8_1 >>> 0 < 100 >>> 0) {
      break label$2
      }
      $8_1 = $718() | 0;
      i64toi32_i32$0 = $5$hi;
      HEAP32[$7_1 >> 2] = $5_1;
      HEAP32[($7_1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$0 = $6$hi;
      HEAP32[($7_1 + 8 | 0) >> 2] = $6_1;
      HEAP32[($7_1 + 12 | 0) >> 2] = i64toi32_i32$0;
      $8_1 = $799($7_1 + 332 | 0 | 0, $8_1 | 0, 66143 | 0, $7_1 | 0) | 0;
      if (($8_1 | 0) == (-1 | 0)) {
      break label$1
      }
      $800($10_1 | 0, HEAP32[($7_1 + 332 | 0) >> 2] | 0 | 0);
      $800($11_1 | 0, $126($8_1 | 0) | 0 | 0);
      if ($1092($11_1 | 0, 0 | 0) | 0) {
      break label$1
      }
      $12_1 = $966($11_1 | 0) | 0;
    }
    $439($7_1 + 204 | 0 | 0, $3_1 | 0);
    $13_1 = $197($7_1 + 204 | 0 | 0) | 0;
    $14_1 = HEAP32[($7_1 + 332 | 0) >> 2] | 0;
    $717($13_1 | 0, $14_1 | 0, $14_1 + $8_1 | 0 | 0, $12_1 | 0) | 0;
    label$3 : {
      if (($8_1 | 0) < (1 | 0)) {
      break label$3
      }
      $9_1 = (HEAPU8[(HEAP32[($7_1 + 332 | 0) >> 2] | 0) >> 0] | 0 | 0) == (45 | 0);
    }
    $15_1 = $286($7_1 + 184 | 0 | 0) | 0;
    $14_1 = $286($7_1 + 172 | 0 | 0) | 0;
    $16_1 = $286($7_1 + 160 | 0 | 0) | 0;
    $1093($2_1 | 0, $9_1 | 0, $7_1 + 204 | 0 | 0, $7_1 + 200 | 0 | 0, $7_1 + 199 | 0 | 0, $7_1 + 198 | 0 | 0, $15_1 | 0, $14_1 | 0, $16_1 | 0, $7_1 + 156 | 0 | 0);
    HEAP32[($7_1 + 48 | 0) >> 2] = 94;
    $17_1 = $798($7_1 + 40 | 0 | 0, 0 | 0, $7_1 + 48 | 0 | 0) | 0;
    label$4 : {
      label$5 : {
      $2_1 = HEAP32[($7_1 + 156 | 0) >> 2] | 0;
      if (($8_1 | 0) <= ($2_1 | 0)) {
        break label$5
      }
      $18_1 = (((($309($16_1 | 0) | 0) + (($8_1 - $2_1 | 0) << 1 | 0) | 0) + ($309($14_1 | 0) | 0) | 0) + (HEAP32[($7_1 + 156 | 0) >> 2] | 0) | 0) + 1 | 0;
      break label$4;
      }
      $18_1 = ((($309($16_1 | 0) | 0) + ($309($14_1 | 0) | 0) | 0) + (HEAP32[($7_1 + 156 | 0) >> 2] | 0) | 0) + 2 | 0;
    }
    $2_1 = $7_1 + 48 | 0;
    label$6 : {
      if ($18_1 >>> 0 < 101 >>> 0) {
      break label$6
      }
      $800($17_1 | 0, $126($18_1 | 0) | 0 | 0);
      $2_1 = $966($17_1 | 0) | 0;
      if (!$2_1) {
      break label$1
      }
    }
    $1094($2_1 | 0, $7_1 + 36 | 0 | 0, $7_1 + 32 | 0 | 0, $196($3_1 | 0) | 0 | 0, $12_1 | 0, $12_1 + $8_1 | 0 | 0, $13_1 | 0, $9_1 | 0, $7_1 + 200 | 0 | 0, HEAP8[($7_1 + 199 | 0) >> 0] | 0 | 0, HEAP8[($7_1 + 198 | 0) >> 0] | 0 | 0, $15_1 | 0, $14_1 | 0, $16_1 | 0, HEAP32[($7_1 + 156 | 0) >> 2] | 0 | 0);
    $8_1 = $787($1_1 | 0, $2_1 | 0, HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 32 | 0) >> 2] | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
    $802($17_1 | 0) | 0;
    $1761($16_1 | 0) | 0;
    $1761($14_1 | 0) | 0;
    $1761($15_1 | 0) | 0;
    $668($7_1 + 204 | 0 | 0) | 0;
    $802($11_1 | 0) | 0;
    $802($10_1 | 0) | 0;
    global$0 = $7_1 + 448 | 0;
    return $8_1 | 0;
    }
    $1755();
    wasm2js_trap();
  }
  
  function $1092($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return ($1095($0_1 | 0) | 0) ^ 1 | 0 | 0;
  }
  
  function $1093($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $6_1 = $6_1 | 0;
    $7_1 = $7_1 | 0;
    $8_1 = $8_1 | 0;
    $9_1 = $9_1 | 0;
    var $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0;
    $10_1 = global$0 - 16 | 0;
    global$0 = $10_1;
    label$1 : {
    label$2 : {
      if (!$0_1) {
      break label$2
      }
      $2_1 = $995($2_1 | 0) | 0;
      label$3 : {
      label$4 : {
        if (!$1_1) {
        break label$4
        }
        $996($10_1 + 4 | 0 | 0, $2_1 | 0);
        $11_1 = HEAP32[($10_1 + 4 | 0) >> 2] | 0;
        HEAP8[$3_1 >> 0] = $11_1;
        HEAP8[($3_1 + 1 | 0) >> 0] = $11_1 >>> 8 | 0;
        HEAP8[($3_1 + 2 | 0) >> 0] = $11_1 >>> 16 | 0;
        HEAP8[($3_1 + 3 | 0) >> 0] = $11_1 >>> 24 | 0;
        $997($10_1 + 4 | 0 | 0, $2_1 | 0);
        $290($8_1 | 0, $10_1 + 4 | 0 | 0) | 0;
        $1761($10_1 + 4 | 0 | 0) | 0;
        break label$3;
      }
      $1096($10_1 + 4 | 0 | 0, $2_1 | 0);
      $12_1 = HEAP32[($10_1 + 4 | 0) >> 2] | 0;
      HEAP8[$3_1 >> 0] = $12_1;
      HEAP8[($3_1 + 1 | 0) >> 0] = $12_1 >>> 8 | 0;
      HEAP8[($3_1 + 2 | 0) >> 0] = $12_1 >>> 16 | 0;
      HEAP8[($3_1 + 3 | 0) >> 0] = $12_1 >>> 24 | 0;
      $998($10_1 + 4 | 0 | 0, $2_1 | 0);
      $290($8_1 | 0, $10_1 + 4 | 0 | 0) | 0;
      $1761($10_1 + 4 | 0 | 0) | 0;
      }
      HEAP8[$4_1 >> 0] = $999($2_1 | 0) | 0;
      HEAP8[$5_1 >> 0] = $1000($2_1 | 0) | 0;
      $1001($10_1 + 4 | 0 | 0, $2_1 | 0);
      $290($6_1 | 0, $10_1 + 4 | 0 | 0) | 0;
      $1761($10_1 + 4 | 0 | 0) | 0;
      $1002($10_1 + 4 | 0 | 0, $2_1 | 0);
      $290($7_1 | 0, $10_1 + 4 | 0 | 0) | 0;
      $1761($10_1 + 4 | 0 | 0) | 0;
      $2_1 = $1003($2_1 | 0) | 0;
      break label$1;
    }
    $2_1 = $1004($2_1 | 0) | 0;
    label$5 : {
      label$6 : {
      if (!$1_1) {
        break label$6
      }
      $1005($10_1 + 4 | 0 | 0, $2_1 | 0);
      $13_1 = HEAP32[($10_1 + 4 | 0) >> 2] | 0;
      HEAP8[$3_1 >> 0] = $13_1;
      HEAP8[($3_1 + 1 | 0) >> 0] = $13_1 >>> 8 | 0;
      HEAP8[($3_1 + 2 | 0) >> 0] = $13_1 >>> 16 | 0;
      HEAP8[($3_1 + 3 | 0) >> 0] = $13_1 >>> 24 | 0;
      $1006($10_1 + 4 | 0 | 0, $2_1 | 0);
      $290($8_1 | 0, $10_1 + 4 | 0 | 0) | 0;
      $1761($10_1 + 4 | 0 | 0) | 0;
      break label$5;
      }
      $1097($10_1 + 4 | 0 | 0, $2_1 | 0);
      $14_1 = HEAP32[($10_1 + 4 | 0) >> 2] | 0;
      HEAP8[$3_1 >> 0] = $14_1;
      HEAP8[($3_1 + 1 | 0) >> 0] = $14_1 >>> 8 | 0;
      HEAP8[($3_1 + 2 | 0) >> 0] = $14_1 >>> 16 | 0;
      HEAP8[($3_1 + 3 | 0) >> 0] = $14_1 >>> 24 | 0;
      $1007($10_1 + 4 | 0 | 0, $2_1 | 0);
      $290($8_1 | 0, $10_1 + 4 | 0 | 0) | 0;
      $1761($10_1 + 4 | 0 | 0) | 0;
    }
    HEAP8[$4_1 >> 0] = $1008($2_1 | 0) | 0;
    HEAP8[$5_1 >> 0] = $1009($2_1 | 0) | 0;
    $1010($10_1 + 4 | 0 | 0, $2_1 | 0);
    $290($6_1 | 0, $10_1 + 4 | 0 | 0) | 0;
    $1761($10_1 + 4 | 0 | 0) | 0;
    $1011($10_1 + 4 | 0 | 0, $2_1 | 0);
    $290($7_1 | 0, $10_1 + 4 | 0 | 0) | 0;
    $1761($10_1 + 4 | 0 | 0) | 0;
    $2_1 = $1012($2_1 | 0) | 0;
    }
    HEAP32[$9_1 >> 2] = $2_1;
    global$0 = $10_1 + 16 | 0;
  }
  
  function $1094($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1, $12_1, $13_1, $14_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $6_1 = $6_1 | 0;
    $7_1 = $7_1 | 0;
    $8_1 = $8_1 | 0;
    $9_1 = $9_1 | 0;
    $10_1 = $10_1 | 0;
    $11_1 = $11_1 | 0;
    $12_1 = $12_1 | 0;
    $13_1 = $13_1 | 0;
    $14_1 = $14_1 | 0;
    var $18_1 = 0, $19_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $15_1 = 0, $17_1 = 0, $16_1 = 0, $20_1 = 0;
    $15_1 = global$0 - 16 | 0;
    global$0 = $15_1;
    HEAP32[$2_1 >> 2] = $0_1;
    $16_1 = $3_1 & 512 | 0;
    $17_1 = 0;
    label$1 : while (1) {
    label$2 : {
      if (($17_1 | 0) != (4 | 0)) {
      break label$2
      }
      label$3 : {
      if (($309($13_1 | 0) | 0) >>> 0 <= 1 >>> 0) {
        break label$3
      }
      HEAP32[($15_1 + 12 | 0) >> 2] = $1098($13_1 | 0) | 0;
      HEAP32[$2_1 >> 2] = $1101($1099($15_1 + 12 | 0 | 0, 1 | 0) | 0 | 0, $1100($13_1 | 0) | 0 | 0, HEAP32[$2_1 >> 2] | 0 | 0) | 0;
      }
      label$4 : {
      $18_1 = $3_1 & 176 | 0;
      if (($18_1 | 0) == (16 | 0)) {
        break label$4
      }
      label$5 : {
        if (($18_1 | 0) != (32 | 0)) {
        break label$5
        }
        $0_1 = HEAP32[$2_1 >> 2] | 0;
      }
      HEAP32[$1_1 >> 2] = $0_1;
      }
      global$0 = $15_1 + 16 | 0;
      return;
    }
    label$6 : {
      label$7 : {
      switch (HEAPU8[($8_1 + $17_1 | 0) >> 0] | 0 | 0) {
      case 0:
        HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
        break label$6;
      case 1:
        HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
        $18_1 = $432($6_1 | 0, 32 | 0) | 0;
        $19_1 = HEAP32[$2_1 >> 2] | 0;
        HEAP32[$2_1 >> 2] = $19_1 + 1 | 0;
        HEAP8[$19_1 >> 0] = $18_1;
        break label$6;
      case 3:
        if ($679($13_1 | 0) | 0) {
        break label$6
        }
        $18_1 = HEAPU8[($678($13_1 | 0, 0 | 0) | 0) >> 0] | 0;
        $19_1 = HEAP32[$2_1 >> 2] | 0;
        HEAP32[$2_1 >> 2] = $19_1 + 1 | 0;
        HEAP8[$19_1 >> 0] = $18_1;
        break label$6;
      case 2:
        $18_1 = $679($12_1 | 0) | 0;
        if (!$16_1) {
        break label$6
        }
        if ($18_1) {
        break label$6
        }
        HEAP32[$2_1 >> 2] = $1101($1098($12_1 | 0) | 0 | 0, $1100($12_1 | 0) | 0 | 0, HEAP32[$2_1 >> 2] | 0 | 0) | 0;
        break label$6;
      case 4:
        break label$7;
      default:
        break label$6;
      };
      }
      $20_1 = HEAP32[$2_1 >> 2] | 0;
      $4_1 = $4_1 + $7_1 | 0;
      $18_1 = $4_1;
      label$12 : {
      label$13 : while (1) {
        if ($18_1 >>> 0 >= $5_1 >>> 0) {
        break label$12
        }
        if (!($200($6_1 | 0, 64 | 0, HEAP8[$18_1 >> 0] | 0 | 0) | 0)) {
        break label$12
        }
        $18_1 = $18_1 + 1 | 0;
        continue label$13;
      };
      }
      $19_1 = $14_1;
      label$14 : {
      if (($19_1 | 0) < (1 | 0)) {
        break label$14
      }
      label$15 : {
        label$16 : while (1) {
        if ($18_1 >>> 0 <= $4_1 >>> 0) {
          break label$15
        }
        if (($19_1 | 0) == (0 | 0)) {
          break label$15
        }
        $19_1 = $19_1 + -1 | 0;
        $18_1 = $18_1 + -1 | 0;
        $21_1 = HEAPU8[$18_1 >> 0] | 0;
        $22_1 = HEAP32[$2_1 >> 2] | 0;
        HEAP32[$2_1 >> 2] = $22_1 + 1 | 0;
        HEAP8[$22_1 >> 0] = $21_1;
        continue label$16;
        };
      }
      label$17 : {
        label$18 : {
        if ($19_1) {
          break label$18
        }
        $22_1 = 0;
        break label$17;
        }
        $22_1 = $432($6_1 | 0, 48 | 0) | 0;
      }
      label$19 : {
        label$20 : while (1) {
        $21_1 = HEAP32[$2_1 >> 2] | 0;
        HEAP32[$2_1 >> 2] = $21_1 + 1 | 0;
        if (($19_1 | 0) < (1 | 0)) {
          break label$19
        }
        HEAP8[$21_1 >> 0] = $22_1;
        $19_1 = $19_1 + -1 | 0;
        continue label$20;
        };
      }
      HEAP8[$21_1 >> 0] = $9_1;
      }
      label$21 : {
      label$22 : {
        if (($18_1 | 0) != ($4_1 | 0)) {
        break label$22
        }
        $18_1 = $432($6_1 | 0, 48 | 0) | 0;
        $19_1 = HEAP32[$2_1 >> 2] | 0;
        HEAP32[$2_1 >> 2] = $19_1 + 1 | 0;
        HEAP8[$19_1 >> 0] = $18_1;
        break label$21;
      }
      label$23 : {
        label$24 : {
        if (!($679($11_1 | 0) | 0)) {
          break label$24
        }
        $23_1 = $1102() | 0;
        break label$23;
        }
        $23_1 = HEAP8[($678($11_1 | 0, 0 | 0) | 0) >> 0] | 0;
      }
      $19_1 = 0;
      $24_1 = 0;
      label$25 : while (1) {
        if (($18_1 | 0) == ($4_1 | 0)) {
        break label$21
        }
        label$26 : {
        label$27 : {
          if (($19_1 | 0) == ($23_1 | 0)) {
          break label$27
          }
          $21_1 = $19_1;
          break label$26;
        }
        $21_1 = HEAP32[$2_1 >> 2] | 0;
        HEAP32[$2_1 >> 2] = $21_1 + 1 | 0;
        HEAP8[$21_1 >> 0] = $10_1;
        $21_1 = 0;
        label$28 : {
          $24_1 = $24_1 + 1 | 0;
          if ($24_1 >>> 0 < ($309($11_1 | 0) | 0) >>> 0) {
          break label$28
          }
          $23_1 = $19_1;
          break label$26;
        }
        label$29 : {
          if ((HEAPU8[($678($11_1 | 0, $24_1 | 0) | 0) >> 0] | 0 | 0) != (($911() | 0) & 255 | 0 | 0)) {
          break label$29
          }
          $23_1 = $1102() | 0;
          break label$26;
        }
        $23_1 = HEAP8[($678($11_1 | 0, $24_1 | 0) | 0) >> 0] | 0;
        }
        $18_1 = $18_1 + -1 | 0;
        $19_1 = HEAPU8[$18_1 >> 0] | 0;
        $22_1 = HEAP32[$2_1 >> 2] | 0;
        HEAP32[$2_1 >> 2] = $22_1 + 1 | 0;
        HEAP8[$22_1 >> 0] = $19_1;
        $19_1 = $21_1 + 1 | 0;
        continue label$25;
      };
      }
      $839($20_1 | 0, HEAP32[$2_1 >> 2] | 0 | 0);
    }
    $17_1 = $17_1 + 1 | 0;
    continue label$1;
    };
  }
  
  function $1095($0_1) {
    $0_1 = $0_1 | 0;
    return (HEAP32[($984($0_1 | 0) | 0) >> 2] | 0 | 0) != (0 | 0) | 0;
  }
  
  function $1096($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1, $1_1);
  }
  
  function $1097($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1, $1_1);
  }
  
  function $1098($0_1) {
    $0_1 = $0_1 | 0;
    return $1119($0_1 | 0, $426($0_1 | 0) | 0 | 0) | 0 | 0;
  }
  
  function $1099($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0;
    $2_1 = global$0 - 16 | 0;
    global$0 = $2_1;
    HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
    $1121($2_1 + 12 | 0 | 0, $1_1 | 0) | 0;
    $0_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
    global$0 = $2_1 + 16 | 0;
    return $0_1 | 0;
  }
  
  function $1100($0_1) {
    $0_1 = $0_1 | 0;
    return $1119($0_1 | 0, ($426($0_1 | 0) | 0) + ($309($0_1 | 0) | 0) | 0 | 0) | 0 | 0;
  }
  
  function $1101($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    $1118($3_1 + 8 | 0 | 0, $0_1 | 0, $1_1 | 0, $2_1 | 0);
    $2_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
    global$0 = $3_1 + 16 | 0;
    return $2_1 | 0;
  }
  
  function $1102() {
    return $1120() | 0 | 0;
  }
  
  function $1103($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    var $6_1 = 0, $10_1 = 0, $11_1 = 0, $13_1 = 0, $8_1 = 0, $9_1 = 0, $12_1 = 0, $7_1 = 0;
    $6_1 = global$0 - 176 | 0;
    global$0 = $6_1;
    $439($6_1 + 172 | 0 | 0, $3_1 | 0);
    $7_1 = $197($6_1 + 172 | 0 | 0) | 0;
    $8_1 = 0;
    label$1 : {
    if (!($309($5_1 | 0) | 0)) {
      break label$1
    }
    $8_1 = (HEAPU8[($678($5_1 | 0, 0 | 0) | 0) >> 0] | 0 | 0) == (($432($7_1 | 0, 45 | 0) | 0) & 255 | 0 | 0);
    }
    $9_1 = $286($6_1 + 152 | 0 | 0) | 0;
    $10_1 = $286($6_1 + 140 | 0 | 0) | 0;
    $11_1 = $286($6_1 + 128 | 0 | 0) | 0;
    $1093($2_1 | 0, $8_1 | 0, $6_1 + 172 | 0 | 0, $6_1 + 168 | 0 | 0, $6_1 + 167 | 0 | 0, $6_1 + 166 | 0 | 0, $9_1 | 0, $10_1 | 0, $11_1 | 0, $6_1 + 124 | 0 | 0);
    HEAP32[($6_1 + 16 | 0) >> 2] = 94;
    $12_1 = $798($6_1 + 8 | 0 | 0, 0 | 0, $6_1 + 16 | 0 | 0) | 0;
    label$2 : {
    label$3 : {
      if (($309($5_1 | 0) | 0 | 0) <= (HEAP32[($6_1 + 124 | 0) >> 2] | 0 | 0)) {
      break label$3
      }
      $2_1 = $309($5_1 | 0) | 0;
      $13_1 = HEAP32[($6_1 + 124 | 0) >> 2] | 0;
      $13_1 = (((($309($11_1 | 0) | 0) + (($2_1 - $13_1 | 0) << 1 | 0) | 0) + ($309($10_1 | 0) | 0) | 0) + (HEAP32[($6_1 + 124 | 0) >> 2] | 0) | 0) + 1 | 0;
      break label$2;
    }
    $13_1 = ((($309($11_1 | 0) | 0) + ($309($10_1 | 0) | 0) | 0) + (HEAP32[($6_1 + 124 | 0) >> 2] | 0) | 0) + 2 | 0;
    }
    $2_1 = $6_1 + 16 | 0;
    label$4 : {
    if ($13_1 >>> 0 < 101 >>> 0) {
      break label$4
    }
    $800($12_1 | 0, $126($13_1 | 0) | 0 | 0);
    $2_1 = $966($12_1 | 0) | 0;
    if ($2_1) {
      break label$4
    }
    $1755();
    wasm2js_trap();
    }
    $1094($2_1 | 0, $6_1 + 4 | 0 | 0, $6_1 | 0, $196($3_1 | 0) | 0 | 0, $308($5_1 | 0) | 0 | 0, ($308($5_1 | 0) | 0) + ($309($5_1 | 0) | 0) | 0 | 0, $7_1 | 0, $8_1 | 0, $6_1 + 168 | 0 | 0, HEAP8[($6_1 + 167 | 0) >> 0] | 0 | 0, HEAP8[($6_1 + 166 | 0) >> 0] | 0 | 0, $9_1 | 0, $10_1 | 0, $11_1 | 0, HEAP32[($6_1 + 124 | 0) >> 2] | 0 | 0);
    $5_1 = $787($1_1 | 0, $2_1 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$6_1 >> 2] | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
    $802($12_1 | 0) | 0;
    $1761($11_1 | 0) | 0;
    $1761($10_1 | 0) | 0;
    $1761($9_1 | 0) | 0;
    $668($6_1 + 172 | 0 | 0) | 0;
    global$0 = $6_1 + 176 | 0;
    return $5_1 | 0;
  }
  
  function $1104($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $5$hi, $6_1, $6$hi) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $5$hi = $5$hi | 0;
    $6_1 = $6_1 | 0;
    $6$hi = $6$hi | 0;
    var $7_1 = 0, $8_1 = 0, $14_1 = 0, i64toi32_i32$0 = 0, $16_1 = 0, $11_1 = 0, $12_1 = 0, $9_1 = 0, $15_1 = 0, $17_1 = 0, $18_1 = 0, $10_1 = 0, $13_1 = 0;
    $7_1 = global$0 - 1056 | 0;
    global$0 = $7_1;
    i64toi32_i32$0 = $5$hi;
    HEAP32[($7_1 + 16 | 0) >> 2] = $5_1;
    HEAP32[($7_1 + 20 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = $6$hi;
    HEAP32[($7_1 + 24 | 0) >> 2] = $6_1;
    HEAP32[($7_1 + 28 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($7_1 + 940 | 0) >> 2] = $7_1 + 944 | 0;
    $8_1 = $611($7_1 + 944 | 0 | 0, 100 | 0, 66143 | 0, $7_1 + 16 | 0 | 0) | 0;
    HEAP32[($7_1 + 528 | 0) >> 2] = 94;
    $9_1 = 0;
    $10_1 = $798($7_1 + 520 | 0 | 0, 0 | 0, $7_1 + 528 | 0 | 0) | 0;
    HEAP32[($7_1 + 528 | 0) >> 2] = 94;
    $11_1 = $830($7_1 + 512 | 0 | 0, 0 | 0, $7_1 + 528 | 0 | 0) | 0;
    $12_1 = $7_1 + 528 | 0;
    label$1 : {
    label$2 : {
      if ($8_1 >>> 0 < 100 >>> 0) {
      break label$2
      }
      $8_1 = $718() | 0;
      i64toi32_i32$0 = $5$hi;
      HEAP32[$7_1 >> 2] = $5_1;
      HEAP32[($7_1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$0 = $6$hi;
      HEAP32[($7_1 + 8 | 0) >> 2] = $6_1;
      HEAP32[($7_1 + 12 | 0) >> 2] = i64toi32_i32$0;
      $8_1 = $799($7_1 + 940 | 0 | 0, $8_1 | 0, 66143 | 0, $7_1 | 0) | 0;
      if (($8_1 | 0) == (-1 | 0)) {
      break label$1
      }
      $800($10_1 | 0, HEAP32[($7_1 + 940 | 0) >> 2] | 0 | 0);
      $831($11_1 | 0, $126($8_1 << 2 | 0 | 0) | 0 | 0);
      if ($1105($11_1 | 0, 0 | 0) | 0) {
      break label$1
      }
      $12_1 = $1029($11_1 | 0) | 0;
    }
    $439($7_1 + 508 | 0 | 0, $3_1 | 0);
    $13_1 = $261($7_1 + 508 | 0 | 0) | 0;
    $14_1 = HEAP32[($7_1 + 940 | 0) >> 2] | 0;
    $757($13_1 | 0, $14_1 | 0, $14_1 + $8_1 | 0 | 0, $12_1 | 0) | 0;
    label$3 : {
      if (($8_1 | 0) < (1 | 0)) {
      break label$3
      }
      $9_1 = (HEAPU8[(HEAP32[($7_1 + 940 | 0) >> 2] | 0) >> 0] | 0 | 0) == (45 | 0);
    }
    $15_1 = $286($7_1 + 484 | 0 | 0) | 0;
    $14_1 = $936($7_1 + 472 | 0 | 0) | 0;
    $16_1 = $936($7_1 + 460 | 0 | 0) | 0;
    $1106($2_1 | 0, $9_1 | 0, $7_1 + 508 | 0 | 0, $7_1 + 504 | 0 | 0, $7_1 + 500 | 0 | 0, $7_1 + 496 | 0 | 0, $15_1 | 0, $14_1 | 0, $16_1 | 0, $7_1 + 456 | 0 | 0);
    HEAP32[($7_1 + 48 | 0) >> 2] = 94;
    $17_1 = $830($7_1 + 40 | 0 | 0, 0 | 0, $7_1 + 48 | 0 | 0) | 0;
    label$4 : {
      label$5 : {
      $2_1 = HEAP32[($7_1 + 456 | 0) >> 2] | 0;
      if (($8_1 | 0) <= ($2_1 | 0)) {
        break label$5
      }
      $18_1 = (((($730($16_1 | 0) | 0) + (($8_1 - $2_1 | 0) << 1 | 0) | 0) + ($730($14_1 | 0) | 0) | 0) + (HEAP32[($7_1 + 456 | 0) >> 2] | 0) | 0) + 1 | 0;
      break label$4;
      }
      $18_1 = ((($730($16_1 | 0) | 0) + ($730($14_1 | 0) | 0) | 0) + (HEAP32[($7_1 + 456 | 0) >> 2] | 0) | 0) + 2 | 0;
    }
    $2_1 = $7_1 + 48 | 0;
    label$6 : {
      if ($18_1 >>> 0 < 101 >>> 0) {
      break label$6
      }
      $831($17_1 | 0, $126($18_1 << 2 | 0 | 0) | 0 | 0);
      $2_1 = $1029($17_1 | 0) | 0;
      if (!$2_1) {
      break label$1
      }
    }
    $1107($2_1 | 0, $7_1 + 36 | 0 | 0, $7_1 + 32 | 0 | 0, $196($3_1 | 0) | 0 | 0, $12_1 | 0, $12_1 + ($8_1 << 2 | 0) | 0 | 0, $13_1 | 0, $9_1 | 0, $7_1 + 504 | 0 | 0, HEAP32[($7_1 + 500 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 496 | 0) >> 2] | 0 | 0, $15_1 | 0, $14_1 | 0, $16_1 | 0, HEAP32[($7_1 + 456 | 0) >> 2] | 0 | 0);
    $8_1 = $821($1_1 | 0, $2_1 | 0, HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 32 | 0) >> 2] | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
    $833($17_1 | 0) | 0;
    $1775($16_1 | 0) | 0;
    $1775($14_1 | 0) | 0;
    $1761($15_1 | 0) | 0;
    $668($7_1 + 508 | 0 | 0) | 0;
    $833($11_1 | 0) | 0;
    $802($10_1 | 0) | 0;
    global$0 = $7_1 + 1056 | 0;
    return $8_1 | 0;
    }
    $1755();
    wasm2js_trap();
  }
  
  function $1105($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return ($1110($0_1 | 0) | 0) ^ 1 | 0 | 0;
  }
  
  function $1106($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $6_1 = $6_1 | 0;
    $7_1 = $7_1 | 0;
    $8_1 = $8_1 | 0;
    $9_1 = $9_1 | 0;
    var $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0;
    $10_1 = global$0 - 16 | 0;
    global$0 = $10_1;
    label$1 : {
    label$2 : {
      if (!$0_1) {
      break label$2
      }
      $2_1 = $1062($2_1 | 0) | 0;
      label$3 : {
      label$4 : {
        if (!$1_1) {
        break label$4
        }
        $1063($10_1 + 4 | 0 | 0, $2_1 | 0);
        $11_1 = HEAP32[($10_1 + 4 | 0) >> 2] | 0;
        HEAP8[$3_1 >> 0] = $11_1;
        HEAP8[($3_1 + 1 | 0) >> 0] = $11_1 >>> 8 | 0;
        HEAP8[($3_1 + 2 | 0) >> 0] = $11_1 >>> 16 | 0;
        HEAP8[($3_1 + 3 | 0) >> 0] = $11_1 >>> 24 | 0;
        $1064($10_1 + 4 | 0 | 0, $2_1 | 0);
        $1065($8_1 | 0, $10_1 + 4 | 0 | 0) | 0;
        $1775($10_1 + 4 | 0 | 0) | 0;
        break label$3;
      }
      $1111($10_1 + 4 | 0 | 0, $2_1 | 0);
      $12_1 = HEAP32[($10_1 + 4 | 0) >> 2] | 0;
      HEAP8[$3_1 >> 0] = $12_1;
      HEAP8[($3_1 + 1 | 0) >> 0] = $12_1 >>> 8 | 0;
      HEAP8[($3_1 + 2 | 0) >> 0] = $12_1 >>> 16 | 0;
      HEAP8[($3_1 + 3 | 0) >> 0] = $12_1 >>> 24 | 0;
      $1066($10_1 + 4 | 0 | 0, $2_1 | 0);
      $1065($8_1 | 0, $10_1 + 4 | 0 | 0) | 0;
      $1775($10_1 + 4 | 0 | 0) | 0;
      }
      HEAP32[$4_1 >> 2] = $1067($2_1 | 0) | 0;
      HEAP32[$5_1 >> 2] = $1068($2_1 | 0) | 0;
      $1069($10_1 + 4 | 0 | 0, $2_1 | 0);
      $290($6_1 | 0, $10_1 + 4 | 0 | 0) | 0;
      $1761($10_1 + 4 | 0 | 0) | 0;
      $1070($10_1 + 4 | 0 | 0, $2_1 | 0);
      $1065($7_1 | 0, $10_1 + 4 | 0 | 0) | 0;
      $1775($10_1 + 4 | 0 | 0) | 0;
      $2_1 = $1071($2_1 | 0) | 0;
      break label$1;
    }
    $2_1 = $1072($2_1 | 0) | 0;
    label$5 : {
      label$6 : {
      if (!$1_1) {
        break label$6
      }
      $1073($10_1 + 4 | 0 | 0, $2_1 | 0);
      $13_1 = HEAP32[($10_1 + 4 | 0) >> 2] | 0;
      HEAP8[$3_1 >> 0] = $13_1;
      HEAP8[($3_1 + 1 | 0) >> 0] = $13_1 >>> 8 | 0;
      HEAP8[($3_1 + 2 | 0) >> 0] = $13_1 >>> 16 | 0;
      HEAP8[($3_1 + 3 | 0) >> 0] = $13_1 >>> 24 | 0;
      $1074($10_1 + 4 | 0 | 0, $2_1 | 0);
      $1065($8_1 | 0, $10_1 + 4 | 0 | 0) | 0;
      $1775($10_1 + 4 | 0 | 0) | 0;
      break label$5;
      }
      $1112($10_1 + 4 | 0 | 0, $2_1 | 0);
      $14_1 = HEAP32[($10_1 + 4 | 0) >> 2] | 0;
      HEAP8[$3_1 >> 0] = $14_1;
      HEAP8[($3_1 + 1 | 0) >> 0] = $14_1 >>> 8 | 0;
      HEAP8[($3_1 + 2 | 0) >> 0] = $14_1 >>> 16 | 0;
      HEAP8[($3_1 + 3 | 0) >> 0] = $14_1 >>> 24 | 0;
      $1075($10_1 + 4 | 0 | 0, $2_1 | 0);
      $1065($8_1 | 0, $10_1 + 4 | 0 | 0) | 0;
      $1775($10_1 + 4 | 0 | 0) | 0;
    }
    HEAP32[$4_1 >> 2] = $1076($2_1 | 0) | 0;
    HEAP32[$5_1 >> 2] = $1077($2_1 | 0) | 0;
    $1078($10_1 + 4 | 0 | 0, $2_1 | 0);
    $290($6_1 | 0, $10_1 + 4 | 0 | 0) | 0;
    $1761($10_1 + 4 | 0 | 0) | 0;
    $1079($10_1 + 4 | 0 | 0, $2_1 | 0);
    $1065($7_1 | 0, $10_1 + 4 | 0 | 0) | 0;
    $1775($10_1 + 4 | 0 | 0) | 0;
    $2_1 = $1080($2_1 | 0) | 0;
    }
    HEAP32[$9_1 >> 2] = $2_1;
    global$0 = $10_1 + 16 | 0;
  }
  
  function $1107($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1, $12_1, $13_1, $14_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $6_1 = $6_1 | 0;
    $7_1 = $7_1 | 0;
    $8_1 = $8_1 | 0;
    $9_1 = $9_1 | 0;
    $10_1 = $10_1 | 0;
    $11_1 = $11_1 | 0;
    $12_1 = $12_1 | 0;
    $13_1 = $13_1 | 0;
    $14_1 = $14_1 | 0;
    var $19_1 = 0, $21_1 = 0, $23_1 = 0, $22_1 = 0, $24_1 = 0, $15_1 = 0, $18_1 = 0, $16_1 = 0, $17_1 = 0, $20_1 = 0;
    $15_1 = global$0 - 16 | 0;
    global$0 = $15_1;
    HEAP32[$2_1 >> 2] = $0_1;
    $16_1 = $7_1 ? 4 : 0;
    $17_1 = $3_1 & 512 | 0;
    $18_1 = 0;
    label$1 : while (1) {
    label$2 : {
      if (($18_1 | 0) != (4 | 0)) {
      break label$2
      }
      label$3 : {
      if (($730($13_1 | 0) | 0) >>> 0 <= 1 >>> 0) {
        break label$3
      }
      HEAP32[($15_1 + 12 | 0) >> 2] = $1113($13_1 | 0) | 0;
      HEAP32[$2_1 >> 2] = $1116($1114($15_1 + 12 | 0 | 0, 1 | 0) | 0 | 0, $1115($13_1 | 0) | 0 | 0, HEAP32[$2_1 >> 2] | 0 | 0) | 0;
      }
      label$4 : {
      $7_1 = $3_1 & 176 | 0;
      if (($7_1 | 0) == (16 | 0)) {
        break label$4
      }
      label$5 : {
        if (($7_1 | 0) != (32 | 0)) {
        break label$5
        }
        $0_1 = HEAP32[$2_1 >> 2] | 0;
      }
      HEAP32[$1_1 >> 2] = $0_1;
      }
      global$0 = $15_1 + 16 | 0;
      return;
    }
    label$6 : {
      label$7 : {
      switch (HEAPU8[($8_1 + $18_1 | 0) >> 0] | 0 | 0) {
      case 0:
        HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
        break label$6;
      case 1:
        HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
        $7_1 = $434($6_1 | 0, 32 | 0) | 0;
        $19_1 = HEAP32[$2_1 >> 2] | 0;
        HEAP32[$2_1 >> 2] = $19_1 + 4 | 0;
        HEAP32[$19_1 >> 2] = $7_1;
        break label$6;
      case 3:
        if ($732($13_1 | 0) | 0) {
        break label$6
        }
        $7_1 = HEAP32[($731($13_1 | 0, 0 | 0) | 0) >> 2] | 0;
        $19_1 = HEAP32[$2_1 >> 2] | 0;
        HEAP32[$2_1 >> 2] = $19_1 + 4 | 0;
        HEAP32[$19_1 >> 2] = $7_1;
        break label$6;
      case 2:
        $7_1 = $732($12_1 | 0) | 0;
        if (!$17_1) {
        break label$6
        }
        if ($7_1) {
        break label$6
        }
        HEAP32[$2_1 >> 2] = $1116($1113($12_1 | 0) | 0 | 0, $1115($12_1 | 0) | 0 | 0, HEAP32[$2_1 >> 2] | 0 | 0) | 0;
        break label$6;
      case 4:
        break label$7;
      default:
        break label$6;
      };
      }
      $20_1 = HEAP32[$2_1 >> 2] | 0;
      $4_1 = $4_1 + $16_1 | 0;
      $7_1 = $4_1;
      label$12 : {
      label$13 : while (1) {
        if ($7_1 >>> 0 >= $5_1 >>> 0) {
        break label$12
        }
        if (!($264($6_1 | 0, 64 | 0, HEAP32[$7_1 >> 2] | 0 | 0) | 0)) {
        break label$12
        }
        $7_1 = $7_1 + 4 | 0;
        continue label$13;
      };
      }
      label$14 : {
      if (($14_1 | 0) < (1 | 0)) {
        break label$14
      }
      $19_1 = HEAP32[$2_1 >> 2] | 0;
      $21_1 = $14_1;
      label$15 : {
        label$16 : while (1) {
        if ($7_1 >>> 0 <= $4_1 >>> 0) {
          break label$15
        }
        if (($21_1 | 0) == (0 | 0)) {
          break label$15
        }
        $21_1 = $21_1 + -1 | 0;
        $7_1 = $7_1 + -4 | 0;
        $22_1 = HEAP32[$7_1 >> 2] | 0;
        $23_1 = $19_1 + 4 | 0;
        HEAP32[$2_1 >> 2] = $23_1;
        HEAP32[$19_1 >> 2] = $22_1;
        $19_1 = $23_1;
        continue label$16;
        };
      }
      label$17 : {
        label$18 : {
        if ($21_1) {
          break label$18
        }
        $23_1 = 0;
        break label$17;
        }
        $23_1 = $434($6_1 | 0, 48 | 0) | 0;
        $19_1 = HEAP32[$2_1 >> 2] | 0;
      }
      label$19 : {
        label$20 : while (1) {
        $22_1 = $19_1 + 4 | 0;
        if (($21_1 | 0) < (1 | 0)) {
          break label$19
        }
        HEAP32[$19_1 >> 2] = $23_1;
        $21_1 = $21_1 + -1 | 0;
        $19_1 = $22_1;
        continue label$20;
        };
      }
      HEAP32[$2_1 >> 2] = $22_1;
      HEAP32[$19_1 >> 2] = $9_1;
      }
      label$21 : {
      label$22 : {
        if (($7_1 | 0) != ($4_1 | 0)) {
        break label$22
        }
        $19_1 = $434($6_1 | 0, 48 | 0) | 0;
        $21_1 = HEAP32[$2_1 >> 2] | 0;
        $7_1 = $21_1 + 4 | 0;
        HEAP32[$2_1 >> 2] = $7_1;
        HEAP32[$21_1 >> 2] = $19_1;
        break label$21;
      }
      label$23 : {
        label$24 : {
        if (!($679($11_1 | 0) | 0)) {
          break label$24
        }
        $23_1 = $1102() | 0;
        break label$23;
        }
        $23_1 = HEAP8[($678($11_1 | 0, 0 | 0) | 0) >> 0] | 0;
      }
      $19_1 = 0;
      $24_1 = 0;
      label$25 : {
        label$26 : while (1) {
        if (($7_1 | 0) == ($4_1 | 0)) {
          break label$25
        }
        label$27 : {
          label$28 : {
          if (($19_1 | 0) == ($23_1 | 0)) {
            break label$28
          }
          $21_1 = $19_1;
          break label$27;
          }
          $21_1 = HEAP32[$2_1 >> 2] | 0;
          HEAP32[$2_1 >> 2] = $21_1 + 4 | 0;
          HEAP32[$21_1 >> 2] = $10_1;
          $21_1 = 0;
          label$29 : {
          $24_1 = $24_1 + 1 | 0;
          if ($24_1 >>> 0 < ($309($11_1 | 0) | 0) >>> 0) {
            break label$29
          }
          $23_1 = $19_1;
          break label$27;
          }
          label$30 : {
          if ((HEAPU8[($678($11_1 | 0, $24_1 | 0) | 0) >> 0] | 0 | 0) != (($911() | 0) & 255 | 0 | 0)) {
            break label$30
          }
          $23_1 = $1102() | 0;
          break label$27;
          }
          $23_1 = HEAP8[($678($11_1 | 0, $24_1 | 0) | 0) >> 0] | 0;
        }
        $7_1 = $7_1 + -4 | 0;
        $19_1 = HEAP32[$7_1 >> 2] | 0;
        $22_1 = HEAP32[$2_1 >> 2] | 0;
        HEAP32[$2_1 >> 2] = $22_1 + 4 | 0;
        HEAP32[$22_1 >> 2] = $19_1;
        $19_1 = $21_1 + 1 | 0;
        continue label$26;
        };
      }
      $7_1 = HEAP32[$2_1 >> 2] | 0;
      }
      $841($20_1 | 0, $7_1 | 0);
    }
    $18_1 = $18_1 + 1 | 0;
    continue label$1;
    };
  }
  
  function $1108($0_1) {
    $0_1 = $0_1 | 0;
    return $1738($0_1 | 0) | 0 | 0;
  }
  
  function $1109($0_1) {
    $0_1 = $0_1 | 0;
    return $449($0_1 + 4 | 0 | 0) | 0 | 0;
  }
  
  function $1110($0_1) {
    $0_1 = $0_1 | 0;
    return (HEAP32[($1044($0_1 | 0) | 0) >> 2] | 0 | 0) != (0 | 0) | 0;
  }
  
  function $1111($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1, $1_1);
  }
  
  function $1112($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1, $1_1);
  }
  
  function $1113($0_1) {
    $0_1 = $0_1 | 0;
    return $1123($0_1 | 0, $874($0_1 | 0) | 0 | 0) | 0 | 0;
  }
  
  function $1114($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0;
    $2_1 = global$0 - 16 | 0;
    global$0 = $2_1;
    HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
    $1124($2_1 + 12 | 0 | 0, $1_1 | 0) | 0;
    $0_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
    global$0 = $2_1 + 16 | 0;
    return $0_1 | 0;
  }
  
  function $1115($0_1) {
    $0_1 = $0_1 | 0;
    return $1123($0_1 | 0, ($874($0_1 | 0) | 0) + (($730($0_1 | 0) | 0) << 2 | 0) | 0 | 0) | 0 | 0;
  }
  
  function $1116($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    $1122($3_1 + 8 | 0 | 0, $0_1 | 0, $1_1 | 0, $2_1 | 0);
    $2_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
    global$0 = $3_1 + 16 | 0;
    return $2_1 | 0;
  }
  
  function $1117($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    var $6_1 = 0, $10_1 = 0, $11_1 = 0, $13_1 = 0, $8_1 = 0, $9_1 = 0, $12_1 = 0, $7_1 = 0;
    $6_1 = global$0 - 480 | 0;
    global$0 = $6_1;
    $439($6_1 + 476 | 0 | 0, $3_1 | 0);
    $7_1 = $261($6_1 + 476 | 0 | 0) | 0;
    $8_1 = 0;
    label$1 : {
    if (!($730($5_1 | 0) | 0)) {
      break label$1
    }
    $8_1 = (HEAP32[($731($5_1 | 0, 0 | 0) | 0) >> 2] | 0 | 0) == ($434($7_1 | 0, 45 | 0) | 0 | 0);
    }
    $9_1 = $286($6_1 + 452 | 0 | 0) | 0;
    $10_1 = $936($6_1 + 440 | 0 | 0) | 0;
    $11_1 = $936($6_1 + 428 | 0 | 0) | 0;
    $1106($2_1 | 0, $8_1 | 0, $6_1 + 476 | 0 | 0, $6_1 + 472 | 0 | 0, $6_1 + 468 | 0 | 0, $6_1 + 464 | 0 | 0, $9_1 | 0, $10_1 | 0, $11_1 | 0, $6_1 + 424 | 0 | 0);
    HEAP32[($6_1 + 16 | 0) >> 2] = 94;
    $12_1 = $830($6_1 + 8 | 0 | 0, 0 | 0, $6_1 + 16 | 0 | 0) | 0;
    label$2 : {
    label$3 : {
      if (($730($5_1 | 0) | 0 | 0) <= (HEAP32[($6_1 + 424 | 0) >> 2] | 0 | 0)) {
      break label$3
      }
      $2_1 = $730($5_1 | 0) | 0;
      $13_1 = HEAP32[($6_1 + 424 | 0) >> 2] | 0;
      $13_1 = (((($730($11_1 | 0) | 0) + (($2_1 - $13_1 | 0) << 1 | 0) | 0) + ($730($10_1 | 0) | 0) | 0) + (HEAP32[($6_1 + 424 | 0) >> 2] | 0) | 0) + 1 | 0;
      break label$2;
    }
    $13_1 = ((($730($11_1 | 0) | 0) + ($730($10_1 | 0) | 0) | 0) + (HEAP32[($6_1 + 424 | 0) >> 2] | 0) | 0) + 2 | 0;
    }
    $2_1 = $6_1 + 16 | 0;
    label$4 : {
    if ($13_1 >>> 0 < 101 >>> 0) {
      break label$4
    }
    $831($12_1 | 0, $126($13_1 << 2 | 0 | 0) | 0 | 0);
    $2_1 = $1029($12_1 | 0) | 0;
    if ($2_1) {
      break label$4
    }
    $1755();
    wasm2js_trap();
    }
    $1107($2_1 | 0, $6_1 + 4 | 0 | 0, $6_1 | 0, $196($3_1 | 0) | 0 | 0, $873($5_1 | 0) | 0 | 0, ($873($5_1 | 0) | 0) + (($730($5_1 | 0) | 0) << 2 | 0) | 0 | 0, $7_1 | 0, $8_1 | 0, $6_1 + 472 | 0 | 0, HEAP32[($6_1 + 468 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 464 | 0) >> 2] | 0 | 0, $9_1 | 0, $10_1 | 0, $11_1 | 0, HEAP32[($6_1 + 424 | 0) >> 2] | 0 | 0);
    $5_1 = $821($1_1 | 0, $2_1 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$6_1 >> 2] | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
    $833($12_1 | 0) | 0;
    $1775($11_1 | 0) | 0;
    $1775($10_1 | 0) | 0;
    $1761($9_1 | 0) | 0;
    $668($6_1 + 476 | 0 | 0) | 0;
    global$0 = $6_1 + 480 | 0;
    return $5_1 | 0;
  }
  
  function $1118($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $1563($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
  }
  
  function $1119($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0;
    $2_1 = global$0 - 16 | 0;
    global$0 = $2_1;
    $1_1 = HEAP32[($1578($2_1 + 12 | 0 | 0, $1_1 | 0) | 0) >> 2] | 0;
    global$0 = $2_1 + 16 | 0;
    return $1_1 | 0;
  }
  
  function $1120() {
    return -1 | 0;
  }
  
  function $1121($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + $1_1 | 0;
    return $0_1 | 0;
  }
  
  function $1122($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $1579($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
  }
  
  function $1123($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0;
    $2_1 = global$0 - 16 | 0;
    global$0 = $2_1;
    $1_1 = HEAP32[($1594($2_1 + 12 | 0 | 0, $1_1 | 0) | 0) >> 2] | 0;
    global$0 = $2_1 + 16 | 0;
    return $1_1 | 0;
  }
  
  function $1124($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + ($1_1 << 2 | 0) | 0;
    return $0_1 | 0;
  }
  
  function $1125($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    return -1 | 0;
  }
  
  function $1126($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $953($0_1 | 0, $5_1 | 0) | 0;
  }
  
  function $1127($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
  }
  
  function $1128($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    return -1 | 0;
  }
  
  function $1129($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $956($0_1 | 0, $5_1 | 0) | 0;
  }
  
  function $1130($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
  }
  
  function $1131($0_1) {
    $0_1 = $0_1 | 0;
    HEAP32[$0_1 >> 2] = 75688;
    label$1 : {
    if ((HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) == ($718() | 0 | 0)) {
      break label$1
    }
    $633(HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0);
    }
    return $652($0_1 | 0) | 0 | 0;
  }
  
  function $1132($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1_1 = $1133($0_1 | 0, $1_1 | 0) | 0;
    HEAP32[$1_1 >> 2] = 74584;
    $0_1 = $1134($1_1 + 8 | 0 | 0, 30 | 0) | 0;
    $435($1_1 + 144 | 0 | 0, 66347 | 0) | 0;
    $1135($0_1 | 0);
    $1136();
    $1137($1_1 | 0, 90556 | 0);
    $1138();
    $1139($1_1 | 0, 90564 | 0);
    $1140();
    $1141($1_1 | 0, 90572 | 0);
    $1142();
    $1143($1_1 | 0, 90588 | 0);
    $1144();
    $1145($1_1 | 0, 90596 | 0);
    $1146();
    $1147($1_1 | 0, 90604 | 0);
    $1148();
    $1149($1_1 | 0, 90616 | 0);
    $1150();
    $1151($1_1 | 0, 90624 | 0);
    $1152();
    $1153($1_1 | 0, 90632 | 0);
    $1154();
    $1155($1_1 | 0, 90640 | 0);
    $1156();
    $1157($1_1 | 0, 90648 | 0);
    $1158();
    $1159($1_1 | 0, 90672 | 0);
    $1160();
    $1161($1_1 | 0, 90700 | 0);
    $1162();
    $1163($1_1 | 0, 90708 | 0);
    $1164();
    $1165($1_1 | 0, 90716 | 0);
    $1166();
    $1167($1_1 | 0, 90724 | 0);
    $1168();
    $1169($1_1 | 0, 90732 | 0);
    $1170();
    $1171($1_1 | 0, 90740 | 0);
    $1172();
    $1173($1_1 | 0, 90748 | 0);
    $1174();
    $1175($1_1 | 0, 90756 | 0);
    $1176();
    $1177($1_1 | 0, 90764 | 0);
    $1178();
    $1179($1_1 | 0, 90772 | 0);
    $1180();
    $1181($1_1 | 0, 90780 | 0);
    $1182();
    $1183($1_1 | 0, 90788 | 0);
    $1184();
    $1185($1_1 | 0, 90796 | 0);
    $1186();
    $1187($1_1 | 0, 90808 | 0);
    $1188();
    $1189($1_1 | 0, 90820 | 0);
    $1190();
    $1191($1_1 | 0, 90832 | 0);
    $1192();
    $1193($1_1 | 0, 90844 | 0);
    $1194();
    $1195($1_1 | 0, 90852 | 0);
    return $1_1 | 0;
  }
  
  function $1133($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1_1 = $1196($0_1 | 0, $1_1 + -1 | 0 | 0) | 0;
    HEAP32[$1_1 >> 2] = 76064;
    return $1_1 | 0;
  }
  
  function $1134($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0;
    $2_1 = global$0 - 16 | 0;
    global$0 = $2_1;
    HEAP32[$0_1 >> 2] = 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = 0;
    HEAP32[($2_1 + 12 | 0) >> 2] = 0;
    $1197($0_1 + 8 | 0 | 0, $2_1 + 12 | 0 | 0, $2_1 + 11 | 0 | 0) | 0;
    $1199($2_1 + 10 | 0 | 0, HEAP32[($1198($2_1 + 4 | 0 | 0, $0_1 | 0) | 0) >> 2] | 0 | 0);
    label$1 : {
    if (!$1_1) {
      break label$1
    }
    $1200($0_1 | 0, $1_1 | 0);
    $1201($0_1 | 0, $1_1 | 0);
    }
    $1202($2_1 + 10 | 0 | 0);
    global$0 = $2_1 + 16 | 0;
    return $0_1 | 0;
  }
  
  function $1135($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0;
    $1_1 = $1203($0_1 | 0) | 0;
    $1204($0_1 | 0);
    $1205($0_1 | 0, $1_1 | 0);
  }
  
  function $1136() {
    $1208(90556 | 0, 1 | 0) | 0;
  }
  
  function $1137($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1207($0_1 | 0, $1_1 | 0, $1206(88960 | 0) | 0 | 0);
  }
  
  function $1138() {
    $1209(90564 | 0, 1 | 0) | 0;
  }
  
  function $1139($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1207($0_1 | 0, $1_1 | 0, $1206(88968 | 0) | 0 | 0);
  }
  
  function $1140() {
    $1210(90572 | 0, 0 | 0, 0 | 0, 1 | 0) | 0;
  }
  
  function $1141($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1207($0_1 | 0, $1_1 | 0, $1206(89312 | 0) | 0 | 0);
  }
  
  function $1142() {
    $1211(90588 | 0, 1 | 0) | 0;
  }
  
  function $1143($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1207($0_1 | 0, $1_1 | 0, $1206(89304 | 0) | 0 | 0);
  }
  
  function $1144() {
    $1212(90596 | 0, 1 | 0) | 0;
  }
  
  function $1145($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1207($0_1 | 0, $1_1 | 0, $1206(89320 | 0) | 0 | 0);
  }
  
  function $1146() {
    $1213(90604 | 0, 1 | 0) | 0;
  }
  
  function $1147($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1207($0_1 | 0, $1_1 | 0, $1206(89328 | 0) | 0 | 0);
  }
  
  function $1148() {
    $1214(90616 | 0, 1 | 0) | 0;
  }
  
  function $1149($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1207($0_1 | 0, $1_1 | 0, $1206(89336 | 0) | 0 | 0);
  }
  
  function $1150() {
    $1215(90624 | 0, 1 | 0) | 0;
  }
  
  function $1151($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1207($0_1 | 0, $1_1 | 0, $1206(89352 | 0) | 0 | 0);
  }
  
  function $1152() {
    $1216(90632 | 0, 1 | 0) | 0;
  }
  
  function $1153($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1207($0_1 | 0, $1_1 | 0, $1206(89344 | 0) | 0 | 0);
  }
  
  function $1154() {
    $1217(90640 | 0, 1 | 0) | 0;
  }
  
  function $1155($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1207($0_1 | 0, $1_1 | 0, $1206(89360 | 0) | 0 | 0);
  }
  
  function $1156() {
    $1218(90648 | 0, 1 | 0) | 0;
  }
  
  function $1157($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1207($0_1 | 0, $1_1 | 0, $1206(89368 | 0) | 0 | 0);
  }
  
  function $1158() {
    $1219(90672 | 0, 1 | 0) | 0;
  }
  
  function $1159($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1207($0_1 | 0, $1_1 | 0, $1206(89376 | 0) | 0 | 0);
  }
  
  function $1160() {
    $1220(90700 | 0, 1 | 0) | 0;
  }
  
  function $1161($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1207($0_1 | 0, $1_1 | 0, $1206(88976 | 0) | 0 | 0);
  }
  
  function $1162() {
    $1221(90708 | 0, 1 | 0) | 0;
  }
  
  function $1163($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1207($0_1 | 0, $1_1 | 0, $1206(88984 | 0) | 0 | 0);
  }
  
  function $1164() {
    $1222(90716 | 0, 1 | 0) | 0;
  }
  
  function $1165($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1207($0_1 | 0, $1_1 | 0, $1206(88992 | 0) | 0 | 0);
  }
  
  function $1166() {
    $1223(90724 | 0, 1 | 0) | 0;
  }
  
  function $1167($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1207($0_1 | 0, $1_1 | 0, $1206(89e3 | 0) | 0 | 0);
  }
  
  function $1168() {
    $1224(90732 | 0, 1 | 0) | 0;
  }
  
  function $1169($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1207($0_1 | 0, $1_1 | 0, $1206(89040 | 0) | 0 | 0);
  }
  
  function $1170() {
    $1225(90740 | 0, 1 | 0) | 0;
  }
  
  function $1171($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1207($0_1 | 0, $1_1 | 0, $1206(89048 | 0) | 0 | 0);
  }
  
  function $1172() {
    $1226(90748 | 0, 1 | 0) | 0;
  }
  
  function $1173($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1207($0_1 | 0, $1_1 | 0, $1206(89056 | 0) | 0 | 0);
  }
  
  function $1174() {
    $1227(90756 | 0, 1 | 0) | 0;
  }
  
  function $1175($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1207($0_1 | 0, $1_1 | 0, $1206(89064 | 0) | 0 | 0);
  }
  
  function $1176() {
    $1228(90764 | 0, 1 | 0) | 0;
  }
  
  function $1177($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1207($0_1 | 0, $1_1 | 0, $1206(89072 | 0) | 0 | 0);
  }
  
  function $1178() {
    $1229(90772 | 0, 1 | 0) | 0;
  }
  
  function $1179($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1207($0_1 | 0, $1_1 | 0, $1206(89080 | 0) | 0 | 0);
  }
  
  function $1180() {
    $1230(90780 | 0, 1 | 0) | 0;
  }
  
  function $1181($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1207($0_1 | 0, $1_1 | 0, $1206(89088 | 0) | 0 | 0);
  }
  
  function $1182() {
    $1231(90788 | 0, 1 | 0) | 0;
  }
  
  function $1183($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1207($0_1 | 0, $1_1 | 0, $1206(89096 | 0) | 0 | 0);
  }
  
  function $1184() {
    $1232(90796 | 0, 1 | 0) | 0;
  }
  
  function $1185($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1207($0_1 | 0, $1_1 | 0, $1206(89008 | 0) | 0 | 0);
  }
  
  function $1186() {
    $1233(90808 | 0, 1 | 0) | 0;
  }
  
  function $1187($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1207($0_1 | 0, $1_1 | 0, $1206(89016 | 0) | 0 | 0);
  }
  
  function $1188() {
    $1234(90820 | 0, 1 | 0) | 0;
  }
  
  function $1189($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1207($0_1 | 0, $1_1 | 0, $1206(89024 | 0) | 0 | 0);
  }
  
  function $1190() {
    $1235(90832 | 0, 1 | 0) | 0;
  }
  
  function $1191($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1207($0_1 | 0, $1_1 | 0, $1206(89032 | 0) | 0 | 0);
  }
  
  function $1192() {
    $1236(90844 | 0, 1 | 0) | 0;
  }
  
  function $1193($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1207($0_1 | 0, $1_1 | 0, $1206(89104 | 0) | 0 | 0);
  }
  
  function $1194() {
    $1237(90852 | 0, 1 | 0) | 0;
  }
  
  function $1195($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1207($0_1 | 0, $1_1 | 0, $1206(89112 | 0) | 0 | 0);
  }
  
  function $1196($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
    HEAP32[$0_1 >> 2] = 81216 + 8 | 0;
    return $0_1 | 0;
  }
  
  function $1197($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $1_1 = $1595($0_1 | 0, $1_1 | 0) | 0;
    $1596($1_1 + 4 | 0 | 0) | 0;
    return $1_1 | 0;
  }
  
  function $1198($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    HEAP32[$0_1 >> 2] = $1_1;
    return $0_1 | 0;
  }
  
  function $1199($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1597($0_1 | 0, $1_1 | 0) | 0;
  }
  
  function $1200($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0, $3_1 = 0;
    $2_1 = global$0 - 16 | 0;
    global$0 = $2_1;
    label$1 : {
    if ($1_1 >>> 0 <= ($1598($0_1 | 0) | 0) >>> 0) {
      break label$1
    }
    $1599($0_1 | 0);
    wasm2js_trap();
    }
    $1601($2_1 + 8 | 0 | 0, $1600($0_1 | 0) | 0 | 0, $1_1 | 0);
    $1_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
    HEAP32[$0_1 >> 2] = $1_1;
    $3_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
    HEAP32[($1602($0_1 | 0) | 0) >> 2] = $1_1 + ($3_1 << 2 | 0) | 0;
    $1603($0_1 | 0, 0 | 0);
    global$0 = $2_1 + 16 | 0;
  }
  
  function $1201($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $3_1 = 0, $2_1 = 0, $4_1 = 0;
    $2_1 = global$0 - 16 | 0;
    global$0 = $2_1;
    $3_1 = $1604($2_1 + 4 | 0 | 0, $0_1 | 0, $1_1 | 0) | 0;
    $1_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    label$1 : while (1) {
    label$2 : {
      if (($1_1 | 0) != ($4_1 | 0)) {
      break label$2
      }
      $1605($3_1 | 0) | 0;
      global$0 = $2_1 + 16 | 0;
      return;
    }
    $1607($1600($0_1 | 0) | 0 | 0, $1606($1_1 | 0) | 0 | 0);
    $1_1 = $1_1 + 4 | 0;
    HEAP32[($3_1 + 4 | 0) >> 2] = $1_1;
    continue label$1;
    };
  }
  
  function $1202($0_1) {
    $0_1 = $0_1 | 0;
    HEAP8[$0_1 >> 0] = 1;
  }
  
  function $1203($0_1) {
    $0_1 = $0_1 | 0;
    return ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) - (HEAP32[$0_1 >> 2] | 0) | 0) >> 2 | 0 | 0;
  }
  
  function $1204($0_1) {
    $0_1 = $0_1 | 0;
    $1625($0_1 | 0, HEAP32[$0_1 >> 2] | 0 | 0);
  }
  
  function $1205($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
  }
  
  function $1206($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0;
    $1_1 = global$0 - 16 | 0;
    global$0 = $1_1;
    HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
    $1279($0_1 | 0, $1_1 + 12 | 0 | 0);
    $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    global$0 = $1_1 + 16 | 0;
    return $0_1 + -1 | 0 | 0;
  }
  
  function $1207($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0, $4_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    $1240($1_1 | 0);
    $4_1 = $1247($3_1 + 12 | 0 | 0, $1_1 | 0) | 0;
    label$1 : {
    $1_1 = $0_1 + 8 | 0;
    if ($2_1 >>> 0 < ($1203($1_1 | 0) | 0) >>> 0) {
      break label$1
    }
    $1250($1_1 | 0, $2_1 + 1 | 0 | 0);
    }
    label$2 : {
    if (!(HEAP32[($1239($1_1 | 0, $2_1 | 0) | 0) >> 2] | 0)) {
      break label$2
    }
    $1251(HEAP32[($1239($1_1 | 0, $2_1 | 0) | 0) >> 2] | 0 | 0) | 0;
    }
    $0_1 = $1252($4_1 | 0) | 0;
    HEAP32[($1239($1_1 | 0, $2_1 | 0) | 0) >> 2] = $0_1;
    $1248($4_1 | 0) | 0;
    global$0 = $3_1 + 16 | 0;
  }
  
  function $1208($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1_1 = $1133($0_1 | 0, $1_1 | 0) | 0;
    HEAP32[$1_1 >> 2] = 77172;
    return $1_1 | 0;
  }
  
  function $1209($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1_1 = $1133($0_1 | 0, $1_1 | 0) | 0;
    HEAP32[$1_1 >> 2] = 77204;
    return $1_1 | 0;
  }
  
  function $1210($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $3_1 = $1301($1133($0_1 | 0, $3_1 | 0) | 0 | 0) | 0;
    HEAP8[($3_1 + 12 | 0) >> 0] = $2_1;
    HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
    HEAP32[$3_1 >> 2] = 74604;
    label$1 : {
    if ($1_1) {
      break label$1
    }
    HEAP32[($3_1 + 8 | 0) >> 2] = 74656;
    }
    return $3_1 | 0;
  }
  
  function $1211($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1_1 = $1301($1133($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
    HEAP32[$1_1 >> 2] = 76120;
    return $1_1 | 0;
  }
  
  function $1212($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1_1 = $1320($1133($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
    HEAP32[$1_1 >> 2] = 76268;
    return $1_1 | 0;
  }
  
  function $1213($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1_1 = $1320($1133($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
    HEAP32[$1_1 >> 2] = 75688;
    HEAP32[($1_1 + 8 | 0) >> 2] = $718() | 0;
    return $1_1 | 0;
  }
  
  function $1214($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1_1 = $1320($1133($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
    HEAP32[$1_1 >> 2] = 76416;
    return $1_1 | 0;
  }
  
  function $1215($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1_1 = $1320($1133($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
    HEAP32[$1_1 >> 2] = 76648;
    return $1_1 | 0;
  }
  
  function $1216($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1_1 = $1320($1133($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
    HEAP32[$1_1 >> 2] = 76532;
    return $1_1 | 0;
  }
  
  function $1217($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1_1 = $1320($1133($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
    HEAP32[$1_1 >> 2] = 76764;
    return $1_1 | 0;
  }
  
  function $1218($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1_1 = $1133($0_1 | 0, $1_1 | 0) | 0;
    HEAP16[($1_1 + 8 | 0) >> 1] = 11310;
    HEAP32[$1_1 >> 2] = 75736;
    $286($1_1 + 12 | 0 | 0) | 0;
    return $1_1 | 0;
  }
  
  function $1219($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1_1 = $1133($0_1 | 0, $1_1 | 0) | 0;
    HEAP32[($1_1 + 8 | 0) >> 2] = 46;
    HEAP32[($1_1 + 12 | 0) >> 2] = 44;
    HEAP32[$1_1 >> 2] = 75776;
    $286($1_1 + 16 | 0 | 0) | 0;
    return $1_1 | 0;
  }
  
  function $1220($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1_1 = $1133($0_1 | 0, $1_1 | 0) | 0;
    HEAP32[$1_1 >> 2] = 77236;
    return $1_1 | 0;
  }
  
  function $1221($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1_1 = $1133($0_1 | 0, $1_1 | 0) | 0;
    HEAP32[$1_1 >> 2] = 77480;
    return $1_1 | 0;
  }
  
  function $1222($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1_1 = $1133($0_1 | 0, $1_1 | 0) | 0;
    HEAP32[$1_1 >> 2] = 77692;
    return $1_1 | 0;
  }
  
  function $1223($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1_1 = $1133($0_1 | 0, $1_1 | 0) | 0;
    HEAP32[$1_1 >> 2] = 77924;
    return $1_1 | 0;
  }
  
  function $1224($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1_1 = $1684($1133($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
    HEAP32[$1_1 >> 2] = 78908;
    return $1_1 | 0;
  }
  
  function $1225($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1_1 = $1684($1133($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
    HEAP32[$1_1 >> 2] = 79056;
    return $1_1 | 0;
  }
  
  function $1226($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1_1 = $1684($1133($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
    HEAP32[$1_1 >> 2] = 79172;
    return $1_1 | 0;
  }
  
  function $1227($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1_1 = $1684($1133($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
    HEAP32[$1_1 >> 2] = 79288;
    return $1_1 | 0;
  }
  
  function $1228($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1_1 = $1685($1133($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
    HEAP32[$1_1 >> 2] = 79404;
    return $1_1 | 0;
  }
  
  function $1229($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1_1 = $1686($1133($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
    HEAP32[$1_1 >> 2] = 79568;
    return $1_1 | 0;
  }
  
  function $1230($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1_1 = $1687($1133($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
    HEAP32[$1_1 >> 2] = 79732;
    return $1_1 | 0;
  }
  
  function $1231($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1_1 = $1688($1133($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
    HEAP32[$1_1 >> 2] = 79896;
    return $1_1 | 0;
  }
  
  function $1232($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1_1 = $1133($0_1 | 0, $1_1 | 0) | 0;
    $0_1 = $1689($1_1 + 8 | 0 | 0) | 0;
    HEAP32[$1_1 >> 2] = 78124;
    HEAP32[$0_1 >> 2] = 78172;
    return $1_1 | 0;
  }
  
  function $1233($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1_1 = $1133($0_1 | 0, $1_1 | 0) | 0;
    $0_1 = $1690($1_1 + 8 | 0 | 0) | 0;
    HEAP32[$1_1 >> 2] = 78388;
    HEAP32[$0_1 >> 2] = 78436;
    return $1_1 | 0;
  }
  
  function $1234($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1_1 = $1133($0_1 | 0, $1_1 | 0) | 0;
    $1691($1_1 + 8 | 0 | 0) | 0;
    HEAP32[$1_1 >> 2] = 78624;
    return $1_1 | 0;
  }
  
  function $1235($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1_1 = $1133($0_1 | 0, $1_1 | 0) | 0;
    $1691($1_1 + 8 | 0 | 0) | 0;
    HEAP32[$1_1 >> 2] = 78780;
    return $1_1 | 0;
  }
  
  function $1236($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1_1 = $1692($1133($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
    HEAP32[$1_1 >> 2] = 80060;
    return $1_1 | 0;
  }
  
  function $1237($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1_1 = $1692($1133($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
    HEAP32[$1_1 >> 2] = 80180;
    return $1_1 | 0;
  }
  
  function $1238() {
    var $0_1 = 0, $1_1 = 0;
    $0_1 = global$0 - 16 | 0;
    global$0 = $0_1;
    label$1 : {
    if (HEAPU8[(0 + 89288 | 0) >> 0] | 0) {
      break label$1
    }
    HEAP32[($0_1 + 8 | 0) >> 2] = $1241() | 0;
    $1242(89284 | 0, $0_1 + 15 | 0 | 0, $0_1 + 8 | 0 | 0) | 0;
    $452(96 | 0, 0 | 0, 65536 | 0) | 0;
    HEAP8[(0 + 89288 | 0) >> 0] = 1;
    }
    $1_1 = $1244(89284 | 0) | 0;
    global$0 = $0_1 + 16 | 0;
    return $1_1 | 0;
  }
  
  function $1239($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return (HEAP32[$0_1 >> 2] | 0) + ($1_1 << 2 | 0) | 0 | 0;
  }
  
  function $1240($0_1) {
    $0_1 = $0_1 | 0;
    $1245($0_1 + 4 | 0 | 0) | 0;
  }
  
  function $1241() {
    var $0_1 = 0, $1_1 = 0;
    $0_1 = global$0 - 16 | 0;
    global$0 = $0_1;
    HEAP32[($0_1 + 12 | 0) >> 2] = 1;
    $1267(89128 | 0, $0_1 + 12 | 0 | 0) | 0;
    $1_1 = $1268(89128 | 0) | 0;
    global$0 = $0_1 + 16 | 0;
    return $1_1 | 0;
  }
  
  function $1242($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    return $1269($0_1 | 0, HEAP32[$2_1 >> 2] | 0 | 0) | 0 | 0;
  }
  
  function $1243($0_1) {
    $0_1 = $0_1 | 0;
    $1270(89284 | 0) | 0;
  }
  
  function $1244($0_1) {
    $0_1 = $0_1 | 0;
    return $0_1 | 0;
  }
  
  function $1245($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0;
    $1_1 = (HEAP32[$0_1 >> 2] | 0) + 1 | 0;
    HEAP32[$0_1 >> 2] = $1_1;
    return $1_1 | 0;
  }
  
  function $1246($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    label$1 : {
    if ($1262($0_1 | 0, $1_1 | 0) | 0) {
      break label$1
    }
    $320();
    wasm2js_trap();
    }
    return HEAP32[($1263($0_1 + 8 | 0 | 0, $1_1 | 0) | 0) >> 2] | 0 | 0;
  }
  
  function $1247($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0;
    $2_1 = global$0 - 16 | 0;
    global$0 = $2_1;
    HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
    $1_1 = $1249($0_1 | 0, $2_1 + 12 | 0 | 0) | 0;
    global$0 = $2_1 + 16 | 0;
    return $1_1 | 0;
  }
  
  function $1248($0_1) {
    $0_1 = $0_1 | 0;
    $1253($0_1 | 0);
    return $0_1 | 0;
  }
  
  function $1249($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $1693($0_1 | 0, $1_1 | 0) | 0 | 0;
  }
  
  function $1250($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0;
    label$1 : {
    $2_1 = $1203($0_1 | 0) | 0;
    if ($1_1 >>> 0 <= $2_1 >>> 0) {
      break label$1
    }
    $1259($0_1 | 0, $1_1 - $2_1 | 0 | 0);
    return;
    }
    label$2 : {
    if ($1_1 >>> 0 >= $2_1 >>> 0) {
      break label$2
    }
    $1260($0_1 | 0, (HEAP32[$0_1 >> 2] | 0) + ($1_1 << 2 | 0) | 0 | 0);
    }
  }
  
  function $1251($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0;
    label$1 : {
    $1_1 = $1256($0_1 + 4 | 0 | 0) | 0;
    if (($1_1 | 0) != (-1 | 0)) {
      break label$1
    }
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($0_1);
    }
    return ($1_1 | 0) == (-1 | 0) | 0;
  }
  
  function $1252($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0;
    $1_1 = HEAP32[($1261($0_1 | 0) | 0) >> 2] | 0;
    HEAP32[($1261($0_1 | 0) | 0) >> 2] = 0;
    return $1_1 | 0;
  }
  
  function $1253($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0;
    $1_1 = HEAP32[($1261($0_1 | 0) | 0) >> 2] | 0;
    HEAP32[($1261($0_1 | 0) | 0) >> 2] = 0;
    label$1 : {
    if (!$1_1) {
      break label$1
    }
    $1694($1_1 | 0);
    }
  }
  
  function $1254($0_1) {
    $0_1 = $0_1 | 0;
    var $2_1 = 0, $1_1 = 0;
    HEAP32[$0_1 >> 2] = 74584;
    $1_1 = $0_1 + 8 | 0;
    $2_1 = 0;
    label$1 : {
    label$2 : while (1) {
      if ($2_1 >>> 0 >= ($1203($1_1 | 0) | 0) >>> 0) {
      break label$1
      }
      label$3 : {
      if (!(HEAP32[($1239($1_1 | 0, $2_1 | 0) | 0) >> 2] | 0)) {
        break label$3
      }
      $1251(HEAP32[($1239($1_1 | 0, $2_1 | 0) | 0) >> 2] | 0 | 0) | 0;
      }
      $2_1 = $2_1 + 1 | 0;
      continue label$2;
    };
    }
    $1761($0_1 + 144 | 0 | 0) | 0;
    $1255($1_1 | 0) | 0;
    return $652($0_1 | 0) | 0 | 0;
  }
  
  function $1255($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0;
    $1_1 = global$0 - 16 | 0;
    global$0 = $1_1;
    $1257($1198($1_1 + 12 | 0 | 0, $0_1 | 0) | 0 | 0);
    global$0 = $1_1 + 16 | 0;
    return $0_1 | 0;
  }
  
  function $1256($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0;
    $1_1 = (HEAP32[$0_1 >> 2] | 0) + -1 | 0;
    HEAP32[$0_1 >> 2] = $1_1;
    return $1_1 | 0;
  }
  
  function $1257($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0, $12_1 = 0;
    label$1 : {
    $1_1 = HEAP32[$0_1 >> 2] | 0;
    if (!(HEAP32[$1_1 >> 2] | 0)) {
      break label$1
    }
    $1204($1_1 | 0);
    $1631(HEAP32[$0_1 >> 2] | 0 | 0);
    $12_1 = $1600(HEAP32[$0_1 >> 2] | 0 | 0) | 0;
    $0_1 = HEAP32[$0_1 >> 2] | 0;
    $1632($12_1 | 0, HEAP32[$0_1 >> 2] | 0 | 0, $1628($0_1 | 0) | 0 | 0);
    }
  }
  
  function $1258($0_1) {
    $0_1 = $0_1 | 0;
    $1747($1254($0_1 | 0) | 0 | 0, 156 | 0);
  }
  
  function $1259($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $3_1 = 0, $2_1 = 0;
    $2_1 = global$0 - 32 | 0;
    global$0 = $2_1;
    label$1 : {
    label$2 : {
      if ((((HEAP32[($1602($0_1 | 0) | 0) >> 2] | 0) - (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0) >> 2 | 0) >>> 0 < $1_1 >>> 0) {
      break label$2
      }
      $1201($0_1 | 0, $1_1 | 0);
      break label$1;
    }
    $3_1 = $1600($0_1 | 0) | 0;
    $3_1 = $1637($2_1 + 12 | 0 | 0, $1629($0_1 | 0, ($1203($0_1 | 0) | 0) + $1_1 | 0 | 0) | 0 | 0, $1203($0_1 | 0) | 0 | 0, $3_1 | 0) | 0;
    $1638($3_1 | 0, $1_1 | 0);
    $1639($0_1 | 0, $3_1 | 0);
    $1640($3_1 | 0) | 0;
    }
    global$0 = $2_1 + 32 | 0;
  }
  
  function $1260($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0;
    $2_1 = $1203($0_1 | 0) | 0;
    $1625($0_1 | 0, $1_1 | 0);
    $1205($0_1 | 0, $2_1 | 0);
  }
  
  function $1261($0_1) {
    $0_1 = $0_1 | 0;
    return $1695($0_1 | 0) | 0 | 0;
  }
  
  function $1262($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0;
    $2_1 = 0;
    label$1 : {
    $0_1 = $0_1 + 8 | 0;
    if ($1_1 >>> 0 >= ($1203($0_1 | 0) | 0) >>> 0) {
      break label$1
    }
    $2_1 = (HEAP32[($1263($0_1 | 0, $1_1 | 0) | 0) >> 2] | 0 | 0) != (0 | 0);
    }
    return $2_1 | 0;
  }
  
  function $1263($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return (HEAP32[$0_1 >> 2] | 0) + ($1_1 << 2 | 0) | 0 | 0;
  }
  
  function $1264() {
    $452(97 | 0, 0 | 0, 65536 | 0) | 0;
  }
  
  function $1265($0_1) {
    $0_1 = $0_1 | 0;
    $1266(89128 | 0) | 0;
  }
  
  function $1266($0_1) {
    $0_1 = $0_1 | 0;
    return $0_1 | 0;
  }
  
  function $1267($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $1132($0_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0) | 0 | 0;
  }
  
  function $1268($0_1) {
    $0_1 = $0_1 | 0;
    return $0_1 | 0;
  }
  
  function $1269($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    HEAP32[$0_1 >> 2] = $1_1;
    return $0_1 | 0;
  }
  
  function $1270($0_1) {
    $0_1 = $0_1 | 0;
    return $0_1 | 0;
  }
  
  function $1271() {
    label$1 : {
    if (HEAPU8[(0 + 89296 | 0) >> 0] | 0) {
      break label$1
    }
    $1272(89292 | 0, $1238() | 0 | 0) | 0;
    $452(98 | 0, 0 | 0, 65536 | 0) | 0;
    HEAP8[(0 + 89296 | 0) >> 0] = 1;
    }
    return $1274(89292 | 0) | 0 | 0;
  }
  
  function $1272($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $1275($0_1 | 0, $1_1 | 0) | 0 | 0;
  }
  
  function $1273($0_1) {
    $0_1 = $0_1 | 0;
    $1270(89292 | 0) | 0;
  }
  
  function $1274($0_1) {
    $0_1 = $0_1 | 0;
    return $0_1 | 0;
  }
  
  function $1275($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1_1 = HEAP32[$1_1 >> 2] | 0;
    HEAP32[$0_1 >> 2] = $1_1;
    $1276($1_1 | 0);
    return $0_1 | 0;
  }
  
  function $1276($0_1) {
    $0_1 = $0_1 | 0;
    label$1 : {
    if (($0_1 | 0) == ($1268(89128 | 0) | 0 | 0)) {
      break label$1
    }
    $1240($0_1 | 0);
    }
  }
  
  function $1277($0_1) {
    $0_1 = $0_1 | 0;
    label$1 : {
    if (($0_1 | 0) == ($1268(89128 | 0) | 0 | 0)) {
      break label$1
    }
    $1251($0_1 | 0) | 0;
    }
  }
  
  function $1278($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0;
    $1_1 = HEAP32[($1271() | 0) >> 2] | 0;
    HEAP32[$0_1 >> 2] = $1_1;
    $1276($1_1 | 0);
    return $0_1 | 0;
  }
  
  function $1279($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0;
    $2_1 = global$0 - 16 | 0;
    global$0 = $2_1;
    label$1 : {
    if (($1282($0_1 | 0) | 0 | 0) == (-1 | 0)) {
      break label$1
    }
    $626($0_1 | 0, $1284($2_1 + 8 | 0 | 0, $1283($2_1 + 12 | 0 | 0, $1_1 | 0) | 0 | 0) | 0 | 0, 99 | 0);
    }
    global$0 = $2_1 + 16 | 0;
  }
  
  function $1280($0_1) {
    $0_1 = $0_1 | 0;
    $1747($652($0_1 | 0) | 0 | 0, 8 | 0);
  }
  
  function $1281($0_1) {
    $0_1 = $0_1 | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($0_1);
  }
  
  function $1282($0_1) {
    $0_1 = $0_1 | 0;
    return HEAP32[$0_1 >> 2] | 0 | 0;
  }
  
  function $1283($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $1696($0_1 | 0, $1_1 | 0) | 0 | 0;
  }
  
  function $1284($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    HEAP32[$0_1 >> 2] = $1_1;
    return $0_1 | 0;
  }
  
  function $1285($0_1) {
    $0_1 = $0_1 | 0;
    $1697($0_1 | 0);
  }
  
  function $1286($0_1) {
    $0_1 = $0_1 | 0;
    $1747($652($0_1 | 0) | 0 | 0, 8 | 0);
  }
  
  function $1287($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0;
    $3_1 = 0;
    label$1 : {
    if ($2_1 >>> 0 > 127 >>> 0) {
      break label$1
    }
    $3_1 = ((HEAP32[(($2_1 << 2 | 0) + 74656 | 0) >> 2] | 0) & $1_1 | 0 | 0) != (0 | 0);
    }
    return $3_1 | 0;
  }
  
  function $1288($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    var $4_1 = 0, $5_1 = 0;
    label$1 : {
    label$2 : while (1) {
      if (($1_1 | 0) == ($2_1 | 0)) {
      break label$1
      }
      $4_1 = 0;
      label$3 : {
      $5_1 = HEAP32[$1_1 >> 2] | 0;
      if ($5_1 >>> 0 > 127 >>> 0) {
        break label$3
      }
      $4_1 = HEAP32[(($5_1 << 2 | 0) + 74656 | 0) >> 2] | 0;
      }
      HEAP32[$3_1 >> 2] = $4_1;
      $3_1 = $3_1 + 4 | 0;
      $1_1 = $1_1 + 4 | 0;
      continue label$2;
    };
    }
    return $1_1 | 0;
  }
  
  function $1289($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    var $4_1 = 0;
    label$1 : {
    label$2 : while (1) {
      if (($2_1 | 0) == ($3_1 | 0)) {
      break label$1
      }
      label$3 : {
      $4_1 = HEAP32[$2_1 >> 2] | 0;
      if ($4_1 >>> 0 > 127 >>> 0) {
        break label$3
      }
      if ((HEAP32[(($4_1 << 2 | 0) + 74656 | 0) >> 2] | 0) & $1_1 | 0) {
        break label$1
      }
      }
      $2_1 = $2_1 + 4 | 0;
      continue label$2;
    };
    }
    return $2_1 | 0;
  }
  
  function $1290($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    var $4_1 = 0;
    label$1 : {
    label$2 : while (1) {
      if (($2_1 | 0) == ($3_1 | 0)) {
      break label$1
      }
      $4_1 = HEAP32[$2_1 >> 2] | 0;
      if ($4_1 >>> 0 > 127 >>> 0) {
      break label$1
      }
      if (!((HEAP32[(($4_1 << 2 | 0) + 74656 | 0) >> 2] | 0) & $1_1 | 0)) {
      break label$1
      }
      $2_1 = $2_1 + 4 | 0;
      continue label$2;
    };
    }
    return $2_1 | 0;
  }
  
  function $1291($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    label$1 : {
    if ($1_1 >>> 0 > 127 >>> 0) {
      break label$1
    }
    $1_1 = HEAP32[(($1292() | 0) + ($1_1 << 2 | 0) | 0) >> 2] | 0;
    }
    return $1_1 | 0;
  }
  
  function $1292() {
    return HEAP32[($635() | 0) >> 2] | 0 | 0;
  }
  
  function $1293($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0;
    label$1 : {
    label$2 : while (1) {
      if (($1_1 | 0) == ($2_1 | 0)) {
      break label$1
      }
      label$3 : {
      $3_1 = HEAP32[$1_1 >> 2] | 0;
      if ($3_1 >>> 0 > 127 >>> 0) {
        break label$3
      }
      $3_1 = HEAP32[(($1292() | 0) + ((HEAP32[$1_1 >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
      }
      HEAP32[$1_1 >> 2] = $3_1;
      $1_1 = $1_1 + 4 | 0;
      continue label$2;
    };
    }
    return $1_1 | 0;
  }
  
  function $1294($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    label$1 : {
    if ($1_1 >>> 0 > 127 >>> 0) {
      break label$1
    }
    $1_1 = HEAP32[(($1295() | 0) + ($1_1 << 2 | 0) | 0) >> 2] | 0;
    }
    return $1_1 | 0;
  }
  
  function $1295() {
    return HEAP32[($636() | 0) >> 2] | 0 | 0;
  }
  
  function $1296($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0;
    label$1 : {
    label$2 : while (1) {
      if (($1_1 | 0) == ($2_1 | 0)) {
      break label$1
      }
      label$3 : {
      $3_1 = HEAP32[$1_1 >> 2] | 0;
      if ($3_1 >>> 0 > 127 >>> 0) {
        break label$3
      }
      $3_1 = HEAP32[(($1295() | 0) + ((HEAP32[$1_1 >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
      }
      HEAP32[$1_1 >> 2] = $3_1;
      $1_1 = $1_1 + 4 | 0;
      continue label$2;
    };
    }
    return $1_1 | 0;
  }
  
  function $1297($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $1_1 | 0;
  }
  
  function $1298($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    label$1 : {
    label$2 : while (1) {
      if (($1_1 | 0) == ($2_1 | 0)) {
      break label$1
      }
      HEAP32[$3_1 >> 2] = HEAP8[$1_1 >> 0] | 0;
      $3_1 = $3_1 + 4 | 0;
      $1_1 = $1_1 + 1 | 0;
      continue label$2;
    };
    }
    return $1_1 | 0;
  }
  
  function $1299($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    return ($1_1 >>> 0 < 128 >>> 0 ? $1_1 : $2_1) << 24 >> 24 | 0;
  }
  
  function $1300($0_1, $1_1, $2_1, $3_1, $4_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    var $5_1 = 0;
    label$1 : {
    label$2 : while (1) {
      if (($1_1 | 0) == ($2_1 | 0)) {
      break label$1
      }
      $5_1 = HEAP32[$1_1 >> 2] | 0;
      HEAP8[$4_1 >> 0] = $5_1 >>> 0 < 128 >>> 0 ? $5_1 : $3_1;
      $4_1 = $4_1 + 1 | 0;
      $1_1 = $1_1 + 4 | 0;
      continue label$2;
    };
    }
    return $1_1 | 0;
  }
  
  function $1301($0_1) {
    $0_1 = $0_1 | 0;
    return $0_1 | 0;
  }
  
  function $1302($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0;
    HEAP32[$0_1 >> 2] = 74604;
    label$1 : {
    $1_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    if (!$1_1) {
      break label$1
    }
    if ((HEAPU8[($0_1 + 12 | 0) >> 0] | 0 | 0) != (1 | 0)) {
      break label$1
    }
    $1748($1_1 | 0);
    }
    return $652($0_1 | 0) | 0 | 0;
  }
  
  function $1303($0_1) {
    $0_1 = $0_1 | 0;
    $1747($1302($0_1 | 0) | 0 | 0, 16 | 0);
  }
  
  function $1304($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    label$1 : {
    if (($1_1 | 0) < (0 | 0)) {
      break label$1
    }
    $1_1 = HEAP32[(($1292() | 0) + ($1_1 << 2 | 0) | 0) >> 2] | 0;
    }
    return $1_1 << 24 >> 24 | 0;
  }
  
  function $1305($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0;
    label$1 : {
    label$2 : while (1) {
      if (($1_1 | 0) == ($2_1 | 0)) {
      break label$1
      }
      label$3 : {
      $3_1 = HEAP8[$1_1 >> 0] | 0;
      if (($3_1 | 0) < (0 | 0)) {
        break label$3
      }
      $3_1 = HEAP32[(($1292() | 0) + ((HEAP8[$1_1 >> 0] | 0) << 2 | 0) | 0) >> 2] | 0;
      }
      HEAP8[$1_1 >> 0] = $3_1;
      $1_1 = $1_1 + 1 | 0;
      continue label$2;
    };
    }
    return $1_1 | 0;
  }
  
  function $1306($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    label$1 : {
    if (($1_1 | 0) < (0 | 0)) {
      break label$1
    }
    $1_1 = HEAP32[(($1295() | 0) + ($1_1 << 2 | 0) | 0) >> 2] | 0;
    }
    return $1_1 << 24 >> 24 | 0;
  }
  
  function $1307($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0;
    label$1 : {
    label$2 : while (1) {
      if (($1_1 | 0) == ($2_1 | 0)) {
      break label$1
      }
      label$3 : {
      $3_1 = HEAP8[$1_1 >> 0] | 0;
      if (($3_1 | 0) < (0 | 0)) {
        break label$3
      }
      $3_1 = HEAP32[(($1295() | 0) + ((HEAP8[$1_1 >> 0] | 0) << 2 | 0) | 0) >> 2] | 0;
      }
      HEAP8[$1_1 >> 0] = $3_1;
      $1_1 = $1_1 + 1 | 0;
      continue label$2;
    };
    }
    return $1_1 | 0;
  }
  
  function $1308($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $1_1 | 0;
  }
  
  function $1309($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    label$1 : {
    label$2 : while (1) {
      if (($1_1 | 0) == ($2_1 | 0)) {
      break label$1
      }
      HEAP8[$3_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
      $3_1 = $3_1 + 1 | 0;
      $1_1 = $1_1 + 1 | 0;
      continue label$2;
    };
    }
    return $1_1 | 0;
  }
  
  function $1310($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    return (($1_1 | 0) < (0 | 0) ? $2_1 : $1_1) | 0;
  }
  
  function $1311($0_1, $1_1, $2_1, $3_1, $4_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    var $5_1 = 0;
    label$1 : {
    label$2 : while (1) {
      if (($1_1 | 0) == ($2_1 | 0)) {
      break label$1
      }
      $5_1 = HEAP8[$1_1 >> 0] | 0;
      HEAP8[$4_1 >> 0] = ($5_1 | 0) < (0 | 0) ? $3_1 : $5_1;
      $4_1 = $4_1 + 1 | 0;
      $1_1 = $1_1 + 1 | 0;
      continue label$2;
    };
    }
    return $1_1 | 0;
  }
  
  function $1312($0_1) {
    $0_1 = $0_1 | 0;
    $1747($652($0_1 | 0) | 0 | 0, 8 | 0);
  }
  
  function $1313($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $6_1 = $6_1 | 0;
    $7_1 = $7_1 | 0;
    HEAP32[$4_1 >> 2] = $2_1;
    HEAP32[$7_1 >> 2] = $5_1;
    return 3 | 0;
  }
  
  function $1314($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $6_1 = $6_1 | 0;
    $7_1 = $7_1 | 0;
    HEAP32[$4_1 >> 2] = $2_1;
    HEAP32[$7_1 >> 2] = $5_1;
    return 3 | 0;
  }
  
  function $1315($0_1, $1_1, $2_1, $3_1, $4_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    HEAP32[$4_1 >> 2] = $2_1;
    return 3 | 0;
  }
  
  function $1316($0_1) {
    $0_1 = $0_1 | 0;
    return 1 | 0;
  }
  
  function $1317($0_1) {
    $0_1 = $0_1 | 0;
    return 1 | 0;
  }
  
  function $1318($0_1, $1_1, $2_1, $3_1, $4_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    var $5_1 = 0;
    $5_1 = global$0 - 16 | 0;
    global$0 = $5_1;
    HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
    HEAP32[($5_1 + 8 | 0) >> 2] = $3_1 - $2_1 | 0;
    $4_1 = HEAP32[($318($5_1 + 12 | 0 | 0, $5_1 + 8 | 0 | 0) | 0) >> 2] | 0;
    global$0 = $5_1 + 16 | 0;
    return $4_1 | 0;
  }
  
  function $1319($0_1) {
    $0_1 = $0_1 | 0;
    return 1 | 0;
  }
  
  function $1320($0_1) {
    $0_1 = $0_1 | 0;
    return $0_1 | 0;
  }
  
  function $1321($0_1) {
    $0_1 = $0_1 | 0;
    $1747($1131($0_1 | 0) | 0 | 0, 12 | 0);
  }
  
  function $1322($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $6_1 = $6_1 | 0;
    $7_1 = $7_1 | 0;
    var $9_1 = 0, $8_1 = 0, $10_1 = 0, $11_1 = 0, i64toi32_i32$1 = 0;
    $8_1 = global$0 - 16 | 0;
    global$0 = $8_1;
    $9_1 = $2_1;
    label$1 : {
    label$2 : while (1) {
      label$3 : {
      if (($9_1 | 0) != ($3_1 | 0)) {
        break label$3
      }
      $9_1 = $3_1;
      break label$1;
      }
      if (!(HEAP32[$9_1 >> 2] | 0)) {
      break label$1
      }
      $9_1 = $9_1 + 4 | 0;
      continue label$2;
    };
    }
    HEAP32[$7_1 >> 2] = $5_1;
    HEAP32[$4_1 >> 2] = $2_1;
    label$4 : {
    label$5 : {
      label$6 : while (1) {
      label$7 : {
        label$8 : {
        if (($2_1 | 0) == ($3_1 | 0)) {
          break label$8
        }
        if (($5_1 | 0) == ($6_1 | 0)) {
          break label$8
        }
        i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
        HEAP32[($8_1 + 8 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
        HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$1;
        $10_1 = 1;
        label$9 : {
          label$10 : {
          label$11 : {
            label$12 : {
            $11_1 = $1323($5_1 | 0, $4_1 | 0, ($9_1 - $2_1 | 0) >> 2 | 0 | 0, $6_1 - $5_1 | 0 | 0, $1_1 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
            switch ($11_1 + 1 | 0 | 0) {
            case 0:
              break label$12;
            case 1:
              break label$4;
            default:
              break label$11;
            };
            }
            HEAP32[$7_1 >> 2] = $5_1;
            label$13 : while (1) {
            if (($2_1 | 0) == (HEAP32[$4_1 >> 2] | 0 | 0)) {
              break label$10
            }
            $9_1 = $1324($5_1 | 0, HEAP32[$2_1 >> 2] | 0 | 0, $8_1 + 8 | 0 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
            if (($9_1 | 0) == (-1 | 0)) {
              break label$10
            }
            $5_1 = (HEAP32[$7_1 >> 2] | 0) + $9_1 | 0;
            HEAP32[$7_1 >> 2] = $5_1;
            $2_1 = $2_1 + 4 | 0;
            continue label$13;
            };
          }
          $5_1 = (HEAP32[$7_1 >> 2] | 0) + $11_1 | 0;
          HEAP32[$7_1 >> 2] = $5_1;
          if (($5_1 | 0) == ($6_1 | 0)) {
            break label$9
          }
          label$14 : {
            if (($9_1 | 0) != ($3_1 | 0)) {
            break label$14
            }
            $2_1 = HEAP32[$4_1 >> 2] | 0;
            $9_1 = $3_1;
            continue label$6;
          }
          $9_1 = $1324($8_1 + 4 | 0 | 0, 0 | 0, $1_1 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
          if (($9_1 | 0) == (-1 | 0)) {
            break label$5
          }
          $2_1 = $8_1 + 4 | 0;
          label$15 : {
            if ($9_1 >>> 0 <= ($6_1 - (HEAP32[$7_1 >> 2] | 0) | 0) >>> 0) {
            break label$15
            }
            $10_1 = 1;
            break label$4;
          }
          label$16 : {
            label$17 : while (1) {
            if (!$9_1) {
              break label$16
            }
            $5_1 = HEAPU8[$2_1 >> 0] | 0;
            $10_1 = HEAP32[$7_1 >> 2] | 0;
            HEAP32[$7_1 >> 2] = $10_1 + 1 | 0;
            HEAP8[$10_1 >> 0] = $5_1;
            $9_1 = $9_1 + -1 | 0;
            $2_1 = $2_1 + 1 | 0;
            continue label$17;
            };
          }
          $2_1 = (HEAP32[$4_1 >> 2] | 0) + 4 | 0;
          HEAP32[$4_1 >> 2] = $2_1;
          $9_1 = $2_1;
          label$18 : while (1) {
            label$19 : {
            if (($9_1 | 0) != ($3_1 | 0)) {
              break label$19
            }
            $9_1 = $3_1;
            break label$7;
            }
            if (!(HEAP32[$9_1 >> 2] | 0)) {
            break label$7
            }
            $9_1 = $9_1 + 4 | 0;
            continue label$18;
          };
          }
          HEAP32[$4_1 >> 2] = $2_1;
          break label$5;
        }
        $2_1 = HEAP32[$4_1 >> 2] | 0;
        }
        $10_1 = ($2_1 | 0) != ($3_1 | 0);
        break label$4;
      }
      $5_1 = HEAP32[$7_1 >> 2] | 0;
      continue label$6;
      };
    }
    $10_1 = 2;
    }
    global$0 = $8_1 + 16 | 0;
    return $10_1 | 0;
  }
  
  function $1323($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    var $6_1 = 0;
    $6_1 = global$0 - 16 | 0;
    global$0 = $6_1;
    HEAP32[($6_1 + 12 | 0) >> 2] = $5_1;
    $5_1 = $721($6_1 + 8 | 0 | 0, $6_1 + 12 | 0 | 0) | 0;
    $4_1 = $637($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0) | 0;
    $722($5_1 | 0) | 0;
    global$0 = $6_1 + 16 | 0;
    return $4_1 | 0;
  }
  
  function $1324($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    var $4_1 = 0;
    $4_1 = global$0 - 16 | 0;
    global$0 = $4_1;
    HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
    $3_1 = $721($4_1 + 8 | 0 | 0, $4_1 + 12 | 0 | 0) | 0;
    $2_1 = $468($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
    $722($3_1 | 0) | 0;
    global$0 = $4_1 + 16 | 0;
    return $2_1 | 0;
  }
  
  function $1325($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $6_1 = $6_1 | 0;
    $7_1 = $7_1 | 0;
    var $9_1 = 0, $8_1 = 0, $10_1 = 0, i64toi32_i32$1 = 0;
    $8_1 = global$0 - 16 | 0;
    global$0 = $8_1;
    $9_1 = $2_1;
    label$1 : {
    label$2 : while (1) {
      label$3 : {
      if (($9_1 | 0) != ($3_1 | 0)) {
        break label$3
      }
      $9_1 = $3_1;
      break label$1;
      }
      if (!(HEAPU8[$9_1 >> 0] | 0)) {
      break label$1
      }
      $9_1 = $9_1 + 1 | 0;
      continue label$2;
    };
    }
    HEAP32[$7_1 >> 2] = $5_1;
    HEAP32[$4_1 >> 2] = $2_1;
    label$4 : while (1) {
    label$5 : {
      label$6 : {
      label$7 : {
        if (($2_1 | 0) == ($3_1 | 0)) {
        break label$7
        }
        if (($5_1 | 0) == ($6_1 | 0)) {
        break label$7
        }
        i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
        HEAP32[($8_1 + 8 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
        HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$1;
        label$8 : {
        label$9 : {
          label$10 : {
          label$11 : {
            label$12 : {
            $10_1 = $1326($5_1 | 0, $4_1 | 0, $9_1 - $2_1 | 0 | 0, ($6_1 - $5_1 | 0) >> 2 | 0 | 0, $1_1 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
            if (($10_1 | 0) != (-1 | 0)) {
              break label$12
            }
            label$13 : while (1) {
              HEAP32[$7_1 >> 2] = $5_1;
              if (($2_1 | 0) == (HEAP32[$4_1 >> 2] | 0 | 0)) {
              break label$7
              }
              $6_1 = 1;
              label$14 : {
              label$15 : {
                label$16 : {
                $5_1 = $1327($5_1 | 0, $2_1 | 0, $9_1 - $2_1 | 0 | 0, $8_1 + 8 | 0 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
                switch ($5_1 + 2 | 0 | 0) {
                case 2:
                  break label$14;
                case 1:
                  break label$16;
                case 0:
                  break label$9;
                default:
                  break label$15;
                };
                }
                HEAP32[$4_1 >> 2] = $2_1;
                break label$11;
              }
              $6_1 = $5_1;
              }
              $2_1 = $2_1 + $6_1 | 0;
              $5_1 = (HEAP32[$7_1 >> 2] | 0) + 4 | 0;
              continue label$13;
            };
            }
            $5_1 = (HEAP32[$7_1 >> 2] | 0) + ($10_1 << 2 | 0) | 0;
            HEAP32[$7_1 >> 2] = $5_1;
            if (($5_1 | 0) == ($6_1 | 0)) {
            break label$8
            }
            $2_1 = HEAP32[$4_1 >> 2] | 0;
            label$17 : {
            if (($9_1 | 0) != ($3_1 | 0)) {
              break label$17
            }
            $9_1 = $3_1;
            continue label$4;
            }
            if (!($1327($5_1 | 0, $2_1 | 0, 1 | 0, $1_1 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0)) {
            break label$10
            }
          }
          $9_1 = 2;
          break label$6;
          }
          HEAP32[$7_1 >> 2] = (HEAP32[$7_1 >> 2] | 0) + 4 | 0;
          $2_1 = (HEAP32[$4_1 >> 2] | 0) + 1 | 0;
          HEAP32[$4_1 >> 2] = $2_1;
          $9_1 = $2_1;
          label$18 : while (1) {
          label$19 : {
            if (($9_1 | 0) != ($3_1 | 0)) {
            break label$19
            }
            $9_1 = $3_1;
            break label$5;
          }
          if (!(HEAPU8[$9_1 >> 0] | 0)) {
            break label$5
          }
          $9_1 = $9_1 + 1 | 0;
          continue label$18;
          };
        }
        HEAP32[$4_1 >> 2] = $2_1;
        $9_1 = 1;
        break label$6;
        }
        $2_1 = HEAP32[$4_1 >> 2] | 0;
      }
      $9_1 = ($2_1 | 0) != ($3_1 | 0);
      }
      global$0 = $8_1 + 16 | 0;
      return $9_1 | 0;
    }
    $5_1 = HEAP32[$7_1 >> 2] | 0;
    continue label$4;
    };
  }
  
  function $1326($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    var $6_1 = 0;
    $6_1 = global$0 - 16 | 0;
    global$0 = $6_1;
    HEAP32[($6_1 + 12 | 0) >> 2] = $5_1;
    $5_1 = $721($6_1 + 8 | 0 | 0, $6_1 + 12 | 0 | 0) | 0;
    $4_1 = $639($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0) | 0;
    $722($5_1 | 0) | 0;
    global$0 = $6_1 + 16 | 0;
    return $4_1 | 0;
  }
  
  function $1327($0_1, $1_1, $2_1, $3_1, $4_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    var $5_1 = 0;
    $5_1 = global$0 - 16 | 0;
    global$0 = $5_1;
    HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
    $4_1 = $721($5_1 + 8 | 0 | 0, $5_1 + 12 | 0 | 0) | 0;
    $3_1 = $463($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
    $722($4_1 | 0) | 0;
    global$0 = $5_1 + 16 | 0;
    return $3_1 | 0;
  }
  
  function $1328($0_1, $1_1, $2_1, $3_1, $4_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    var $6_1 = 0, $5_1 = 0;
    $5_1 = global$0 - 16 | 0;
    global$0 = $5_1;
    HEAP32[$4_1 >> 2] = $2_1;
    $6_1 = 2;
    label$1 : {
    $2_1 = $1324($5_1 + 12 | 0 | 0, 0 | 0, $1_1 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
    if (($2_1 + 1 | 0) >>> 0 < 2 >>> 0) {
      break label$1
    }
    $6_1 = 1;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1 >>> 0 > ($3_1 - (HEAP32[$4_1 >> 2] | 0) | 0) >>> 0) {
      break label$1
    }
    $6_1 = $5_1 + 12 | 0;
    label$2 : while (1) {
      label$3 : {
      if ($2_1) {
        break label$3
      }
      $6_1 = 0;
      break label$1;
      }
      $0_1 = HEAPU8[$6_1 >> 0] | 0;
      $1_1 = HEAP32[$4_1 >> 2] | 0;
      HEAP32[$4_1 >> 2] = $1_1 + 1 | 0;
      HEAP8[$1_1 >> 0] = $0_1;
      $2_1 = $2_1 + -1 | 0;
      $6_1 = $6_1 + 1 | 0;
      continue label$2;
    };
    }
    global$0 = $5_1 + 16 | 0;
    return $6_1 | 0;
  }
  
  function $1329($0_1) {
    $0_1 = $0_1 | 0;
    label$1 : {
    if (!($1330(0 | 0, 0 | 0, 4 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0)) {
      break label$1
    }
    return -1 | 0;
    }
    label$2 : {
    $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    if ($0_1) {
      break label$2
    }
    return 1 | 0;
    }
    return ($1331($0_1 | 0) | 0 | 0) == (1 | 0) | 0;
  }
  
  function $1330($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    var $4_1 = 0;
    $4_1 = global$0 - 16 | 0;
    global$0 = $4_1;
    HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
    $3_1 = $721($4_1 + 8 | 0 | 0, $4_1 + 12 | 0 | 0) | 0;
    $2_1 = $462($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
    $722($3_1 | 0) | 0;
    global$0 = $4_1 + 16 | 0;
    return $2_1 | 0;
  }
  
  function $1331($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0, $2_1 = 0;
    $1_1 = global$0 - 16 | 0;
    global$0 = $1_1;
    HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
    $0_1 = $721($1_1 + 8 | 0 | 0, $1_1 + 12 | 0 | 0) | 0;
    $2_1 = $640() | 0;
    $722($0_1 | 0) | 0;
    global$0 = $1_1 + 16 | 0;
    return $2_1 | 0;
  }
  
  function $1332($0_1) {
    $0_1 = $0_1 | 0;
    return 0 | 0;
  }
  
  function $1333($0_1, $1_1, $2_1, $3_1, $4_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
    $5_1 = 0;
    $6_1 = 0;
    label$1 : {
    label$2 : while (1) {
      if ($6_1 >>> 0 >= $4_1 >>> 0) {
      break label$1
      }
      if (($2_1 | 0) == ($3_1 | 0)) {
      break label$1
      }
      $7_1 = 1;
      label$3 : {
      label$4 : {
        $8_1 = $1334($2_1 | 0, $3_1 - $2_1 | 0 | 0, $1_1 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
        switch ($8_1 + 2 | 0 | 0) {
        case 0:
        case 1:
        break label$1;
        case 2:
        break label$3;
        default:
        break label$4;
        };
      }
      $7_1 = $8_1;
      }
      $6_1 = $6_1 + 1 | 0;
      $5_1 = $7_1 + $5_1 | 0;
      $2_1 = $2_1 + $7_1 | 0;
      continue label$2;
    };
    }
    return $5_1 | 0;
  }
  
  function $1334($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    var $4_1 = 0;
    $4_1 = global$0 - 16 | 0;
    global$0 = $4_1;
    HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
    $3_1 = $721($4_1 + 8 | 0 | 0, $4_1 + 12 | 0 | 0) | 0;
    $2_1 = $641($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
    $722($3_1 | 0) | 0;
    global$0 = $4_1 + 16 | 0;
    return $2_1 | 0;
  }
  
  function $1335($0_1) {
    $0_1 = $0_1 | 0;
    label$1 : {
    $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    if ($0_1) {
      break label$1
    }
    return 1 | 0;
    }
    return $1331($0_1 | 0) | 0 | 0;
  }
  
  function $1336($0_1) {
    $0_1 = $0_1 | 0;
    $1747($652($0_1 | 0) | 0 | 0, 8 | 0);
  }
  
  function $1337($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $6_1 = $6_1 | 0;
    $7_1 = $7_1 | 0;
    var $8_1 = 0;
    $8_1 = global$0 - 16 | 0;
    global$0 = $8_1;
    HEAP32[($8_1 + 12 | 0) >> 2] = $2_1;
    HEAP32[($8_1 + 8 | 0) >> 2] = $5_1;
    $2_1 = $1338($2_1 | 0, $3_1 | 0, $8_1 + 12 | 0 | 0, $5_1 | 0, $6_1 | 0, $8_1 + 8 | 0 | 0, 1114111 | 0, 0 | 0) | 0;
    HEAP32[$4_1 >> 2] = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
    HEAP32[$7_1 >> 2] = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
    global$0 = $8_1 + 16 | 0;
    return $2_1 | 0;
  }
  
  function $1338($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $6_1 = $6_1 | 0;
    $7_1 = $7_1 | 0;
    var $8_1 = 0;
    HEAP32[$2_1 >> 2] = $0_1;
    HEAP32[$5_1 >> 2] = $3_1;
    label$1 : {
    label$2 : {
      if (!($7_1 & 2 | 0)) {
      break label$2
      }
      if (($4_1 - $3_1 | 0 | 0) < (3 | 0)) {
      break label$1
      }
      HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
      HEAP8[$3_1 >> 0] = 239;
      $3_1 = HEAP32[$5_1 >> 2] | 0;
      HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
      HEAP8[$3_1 >> 0] = 187;
      $3_1 = HEAP32[$5_1 >> 2] | 0;
      HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
      HEAP8[$3_1 >> 0] = 191;
    }
    $0_1 = HEAP32[$2_1 >> 2] | 0;
    label$3 : {
      label$4 : while (1) {
      label$5 : {
        if ($0_1 >>> 0 < $1_1 >>> 0) {
        break label$5
        }
        $7_1 = 0;
        break label$3;
      }
      $7_1 = 2;
      $3_1 = HEAPU16[$0_1 >> 1] | 0;
      if ($6_1 >>> 0 < $3_1 >>> 0) {
        break label$3
      }
      label$6 : {
        label$7 : {
        label$8 : {
          if ($3_1 >>> 0 > 127 >>> 0) {
          break label$8
          }
          $7_1 = 1;
          $0_1 = HEAP32[$5_1 >> 2] | 0;
          if (($4_1 - $0_1 | 0 | 0) < (1 | 0)) {
          break label$3
          }
          HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
          HEAP8[$0_1 >> 0] = $3_1;
          break label$7;
        }
        label$9 : {
          if ($3_1 >>> 0 > 2047 >>> 0) {
          break label$9
          }
          $0_1 = HEAP32[$5_1 >> 2] | 0;
          if (($4_1 - $0_1 | 0 | 0) < (2 | 0)) {
          break label$1
          }
          HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
          HEAP8[$0_1 >> 0] = $3_1 >>> 6 | 0 | 192 | 0;
          $0_1 = HEAP32[$5_1 >> 2] | 0;
          HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
          HEAP8[$0_1 >> 0] = $3_1 & 63 | 0 | 128 | 0;
          break label$7;
        }
        label$10 : {
          if ($3_1 >>> 0 > 55295 >>> 0) {
          break label$10
          }
          $0_1 = HEAP32[$5_1 >> 2] | 0;
          if (($4_1 - $0_1 | 0 | 0) < (3 | 0)) {
          break label$1
          }
          HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
          HEAP8[$0_1 >> 0] = $3_1 >>> 12 | 0 | 224 | 0;
          $0_1 = HEAP32[$5_1 >> 2] | 0;
          HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
          HEAP8[$0_1 >> 0] = ($3_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
          $0_1 = HEAP32[$5_1 >> 2] | 0;
          HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
          HEAP8[$0_1 >> 0] = $3_1 & 63 | 0 | 128 | 0;
          break label$7;
        }
        label$11 : {
          if ($3_1 >>> 0 > 56319 >>> 0) {
          break label$11
          }
          $7_1 = 1;
          if (($1_1 - $0_1 | 0 | 0) < (3 | 0)) {
          break label$3
          }
          $8_1 = HEAPU16[($0_1 + 2 | 0) >> 1] | 0;
          if (($8_1 & 64512 | 0 | 0) != (56320 | 0)) {
          break label$6
          }
          if (($4_1 - (HEAP32[$5_1 >> 2] | 0) | 0 | 0) < (4 | 0)) {
          break label$3
          }
          $7_1 = $3_1 & 960 | 0;
          if ((($7_1 << 10 | 0 | (($3_1 << 10 | 0) & 64512 | 0) | 0 | ($8_1 & 1023 | 0) | 0) + 65536 | 0) >>> 0 > $6_1 >>> 0) {
          break label$6
          }
          HEAP32[$2_1 >> 2] = $0_1 + 2 | 0;
          $0_1 = HEAP32[$5_1 >> 2] | 0;
          HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
          $7_1 = ($7_1 >>> 6 | 0) + 1 | 0;
          HEAP8[$0_1 >> 0] = $7_1 >>> 2 | 0 | 240 | 0;
          $0_1 = HEAP32[$5_1 >> 2] | 0;
          HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
          HEAP8[$0_1 >> 0] = ($7_1 << 4 | 0) & 48 | 0 | (($3_1 >>> 2 | 0) & 15 | 0) | 0 | 128 | 0;
          $0_1 = HEAP32[$5_1 >> 2] | 0;
          HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
          HEAP8[$0_1 >> 0] = ($8_1 >>> 6 | 0) & 15 | 0 | (($3_1 << 4 | 0) & 48 | 0) | 0 | 128 | 0;
          $3_1 = HEAP32[$5_1 >> 2] | 0;
          HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
          HEAP8[$3_1 >> 0] = $8_1 & 63 | 0 | 128 | 0;
          break label$7;
        }
        if ($3_1 >>> 0 < 57344 >>> 0) {
          break label$3
        }
        $0_1 = HEAP32[$5_1 >> 2] | 0;
        if (($4_1 - $0_1 | 0 | 0) < (3 | 0)) {
          break label$1
        }
        HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
        HEAP8[$0_1 >> 0] = $3_1 >>> 12 | 0 | 224 | 0;
        $0_1 = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
        HEAP8[$0_1 >> 0] = ($3_1 >>> 6 | 0) & 191 | 0;
        $0_1 = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
        HEAP8[$0_1 >> 0] = $3_1 & 63 | 0 | 128 | 0;
        }
        $0_1 = (HEAP32[$2_1 >> 2] | 0) + 2 | 0;
        HEAP32[$2_1 >> 2] = $0_1;
        continue label$4;
      }
      break label$4;
      };
      return 2 | 0;
    }
    return $7_1 | 0;
    }
    return 1 | 0;
  }
  
  function $1339($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $6_1 = $6_1 | 0;
    $7_1 = $7_1 | 0;
    var $8_1 = 0;
    $8_1 = global$0 - 16 | 0;
    global$0 = $8_1;
    HEAP32[($8_1 + 12 | 0) >> 2] = $2_1;
    HEAP32[($8_1 + 8 | 0) >> 2] = $5_1;
    $2_1 = $1340($2_1 | 0, $3_1 | 0, $8_1 + 12 | 0 | 0, $5_1 | 0, $6_1 | 0, $8_1 + 8 | 0 | 0, 1114111 | 0, 0 | 0) | 0;
    HEAP32[$4_1 >> 2] = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
    HEAP32[$7_1 >> 2] = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
    global$0 = $8_1 + 16 | 0;
    return $2_1 | 0;
  }
  
  function $1340($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $6_1 = $6_1 | 0;
    $7_1 = $7_1 | 0;
    var $9_1 = 0, $10_1 = 0, $8_1 = 0, $11_1 = 0, $191_1 = 0;
    HEAP32[$2_1 >> 2] = $0_1;
    HEAP32[$5_1 >> 2] = $3_1;
    label$1 : {
    if (!($7_1 & 4 | 0)) {
      break label$1
    }
    $0_1 = HEAP32[$2_1 >> 2] | 0;
    if (($1_1 - $0_1 | 0 | 0) < (3 | 0)) {
      break label$1
    }
    if ((HEAPU8[$0_1 >> 0] | 0 | 0) != (239 | 0)) {
      break label$1
    }
    if ((HEAPU8[($0_1 + 1 | 0) >> 0] | 0 | 0) != (187 | 0)) {
      break label$1
    }
    if ((HEAPU8[($0_1 + 2 | 0) >> 0] | 0 | 0) != (191 | 0)) {
      break label$1
    }
    HEAP32[$2_1 >> 2] = $0_1 + 3 | 0;
    }
    label$2 : {
    label$3 : {
      label$4 : {
      label$5 : while (1) {
        $3_1 = HEAP32[$2_1 >> 2] | 0;
        if ($3_1 >>> 0 >= $1_1 >>> 0) {
        break label$4
        }
        $7_1 = HEAP32[$5_1 >> 2] | 0;
        if ($7_1 >>> 0 >= $4_1 >>> 0) {
        break label$4
        }
        $8_1 = 2;
        $0_1 = HEAPU8[$3_1 >> 0] | 0;
        if ($6_1 >>> 0 < $0_1 >>> 0) {
        break label$2
        }
        label$6 : {
        label$7 : {
          if (($0_1 << 24 >> 24 | 0) < (0 | 0)) {
          break label$7
          }
          HEAP16[$7_1 >> 1] = $0_1;
          $0_1 = $3_1 + 1 | 0;
          break label$6;
        }
        if ($0_1 >>> 0 < 194 >>> 0) {
          break label$2
        }
        label$8 : {
          if ($0_1 >>> 0 > 223 >>> 0) {
          break label$8
          }
          label$9 : {
          if (($1_1 - $3_1 | 0 | 0) >= (2 | 0)) {
            break label$9
          }
          return 1 | 0;
          }
          $9_1 = HEAPU8[($3_1 + 1 | 0) >> 0] | 0;
          if (($9_1 & 192 | 0 | 0) != (128 | 0)) {
          break label$3
          }
          $8_1 = 2;
          $0_1 = $9_1 & 63 | 0 | (($0_1 << 6 | 0) & 1984 | 0) | 0;
          if ($0_1 >>> 0 > $6_1 >>> 0) {
          break label$3
          }
          HEAP16[$7_1 >> 1] = $0_1;
          $0_1 = $3_1 + 2 | 0;
          break label$6;
        }
        label$10 : {
          if ($0_1 >>> 0 > 239 >>> 0) {
          break label$10
          }
          $8_1 = 1;
          $10_1 = $1_1 - $3_1 | 0;
          if (($10_1 | 0) < (2 | 0)) {
          break label$3
          }
          $9_1 = HEAPU8[($3_1 + 1 | 0) >> 0] | 0;
          label$11 : {
          label$12 : {
            label$13 : {
            if (($0_1 | 0) == (237 | 0)) {
              break label$13
            }
            if (($0_1 | 0) != (224 | 0)) {
              break label$12
            }
            if (($9_1 & 224 | 0 | 0) != (160 | 0)) {
              break label$2
            }
            break label$11;
            }
            if (($9_1 & 224 | 0 | 0) != (128 | 0)) {
            break label$2
            }
            break label$11;
          }
          if (($9_1 & 192 | 0 | 0) != (128 | 0)) {
            break label$2
          }
          }
          if (($10_1 | 0) == (2 | 0)) {
          break label$3
          }
          $10_1 = HEAPU8[($3_1 + 2 | 0) >> 0] | 0;
          if (($10_1 & 192 | 0 | 0) != (128 | 0)) {
          break label$2
          }
          $8_1 = 2;
          $0_1 = $10_1 & 63 | 0 | (($9_1 & 63 | 0) << 6 | 0 | ($0_1 << 12 | 0) | 0) | 0;
          if (($0_1 & 65535 | 0) >>> 0 > $6_1 >>> 0) {
          break label$3
          }
          HEAP16[$7_1 >> 1] = $0_1;
          $0_1 = $3_1 + 3 | 0;
          break label$6;
        }
        if ($0_1 >>> 0 > 244 >>> 0) {
          break label$2
        }
        $8_1 = 1;
        $10_1 = $1_1 - $3_1 | 0;
        if (($10_1 | 0) < (2 | 0)) {
          break label$3
        }
        $9_1 = HEAPU8[($3_1 + 1 | 0) >> 0] | 0;
        label$14 : {
          label$15 : {
          switch ($0_1 + -240 | 0 | 0) {
          case 0:
            if ((($9_1 + 112 | 0) & 255 | 0) >>> 0 >= 48 >>> 0) {
            break label$2
            }
            break label$14;
          case 4:
            if (($9_1 & 240 | 0 | 0) != (128 | 0)) {
            break label$2
            }
            break label$14;
          default:
            break label$15;
          };
          }
          if (($9_1 & 192 | 0 | 0) != (128 | 0)) {
          break label$2
          }
        }
        if (($10_1 | 0) == (2 | 0)) {
          break label$3
        }
        $11_1 = HEAPU8[($3_1 + 2 | 0) >> 0] | 0;
        if (($11_1 & 192 | 0 | 0) != (128 | 0)) {
          break label$2
        }
        if (($10_1 | 0) == (3 | 0)) {
          break label$3
        }
        $3_1 = HEAPU8[($3_1 + 3 | 0) >> 0] | 0;
        if (($3_1 & 192 | 0 | 0) != (128 | 0)) {
          break label$2
        }
        if (($4_1 - $7_1 | 0 | 0) < (3 | 0)) {
          break label$3
        }
        $8_1 = 2;
        $3_1 = $3_1 & 63 | 0;
        $10_1 = $11_1 << 6 | 0;
        $0_1 = $0_1 & 7 | 0;
        if (($3_1 | ($10_1 & 4032 | 0 | (($9_1 << 12 | 0) & 258048 | 0 | ($0_1 << 18 | 0) | 0) | 0) | 0) >>> 0 > $6_1 >>> 0) {
          break label$3
        }
        $191_1 = $0_1 << 8 | 0;
        $0_1 = $9_1 << 2 | 0;
        HEAP16[$7_1 >> 1] = ($191_1 | ($0_1 & 192 | 0) | 0 | ($0_1 & 60 | 0) | 0 | (($11_1 >>> 4 | 0) & 3 | 0) | 0) + 16320 | 0 | 55296 | 0;
        HEAP32[$5_1 >> 2] = $7_1 + 2 | 0;
        HEAP16[($7_1 + 2 | 0) >> 1] = $3_1 | ($10_1 & 960 | 0) | 0 | 56320 | 0;
        $0_1 = (HEAP32[$2_1 >> 2] | 0) + 4 | 0;
        }
        HEAP32[$2_1 >> 2] = $0_1;
        HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + 2 | 0;
        continue label$5;
      };
      }
      $8_1 = $3_1 >>> 0 < $1_1 >>> 0;
    }
    return $8_1 | 0;
    }
    return 2 | 0;
  }
  
  function $1341($0_1, $1_1, $2_1, $3_1, $4_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    HEAP32[$4_1 >> 2] = $2_1;
    return 3 | 0;
  }
  
  function $1342($0_1) {
    $0_1 = $0_1 | 0;
    return 0 | 0;
  }
  
  function $1343($0_1) {
    $0_1 = $0_1 | 0;
    return 0 | 0;
  }
  
  function $1344($0_1, $1_1, $2_1, $3_1, $4_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    return $1345($2_1 | 0, $3_1 | 0, $4_1 | 0, 1114111 | 0, 0 | 0) | 0 | 0;
  }
  
  function $1345($0_1, $1_1, $2_1, $3_1, $4_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    var $5_1 = 0, $7_1 = 0, $6_1 = 0, $8_1 = 0, $9_1 = 0;
    $5_1 = $0_1;
    label$1 : {
    if (($1_1 - $5_1 | 0 | 0) < (3 | 0)) {
      break label$1
    }
    if (!($4_1 & 4 | 0)) {
      break label$1
    }
    if ((HEAPU8[$5_1 >> 0] | 0 | 0) != (239 | 0)) {
      break label$1
    }
    if ((HEAPU8[($5_1 + 1 | 0) >> 0] | 0 | 0) != (187 | 0)) {
      break label$1
    }
    $5_1 = $5_1 + ((HEAPU8[($5_1 + 2 | 0) >> 0] | 0 | 0) == (191 | 0) ? 3 : 0) | 0;
    }
    $6_1 = 0;
    label$2 : {
    label$3 : while (1) {
      if ($5_1 >>> 0 >= $1_1 >>> 0) {
      break label$2
      }
      if ($2_1 >>> 0 <= $6_1 >>> 0) {
      break label$2
      }
      $4_1 = HEAPU8[$5_1 >> 0] | 0;
      if ($3_1 >>> 0 < $4_1 >>> 0) {
      break label$2
      }
      label$4 : {
      label$5 : {
        if (($4_1 << 24 >> 24 | 0) < (0 | 0)) {
        break label$5
        }
        $5_1 = $5_1 + 1 | 0;
        break label$4;
      }
      if ($4_1 >>> 0 < 194 >>> 0) {
        break label$2
      }
      label$6 : {
        if ($4_1 >>> 0 > 223 >>> 0) {
        break label$6
        }
        if (($1_1 - $5_1 | 0 | 0) < (2 | 0)) {
        break label$2
        }
        $7_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
        if (($7_1 & 192 | 0 | 0) != (128 | 0)) {
        break label$2
        }
        if (($7_1 & 63 | 0 | (($4_1 << 6 | 0) & 1984 | 0) | 0) >>> 0 > $3_1 >>> 0) {
        break label$2
        }
        $5_1 = $5_1 + 2 | 0;
        break label$4;
      }
      label$7 : {
        if ($4_1 >>> 0 > 239 >>> 0) {
        break label$7
        }
        if (($1_1 - $5_1 | 0 | 0) < (3 | 0)) {
        break label$2
        }
        $8_1 = HEAPU8[($5_1 + 2 | 0) >> 0] | 0;
        $7_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
        label$8 : {
        label$9 : {
          label$10 : {
          if (($4_1 | 0) == (237 | 0)) {
            break label$10
          }
          if (($4_1 | 0) != (224 | 0)) {
            break label$9
          }
          if (($7_1 & 224 | 0 | 0) == (160 | 0)) {
            break label$8
          }
          break label$2;
          }
          if (($7_1 & 224 | 0 | 0) != (128 | 0)) {
          break label$2
          }
          break label$8;
        }
        if (($7_1 & 192 | 0 | 0) != (128 | 0)) {
          break label$2
        }
        }
        if (($8_1 & 192 | 0 | 0) != (128 | 0)) {
        break label$2
        }
        if ((($7_1 & 63 | 0) << 6 | 0 | (($4_1 << 12 | 0) & 61440 | 0) | 0 | ($8_1 & 63 | 0) | 0) >>> 0 > $3_1 >>> 0) {
        break label$2
        }
        $5_1 = $5_1 + 3 | 0;
        break label$4;
      }
      if ($4_1 >>> 0 > 244 >>> 0) {
        break label$2
      }
      if (($1_1 - $5_1 | 0 | 0) < (4 | 0)) {
        break label$2
      }
      if (($2_1 - $6_1 | 0) >>> 0 < 2 >>> 0) {
        break label$2
      }
      $9_1 = HEAPU8[($5_1 + 3 | 0) >> 0] | 0;
      $8_1 = HEAPU8[($5_1 + 2 | 0) >> 0] | 0;
      $7_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
      label$11 : {
        label$12 : {
        switch ($4_1 + -240 | 0 | 0) {
        case 0:
          if ((($7_1 + 112 | 0) & 255 | 0) >>> 0 >= 48 >>> 0) {
          break label$2
          }
          break label$11;
        case 4:
          if (($7_1 & 240 | 0 | 0) != (128 | 0)) {
          break label$2
          }
          break label$11;
        default:
          break label$12;
        };
        }
        if (($7_1 & 192 | 0 | 0) != (128 | 0)) {
        break label$2
        }
      }
      if (($8_1 & 192 | 0 | 0) != (128 | 0)) {
        break label$2
      }
      if (($9_1 & 192 | 0 | 0) != (128 | 0)) {
        break label$2
      }
      if ((($7_1 & 63 | 0) << 12 | 0 | (($4_1 << 18 | 0) & 1835008 | 0) | 0 | (($8_1 << 6 | 0) & 4032 | 0) | 0 | ($9_1 & 63 | 0) | 0) >>> 0 > $3_1 >>> 0) {
        break label$2
      }
      $5_1 = $5_1 + 4 | 0;
      $6_1 = $6_1 + 1 | 0;
      }
      $6_1 = $6_1 + 1 | 0;
      continue label$3;
    };
    }
    return $5_1 - $0_1 | 0 | 0;
  }
  
  function $1346($0_1) {
    $0_1 = $0_1 | 0;
    return 4 | 0;
  }
  
  function $1347($0_1) {
    $0_1 = $0_1 | 0;
    $1747($652($0_1 | 0) | 0 | 0, 8 | 0);
  }
  
  function $1348($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $6_1 = $6_1 | 0;
    $7_1 = $7_1 | 0;
    var $8_1 = 0;
    $8_1 = global$0 - 16 | 0;
    global$0 = $8_1;
    HEAP32[($8_1 + 12 | 0) >> 2] = $2_1;
    HEAP32[($8_1 + 8 | 0) >> 2] = $5_1;
    $2_1 = $1338($2_1 | 0, $3_1 | 0, $8_1 + 12 | 0 | 0, $5_1 | 0, $6_1 | 0, $8_1 + 8 | 0 | 0, 1114111 | 0, 0 | 0) | 0;
    HEAP32[$4_1 >> 2] = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
    HEAP32[$7_1 >> 2] = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
    global$0 = $8_1 + 16 | 0;
    return $2_1 | 0;
  }
  
  function $1349($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $6_1 = $6_1 | 0;
    $7_1 = $7_1 | 0;
    var $8_1 = 0;
    $8_1 = global$0 - 16 | 0;
    global$0 = $8_1;
    HEAP32[($8_1 + 12 | 0) >> 2] = $2_1;
    HEAP32[($8_1 + 8 | 0) >> 2] = $5_1;
    $2_1 = $1340($2_1 | 0, $3_1 | 0, $8_1 + 12 | 0 | 0, $5_1 | 0, $6_1 | 0, $8_1 + 8 | 0 | 0, 1114111 | 0, 0 | 0) | 0;
    HEAP32[$4_1 >> 2] = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
    HEAP32[$7_1 >> 2] = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
    global$0 = $8_1 + 16 | 0;
    return $2_1 | 0;
  }
  
  function $1350($0_1, $1_1, $2_1, $3_1, $4_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    HEAP32[$4_1 >> 2] = $2_1;
    return 3 | 0;
  }
  
  function $1351($0_1) {
    $0_1 = $0_1 | 0;
    return 0 | 0;
  }
  
  function $1352($0_1) {
    $0_1 = $0_1 | 0;
    return 0 | 0;
  }
  
  function $1353($0_1, $1_1, $2_1, $3_1, $4_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    return $1345($2_1 | 0, $3_1 | 0, $4_1 | 0, 1114111 | 0, 0 | 0) | 0 | 0;
  }
  
  function $1354($0_1) {
    $0_1 = $0_1 | 0;
    return 4 | 0;
  }
  
  function $1355($0_1) {
    $0_1 = $0_1 | 0;
    $1747($652($0_1 | 0) | 0 | 0, 8 | 0);
  }
  
  function $1356($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $6_1 = $6_1 | 0;
    $7_1 = $7_1 | 0;
    var $8_1 = 0;
    $8_1 = global$0 - 16 | 0;
    global$0 = $8_1;
    HEAP32[($8_1 + 12 | 0) >> 2] = $2_1;
    HEAP32[($8_1 + 8 | 0) >> 2] = $5_1;
    $2_1 = $1357($2_1 | 0, $3_1 | 0, $8_1 + 12 | 0 | 0, $5_1 | 0, $6_1 | 0, $8_1 + 8 | 0 | 0, 1114111 | 0, 0 | 0) | 0;
    HEAP32[$4_1 >> 2] = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
    HEAP32[$7_1 >> 2] = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
    global$0 = $8_1 + 16 | 0;
    return $2_1 | 0;
  }
  
  function $1357($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $6_1 = $6_1 | 0;
    $7_1 = $7_1 | 0;
    HEAP32[$2_1 >> 2] = $0_1;
    HEAP32[$5_1 >> 2] = $3_1;
    label$1 : {
    label$2 : {
      if (!($7_1 & 2 | 0)) {
      break label$2
      }
      if (($4_1 - $3_1 | 0 | 0) < (3 | 0)) {
      break label$1
      }
      HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
      HEAP8[$3_1 >> 0] = 239;
      $3_1 = HEAP32[$5_1 >> 2] | 0;
      HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
      HEAP8[$3_1 >> 0] = 187;
      $3_1 = HEAP32[$5_1 >> 2] | 0;
      HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
      HEAP8[$3_1 >> 0] = 191;
    }
    $3_1 = HEAP32[$2_1 >> 2] | 0;
    label$3 : {
      label$4 : while (1) {
      label$5 : {
        if ($3_1 >>> 0 < $1_1 >>> 0) {
        break label$5
        }
        $0_1 = 0;
        break label$3;
      }
      $0_1 = 2;
      $3_1 = HEAP32[$3_1 >> 2] | 0;
      if ($3_1 >>> 0 > $6_1 >>> 0) {
        break label$3
      }
      if (($3_1 & -2048 | 0 | 0) == (55296 | 0)) {
        break label$3
      }
      label$6 : {
        label$7 : {
        if ($3_1 >>> 0 > 127 >>> 0) {
          break label$7
        }
        $0_1 = 1;
        $7_1 = HEAP32[$5_1 >> 2] | 0;
        if (($4_1 - $7_1 | 0 | 0) < (1 | 0)) {
          break label$3
        }
        HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
        HEAP8[$7_1 >> 0] = $3_1;
        break label$6;
        }
        label$8 : {
        if ($3_1 >>> 0 > 2047 >>> 0) {
          break label$8
        }
        $0_1 = HEAP32[$5_1 >> 2] | 0;
        if (($4_1 - $0_1 | 0 | 0) < (2 | 0)) {
          break label$1
        }
        HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
        HEAP8[$0_1 >> 0] = $3_1 >>> 6 | 0 | 192 | 0;
        $0_1 = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
        HEAP8[$0_1 >> 0] = $3_1 & 63 | 0 | 128 | 0;
        break label$6;
        }
        $0_1 = HEAP32[$5_1 >> 2] | 0;
        $7_1 = $4_1 - $0_1 | 0;
        label$9 : {
        if ($3_1 >>> 0 > 65535 >>> 0) {
          break label$9
        }
        if (($7_1 | 0) < (3 | 0)) {
          break label$1
        }
        HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
        HEAP8[$0_1 >> 0] = $3_1 >>> 12 | 0 | 224 | 0;
        $0_1 = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
        HEAP8[$0_1 >> 0] = ($3_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
        $0_1 = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
        HEAP8[$0_1 >> 0] = $3_1 & 63 | 0 | 128 | 0;
        break label$6;
        }
        if (($7_1 | 0) < (4 | 0)) {
        break label$1
        }
        HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
        HEAP8[$0_1 >> 0] = $3_1 >>> 18 | 0 | 240 | 0;
        $0_1 = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
        HEAP8[$0_1 >> 0] = ($3_1 >>> 12 | 0) & 63 | 0 | 128 | 0;
        $0_1 = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
        HEAP8[$0_1 >> 0] = ($3_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
        $0_1 = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
        HEAP8[$0_1 >> 0] = $3_1 & 63 | 0 | 128 | 0;
      }
      $3_1 = (HEAP32[$2_1 >> 2] | 0) + 4 | 0;
      HEAP32[$2_1 >> 2] = $3_1;
      continue label$4;
      };
    }
    return $0_1 | 0;
    }
    return 1 | 0;
  }
  
  function $1358($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $6_1 = $6_1 | 0;
    $7_1 = $7_1 | 0;
    var $8_1 = 0;
    $8_1 = global$0 - 16 | 0;
    global$0 = $8_1;
    HEAP32[($8_1 + 12 | 0) >> 2] = $2_1;
    HEAP32[($8_1 + 8 | 0) >> 2] = $5_1;
    $2_1 = $1359($2_1 | 0, $3_1 | 0, $8_1 + 12 | 0 | 0, $5_1 | 0, $6_1 | 0, $8_1 + 8 | 0 | 0, 1114111 | 0, 0 | 0) | 0;
    HEAP32[$4_1 >> 2] = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
    HEAP32[$7_1 >> 2] = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
    global$0 = $8_1 + 16 | 0;
    return $2_1 | 0;
  }
  
  function $1359($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $6_1 = $6_1 | 0;
    $7_1 = $7_1 | 0;
    var $9_1 = 0, $10_1 = 0, $8_1 = 0, $11_1 = 0;
    HEAP32[$2_1 >> 2] = $0_1;
    HEAP32[$5_1 >> 2] = $3_1;
    label$1 : {
    if (!($7_1 & 4 | 0)) {
      break label$1
    }
    $0_1 = HEAP32[$2_1 >> 2] | 0;
    if (($1_1 - $0_1 | 0 | 0) < (3 | 0)) {
      break label$1
    }
    if ((HEAPU8[$0_1 >> 0] | 0 | 0) != (239 | 0)) {
      break label$1
    }
    if ((HEAPU8[($0_1 + 1 | 0) >> 0] | 0 | 0) != (187 | 0)) {
      break label$1
    }
    if ((HEAPU8[($0_1 + 2 | 0) >> 0] | 0 | 0) != (191 | 0)) {
      break label$1
    }
    HEAP32[$2_1 >> 2] = $0_1 + 3 | 0;
    }
    label$2 : {
    label$3 : {
      label$4 : {
      label$5 : while (1) {
        $0_1 = HEAP32[$2_1 >> 2] | 0;
        if ($0_1 >>> 0 >= $1_1 >>> 0) {
        break label$4
        }
        $8_1 = HEAP32[$5_1 >> 2] | 0;
        if ($8_1 >>> 0 >= $4_1 >>> 0) {
        break label$4
        }
        $7_1 = HEAP8[$0_1 >> 0] | 0;
        $3_1 = $7_1 & 255 | 0;
        label$6 : {
        label$7 : {
          if (($7_1 | 0) < (0 | 0)) {
          break label$7
          }
          if ($6_1 >>> 0 < $3_1 >>> 0) {
          break label$2
          }
          $7_1 = 1;
          break label$6;
        }
        if ($7_1 >>> 0 < -62 >>> 0) {
          break label$2
        }
        label$8 : {
          if ($7_1 >>> 0 > -33 >>> 0) {
          break label$8
          }
          label$9 : {
          if (($1_1 - $0_1 | 0 | 0) >= (2 | 0)) {
            break label$9
          }
          return 1 | 0;
          }
          $7_1 = 2;
          $9_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
          if (($9_1 & 192 | 0 | 0) != (128 | 0)) {
          break label$3
          }
          $7_1 = 2;
          $3_1 = $9_1 & 63 | 0 | (($3_1 << 6 | 0) & 1984 | 0) | 0;
          if ($3_1 >>> 0 <= $6_1 >>> 0) {
          break label$6
          }
          break label$3;
        }
        label$10 : {
          if ($7_1 >>> 0 > -17 >>> 0) {
          break label$10
          }
          $7_1 = 1;
          $10_1 = $1_1 - $0_1 | 0;
          if (($10_1 | 0) < (2 | 0)) {
          break label$3
          }
          $9_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
          label$11 : {
          label$12 : {
            label$13 : {
            if (($3_1 | 0) == (237 | 0)) {
              break label$13
            }
            if (($3_1 | 0) != (224 | 0)) {
              break label$12
            }
            if (($9_1 & 224 | 0 | 0) == (160 | 0)) {
              break label$11
            }
            break label$2;
            }
            if (($9_1 & 224 | 0 | 0) == (128 | 0)) {
            break label$11
            }
            break label$2;
          }
          if (($9_1 & 192 | 0 | 0) != (128 | 0)) {
            break label$2
          }
          }
          if (($10_1 | 0) == (2 | 0)) {
          break label$3
          }
          $10_1 = HEAPU8[($0_1 + 2 | 0) >> 0] | 0;
          if (($10_1 & 192 | 0 | 0) != (128 | 0)) {
          break label$2
          }
          $7_1 = 2;
          $3_1 = $10_1 & 63 | 0 | (($9_1 & 63 | 0) << 6 | 0 | (($3_1 << 12 | 0) & 61440 | 0) | 0) | 0;
          if ($3_1 >>> 0 > $6_1 >>> 0) {
          break label$3
          }
          $7_1 = 3;
          break label$6;
        }
        if ($7_1 >>> 0 > -12 >>> 0) {
          break label$2
        }
        $7_1 = 1;
        $9_1 = $1_1 - $0_1 | 0;
        if (($9_1 | 0) < (2 | 0)) {
          break label$3
        }
        $10_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
        label$14 : {
          label$15 : {
          switch ($3_1 + -240 | 0 | 0) {
          case 0:
            if ((($10_1 + 112 | 0) & 255 | 0) >>> 0 >= 48 >>> 0) {
            break label$2
            }
            break label$14;
          case 4:
            if (($10_1 & 240 | 0 | 0) != (128 | 0)) {
            break label$2
            }
            break label$14;
          default:
            break label$15;
          };
          }
          if (($10_1 & 192 | 0 | 0) != (128 | 0)) {
          break label$2
          }
        }
        if (($9_1 | 0) == (2 | 0)) {
          break label$3
        }
        $11_1 = HEAPU8[($0_1 + 2 | 0) >> 0] | 0;
        if (($11_1 & 192 | 0 | 0) != (128 | 0)) {
          break label$2
        }
        if (($9_1 | 0) == (3 | 0)) {
          break label$3
        }
        $9_1 = HEAPU8[($0_1 + 3 | 0) >> 0] | 0;
        if (($9_1 & 192 | 0 | 0) != (128 | 0)) {
          break label$2
        }
        $7_1 = 2;
        $3_1 = $9_1 & 63 | 0 | (($11_1 << 6 | 0) & 4032 | 0 | (($10_1 & 63 | 0) << 12 | 0 | (($3_1 << 18 | 0) & 1835008 | 0) | 0) | 0) | 0;
        if ($3_1 >>> 0 > $6_1 >>> 0) {
          break label$3
        }
        $7_1 = 4;
        }
        HEAP32[$8_1 >> 2] = $3_1;
        HEAP32[$2_1 >> 2] = $0_1 + $7_1 | 0;
        HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + 4 | 0;
        continue label$5;
      };
      }
      $7_1 = $0_1 >>> 0 < $1_1 >>> 0;
    }
    return $7_1 | 0;
    }
    return 2 | 0;
  }
  
  function $1360($0_1, $1_1, $2_1, $3_1, $4_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    HEAP32[$4_1 >> 2] = $2_1;
    return 3 | 0;
  }
  
  function $1361($0_1) {
    $0_1 = $0_1 | 0;
    return 0 | 0;
  }
  
  function $1362($0_1) {
    $0_1 = $0_1 | 0;
    return 0 | 0;
  }
  
  function $1363($0_1, $1_1, $2_1, $3_1, $4_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    return $1364($2_1 | 0, $3_1 | 0, $4_1 | 0, 1114111 | 0, 0 | 0) | 0 | 0;
  }
  
  function $1364($0_1, $1_1, $2_1, $3_1, $4_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    var $5_1 = 0, $7_1 = 0, $8_1 = 0, $6_1 = 0, $9_1 = 0;
    $5_1 = $0_1;
    label$1 : {
    if (($1_1 - $5_1 | 0 | 0) < (3 | 0)) {
      break label$1
    }
    if (!($4_1 & 4 | 0)) {
      break label$1
    }
    if ((HEAPU8[$5_1 >> 0] | 0 | 0) != (239 | 0)) {
      break label$1
    }
    if ((HEAPU8[($5_1 + 1 | 0) >> 0] | 0 | 0) != (187 | 0)) {
      break label$1
    }
    $5_1 = $5_1 + ((HEAPU8[($5_1 + 2 | 0) >> 0] | 0 | 0) == (191 | 0) ? 3 : 0) | 0;
    }
    $6_1 = 0;
    label$2 : {
    label$3 : while (1) {
      if ($5_1 >>> 0 >= $1_1 >>> 0) {
      break label$2
      }
      if ($6_1 >>> 0 >= $2_1 >>> 0) {
      break label$2
      }
      $4_1 = HEAP8[$5_1 >> 0] | 0;
      $7_1 = $4_1 & 255 | 0;
      label$4 : {
      label$5 : {
        if (($4_1 | 0) < (0 | 0)) {
        break label$5
        }
        if ($3_1 >>> 0 < $7_1 >>> 0) {
        break label$2
        }
        $4_1 = 1;
        break label$4;
      }
      if ($4_1 >>> 0 < -62 >>> 0) {
        break label$2
      }
      label$6 : {
        if ($4_1 >>> 0 > -33 >>> 0) {
        break label$6
        }
        if (($1_1 - $5_1 | 0 | 0) < (2 | 0)) {
        break label$2
        }
        $4_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
        if (($4_1 & 192 | 0 | 0) != (128 | 0)) {
        break label$2
        }
        if (($4_1 & 63 | 0 | (($7_1 << 6 | 0) & 1984 | 0) | 0) >>> 0 > $3_1 >>> 0) {
        break label$2
        }
        $4_1 = 2;
        break label$4;
      }
      label$7 : {
        if ($4_1 >>> 0 > -17 >>> 0) {
        break label$7
        }
        if (($1_1 - $5_1 | 0 | 0) < (3 | 0)) {
        break label$2
        }
        $8_1 = HEAPU8[($5_1 + 2 | 0) >> 0] | 0;
        $4_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
        label$8 : {
        label$9 : {
          label$10 : {
          if (($7_1 | 0) == (237 | 0)) {
            break label$10
          }
          if (($7_1 | 0) != (224 | 0)) {
            break label$9
          }
          if (($4_1 & 224 | 0 | 0) == (160 | 0)) {
            break label$8
          }
          break label$2;
          }
          if (($4_1 & 224 | 0 | 0) != (128 | 0)) {
          break label$2
          }
          break label$8;
        }
        if (($4_1 & 192 | 0 | 0) != (128 | 0)) {
          break label$2
        }
        }
        if (($8_1 & 192 | 0 | 0) != (128 | 0)) {
        break label$2
        }
        if ((($4_1 & 63 | 0) << 6 | 0 | (($7_1 << 12 | 0) & 61440 | 0) | 0 | ($8_1 & 63 | 0) | 0) >>> 0 > $3_1 >>> 0) {
        break label$2
        }
        $4_1 = 3;
        break label$4;
      }
      if ($4_1 >>> 0 > -12 >>> 0) {
        break label$2
      }
      if (($1_1 - $5_1 | 0 | 0) < (4 | 0)) {
        break label$2
      }
      $9_1 = HEAPU8[($5_1 + 3 | 0) >> 0] | 0;
      $8_1 = HEAPU8[($5_1 + 2 | 0) >> 0] | 0;
      $4_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
      label$11 : {
        label$12 : {
        switch ($7_1 + -240 | 0 | 0) {
        case 0:
          if ((($4_1 + 112 | 0) & 255 | 0) >>> 0 >= 48 >>> 0) {
          break label$2
          }
          break label$11;
        case 4:
          if (($4_1 & 240 | 0 | 0) != (128 | 0)) {
          break label$2
          }
          break label$11;
        default:
          break label$12;
        };
        }
        if (($4_1 & 192 | 0 | 0) != (128 | 0)) {
        break label$2
        }
      }
      if (($8_1 & 192 | 0 | 0) != (128 | 0)) {
        break label$2
      }
      if (($9_1 & 192 | 0 | 0) != (128 | 0)) {
        break label$2
      }
      if ((($4_1 & 63 | 0) << 12 | 0 | (($7_1 << 18 | 0) & 1835008 | 0) | 0 | (($8_1 << 6 | 0) & 4032 | 0) | 0 | ($9_1 & 63 | 0) | 0) >>> 0 > $3_1 >>> 0) {
        break label$2
      }
      $4_1 = 4;
      }
      $6_1 = $6_1 + 1 | 0;
      $5_1 = $5_1 + $4_1 | 0;
      continue label$3;
    };
    }
    return $5_1 - $0_1 | 0 | 0;
  }
  
  function $1365($0_1) {
    $0_1 = $0_1 | 0;
    return 4 | 0;
  }
  
  function $1366($0_1) {
    $0_1 = $0_1 | 0;
    $1747($652($0_1 | 0) | 0 | 0, 8 | 0);
  }
  
  function $1367($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $6_1 = $6_1 | 0;
    $7_1 = $7_1 | 0;
    var $8_1 = 0;
    $8_1 = global$0 - 16 | 0;
    global$0 = $8_1;
    HEAP32[($8_1 + 12 | 0) >> 2] = $2_1;
    HEAP32[($8_1 + 8 | 0) >> 2] = $5_1;
    $2_1 = $1357($2_1 | 0, $3_1 | 0, $8_1 + 12 | 0 | 0, $5_1 | 0, $6_1 | 0, $8_1 + 8 | 0 | 0, 1114111 | 0, 0 | 0) | 0;
    HEAP32[$4_1 >> 2] = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
    HEAP32[$7_1 >> 2] = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
    global$0 = $8_1 + 16 | 0;
    return $2_1 | 0;
  }
  
  function $1368($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $6_1 = $6_1 | 0;
    $7_1 = $7_1 | 0;
    var $8_1 = 0;
    $8_1 = global$0 - 16 | 0;
    global$0 = $8_1;
    HEAP32[($8_1 + 12 | 0) >> 2] = $2_1;
    HEAP32[($8_1 + 8 | 0) >> 2] = $5_1;
    $2_1 = $1359($2_1 | 0, $3_1 | 0, $8_1 + 12 | 0 | 0, $5_1 | 0, $6_1 | 0, $8_1 + 8 | 0 | 0, 1114111 | 0, 0 | 0) | 0;
    HEAP32[$4_1 >> 2] = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
    HEAP32[$7_1 >> 2] = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
    global$0 = $8_1 + 16 | 0;
    return $2_1 | 0;
  }
  
  function $1369($0_1, $1_1, $2_1, $3_1, $4_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    HEAP32[$4_1 >> 2] = $2_1;
    return 3 | 0;
  }
  
  function $1370($0_1) {
    $0_1 = $0_1 | 0;
    return 0 | 0;
  }
  
  function $1371($0_1) {
    $0_1 = $0_1 | 0;
    return 0 | 0;
  }
  
  function $1372($0_1, $1_1, $2_1, $3_1, $4_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    return $1364($2_1 | 0, $3_1 | 0, $4_1 | 0, 1114111 | 0, 0 | 0) | 0 | 0;
  }
  
  function $1373($0_1) {
    $0_1 = $0_1 | 0;
    return 4 | 0;
  }
  
  function $1374($0_1) {
    $0_1 = $0_1 | 0;
    HEAP32[$0_1 >> 2] = 75736;
    $1761($0_1 + 12 | 0 | 0) | 0;
    return $652($0_1 | 0) | 0 | 0;
  }
  
  function $1375($0_1) {
    $0_1 = $0_1 | 0;
    $1747($1374($0_1 | 0) | 0 | 0, 24 | 0);
  }
  
  function $1376($0_1) {
    $0_1 = $0_1 | 0;
    HEAP32[$0_1 >> 2] = 75776;
    $1761($0_1 + 16 | 0 | 0) | 0;
    return $652($0_1 | 0) | 0 | 0;
  }
  
  function $1377($0_1) {
    $0_1 = $0_1 | 0;
    $1747($1376($0_1 | 0) | 0 | 0, 28 | 0);
  }
  
  function $1378($0_1) {
    $0_1 = $0_1 | 0;
    return HEAP8[($0_1 + 8 | 0) >> 0] | 0 | 0;
  }
  
  function $1379($0_1) {
    $0_1 = $0_1 | 0;
    return HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0;
  }
  
  function $1380($0_1) {
    $0_1 = $0_1 | 0;
    return HEAP8[($0_1 + 9 | 0) >> 0] | 0 | 0;
  }
  
  function $1381($0_1) {
    $0_1 = $0_1 | 0;
    return HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0;
  }
  
  function $1382($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $953($0_1 | 0, $1_1 + 12 | 0 | 0) | 0;
  }
  
  function $1383($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $953($0_1 | 0, $1_1 + 16 | 0 | 0) | 0;
  }
  
  function $1384($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $435($0_1 | 0, 66153 | 0) | 0;
  }
  
  function $1385($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1386($0_1 | 0, 75808 | 0) | 0;
  }
  
  function $1386($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0;
    $2_1 = global$0 - 16 | 0;
    global$0 = $2_1;
    $0_1 = $664($0_1 | 0, $2_1 + 15 | 0 | 0, $2_1 + 14 | 0 | 0) | 0;
    $1778($0_1 | 0, $1_1 | 0, $1387($1_1 | 0) | 0 | 0);
    global$0 = $2_1 + 16 | 0;
    return $0_1 | 0;
  }
  
  function $1387($0_1) {
    $0_1 = $0_1 | 0;
    return $1680($0_1 | 0) | 0 | 0;
  }
  
  function $1388($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $435($0_1 | 0, 66162 | 0) | 0;
  }
  
  function $1389($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1386($0_1 | 0, 75828 | 0) | 0;
  }
  
  function $1390($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $1391($0_1 | 0, $1_1 | 0) | 0 | 0;
  }
  
  function $1391($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $1767($0_1 | 0, $1_1 | 0) | 0 | 0;
  }
  
  function $1392($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1681($0_1 | 0, $1_1 | 0);
  }
  
  function $1393($0_1) {
    $0_1 = $0_1 | 0;
    label$1 : {
    if (!(HEAPU8[(0 + 89388 | 0) >> 0] | 0)) {
      break label$1
    }
    return HEAP32[(0 + 89384 | 0) >> 2] | 0 | 0;
    }
    $1394();
    HEAP8[(0 + 89388 | 0) >> 0] = 1;
    HEAP32[(0 + 89384 | 0) >> 2] = 89536;
    return 89536 | 0;
  }
  
  function $1394() {
    label$1 : {
    if (HEAPU8[(0 + 89704 | 0) >> 0] | 0) {
      break label$1
    }
    $452(100 | 0, 0 | 0, 65536 | 0) | 0;
    HEAP8[(0 + 89704 | 0) >> 0] = 1;
    }
    $1390(89536 | 0, 65646 | 0) | 0;
    $1390(89548 | 0, 65653 | 0) | 0;
    $1390(89560 | 0, 65619 | 0) | 0;
    $1390(89572 | 0, 65627 | 0) | 0;
    $1390(89584 | 0, 65610 | 0) | 0;
    $1390(89596 | 0, 65660 | 0) | 0;
    $1390(89608 | 0, 65637 | 0) | 0;
    $1390(89620 | 0, 65981 | 0) | 0;
    $1390(89632 | 0, 66003 | 0) | 0;
    $1390(89644 | 0, 66158 | 0) | 0;
    $1390(89656 | 0, 66232 | 0) | 0;
    $1390(89668 | 0, 65713 | 0) | 0;
    $1390(89680 | 0, 66033 | 0) | 0;
    $1390(89692 | 0, 65800 | 0) | 0;
  }
  
  function $1395($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0;
    $1_1 = 89704;
    label$1 : while (1) {
    $1_1 = $1761($1_1 + -12 | 0 | 0) | 0;
    if (($1_1 | 0) != (89536 | 0)) {
      continue label$1
    }
    break label$1;
    };
  }
  
  function $1396($0_1) {
    $0_1 = $0_1 | 0;
    label$1 : {
    if (!(HEAPU8[(0 + 89396 | 0) >> 0] | 0)) {
      break label$1
    }
    return HEAP32[(0 + 89392 | 0) >> 2] | 0 | 0;
    }
    $1397();
    HEAP8[(0 + 89396 | 0) >> 0] = 1;
    HEAP32[(0 + 89392 | 0) >> 2] = 89712;
    return 89712 | 0;
  }
  
  function $1397() {
    label$1 : {
    if (HEAPU8[(0 + 89880 | 0) >> 0] | 0) {
      break label$1
    }
    $452(101 | 0, 0 | 0, 65536 | 0) | 0;
    HEAP8[(0 + 89880 | 0) >> 0] = 1;
    }
    $1399(89712 | 0, 80260 | 0) | 0;
    $1399(89724 | 0, 80288 | 0) | 0;
    $1399(89736 | 0, 80316 | 0) | 0;
    $1399(89748 | 0, 80348 | 0) | 0;
    $1399(89760 | 0, 80388 | 0) | 0;
    $1399(89772 | 0, 80424 | 0) | 0;
    $1399(89784 | 0, 80452 | 0) | 0;
    $1399(89796 | 0, 80488 | 0) | 0;
    $1399(89808 | 0, 80504 | 0) | 0;
    $1399(89820 | 0, 80520 | 0) | 0;
    $1399(89832 | 0, 80536 | 0) | 0;
    $1399(89844 | 0, 80552 | 0) | 0;
    $1399(89856 | 0, 80568 | 0) | 0;
    $1399(89868 | 0, 80584 | 0) | 0;
  }
  
  function $1398($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0;
    $1_1 = 89880;
    label$1 : while (1) {
    $1_1 = $1775($1_1 + -12 | 0 | 0) | 0;
    if (($1_1 | 0) != (89712 | 0)) {
      continue label$1
    }
    break label$1;
    };
  }
  
  function $1399($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $1429($0_1 | 0, $1_1 | 0) | 0 | 0;
  }
  
  function $1400($0_1) {
    $0_1 = $0_1 | 0;
    label$1 : {
    if (!(HEAPU8[(0 + 89404 | 0) >> 0] | 0)) {
      break label$1
    }
    return HEAP32[(0 + 89400 | 0) >> 2] | 0 | 0;
    }
    $1401();
    HEAP8[(0 + 89404 | 0) >> 0] = 1;
    HEAP32[(0 + 89400 | 0) >> 2] = 89888;
    return 89888 | 0;
  }
  
  function $1401() {
    label$1 : {
    if (HEAPU8[(0 + 90176 | 0) >> 0] | 0) {
      break label$1
    }
    $452(102 | 0, 0 | 0, 65536 | 0) | 0;
    HEAP8[(0 + 90176 | 0) >> 0] = 1;
    }
    $1390(89888 | 0, 65597 | 0) | 0;
    $1390(89900 | 0, 65588 | 0) | 0;
    $1390(89912 | 0, 66047 | 0) | 0;
    $1390(89924 | 0, 66027 | 0) | 0;
    $1390(89936 | 0, 65667 | 0) | 0;
    $1390(89948 | 0, 66168 | 0) | 0;
    $1390(89960 | 0, 65605 | 0) | 0;
    $1390(89972 | 0, 65755 | 0) | 0;
    $1390(89984 | 0, 65857 | 0) | 0;
    $1390(89996 | 0, 65840 | 0) | 0;
    $1390(90008 | 0, 65848 | 0) | 0;
    $1390(90020 | 0, 65867 | 0) | 0;
    $1390(90032 | 0, 66011 | 0) | 0;
    $1390(90044 | 0, 66249 | 0) | 0;
    $1390(90056 | 0, 65906 | 0) | 0;
    $1390(90068 | 0, 65813 | 0) | 0;
    $1390(90080 | 0, 65667 | 0) | 0;
    $1390(90092 | 0, 65985 | 0) | 0;
    $1390(90104 | 0, 66015 | 0) | 0;
    $1390(90116 | 0, 66053 | 0) | 0;
    $1390(90128 | 0, 65965 | 0) | 0;
    $1390(90140 | 0, 65790 | 0) | 0;
    $1390(90152 | 0, 65709 | 0) | 0;
    $1390(90164 | 0, 66245 | 0) | 0;
  }
  
  function $1402($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0;
    $1_1 = 90176;
    label$1 : while (1) {
    $1_1 = $1761($1_1 + -12 | 0 | 0) | 0;
    if (($1_1 | 0) != (89888 | 0)) {
      continue label$1
    }
    break label$1;
    };
  }
  
  function $1403($0_1) {
    $0_1 = $0_1 | 0;
    label$1 : {
    if (!(HEAPU8[(0 + 89412 | 0) >> 0] | 0)) {
      break label$1
    }
    return HEAP32[(0 + 89408 | 0) >> 2] | 0 | 0;
    }
    $1404();
    HEAP8[(0 + 89412 | 0) >> 0] = 1;
    HEAP32[(0 + 89408 | 0) >> 2] = 90192;
    return 90192 | 0;
  }
  
  function $1404() {
    label$1 : {
    if (HEAPU8[(0 + 90480 | 0) >> 0] | 0) {
      break label$1
    }
    $452(103 | 0, 0 | 0, 65536 | 0) | 0;
    HEAP8[(0 + 90480 | 0) >> 0] = 1;
    }
    $1399(90192 | 0, 80600 | 0) | 0;
    $1399(90204 | 0, 80632 | 0) | 0;
    $1399(90216 | 0, 80668 | 0) | 0;
    $1399(90228 | 0, 80692 | 0) | 0;
    $1399(90240 | 0, 80716 | 0) | 0;
    $1399(90252 | 0, 80732 | 0) | 0;
    $1399(90264 | 0, 80752 | 0) | 0;
    $1399(90276 | 0, 80772 | 0) | 0;
    $1399(90288 | 0, 80800 | 0) | 0;
    $1399(90300 | 0, 80840 | 0) | 0;
    $1399(90312 | 0, 80872 | 0) | 0;
    $1399(90324 | 0, 80908 | 0) | 0;
    $1399(90336 | 0, 80944 | 0) | 0;
    $1399(90348 | 0, 80960 | 0) | 0;
    $1399(90360 | 0, 80976 | 0) | 0;
    $1399(90372 | 0, 80992 | 0) | 0;
    $1399(90384 | 0, 80716 | 0) | 0;
    $1399(90396 | 0, 81008 | 0) | 0;
    $1399(90408 | 0, 81024 | 0) | 0;
    $1399(90420 | 0, 81040 | 0) | 0;
    $1399(90432 | 0, 81056 | 0) | 0;
    $1399(90444 | 0, 81072 | 0) | 0;
    $1399(90456 | 0, 81088 | 0) | 0;
    $1399(90468 | 0, 81104 | 0) | 0;
  }
  
  function $1405($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0;
    $1_1 = 90480;
    label$1 : while (1) {
    $1_1 = $1775($1_1 + -12 | 0 | 0) | 0;
    if (($1_1 | 0) != (90192 | 0)) {
      continue label$1
    }
    break label$1;
    };
  }
  
  function $1406($0_1) {
    $0_1 = $0_1 | 0;
    label$1 : {
    if (!(HEAPU8[(0 + 89420 | 0) >> 0] | 0)) {
      break label$1
    }
    return HEAP32[(0 + 89416 | 0) >> 2] | 0 | 0;
    }
    $1407();
    HEAP8[(0 + 89420 | 0) >> 0] = 1;
    HEAP32[(0 + 89416 | 0) >> 2] = 90496;
    return 90496 | 0;
  }
  
  function $1407() {
    label$1 : {
    if (HEAPU8[(0 + 90520 | 0) >> 0] | 0) {
      break label$1
    }
    $452(104 | 0, 0 | 0, 65536 | 0) | 0;
    HEAP8[(0 + 90520 | 0) >> 0] = 1;
    }
    $1390(90496 | 0, 66316 | 0) | 0;
    $1390(90508 | 0, 66313 | 0) | 0;
  }
  
  function $1408($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0;
    $1_1 = 90520;
    label$1 : while (1) {
    $1_1 = $1761($1_1 + -12 | 0 | 0) | 0;
    if (($1_1 | 0) != (90496 | 0)) {
      continue label$1
    }
    break label$1;
    };
  }
  
  function $1409($0_1) {
    $0_1 = $0_1 | 0;
    label$1 : {
    if (!(HEAPU8[(0 + 89428 | 0) >> 0] | 0)) {
      break label$1
    }
    return HEAP32[(0 + 89424 | 0) >> 2] | 0 | 0;
    }
    $1410();
    HEAP8[(0 + 89428 | 0) >> 0] = 1;
    HEAP32[(0 + 89424 | 0) >> 2] = 90528;
    return 90528 | 0;
  }
  
  function $1410() {
    label$1 : {
    if (HEAPU8[(0 + 90552 | 0) >> 0] | 0) {
      break label$1
    }
    $452(105 | 0, 0 | 0, 65536 | 0) | 0;
    HEAP8[(0 + 90552 | 0) >> 0] = 1;
    }
    $1399(90528 | 0, 81120 | 0) | 0;
    $1399(90540 | 0, 81132 | 0) | 0;
  }
  
  function $1411($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0;
    $1_1 = 90552;
    label$1 : while (1) {
    $1_1 = $1775($1_1 + -12 | 0 | 0) | 0;
    if (($1_1 | 0) != (90528 | 0)) {
      continue label$1
    }
    break label$1;
    };
  }
  
  function $1412($0_1) {
    $0_1 = $0_1 | 0;
    label$1 : {
    if (HEAPU8[(0 + 89429 | 0) >> 0] | 0) {
      break label$1
    }
    $452(106 | 0, 0 | 0, 65536 | 0) | 0;
    HEAP8[(0 + 89429 | 0) >> 0] = 1;
    }
    return 84812 | 0;
  }
  
  function $1413($0_1) {
    $0_1 = $0_1 | 0;
    $1761(84812 | 0) | 0;
  }
  
  function $1414($0_1) {
    $0_1 = $0_1 | 0;
    label$1 : {
    if (HEAPU8[(0 + 89444 | 0) >> 0] | 0) {
      break label$1
    }
    $1386(89432 | 0, 75852 | 0) | 0;
    $452(107 | 0, 0 | 0, 65536 | 0) | 0;
    HEAP8[(0 + 89444 | 0) >> 0] = 1;
    }
    return 89432 | 0;
  }
  
  function $1415($0_1) {
    $0_1 = $0_1 | 0;
    $1775(89432 | 0) | 0;
  }
  
  function $1416($0_1) {
    $0_1 = $0_1 | 0;
    label$1 : {
    if (HEAPU8[(0 + 89445 | 0) >> 0] | 0) {
      break label$1
    }
    $452(108 | 0, 0 | 0, 65536 | 0) | 0;
    HEAP8[(0 + 89445 | 0) >> 0] = 1;
    }
    return 84824 | 0;
  }
  
  function $1417($0_1) {
    $0_1 = $0_1 | 0;
    $1761(84824 | 0) | 0;
  }
  
  function $1418($0_1) {
    $0_1 = $0_1 | 0;
    label$1 : {
    if (HEAPU8[(0 + 89460 | 0) >> 0] | 0) {
      break label$1
    }
    $1386(89448 | 0, 75888 | 0) | 0;
    $452(109 | 0, 0 | 0, 65536 | 0) | 0;
    HEAP8[(0 + 89460 | 0) >> 0] = 1;
    }
    return 89448 | 0;
  }
  
  function $1419($0_1) {
    $0_1 = $0_1 | 0;
    $1775(89448 | 0) | 0;
  }
  
  function $1420($0_1) {
    $0_1 = $0_1 | 0;
    label$1 : {
    if (HEAPU8[(0 + 89476 | 0) >> 0] | 0) {
      break label$1
    }
    $435(89464 | 0, 66273 | 0) | 0;
    $452(110 | 0, 0 | 0, 65536 | 0) | 0;
    HEAP8[(0 + 89476 | 0) >> 0] = 1;
    }
    return 89464 | 0;
  }
  
  function $1421($0_1) {
    $0_1 = $0_1 | 0;
    $1761(89464 | 0) | 0;
  }
  
  function $1422($0_1) {
    $0_1 = $0_1 | 0;
    label$1 : {
    if (HEAPU8[(0 + 89492 | 0) >> 0] | 0) {
      break label$1
    }
    $1386(89480 | 0, 75924 | 0) | 0;
    $452(111 | 0, 0 | 0, 65536 | 0) | 0;
    HEAP8[(0 + 89492 | 0) >> 0] = 1;
    }
    return 89480 | 0;
  }
  
  function $1423($0_1) {
    $0_1 = $0_1 | 0;
    $1775(89480 | 0) | 0;
  }
  
  function $1424($0_1) {
    $0_1 = $0_1 | 0;
    label$1 : {
    if (HEAPU8[(0 + 89508 | 0) >> 0] | 0) {
      break label$1
    }
    $435(89496 | 0, 65969 | 0) | 0;
    $452(112 | 0, 0 | 0, 65536 | 0) | 0;
    HEAP8[(0 + 89508 | 0) >> 0] = 1;
    }
    return 89496 | 0;
  }
  
  function $1425($0_1) {
    $0_1 = $0_1 | 0;
    $1761(89496 | 0) | 0;
  }
  
  function $1426($0_1) {
    $0_1 = $0_1 | 0;
    label$1 : {
    if (HEAPU8[(0 + 89524 | 0) >> 0] | 0) {
      break label$1
    }
    $1386(89512 | 0, 76008 | 0) | 0;
    $452(113 | 0, 0 | 0, 65536 | 0) | 0;
    HEAP8[(0 + 89524 | 0) >> 0] = 1;
    }
    return 89512 | 0;
  }
  
  function $1427($0_1) {
    $0_1 = $0_1 | 0;
    $1775(89512 | 0) | 0;
  }
  
  function $1428($0_1) {
    $0_1 = $0_1 | 0;
    label$1 : {
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == ($718() | 0 | 0)) {
      break label$1
    }
    $633(HEAP32[$0_1 >> 2] | 0 | 0);
    }
    return $0_1 | 0;
  }
  
  function $1429($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $1781($0_1 | 0, $1_1 | 0) | 0 | 0;
  }
  
  function $1430($0_1) {
    $0_1 = $0_1 | 0;
    $1747($652($0_1 | 0) | 0 | 0, 8 | 0);
  }
  
  function $1431($0_1) {
    $0_1 = $0_1 | 0;
    $1747($652($0_1 | 0) | 0 | 0, 8 | 0);
  }
  
  function $1432($0_1) {
    $0_1 = $0_1 | 0;
    $1747($652($0_1 | 0) | 0 | 0, 8 | 0);
  }
  
  function $1433($0_1) {
    $0_1 = $0_1 | 0;
    $1747($652($0_1 | 0) | 0 | 0, 8 | 0);
  }
  
  function $1434($0_1) {
    $0_1 = $0_1 | 0;
    $1435($0_1 + 8 | 0 | 0) | 0;
    return $652($0_1 | 0) | 0 | 0;
  }
  
  function $1435($0_1) {
    $0_1 = $0_1 | 0;
    return $0_1 | 0;
  }
  
  function $1436($0_1) {
    $0_1 = $0_1 | 0;
    $1747($1434($0_1 | 0) | 0 | 0, 12 | 0);
  }
  
  function $1437($0_1) {
    $0_1 = $0_1 | 0;
    $1438($0_1 + 8 | 0 | 0) | 0;
    return $652($0_1 | 0) | 0 | 0;
  }
  
  function $1438($0_1) {
    $0_1 = $0_1 | 0;
    return $0_1 | 0;
  }
  
  function $1439($0_1) {
    $0_1 = $0_1 | 0;
    $1747($1437($0_1 | 0) | 0 | 0, 12 | 0);
  }
  
  function $1440($0_1) {
    $0_1 = $0_1 | 0;
    $1747($1441($0_1 | 0) | 0 | 0, 12 | 0);
  }
  
  function $1441($0_1) {
    $0_1 = $0_1 | 0;
    $1428($0_1 + 8 | 0 | 0) | 0;
    return $652($0_1 | 0) | 0 | 0;
  }
  
  function $1442($0_1) {
    $0_1 = $0_1 | 0;
    $1747($1443($0_1 | 0) | 0 | 0, 12 | 0);
  }
  
  function $1443($0_1) {
    $0_1 = $0_1 | 0;
    $1428($0_1 + 8 | 0 | 0) | 0;
    return $652($0_1 | 0) | 0 | 0;
  }
  
  function $1444($0_1) {
    $0_1 = $0_1 | 0;
    $1747($652($0_1 | 0) | 0 | 0, 8 | 0);
  }
  
  function $1445($0_1) {
    $0_1 = $0_1 | 0;
    $1747($652($0_1 | 0) | 0 | 0, 8 | 0);
  }
  
  function $1446($0_1) {
    $0_1 = $0_1 | 0;
    $1747($652($0_1 | 0) | 0 | 0, 8 | 0);
  }
  
  function $1447($0_1) {
    $0_1 = $0_1 | 0;
    $1747($652($0_1 | 0) | 0 | 0, 8 | 0);
  }
  
  function $1448($0_1) {
    $0_1 = $0_1 | 0;
    $1747($652($0_1 | 0) | 0 | 0, 8 | 0);
  }
  
  function $1449($0_1) {
    $0_1 = $0_1 | 0;
    $1747($652($0_1 | 0) | 0 | 0, 8 | 0);
  }
  
  function $1450($0_1) {
    $0_1 = $0_1 | 0;
    $1747($652($0_1 | 0) | 0 | 0, 8 | 0);
  }
  
  function $1451($0_1) {
    $0_1 = $0_1 | 0;
    $1747($652($0_1 | 0) | 0 | 0, 8 | 0);
  }
  
  function $1452($0_1) {
    $0_1 = $0_1 | 0;
    $1747($652($0_1 | 0) | 0 | 0, 8 | 0);
  }
  
  function $1453($0_1) {
    $0_1 = $0_1 | 0;
    $1747($652($0_1 | 0) | 0 | 0, 8 | 0);
  }
  
  function $1454($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $1456($0_1 | 0, $1_1 | 0) | 0 | 0;
  }
  
  function $1455($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    var $4_1 = 0, $5_1 = 0;
    $4_1 = global$0 - 16 | 0;
    global$0 = $4_1;
    label$1 : {
    if ($3_1 >>> 0 > ($407($0_1 | 0) | 0) >>> 0) {
      break label$1
    }
    label$2 : {
      label$3 : {
      if (!($408($3_1 | 0) | 0)) {
        break label$3
      }
      $388($0_1 | 0, $3_1 | 0);
      $5_1 = $382($0_1 | 0) | 0;
      break label$2;
      }
      $410($4_1 + 8 | 0 | 0, $299($0_1 | 0) | 0 | 0, ($409($3_1 | 0) | 0) + 1 | 0 | 0);
      $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
      $411($5_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
      $412($0_1 | 0, $5_1 | 0);
      $413($0_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
      $414($0_1 | 0, $3_1 | 0);
    }
    label$4 : {
      label$5 : while (1) {
      if (($1_1 | 0) == ($2_1 | 0)) {
        break label$4
      }
      $389($5_1 | 0, $1_1 | 0);
      $5_1 = $5_1 + 1 | 0;
      $1_1 = $1_1 + 1 | 0;
      continue label$5;
      };
    }
    HEAP8[($4_1 + 7 | 0) >> 0] = 0;
    $389($5_1 | 0, $4_1 + 7 | 0 | 0);
    $288($0_1 | 0, $3_1 | 0);
    global$0 = $4_1 + 16 | 0;
    return;
    }
    $415($0_1 | 0);
    wasm2js_trap();
  }
  
  function $1456($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $1_1 - $0_1 | 0 | 0;
  }
  
  function $1457($0_1) {
    $0_1 = $0_1 | 0;
    return $0_1 | 0;
  }
  
  function $1458($0_1) {
    $0_1 = $0_1 | 0;
    return $1461($0_1 | 0) | 0 | 0;
  }
  
  function $1459($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $1463($0_1 | 0, $1_1 | 0) | 0 | 0;
  }
  
  function $1460($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    var $4_1 = 0, $5_1 = 0;
    $4_1 = global$0 - 16 | 0;
    global$0 = $4_1;
    label$1 : {
    if ($3_1 >>> 0 > ($1464($0_1 | 0) | 0) >>> 0) {
      break label$1
    }
    label$2 : {
      label$3 : {
      if (!($1465($3_1 | 0) | 0)) {
        break label$3
      }
      $1052($0_1 | 0, $3_1 | 0);
      $5_1 = $1051($0_1 | 0) | 0;
      break label$2;
      }
      $1467($4_1 + 8 | 0 | 0, $1060($0_1 | 0) | 0 | 0, ($1466($3_1 | 0) | 0) + 1 | 0 | 0);
      $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
      $1468($5_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
      $1469($0_1 | 0, $5_1 | 0);
      $1470($0_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
      $1050($0_1 | 0, $3_1 | 0);
    }
    label$4 : {
      label$5 : while (1) {
      if (($1_1 | 0) == ($2_1 | 0)) {
        break label$4
      }
      $1049($5_1 | 0, $1_1 | 0);
      $5_1 = $5_1 + 4 | 0;
      $1_1 = $1_1 + 4 | 0;
      continue label$5;
      };
    }
    HEAP32[($4_1 + 4 | 0) >> 2] = 0;
    $1049($5_1 | 0, $4_1 + 4 | 0 | 0);
    $938($0_1 | 0, $3_1 | 0);
    global$0 = $4_1 + 16 | 0;
    return;
    }
    $1471($0_1 | 0);
    wasm2js_trap();
  }
  
  function $1461($0_1) {
    $0_1 = $0_1 | 0;
    return $1462($0_1 | 0) | 0 | 0;
  }
  
  function $1462($0_1) {
    $0_1 = $0_1 | 0;
    return $0_1 | 0;
  }
  
  function $1463($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return ($1_1 - $0_1 | 0) >> 2 | 0 | 0;
  }
  
  function $1464($0_1) {
    $0_1 = $0_1 | 0;
    $0_1 = $1472($957($0_1 | 0) | 0 | 0) | 0;
    return ($0_1 >>> ($0_1 >>> 0 > (($417() | 0) >>> 1 | 0) >>> 0) | 0) + -8 | 0 | 0;
  }
  
  function $1465($0_1) {
    $0_1 = $0_1 | 0;
    return $0_1 >>> 0 < 2 >>> 0 | 0;
  }
  
  function $1466($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0, $7_1 = 0;
    $1_1 = 1;
    label$1 : {
    if ($0_1 >>> 0 < 2 >>> 0) {
      break label$1
    }
    $0_1 = $1476($0_1 + 1 | 0 | 0) | 0;
    $7_1 = $0_1;
    $0_1 = $0_1 + -1 | 0;
    $1_1 = ($0_1 | 0) == (2 | 0) ? $7_1 : $0_1;
    }
    return $1_1 | 0;
  }
  
  function $1467($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $1_1 = $1474($1_1 | 0, $2_1 | 0) | 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
    HEAP32[$0_1 >> 2] = $1_1;
  }
  
  function $1468($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
  }
  
  function $1469($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    HEAP32[($961($0_1 | 0) | 0) >> 2] = $1_1;
  }
  
  function $1470($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0;
    $2_1 = $961($0_1 | 0) | 0;
    HEAP32[($2_1 + 8 | 0) >> 2] = (HEAP32[($2_1 + 8 | 0) >> 2] | 0) & -2147483648 | 0 | ($1_1 & 2147483647 | 0) | 0;
    $0_1 = $961($0_1 | 0) | 0;
    HEAP32[($0_1 + 8 | 0) >> 2] = HEAP32[($0_1 + 8 | 0) >> 2] | 0 | -2147483648 | 0;
  }
  
  function $1471($0_1) {
    $0_1 = $0_1 | 0;
    $418(66084 | 0);
    wasm2js_trap();
  }
  
  function $1472($0_1) {
    $0_1 = $0_1 | 0;
    return ($417() | 0) >>> 2 | 0 | 0;
  }
  
  function $1473($0_1) {
    $0_1 = $0_1 | 0;
    return $0_1 | 0;
  }
  
  function $1474($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    label$1 : {
    if ($1_1 >>> 0 <= ($1472($0_1 | 0) | 0) >>> 0) {
      break label$1
    }
    $422();
    wasm2js_trap();
    }
    return $423($1_1 << 2 | 0 | 0, 4 | 0) | 0 | 0;
  }
  
  function $1475($0_1) {
    $0_1 = $0_1 | 0;
    return $1480($0_1 | 0) | 0 | 0;
  }
  
  function $1476($0_1) {
    $0_1 = $0_1 | 0;
    return ($0_1 + 1 | 0) & -2 | 0 | 0;
  }
  
  function $1477($0_1) {
    $0_1 = $0_1 | 0;
    return $1478($0_1 | 0) | 0 | 0;
  }
  
  function $1478($0_1) {
    $0_1 = $0_1 | 0;
    return $0_1 | 0;
  }
  
  function $1479($0_1) {
    $0_1 = $0_1 | 0;
    return $0_1 | 0;
  }
  
  function $1480($0_1) {
    $0_1 = $0_1 | 0;
    return $0_1 | 0;
  }
  
  function $1481($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1482($0_1 | 0, $293($292($0_1 | 0) | 0 | 0) | 0 | 0, $1_1 | 0) | 0;
  }
  
  function $1482($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0, $4_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    label$1 : {
    $4_1 = $309($0_1 | 0) | 0;
    if ($2_1 >>> 0 <= $4_1 >>> 0) {
      break label$1
    }
    $305($0_1 | 0, $2_1 - $4_1 | 0 | 0);
    }
    $992($0_1 | 0, $2_1 | 0);
    HEAP8[($3_1 + 15 | 0) >> 0] = 0;
    $389($1_1 + $2_1 | 0 | 0, $3_1 + 15 | 0 | 0);
    label$2 : {
    if ($2_1 >>> 0 >= $4_1 >>> 0) {
      break label$2
    }
    $307($0_1 | 0, $4_1 | 0);
    }
    global$0 = $3_1 + 16 | 0;
    return $0_1 | 0;
  }
  
  function $1483($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $6_1 = $6_1 | 0;
    var $7_1 = 0, $8_1 = 0, $9_1 = 0;
    $7_1 = global$0 - 16 | 0;
    global$0 = $7_1;
    label$1 : {
    $8_1 = $407($0_1 | 0) | 0;
    if ($2_1 >>> 0 > ($8_1 - $1_1 | 0) >>> 0) {
      break label$1
    }
    $9_1 = $292($0_1 | 0) | 0;
    label$2 : {
      if ($1_1 >>> 0 >= (($8_1 >>> 1 | 0) + -8 | 0) >>> 0) {
      break label$2
      }
      HEAP32[($7_1 + 12 | 0) >> 2] = $1_1 << 1 | 0;
      HEAP32[($7_1 + 4 | 0) >> 2] = $2_1 + $1_1 | 0;
      $8_1 = ($409(HEAP32[($440($7_1 + 4 | 0 | 0, $7_1 + 12 | 0 | 0) | 0) >> 2] | 0 | 0) | 0) + 1 | 0;
    }
    $297($0_1 | 0);
    $410($7_1 + 4 | 0 | 0, $299($0_1 | 0) | 0 | 0, $8_1 | 0);
    $8_1 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
    $411($8_1 | 0, HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0);
    label$3 : {
      if (!$4_1) {
      break label$3
      }
      $176($293($8_1 | 0) | 0 | 0, $293($9_1 | 0) | 0 | 0, $4_1 | 0) | 0;
    }
    label$4 : {
      $2_1 = $5_1 + $4_1 | 0;
      if (($3_1 | 0) == ($2_1 | 0)) {
      break label$4
      }
      $176((($293($8_1 | 0) | 0) + $4_1 | 0) + $6_1 | 0 | 0, (($293($9_1 | 0) | 0) + $4_1 | 0) + $5_1 | 0 | 0, $3_1 - $2_1 | 0 | 0) | 0;
    }
    label$5 : {
      $1_1 = $1_1 + 1 | 0;
      if (($1_1 | 0) == (11 | 0)) {
      break label$5
      }
      $386($299($0_1 | 0) | 0 | 0, $9_1 | 0, $1_1 | 0);
    }
    $412($0_1 | 0, $8_1 | 0);
    $413($0_1 | 0, HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0);
    global$0 = $7_1 + 16 | 0;
    return;
    }
    $415($0_1 | 0);
    wasm2js_trap();
  }
  
  function $1484($0_1) {
    $0_1 = $0_1 | 0;
  }
  
  function $1485($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $1486($0_1 | 0, $1_1 | 0, $2_1 | 0);
  }
  
  function $1486($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $393($1_1 | 0, $2_1 << 2 | 0 | 0, 4 | 0);
  }
  
  function $1487($0_1) {
    $0_1 = $0_1 | 0;
    return (HEAP32[(($960($0_1 | 0) | 0) + 8 | 0) >> 2] | 0) & 2147483647 | 0 | 0;
  }
  
  function $1488($0_1) {
    $0_1 = $0_1 | 0;
    return $0_1 | 0;
  }
  
  function $1489($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    return $573($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
  }
  
  function $1490($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    return $573($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
  }
  
  function $1491($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    return $643($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
  }
  
  function $1492($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    return $643($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
  }
  
  function $1493($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    HEAP32[$0_1 >> 2] = $1_1;
    return $0_1 | 0;
  }
  
  function $1494($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    HEAP32[$0_1 >> 2] = $1_1;
    return $0_1 | 0;
  }
  
  function $1495($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0;
    $2_1 = global$0 - 16 | 0;
    global$0 = $2_1;
    HEAP32[($2_1 + 12 | 0) >> 2] = $0_1;
    label$1 : {
    if (($0_1 | 0) == ($1_1 | 0)) {
      break label$1
    }
    label$2 : while (1) {
      $1_1 = $1_1 + -1 | 0;
      HEAP32[($2_1 + 8 | 0) >> 2] = $1_1;
      if ($0_1 >>> 0 >= $1_1 >>> 0) {
      break label$1
      }
      $1496($2_1 + 12 | 0 | 0, $2_1 + 8 | 0 | 0);
      $0_1 = (HEAP32[($2_1 + 12 | 0) >> 2] | 0) + 1 | 0;
      HEAP32[($2_1 + 12 | 0) >> 2] = $0_1;
      $1_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
      continue label$2;
    };
    }
    global$0 = $2_1 + 16 | 0;
  }
  
  function $1496($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1497(HEAP32[$0_1 >> 2] | 0 | 0, HEAP32[$1_1 >> 2] | 0 | 0);
  }
  
  function $1497($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $901($0_1 | 0, $1_1 | 0);
  }
  
  function $1498($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0;
    $2_1 = global$0 - 16 | 0;
    global$0 = $2_1;
    HEAP32[($2_1 + 12 | 0) >> 2] = $0_1;
    label$1 : {
    if (($0_1 | 0) == ($1_1 | 0)) {
      break label$1
    }
    label$2 : while (1) {
      $1_1 = $1_1 + -4 | 0;
      HEAP32[($2_1 + 8 | 0) >> 2] = $1_1;
      if ($0_1 >>> 0 >= $1_1 >>> 0) {
      break label$1
      }
      $1499($2_1 + 12 | 0 | 0, $2_1 + 8 | 0 | 0);
      $0_1 = (HEAP32[($2_1 + 12 | 0) >> 2] | 0) + 4 | 0;
      HEAP32[($2_1 + 12 | 0) >> 2] = $0_1;
      $1_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
      continue label$2;
    };
    }
    global$0 = $2_1 + 16 | 0;
  }
  
  function $1499($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1500(HEAP32[$0_1 >> 2] | 0 | 0, HEAP32[$1_1 >> 2] | 0 | 0);
  }
  
  function $1500($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1501($0_1 | 0, $1_1 | 0);
  }
  
  function $1501($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0;
    $2_1 = HEAP32[$0_1 >> 2] | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
    HEAP32[$1_1 >> 2] = $2_1;
  }
  
  function $1502($0_1) {
    $0_1 = $0_1 | 0;
    return $1503($960($0_1 | 0) | 0 | 0) | 0 | 0;
  }
  
  function $1503($0_1) {
    $0_1 = $0_1 | 0;
    return $0_1 | 0;
  }
  
  function $1504($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $1505($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
  }
  
  function $1505($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    var $4_1 = 0;
    $4_1 = global$0 - 32 | 0;
    global$0 = $4_1;
    $1506($4_1 + 24 | 0 | 0, $1_1 | 0, $2_1 | 0);
    $1508($4_1 + 16 | 0 | 0, $4_1 + 12 | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, $1507($3_1 | 0) | 0 | 0);
    HEAP32[($4_1 + 12 | 0) >> 2] = $1509($1_1 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($4_1 + 8 | 0) >> 2] = $1510($3_1 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
    $1511($0_1 | 0, $4_1 + 12 | 0 | 0, $4_1 + 8 | 0 | 0);
    global$0 = $4_1 + 32 | 0;
  }
  
  function $1506($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $1512($0_1 | 0, $1_1 | 0, $2_1 | 0);
  }
  
  function $1507($0_1) {
    $0_1 = $0_1 | 0;
    return $1513($0_1 | 0) | 0 | 0;
  }
  
  function $1508($0_1, $1_1, $2_1, $3_1, $4_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    var $5_1 = 0;
    $5_1 = global$0 - 16 | 0;
    global$0 = $5_1;
    HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
    HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
    label$1 : {
    label$2 : while (1) {
      if (($2_1 | 0) == ($3_1 | 0)) {
      break label$1
      }
      $4_1 = HEAP8[$2_1 >> 0] | 0;
      $226($225($5_1 + 12 | 0 | 0) | 0 | 0, $4_1 | 0) | 0;
      $2_1 = $2_1 + 1 | 0;
      HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
      $227($5_1 + 12 | 0 | 0) | 0;
      continue label$2;
    };
    }
    $1511($0_1 | 0, $5_1 + 8 | 0 | 0, $5_1 + 12 | 0 | 0);
    global$0 = $5_1 + 16 | 0;
  }
  
  function $1509($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $1515($0_1 | 0, $1_1 | 0) | 0 | 0;
  }
  
  function $1510($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $1516($0_1 | 0, $1_1 | 0) | 0 | 0;
  }
  
  function $1511($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $1514($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  }
  
  function $1512($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    HEAP32[($3_1 + 12 | 0) >> 2] = $331($1_1 | 0) | 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = $331($2_1 | 0) | 0;
    $1517($0_1 | 0, $3_1 + 12 | 0 | 0, $3_1 + 8 | 0 | 0) | 0;
    global$0 = $3_1 + 16 | 0;
  }
  
  function $1513($0_1) {
    $0_1 = $0_1 | 0;
    return $0_1 | 0;
  }
  
  function $1514($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
    return $0_1 | 0;
  }
  
  function $1515($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $334($0_1 | 0, $1_1 | 0) | 0 | 0;
  }
  
  function $1516($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $1_1 | 0;
  }
  
  function $1517($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
    return $0_1 | 0;
  }
  
  function $1518($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $1519($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
  }
  
  function $1519($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    var $4_1 = 0;
    $4_1 = global$0 - 32 | 0;
    global$0 = $4_1;
    $1520($4_1 + 24 | 0 | 0, $1_1 | 0, $2_1 | 0);
    $1522($4_1 + 16 | 0 | 0, $4_1 + 12 | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, $1521($3_1 | 0) | 0 | 0);
    HEAP32[($4_1 + 12 | 0) >> 2] = $1523($1_1 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($4_1 + 8 | 0) >> 2] = $1524($3_1 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
    $1525($0_1 | 0, $4_1 + 12 | 0 | 0, $4_1 + 8 | 0 | 0);
    global$0 = $4_1 + 32 | 0;
  }
  
  function $1520($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $1526($0_1 | 0, $1_1 | 0, $2_1 | 0);
  }
  
  function $1521($0_1) {
    $0_1 = $0_1 | 0;
    return $1527($0_1 | 0) | 0 | 0;
  }
  
  function $1522($0_1, $1_1, $2_1, $3_1, $4_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    var $5_1 = 0;
    $5_1 = global$0 - 16 | 0;
    global$0 = $5_1;
    HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
    HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
    label$1 : {
    label$2 : while (1) {
      if (($2_1 | 0) == ($3_1 | 0)) {
      break label$1
      }
      $4_1 = HEAP32[$2_1 >> 2] | 0;
      $283($282($5_1 + 12 | 0 | 0) | 0 | 0, $4_1 | 0) | 0;
      $2_1 = $2_1 + 4 | 0;
      HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
      $284($5_1 + 12 | 0 | 0) | 0;
      continue label$2;
    };
    }
    $1525($0_1 | 0, $5_1 + 8 | 0 | 0, $5_1 + 12 | 0 | 0);
    global$0 = $5_1 + 16 | 0;
  }
  
  function $1523($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $1529($0_1 | 0, $1_1 | 0) | 0 | 0;
  }
  
  function $1524($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $1530($0_1 | 0, $1_1 | 0) | 0 | 0;
  }
  
  function $1525($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $1528($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  }
  
  function $1526($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    HEAP32[($3_1 + 12 | 0) >> 2] = $356($1_1 | 0) | 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = $356($2_1 | 0) | 0;
    $1531($0_1 | 0, $3_1 + 12 | 0 | 0, $3_1 + 8 | 0 | 0) | 0;
    global$0 = $3_1 + 16 | 0;
  }
  
  function $1527($0_1) {
    $0_1 = $0_1 | 0;
    return $0_1 | 0;
  }
  
  function $1528($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
    return $0_1 | 0;
  }
  
  function $1529($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $359($0_1 | 0, $1_1 | 0) | 0 | 0;
  }
  
  function $1530($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $1_1 | 0;
  }
  
  function $1531($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
    return $0_1 | 0;
  }
  
  function $1532($0_1) {
    $0_1 = $0_1 | 0;
    HEAP32[$0_1 >> 2] = 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = 0;
    HEAP32[($0_1 + 8 | 0) >> 2] = 0;
    return $0_1 | 0;
  }
  
  function $1533($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $0_1 | 0;
  }
  
  function $1534($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $0_1 | 0;
  }
  
  function $1535($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
    HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
    HEAP32[($3_1 + 4 | 0) >> 2] = $2_1;
    $1_1 = 0;
    label$1 : {
    if ($1536($3_1 + 3 | 0 | 0, $3_1 + 4 | 0 | 0, $3_1 + 12 | 0 | 0) | 0) {
      break label$1
    }
    $1_1 = $1536($3_1 + 2 | 0 | 0, $3_1 + 4 | 0 | 0, $3_1 + 8 | 0 | 0) | 0;
    }
    global$0 = $3_1 + 16 | 0;
    return $1_1 | 0;
  }
  
  function $1536($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    return (HEAP32[$1_1 >> 2] | 0) >>> 0 < (HEAP32[$2_1 >> 2] | 0) >>> 0 | 0;
  }
  
  function $1537($0_1) {
    $0_1 = $0_1 | 0;
    return $1540($0_1 | 0) | 0 | 0;
  }
  
  function $1538($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    return $1539($0_1 | 0, $2_1 | 0, $1_1 - $0_1 | 0 | 0) | 0 | 0;
  }
  
  function $1539($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    return !($581($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0) | 0;
  }
  
  function $1540($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0;
    $1_1 = global$0 - 16 | 0;
    global$0 = $1_1;
    HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
    $0_1 = $1541($1_1 + 12 | 0 | 0) | 0;
    global$0 = $1_1 + 16 | 0;
    return $0_1 | 0;
  }
  
  function $1541($0_1) {
    $0_1 = $0_1 | 0;
    return $1542($0_1 | 0) | 0 | 0;
  }
  
  function $1542($0_1) {
    $0_1 = $0_1 | 0;
    return $1543(HEAP32[$0_1 >> 2] | 0 | 0) | 0 | 0;
  }
  
  function $1543($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0;
    $1_1 = global$0 - 16 | 0;
    global$0 = $1_1;
    HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
    $0_1 = $293($1014($1_1 + 12 | 0 | 0) | 0 | 0) | 0;
    global$0 = $1_1 + 16 | 0;
    return $0_1 | 0;
  }
  
  function $1544($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + $1_1 | 0;
    return $0_1 | 0;
  }
  
  function $1545($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $6_1 = $6_1 | 0;
    var $7_1 = 0, $8_1 = 0, $9_1 = 0;
    $7_1 = global$0 - 16 | 0;
    global$0 = $7_1;
    label$1 : {
    $8_1 = $1464($0_1 | 0) | 0;
    if ($2_1 >>> 0 > ($8_1 - $1_1 | 0) >>> 0) {
      break label$1
    }
    $9_1 = $815($0_1 | 0) | 0;
    label$2 : {
      if ($1_1 >>> 0 >= (($8_1 >>> 1 | 0) + -8 | 0) >>> 0) {
      break label$2
      }
      HEAP32[($7_1 + 12 | 0) >> 2] = $1_1 << 1 | 0;
      HEAP32[($7_1 + 4 | 0) >> 2] = $2_1 + $1_1 | 0;
      $8_1 = ($1466(HEAP32[($440($7_1 + 4 | 0 | 0, $7_1 + 12 | 0 | 0) | 0) >> 2] | 0 | 0) | 0) + 1 | 0;
    }
    $1484($0_1 | 0);
    $1467($7_1 + 4 | 0 | 0, $1060($0_1 | 0) | 0 | 0, $8_1 | 0);
    $8_1 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
    $1468($8_1 | 0, HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0);
    label$3 : {
      if (!$4_1) {
      break label$3
      }
      $242($374($8_1 | 0) | 0 | 0, $374($9_1 | 0) | 0 | 0, $4_1 | 0) | 0;
    }
    label$4 : {
      $2_1 = $5_1 + $4_1 | 0;
      if (($3_1 | 0) == ($2_1 | 0)) {
      break label$4
      }
      $4_1 = $4_1 << 2 | 0;
      $242((($374($8_1 | 0) | 0) + $4_1 | 0) + ($6_1 << 2 | 0) | 0 | 0, (($374($9_1 | 0) | 0) + $4_1 | 0) + ($5_1 << 2 | 0) | 0 | 0, $3_1 - $2_1 | 0 | 0) | 0;
    }
    label$5 : {
      $1_1 = $1_1 + 1 | 0;
      if (($1_1 | 0) == (2 | 0)) {
      break label$5
      }
      $1485($1060($0_1 | 0) | 0 | 0, $9_1 | 0, $1_1 | 0);
    }
    $1469($0_1 | 0, $8_1 | 0);
    $1470($0_1 | 0, HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0);
    global$0 = $7_1 + 16 | 0;
    return;
    }
    $1471($0_1 | 0);
    wasm2js_trap();
  }
  
  function $1546($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return ($1_1 - $0_1 | 0) >> 2 | 0 | 0;
  }
  
  function $1547($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
    HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
    HEAP32[($3_1 + 4 | 0) >> 2] = $2_1;
    $1_1 = 0;
    label$1 : {
    if ($1550($3_1 + 3 | 0 | 0, $3_1 + 4 | 0 | 0, $3_1 + 12 | 0 | 0) | 0) {
      break label$1
    }
    $1_1 = $1550($3_1 + 2 | 0 | 0, $3_1 + 4 | 0 | 0, $3_1 + 8 | 0 | 0) | 0;
    }
    global$0 = $3_1 + 16 | 0;
    return $1_1 | 0;
  }
  
  function $1548($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    return $1551($1457($0_1 | 0) | 0 | 0, $2_1 | 0) | 0 | 0;
  }
  
  function $1549($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $1552($0_1 | 0, $1_1 | 0, $2_1 | 0, $1055($1_1 | 0, $2_1 | 0) | 0 | 0);
  }
  
  function $1550($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    return (HEAP32[$1_1 >> 2] | 0) >>> 0 < (HEAP32[$2_1 >> 2] | 0) >>> 0 | 0;
  }
  
  function $1551($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $0_1 | 0;
  }
  
  function $1552($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    var $4_1 = 0, $5_1 = 0;
    $4_1 = global$0 - 16 | 0;
    global$0 = $4_1;
    label$1 : {
    if ($3_1 >>> 0 > ($1464($0_1 | 0) | 0) >>> 0) {
      break label$1
    }
    label$2 : {
      label$3 : {
      if (!($1465($3_1 | 0) | 0)) {
        break label$3
      }
      $1052($0_1 | 0, $3_1 | 0);
      $5_1 = $1051($0_1 | 0) | 0;
      break label$2;
      }
      $1467($4_1 + 8 | 0 | 0, $1060($0_1 | 0) | 0 | 0, ($1466($3_1 | 0) | 0) + 1 | 0 | 0);
      $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
      $1468($5_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
      $1469($0_1 | 0, $5_1 | 0);
      $1470($0_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
      $1050($0_1 | 0, $3_1 | 0);
    }
    label$4 : {
      label$5 : while (1) {
      if (($1_1 | 0) == ($2_1 | 0)) {
        break label$4
      }
      $1049($5_1 | 0, $1_1 | 0);
      $5_1 = $5_1 + 4 | 0;
      $1_1 = $1_1 + 4 | 0;
      continue label$5;
      };
    }
    HEAP32[($4_1 + 4 | 0) >> 2] = 0;
    $1049($5_1 | 0, $4_1 + 4 | 0 | 0);
    $938($0_1 | 0, $3_1 | 0);
    global$0 = $4_1 + 16 | 0;
    return;
    }
    $1471($0_1 | 0);
    wasm2js_trap();
  }
  
  function $1553($0_1) {
    $0_1 = $0_1 | 0;
    return $1556($0_1 | 0) | 0 | 0;
  }
  
  function $1554($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    return $1555($0_1 | 0, $2_1 | 0, ($1_1 - $0_1 | 0) >> 2 | 0 | 0) | 0 | 0;
  }
  
  function $1555($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    return !($581($0_1 | 0, $1_1 | 0, $2_1 << 2 | 0 | 0) | 0) | 0;
  }
  
  function $1556($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0;
    $1_1 = global$0 - 16 | 0;
    global$0 = $1_1;
    HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
    $0_1 = $1557($1_1 + 12 | 0 | 0) | 0;
    global$0 = $1_1 + 16 | 0;
    return $0_1 | 0;
  }
  
  function $1557($0_1) {
    $0_1 = $0_1 | 0;
    return $1558($0_1 | 0) | 0 | 0;
  }
  
  function $1558($0_1) {
    $0_1 = $0_1 | 0;
    return $1559(HEAP32[$0_1 >> 2] | 0 | 0) | 0 | 0;
  }
  
  function $1559($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0;
    $1_1 = global$0 - 16 | 0;
    global$0 = $1_1;
    HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
    $0_1 = $374($1082($1_1 + 12 | 0 | 0) | 0 | 0) | 0;
    global$0 = $1_1 + 16 | 0;
    return $0_1 | 0;
  }
  
  function $1560($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + ($1_1 << 2 | 0) | 0;
    return $0_1 | 0;
  }
  
  function $1561($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1562($0_1 | 0, $1_1 | 0);
  }
  
  function $1562($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1060($1_1 | 0) | 0;
    $1060($0_1 | 0) | 0;
  }
  
  function $1563($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $1564($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
  }
  
  function $1564($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    var $4_1 = 0;
    $4_1 = global$0 - 32 | 0;
    global$0 = $4_1;
    $1565($4_1 + 24 | 0 | 0, $1_1 | 0, $2_1 | 0);
    $332($4_1 + 16 | 0 | 0, $4_1 + 12 | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, $331($3_1 | 0) | 0 | 0);
    HEAP32[($4_1 + 12 | 0) >> 2] = $1566($1_1 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($4_1 + 8 | 0) >> 2] = $334($3_1 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
    $1567($0_1 | 0, $4_1 + 12 | 0 | 0, $4_1 + 8 | 0 | 0);
    global$0 = $4_1 + 32 | 0;
  }
  
  function $1565($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $1568($0_1 | 0, $1_1 | 0, $2_1 | 0);
  }
  
  function $1566($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $1570($0_1 | 0, $1_1 | 0) | 0 | 0;
  }
  
  function $1567($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $1569($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  }
  
  function $1568($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    HEAP32[($3_1 + 12 | 0) >> 2] = $1571($1_1 | 0) | 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = $1571($2_1 | 0) | 0;
    $343($0_1 | 0, $3_1 + 12 | 0 | 0, $3_1 + 8 | 0 | 0) | 0;
    global$0 = $3_1 + 16 | 0;
  }
  
  function $1569($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
    return $0_1 | 0;
  }
  
  function $1570($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $1576($0_1 | 0, $1_1 | 0) | 0 | 0;
  }
  
  function $1571($0_1) {
    $0_1 = $0_1 | 0;
    return $1572($0_1 | 0) | 0 | 0;
  }
  
  function $1572($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0;
    $1_1 = global$0 - 16 | 0;
    global$0 = $1_1;
    HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
    $0_1 = $1573($1_1 + 12 | 0 | 0) | 0;
    global$0 = $1_1 + 16 | 0;
    return $0_1 | 0;
  }
  
  function $1573($0_1) {
    $0_1 = $0_1 | 0;
    return $1574($0_1 | 0) | 0 | 0;
  }
  
  function $1574($0_1) {
    $0_1 = $0_1 | 0;
    return $1575(HEAP32[$0_1 >> 2] | 0 | 0) | 0 | 0;
  }
  
  function $1575($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0;
    $1_1 = global$0 - 16 | 0;
    global$0 = $1_1;
    HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
    $0_1 = $345($1016($1_1 + 12 | 0 | 0) | 0 | 0) | 0;
    global$0 = $1_1 + 16 | 0;
    return $0_1 | 0;
  }
  
  function $1576($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $1577($0_1 | 0, $1_1 | 0) | 0 | 0;
  }
  
  function $1577($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0;
    $2_1 = global$0 - 16 | 0;
    global$0 = $2_1;
    HEAP32[($2_1 + 12 | 0) >> 2] = $0_1;
    $0_1 = $1099($2_1 + 12 | 0 | 0, $1_1 - ($1573($2_1 + 12 | 0 | 0) | 0) | 0 | 0) | 0;
    global$0 = $2_1 + 16 | 0;
    return $0_1 | 0;
  }
  
  function $1578($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    HEAP32[$0_1 >> 2] = $1_1;
    return $0_1 | 0;
  }
  
  function $1579($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $1580($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
  }
  
  function $1580($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    var $4_1 = 0;
    $4_1 = global$0 - 32 | 0;
    global$0 = $4_1;
    $1581($4_1 + 24 | 0 | 0, $1_1 | 0, $2_1 | 0);
    $357($4_1 + 16 | 0 | 0, $4_1 + 12 | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, $356($3_1 | 0) | 0 | 0);
    HEAP32[($4_1 + 12 | 0) >> 2] = $1582($1_1 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($4_1 + 8 | 0) >> 2] = $359($3_1 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
    $1583($0_1 | 0, $4_1 + 12 | 0 | 0, $4_1 + 8 | 0 | 0);
    global$0 = $4_1 + 32 | 0;
  }
  
  function $1581($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $1584($0_1 | 0, $1_1 | 0, $2_1 | 0);
  }
  
  function $1582($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $1586($0_1 | 0, $1_1 | 0) | 0 | 0;
  }
  
  function $1583($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $1585($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  }
  
  function $1584($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    HEAP32[($3_1 + 12 | 0) >> 2] = $1587($1_1 | 0) | 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = $1587($2_1 | 0) | 0;
    $368($0_1 | 0, $3_1 + 12 | 0 | 0, $3_1 + 8 | 0 | 0) | 0;
    global$0 = $3_1 + 16 | 0;
  }
  
  function $1585($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
    return $0_1 | 0;
  }
  
  function $1586($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $1592($0_1 | 0, $1_1 | 0) | 0 | 0;
  }
  
  function $1587($0_1) {
    $0_1 = $0_1 | 0;
    return $1588($0_1 | 0) | 0 | 0;
  }
  
  function $1588($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0;
    $1_1 = global$0 - 16 | 0;
    global$0 = $1_1;
    HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
    $0_1 = $1589($1_1 + 12 | 0 | 0) | 0;
    global$0 = $1_1 + 16 | 0;
    return $0_1 | 0;
  }
  
  function $1589($0_1) {
    $0_1 = $0_1 | 0;
    return $1590($0_1 | 0) | 0 | 0;
  }
  
  function $1590($0_1) {
    $0_1 = $0_1 | 0;
    return $1591(HEAP32[$0_1 >> 2] | 0 | 0) | 0 | 0;
  }
  
  function $1591($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0;
    $1_1 = global$0 - 16 | 0;
    global$0 = $1_1;
    HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
    $0_1 = $370($1084($1_1 + 12 | 0 | 0) | 0 | 0) | 0;
    global$0 = $1_1 + 16 | 0;
    return $0_1 | 0;
  }
  
  function $1592($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $1593($0_1 | 0, $1_1 | 0) | 0 | 0;
  }
  
  function $1593($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0;
    $2_1 = global$0 - 16 | 0;
    global$0 = $2_1;
    HEAP32[($2_1 + 12 | 0) >> 2] = $0_1;
    $0_1 = $1114($2_1 + 12 | 0 | 0, ($1_1 - ($1589($2_1 + 12 | 0 | 0) | 0) | 0) >> 2 | 0 | 0) | 0;
    global$0 = $2_1 + 16 | 0;
    return $0_1 | 0;
  }
  
  function $1594($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    HEAP32[$0_1 >> 2] = $1_1;
    return $0_1 | 0;
  }
  
  function $1595($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    HEAP32[$0_1 >> 2] = 0;
    return $0_1 | 0;
  }
  
  function $1596($0_1) {
    $0_1 = $0_1 | 0;
    return $1608($0_1 | 0) | 0 | 0;
  }
  
  function $1597($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    HEAP8[$0_1 >> 0] = 0;
    return $0_1 | 0;
  }
  
  function $1598($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0;
    $1_1 = global$0 - 16 | 0;
    global$0 = $1_1;
    HEAP32[($1_1 + 12 | 0) >> 2] = $1610($1609($0_1 | 0) | 0 | 0) | 0;
    HEAP32[($1_1 + 8 | 0) >> 2] = $214() | 0;
    $0_1 = HEAP32[($318($1_1 + 12 | 0 | 0, $1_1 + 8 | 0 | 0) | 0) >> 2] | 0;
    global$0 = $1_1 + 16 | 0;
    return $0_1 | 0;
  }
  
  function $1599($0_1) {
    $0_1 = $0_1 | 0;
    $418(65817 | 0);
    wasm2js_trap();
  }
  
  function $1600($0_1) {
    $0_1 = $0_1 | 0;
    return $1612($0_1 + 8 | 0 | 0) | 0 | 0;
  }
  
  function $1601($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $1_1 = $1611($1_1 | 0, $2_1 | 0, 0 | 0) | 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
    HEAP32[$0_1 >> 2] = $1_1;
  }
  
  function $1602($0_1) {
    $0_1 = $0_1 | 0;
    return $1613($0_1 + 8 | 0 | 0) | 0 | 0;
  }
  
  function $1603($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
  }
  
  function $1604($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    HEAP32[$0_1 >> 2] = $1_1;
    $1_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
    HEAP32[($0_1 + 8 | 0) >> 2] = $1_1 + ($2_1 << 2 | 0) | 0;
    return $0_1 | 0;
  }
  
  function $1605($0_1) {
    $0_1 = $0_1 | 0;
    HEAP32[((HEAP32[$0_1 >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    return $0_1 | 0;
  }
  
  function $1606($0_1) {
    $0_1 = $0_1 | 0;
    return $0_1 | 0;
  }
  
  function $1607($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1623($1_1 | 0) | 0;
  }
  
  function $1608($0_1) {
    $0_1 = $0_1 | 0;
    HEAP8[($0_1 + 120 | 0) >> 0] = 0;
    return $0_1 | 0;
  }
  
  function $1609($0_1) {
    $0_1 = $0_1 | 0;
    return $1615($0_1 + 8 | 0 | 0) | 0 | 0;
  }
  
  function $1610($0_1) {
    $0_1 = $0_1 | 0;
    return $1614($0_1 | 0) | 0 | 0;
  }
  
  function $1611($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    label$1 : {
    label$2 : {
      if ($1_1 >>> 0 > 30 >>> 0) {
      break label$2
      }
      if ((HEAPU8[($0_1 + 120 | 0) >> 0] | 0) & 1 | 0) {
      break label$2
      }
      HEAP8[($0_1 + 120 | 0) >> 0] = 1;
      break label$1;
    }
    $0_1 = $1618($1617($3_1 + 15 | 0 | 0) | 0 | 0, $1_1 | 0) | 0;
    }
    global$0 = $3_1 + 16 | 0;
    return $0_1 | 0;
  }
  
  function $1612($0_1) {
    $0_1 = $0_1 | 0;
    return $1621($0_1 + 4 | 0 | 0) | 0 | 0;
  }
  
  function $1613($0_1) {
    $0_1 = $0_1 | 0;
    return $1622($0_1 | 0) | 0 | 0;
  }
  
  function $1614($0_1) {
    $0_1 = $0_1 | 0;
    return 1073741823 | 0;
  }
  
  function $1615($0_1) {
    $0_1 = $0_1 | 0;
    return $1616($0_1 + 4 | 0 | 0) | 0 | 0;
  }
  
  function $1616($0_1) {
    $0_1 = $0_1 | 0;
    return $0_1 | 0;
  }
  
  function $1617($0_1) {
    $0_1 = $0_1 | 0;
    return $1619($0_1 | 0) | 0 | 0;
  }
  
  function $1618($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    label$1 : {
    if ($1_1 >>> 0 <= ($1620($0_1 | 0) | 0) >>> 0) {
      break label$1
    }
    $422();
    wasm2js_trap();
    }
    return $423($1_1 << 2 | 0 | 0, 4 | 0) | 0 | 0;
  }
  
  function $1619($0_1) {
    $0_1 = $0_1 | 0;
    return $0_1 | 0;
  }
  
  function $1620($0_1) {
    $0_1 = $0_1 | 0;
    return ($417() | 0) >>> 2 | 0 | 0;
  }
  
  function $1621($0_1) {
    $0_1 = $0_1 | 0;
    return $0_1 | 0;
  }
  
  function $1622($0_1) {
    $0_1 = $0_1 | 0;
    return $0_1 | 0;
  }
  
  function $1623($0_1) {
    $0_1 = $0_1 | 0;
    return $1624($0_1 | 0) | 0 | 0;
  }
  
  function $1624($0_1) {
    $0_1 = $0_1 | 0;
    HEAP32[$0_1 >> 2] = 0;
    return $0_1 | 0;
  }
  
  function $1625($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0;
    $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    label$1 : {
    label$2 : while (1) {
      if (($1_1 | 0) == ($2_1 | 0)) {
      break label$1
      }
      $2_1 = $2_1 + -4 | 0;
      $1626($1600($0_1 | 0) | 0 | 0, $1606($2_1 | 0) | 0 | 0);
      continue label$2;
    };
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
  }
  
  function $1626($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1627($1_1 | 0);
  }
  
  function $1627($0_1) {
    $0_1 = $0_1 | 0;
  }
  
  function $1628($0_1) {
    $0_1 = $0_1 | 0;
    return ((HEAP32[($1630($0_1 | 0) | 0) >> 2] | 0) - (HEAP32[$0_1 >> 2] | 0) | 0) >> 2 | 0 | 0;
  }
  
  function $1629($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0, $3_1 = 0;
    $2_1 = global$0 - 16 | 0;
    global$0 = $2_1;
    HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
    label$1 : {
    $3_1 = $1598($0_1 | 0) | 0;
    if ($1_1 >>> 0 > $3_1 >>> 0) {
      break label$1
    }
    label$2 : {
      $1_1 = $1628($0_1 | 0) | 0;
      if ($1_1 >>> 0 >= ($3_1 >>> 1 | 0) >>> 0) {
      break label$2
      }
      HEAP32[($2_1 + 8 | 0) >> 2] = $1_1 << 1 | 0;
      $3_1 = HEAP32[($440($2_1 + 8 | 0 | 0, $2_1 + 12 | 0 | 0) | 0) >> 2] | 0;
    }
    global$0 = $2_1 + 16 | 0;
    return $3_1 | 0;
    }
    $1599($0_1 | 0);
    wasm2js_trap();
  }
  
  function $1630($0_1) {
    $0_1 = $0_1 | 0;
    return $1633($0_1 + 8 | 0 | 0) | 0 | 0;
  }
  
  function $1631($0_1) {
    $0_1 = $0_1 | 0;
  }
  
  function $1632($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $1635($0_1 | 0, $1_1 | 0, $2_1 | 0);
  }
  
  function $1633($0_1) {
    $0_1 = $0_1 | 0;
    return $1634($0_1 | 0) | 0 | 0;
  }
  
  function $1634($0_1) {
    $0_1 = $0_1 | 0;
    return $0_1 | 0;
  }
  
  function $1635($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    label$1 : {
    label$2 : {
      if (($1_1 | 0) != ($0_1 | 0)) {
      break label$2
      }
      HEAP8[($0_1 + 120 | 0) >> 0] = 0;
      break label$1;
    }
    $1636($1617($3_1 + 15 | 0 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0);
    }
    global$0 = $3_1 + 16 | 0;
  }
  
  function $1636($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $393($1_1 | 0, $2_1 << 2 | 0 | 0, 4 | 0);
  }
  
  function $1637($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    var $4_1 = 0, $5_1 = 0;
    $4_1 = global$0 - 16 | 0;
    global$0 = $4_1;
    $5_1 = 0;
    HEAP32[($4_1 + 12 | 0) >> 2] = 0;
    $1641($0_1 + 12 | 0 | 0, $4_1 + 12 | 0 | 0, $3_1 | 0) | 0;
    label$1 : {
    label$2 : {
      if ($1_1) {
      break label$2
      }
      $1_1 = 0;
      break label$1;
    }
    $1601($4_1 + 4 | 0 | 0, $1642($0_1 | 0) | 0 | 0, $1_1 | 0);
    $1_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
    $5_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
    }
    HEAP32[$0_1 >> 2] = $5_1;
    $3_1 = $5_1 + ($2_1 << 2 | 0) | 0;
    HEAP32[($0_1 + 8 | 0) >> 2] = $3_1;
    HEAP32[($0_1 + 4 | 0) >> 2] = $3_1;
    HEAP32[($1643($0_1 | 0) | 0) >> 2] = $5_1 + ($1_1 << 2 | 0) | 0;
    global$0 = $4_1 + 16 | 0;
    return $0_1 | 0;
  }
  
  function $1638($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0, $3_1 = 0;
    $2_1 = global$0 - 16 | 0;
    global$0 = $2_1;
    $1_1 = $1644($2_1 + 4 | 0 | 0, $0_1 + 8 | 0 | 0, $1_1 | 0) | 0;
    $3_1 = HEAP32[$1_1 >> 2] | 0;
    label$1 : {
    label$2 : while (1) {
      if (($3_1 | 0) == (HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0)) {
      break label$1
      }
      $1607($1642($0_1 | 0) | 0 | 0, $1606(HEAP32[$1_1 >> 2] | 0 | 0) | 0 | 0);
      $3_1 = (HEAP32[$1_1 >> 2] | 0) + 4 | 0;
      HEAP32[$1_1 >> 2] = $3_1;
      continue label$2;
    };
    }
    $1645($1_1 | 0) | 0;
    global$0 = $2_1 + 16 | 0;
  }
  
  function $1639($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
    $2_1 = global$0 - 16 | 0;
    global$0 = $2_1;
    $1631($0_1 | 0);
    $3_1 = $1600($0_1 | 0) | 0;
    $4_1 = $1646($2_1 + 8 | 0 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) | 0;
    $5_1 = $1646($2_1 + 4 | 0 | 0, HEAP32[$0_1 >> 2] | 0 | 0) | 0;
    $6_1 = $1646($2_1 | 0, HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($2_1 + 12 | 0) >> 2] = $1647($3_1 | 0, HEAP32[$4_1 >> 2] | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0, HEAP32[$6_1 >> 2] | 0 | 0) | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $1648($2_1 + 12 | 0 | 0) | 0;
    $1649($0_1 | 0, $1_1 + 4 | 0 | 0);
    $1649($0_1 + 4 | 0 | 0, $1_1 + 8 | 0 | 0);
    $1649($1602($0_1 | 0) | 0 | 0, $1643($1_1 | 0) | 0 | 0);
    HEAP32[$1_1 >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    $1603($0_1 | 0, $1203($0_1 | 0) | 0 | 0);
    global$0 = $2_1 + 16 | 0;
  }
  
  function $1640($0_1) {
    $0_1 = $0_1 | 0;
    $1650($0_1 | 0);
    label$1 : {
    if (!(HEAP32[$0_1 >> 2] | 0)) {
      break label$1
    }
    $1632($1642($0_1 | 0) | 0 | 0, HEAP32[$0_1 >> 2] | 0 | 0, $1651($0_1 | 0) | 0 | 0);
    }
    return $0_1 | 0;
  }
  
  function $1641($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $1_1 = $1595($0_1 | 0, $1_1 | 0) | 0;
    $1652($1_1 + 4 | 0 | 0, $2_1 | 0) | 0;
    return $1_1 | 0;
  }
  
  function $1642($0_1) {
    $0_1 = $0_1 | 0;
    return $1653($0_1 + 12 | 0 | 0) | 0 | 0;
  }
  
  function $1643($0_1) {
    $0_1 = $0_1 | 0;
    return $1654($0_1 + 12 | 0 | 0) | 0 | 0;
  }
  
  function $1644($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0;
    $3_1 = HEAP32[$1_1 >> 2] | 0;
    HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
    HEAP32[$0_1 >> 2] = $3_1;
    HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 + ($2_1 << 2 | 0) | 0;
    return $0_1 | 0;
  }
  
  function $1645($0_1) {
    $0_1 = $0_1 | 0;
    HEAP32[(HEAP32[($0_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
    return $0_1 | 0;
  }
  
  function $1646($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    HEAP32[$0_1 >> 2] = $1_1;
    return $0_1 | 0;
  }
  
  function $1647($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    return $1656($1_1 | 0, $2_1 | 0, $3_1 | 0) | 0 | 0;
  }
  
  function $1648($0_1) {
    $0_1 = $0_1 | 0;
    return HEAP32[$0_1 >> 2] | 0 | 0;
  }
  
  function $1649($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0;
    $2_1 = HEAP32[$0_1 >> 2] | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
    HEAP32[$1_1 >> 2] = $2_1;
  }
  
  function $1650($0_1) {
    $0_1 = $0_1 | 0;
    $1676($0_1 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  }
  
  function $1651($0_1) {
    $0_1 = $0_1 | 0;
    return ((HEAP32[($1677($0_1 | 0) | 0) >> 2] | 0) - (HEAP32[$0_1 >> 2] | 0) | 0) >> 2 | 0 | 0;
  }
  
  function $1652($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    HEAP32[$0_1 >> 2] = $1_1;
    return $0_1 | 0;
  }
  
  function $1653($0_1) {
    $0_1 = $0_1 | 0;
    return $1655($0_1 + 4 | 0 | 0) | 0 | 0;
  }
  
  function $1654($0_1) {
    $0_1 = $0_1 | 0;
    return $1622($0_1 | 0) | 0 | 0;
  }
  
  function $1655($0_1) {
    $0_1 = $0_1 | 0;
    return HEAP32[$0_1 >> 2] | 0 | 0;
  }
  
  function $1656($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    $1657($3_1 + 8 | 0 | 0, $0_1 | 0, $1_1 | 0, $2_1 | 0);
    $2_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
    global$0 = $3_1 + 16 | 0;
    return $2_1 | 0;
  }
  
  function $1657($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $1658($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
  }
  
  function $1658($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $1659($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
  }
  
  function $1659($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    var $4_1 = 0;
    $4_1 = global$0 - 32 | 0;
    global$0 = $4_1;
    $1660($4_1 + 24 | 0 | 0, $1_1 | 0, $2_1 | 0);
    $1662($4_1 + 16 | 0 | 0, $4_1 + 12 | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, $1661($3_1 | 0) | 0 | 0);
    HEAP32[($4_1 + 12 | 0) >> 2] = $1663($1_1 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($4_1 + 8 | 0) >> 2] = $1664($3_1 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
    $1665($0_1 | 0, $4_1 + 12 | 0 | 0, $4_1 + 8 | 0 | 0);
    global$0 = $4_1 + 32 | 0;
  }
  
  function $1660($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $1666($0_1 | 0, $1_1 | 0, $2_1 | 0);
  }
  
  function $1661($0_1) {
    $0_1 = $0_1 | 0;
    return $1671($0_1 | 0) | 0 | 0;
  }
  
  function $1662($0_1, $1_1, $2_1, $3_1, $4_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    var $5_1 = 0;
    $5_1 = global$0 - 16 | 0;
    global$0 = $5_1;
    HEAP32[($5_1 + 8 | 0) >> 2] = $3_1;
    HEAP32[($5_1 + 12 | 0) >> 2] = $2_1;
    HEAP32[($5_1 + 4 | 0) >> 2] = $4_1;
    label$1 : {
    label$2 : while (1) {
      if (!($1667($5_1 + 12 | 0 | 0, $5_1 + 8 | 0 | 0) | 0)) {
      break label$1
      }
      $3_1 = HEAP32[($1668($5_1 + 12 | 0 | 0) | 0) >> 2] | 0;
      HEAP32[($1669($5_1 + 4 | 0 | 0) | 0) >> 2] = $3_1;
      $1670($5_1 + 12 | 0 | 0) | 0;
      $1670($5_1 + 4 | 0 | 0) | 0;
      continue label$2;
    };
    }
    $1665($0_1 | 0, $5_1 + 12 | 0 | 0, $5_1 + 4 | 0 | 0);
    global$0 = $5_1 + 16 | 0;
  }
  
  function $1663($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $1673($0_1 | 0, $1_1 | 0) | 0 | 0;
  }
  
  function $1664($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $1674($0_1 | 0, $1_1 | 0) | 0 | 0;
  }
  
  function $1665($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $1672($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  }
  
  function $1666($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    HEAP32[($3_1 + 12 | 0) >> 2] = $1661($1_1 | 0) | 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = $1661($2_1 | 0) | 0;
    $1672($0_1 | 0, $3_1 + 12 | 0 | 0, $3_1 + 8 | 0 | 0) | 0;
    global$0 = $3_1 + 16 | 0;
  }
  
  function $1667($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return ($1648($0_1 | 0) | 0 | 0) != ($1648($1_1 | 0) | 0 | 0) | 0;
  }
  
  function $1668($0_1) {
    $0_1 = $0_1 | 0;
    $1675();
    return $1669($0_1 | 0) | 0 | 0;
  }
  
  function $1669($0_1) {
    $0_1 = $0_1 | 0;
    return (HEAP32[$0_1 >> 2] | 0) + -4 | 0 | 0;
  }
  
  function $1670($0_1) {
    $0_1 = $0_1 | 0;
    HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + -4 | 0;
    return $0_1 | 0;
  }
  
  function $1671($0_1) {
    $0_1 = $0_1 | 0;
    return $0_1 | 0;
  }
  
  function $1672($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
    return $0_1 | 0;
  }
  
  function $1673($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $1664($0_1 | 0, $1_1 | 0) | 0 | 0;
  }
  
  function $1674($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $1_1 | 0;
  }
  
  function $1675() {
    
  }
  
  function $1676($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1678($0_1 | 0, $1_1 | 0);
  }
  
  function $1677($0_1) {
    $0_1 = $0_1 | 0;
    return $1679($0_1 + 12 | 0 | 0) | 0 | 0;
  }
  
  function $1678($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $3_1 = 0, $2_1 = 0;
    label$1 : {
    label$2 : while (1) {
      if (($1_1 | 0) == (HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0)) {
      break label$1
      }
      $2_1 = $1642($0_1 | 0) | 0;
      $3_1 = (HEAP32[($0_1 + 8 | 0) >> 2] | 0) + -4 | 0;
      HEAP32[($0_1 + 8 | 0) >> 2] = $3_1;
      $1626($2_1 | 0, $1606($3_1 | 0) | 0 | 0);
      continue label$2;
    };
    }
  }
  
  function $1679($0_1) {
    $0_1 = $0_1 | 0;
    return $1634($0_1 | 0) | 0 | 0;
  }
  
  function $1680($0_1) {
    $0_1 = $0_1 | 0;
    return $634($0_1 | 0) | 0 | 0;
  }
  
  function $1681($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0;
    $2_1 = global$0 - 16 | 0;
    global$0 = $2_1;
    HEAP32[($2_1 + 12 | 0) >> 2] = $0_1;
    label$1 : {
    if (($0_1 | 0) == ($1_1 | 0)) {
      break label$1
    }
    label$2 : while (1) {
      $1_1 = $1_1 + -4 | 0;
      HEAP32[($2_1 + 8 | 0) >> 2] = $1_1;
      if ($0_1 >>> 0 >= $1_1 >>> 0) {
      break label$1
      }
      $1682($2_1 + 12 | 0 | 0, $2_1 + 8 | 0 | 0);
      $0_1 = (HEAP32[($2_1 + 12 | 0) >> 2] | 0) + 4 | 0;
      HEAP32[($2_1 + 12 | 0) >> 2] = $0_1;
      $1_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
      continue label$2;
    };
    }
    global$0 = $2_1 + 16 | 0;
  }
  
  function $1682($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1683(HEAP32[$0_1 >> 2] | 0 | 0, HEAP32[$1_1 >> 2] | 0 | 0);
  }
  
  function $1683($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $295($0_1 | 0, $1_1 | 0);
  }
  
  function $1684($0_1) {
    $0_1 = $0_1 | 0;
    return $0_1 | 0;
  }
  
  function $1685($0_1) {
    $0_1 = $0_1 | 0;
    return $0_1 | 0;
  }
  
  function $1686($0_1) {
    $0_1 = $0_1 | 0;
    return $0_1 | 0;
  }
  
  function $1687($0_1) {
    $0_1 = $0_1 | 0;
    return $0_1 | 0;
  }
  
  function $1688($0_1) {
    $0_1 = $0_1 | 0;
    return $0_1 | 0;
  }
  
  function $1689($0_1) {
    $0_1 = $0_1 | 0;
    HEAP32[$0_1 >> 2] = 81152;
    return $0_1 | 0;
  }
  
  function $1690($0_1) {
    $0_1 = $0_1 | 0;
    HEAP32[$0_1 >> 2] = 81188;
    return $0_1 | 0;
  }
  
  function $1691($0_1) {
    $0_1 = $0_1 | 0;
    HEAP32[$0_1 >> 2] = $718() | 0;
    return $0_1 | 0;
  }
  
  function $1692($0_1) {
    $0_1 = $0_1 | 0;
    return $0_1 | 0;
  }
  
  function $1693($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
    return $0_1 | 0;
  }
  
  function $1694($0_1) {
    $0_1 = $0_1 | 0;
    $1251($0_1 | 0) | 0;
  }
  
  function $1695($0_1) {
    $0_1 = $0_1 | 0;
    return $0_1 | 0;
  }
  
  function $1696($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $1698($0_1 | 0, $1_1 | 0) | 0 | 0;
  }
  
  function $1697($0_1) {
    $0_1 = $0_1 | 0;
    $1699($0_1 | 0);
  }
  
  function $1698($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    HEAP32[$0_1 >> 2] = $1_1;
    return $0_1 | 0;
  }
  
  function $1699($0_1) {
    $0_1 = $0_1 | 0;
    $1701($1700(HEAP32[$0_1 >> 2] | 0 | 0) | 0 | 0);
  }
  
  function $1700($0_1) {
    $0_1 = $0_1 | 0;
    return $1703($0_1 | 0) | 0 | 0;
  }
  
  function $1701($0_1) {
    $0_1 = $0_1 | 0;
    $1702($0_1 | 0);
  }
  
  function $1702($0_1) {
    $0_1 = $0_1 | 0;
    HEAP32[((HEAP32[$0_1 >> 2] | 0) + 4 | 0) >> 2] = $1704() | 0;
  }
  
  function $1703($0_1) {
    $0_1 = $0_1 | 0;
    return HEAP32[$0_1 >> 2] | 0 | 0;
  }
  
  function $1704() {
    var $0_1 = 0;
    $0_1 = (HEAP32[(0 + 89300 | 0) >> 2] | 0) + 1 | 0;
    HEAP32[(0 + 89300 | 0) >> 2] = $0_1;
    return $0_1 | 0;
  }
  
  function $1705($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $1_1 = $1708($0_1 | 0, $1_1 | 0) | 0;
    $448($1_1 + 4 | 0 | 0, $2_1 | 0) | 0;
    return $1_1 | 0;
  }
  
  function $1706($0_1) {
    $0_1 = $0_1 | 0;
    return $1709($0_1 | 0) | 0 | 0;
  }
  
  function $1707($0_1) {
    $0_1 = $0_1 | 0;
    return $449($0_1 + 4 | 0 | 0) | 0 | 0;
  }
  
  function $1708($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
    return $0_1 | 0;
  }
  
  function $1709($0_1) {
    $0_1 = $0_1 | 0;
    return $0_1 | 0;
  }
  
  function $1710($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0, $4_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    label$1 : {
    $4_1 = $730($0_1 | 0) | 0;
    if ($2_1 >>> 0 <= $4_1 >>> 0) {
      break label$1
    }
    $1058($0_1 | 0, $2_1 - $4_1 | 0 | 0);
    }
    $1059($0_1 | 0, $2_1 | 0);
    HEAP32[($3_1 + 12 | 0) >> 2] = 0;
    $1049($1_1 + ($2_1 << 2 | 0) | 0 | 0, $3_1 + 12 | 0 | 0);
    label$2 : {
    if ($2_1 >>> 0 >= $4_1 >>> 0) {
      break label$2
    }
    $1053($0_1 | 0, $4_1 | 0);
    }
    global$0 = $3_1 + 16 | 0;
    return $0_1 | 0;
  }
  
  function $1711($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return ($1_1 - $0_1 | 0 | 0) / (12 | 0) | 0 | 0;
  }
  
  function $1712($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
    i64toi32_i32$0 = $618($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
    return i64toi32_i32$0 | 0;
  }
  
  function $1713() {
    return $1714() | 0 | 0;
  }
  
  function $1714() {
    return -2147483648 | 0;
  }
  
  function $1715() {
    var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
    i64toi32_i32$0 = $1717() | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
    return i64toi32_i32$0 | 0;
  }
  
  function $1716() {
    var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
    i64toi32_i32$0 = $1718() | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
    return i64toi32_i32$0 | 0;
  }
  
  function $1717() {
    i64toi32_i32$HIGH_BITS = -2147483648;
    return 0 | 0;
  }
  
  function $1718() {
    i64toi32_i32$HIGH_BITS = 2147483647;
    return -1 | 0;
  }
  
  function $1719($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
    i64toi32_i32$0 = $615($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
    return i64toi32_i32$0 | 0;
  }
  
  function $1720() {
    return $1721() | 0 | 0;
  }
  
  function $1721() {
    return 65535 | 0;
  }
  
  function $1722() {
    var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
    i64toi32_i32$0 = $1723() | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
    return i64toi32_i32$0 | 0;
  }
  
  function $1723() {
    i64toi32_i32$HIGH_BITS = -1;
    return -1 | 0;
  }
  
  function $1724($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return Math_fround(Math_fround($648($0_1 | 0, $1_1 | 0, $718() | 0 | 0)));
  }
  
  function $1725($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return +(+$649($0_1 | 0, $1_1 | 0, $718() | 0 | 0));
  }
  
  function $1726($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var i64toi32_i32$1 = 0, $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $4$hi = 0, $17_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    $650($3_1 | 0, $1_1 | 0, $2_1 | 0, $718() | 0 | 0);
    i64toi32_i32$2 = $3_1;
    i64toi32_i32$0 = HEAP32[$3_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$0;
    $4$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $3_1 + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $17_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1;
    HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $17_1;
    HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    HEAP32[i64toi32_i32$1 >> 2] = $4_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    global$0 = $3_1 + 16 | 0;
  }
  
  function $1727($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return ($1_1 - $0_1 | 0 | 0) / (12 | 0) | 0 | 0;
  }
  
  function $1728($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
    return $0_1 | 0;
  }
  
  function $1729($0_1) {
    $0_1 = $0_1 | 0;
    return $0_1 | 0;
  }
  
  function $1730($0_1) {
    $0_1 = $0_1 | 0;
    return $0_1 | 0;
  }
  
  function $1731($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
    return $0_1 | 0;
  }
  
  function $1732($0_1) {
    $0_1 = $0_1 | 0;
    return $1734($0_1 | 0) | 0 | 0;
  }
  
  function $1733($0_1) {
    $0_1 = $0_1 | 0;
    return $449($0_1 + 4 | 0 | 0) | 0 | 0;
  }
  
  function $1734($0_1) {
    $0_1 = $0_1 | 0;
    return $0_1 | 0;
  }
  
  function $1735($0_1) {
    $0_1 = $0_1 | 0;
    return $0_1 | 0;
  }
  
  function $1736($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
    return $0_1 | 0;
  }
  
  function $1737($0_1) {
    $0_1 = $0_1 | 0;
    return $0_1 | 0;
  }
  
  function $1738($0_1) {
    $0_1 = $0_1 | 0;
    return $0_1 | 0;
  }
  
  function $1739() {
    $1264();
  }
  
  function $1740($0_1) {
    $0_1 = $0_1 | 0;
    return $0_1 | 0;
  }
  
  function $1741($0_1) {
    $0_1 = $0_1 | 0;
    wasm2js_trap();
  }
  
  function $1742($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0, $3_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
    $2_1 = global$0 - 16 | 0;
    global$0 = $2_1;
    $3_1 = 0;
    label$1 : {
    if ($0_1 & 3 | 0) {
      break label$1
    }
    if (($1_1 >>> 0) % ($0_1 >>> 0) | 0) {
      break label$1
    }
    $0_1 = $132($2_1 + 12 | 0 | 0, $0_1 | 0, $1_1 | 0) | 0;
    $3_1 = (wasm2js_i32$0 = 0, wasm2js_i32$1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0, wasm2js_i32$2 = $0_1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
    }
    global$0 = $2_1 + 16 | 0;
    return $3_1 | 0;
  }
  
  function $1743($0_1) {
    $0_1 = $0_1 | 0;
    label$1 : {
    $0_1 = $1744($0_1 | 0) | 0;
    if ($0_1) {
      break label$1
    }
    $1745();
    }
    return $0_1 | 0;
  }
  
  function $1744($0_1) {
    $0_1 = $0_1 | 0;
    var $2_1 = 0, $1_1 = 0;
    $1_1 = $0_1 >>> 0 > 1 >>> 0 ? $0_1 : 1;
    label$1 : {
    label$2 : while (1) {
      $2_1 = $126($1_1 | 0) | 0;
      if ($2_1) {
      break label$1
      }
      $0_1 = $1796() | 0;
      if (!$0_1) {
      break label$1
      }
      FUNCTION_TABLE[$0_1 | 0]();
      continue label$2;
    };
    }
    return $2_1 | 0;
  }
  
  function $1745() {
    $1755();
    wasm2js_trap();
  }
  
  function $1746($0_1) {
    $0_1 = $0_1 | 0;
    $128($0_1 | 0);
  }
  
  function $1747($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1746($0_1 | 0);
  }
  
  function $1748($0_1) {
    $0_1 = $0_1 | 0;
    $1746($0_1 | 0);
  }
  
  function $1749($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    label$1 : {
    $1_1 = $1750($0_1 | 0, $1_1 | 0) | 0;
    if ($1_1) {
      break label$1
    }
    $1745();
    }
    return $1_1 | 0;
  }
  
  function $1750($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $3_1 = 0, $2_1 = 0;
    $2_1 = $1_1 >>> 0 > 4 >>> 0 ? $1_1 : 4;
    $0_1 = $0_1 >>> 0 > 1 >>> 0 ? $0_1 : 1;
    label$1 : {
    label$2 : while (1) {
      $3_1 = $1751($2_1 | 0, $0_1 | 0) | 0;
      if ($3_1) {
      break label$1
      }
      $1_1 = $1796() | 0;
      if (!$1_1) {
      break label$1
      }
      FUNCTION_TABLE[$1_1 | 0]();
      continue label$2;
    };
    }
    return $3_1 | 0;
  }
  
  function $1751($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0;
    $2_1 = (($0_1 + $1_1 | 0) + -1 | 0) & (0 - $0_1 | 0) | 0;
    return $1742($0_1 | 0, ($1_1 >>> 0 > $2_1 >>> 0 ? $1_1 : $2_1) | 0) | 0 | 0;
  }
  
  function $1752($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1753($0_1 | 0);
  }
  
  function $1753($0_1) {
    $0_1 = $0_1 | 0;
    $128($0_1 | 0);
  }
  
  function $1754($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $1752($0_1 | 0, $2_1 | 0);
  }
  
  function $1755() {
    $158();
    wasm2js_trap();
  }
  
  function $1756($0_1) {
    $0_1 = $0_1 | 0;
    $158();
    wasm2js_trap();
  }
  
  function $1757($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return (HEAPU16[((($0_1 >>> 0 > 153 >>> 0 ? 0 : $0_1) << 1 | 0) + 83200 | 0) >> 1] | 0) + 81272 | 0 | 0;
  }
  
  function $1758($0_1) {
    $0_1 = $0_1 | 0;
    return $1757($0_1 | 0, $0_1 | 0) | 0 | 0;
  }
  
  function $1759($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    return $346($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
  }
  
  function $1760($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $6_1 = $6_1 | 0;
    $7_1 = $7_1 | 0;
    var $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
    $8_1 = global$0 - 16 | 0;
    global$0 = $8_1;
    label$1 : {
    $9_1 = $407($0_1 | 0) | 0;
    if ($2_1 >>> 0 > ($9_1 + ($1_1 ^ -1 | 0) | 0) >>> 0) {
      break label$1
    }
    $10_1 = $292($0_1 | 0) | 0;
    label$2 : {
      if ($1_1 >>> 0 >= (($9_1 >>> 1 | 0) + -8 | 0) >>> 0) {
      break label$2
      }
      HEAP32[($8_1 + 12 | 0) >> 2] = $1_1 << 1 | 0;
      HEAP32[($8_1 + 4 | 0) >> 2] = $2_1 + $1_1 | 0;
      $9_1 = ($409(HEAP32[($440($8_1 + 4 | 0 | 0, $8_1 + 12 | 0 | 0) | 0) >> 2] | 0 | 0) | 0) + 1 | 0;
    }
    $297($0_1 | 0);
    $410($8_1 + 4 | 0 | 0, $299($0_1 | 0) | 0 | 0, $9_1 | 0);
    $9_1 = HEAP32[($8_1 + 4 | 0) >> 2] | 0;
    $411($9_1 | 0, HEAP32[($8_1 + 8 | 0) >> 2] | 0 | 0);
    label$3 : {
      if (!$4_1) {
      break label$3
      }
      $176($293($9_1 | 0) | 0 | 0, $293($10_1 | 0) | 0 | 0, $4_1 | 0) | 0;
    }
    label$4 : {
      if (!$6_1) {
      break label$4
      }
      $176(($293($9_1 | 0) | 0) + $4_1 | 0 | 0, $7_1 | 0, $6_1 | 0) | 0;
    }
    $11_1 = $5_1 + $4_1 | 0;
    $7_1 = $3_1 - $11_1 | 0;
    label$5 : {
      if (($3_1 | 0) == ($11_1 | 0)) {
      break label$5
      }
      $176((($293($9_1 | 0) | 0) + $4_1 | 0) + $6_1 | 0 | 0, (($293($10_1 | 0) | 0) + $4_1 | 0) + $5_1 | 0 | 0, $7_1 | 0) | 0;
    }
    label$6 : {
      $3_1 = $1_1 + 1 | 0;
      if (($3_1 | 0) == (11 | 0)) {
      break label$6
      }
      $386($299($0_1 | 0) | 0 | 0, $10_1 | 0, $3_1 | 0);
    }
    $412($0_1 | 0, $9_1 | 0);
    $413($0_1 | 0, HEAP32[($8_1 + 8 | 0) >> 2] | 0 | 0);
    $4_1 = ($6_1 + $4_1 | 0) + $7_1 | 0;
    $414($0_1 | 0, $4_1 | 0);
    HEAP8[($8_1 + 12 | 0) >> 0] = 0;
    $389($9_1 + $4_1 | 0 | 0, $8_1 + 12 | 0 | 0);
    $288($0_1 | 0, $2_1 + $1_1 | 0 | 0);
    global$0 = $8_1 + 16 | 0;
    return;
    }
    $415($0_1 | 0);
    wasm2js_trap();
  }
  
  function $1761($0_1) {
    $0_1 = $0_1 | 0;
    $297($0_1 | 0);
    label$1 : {
    if (!($296($0_1 | 0) | 0)) {
      break label$1
    }
    $386($299($0_1 | 0) | 0 | 0, $381($0_1 | 0) | 0 | 0, $313($0_1 | 0) | 0 | 0);
    }
    return $0_1 | 0;
  }
  
  function $1762($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    HEAP8[($3_1 + 15 | 0) >> 0] = $2_1;
    $1763($0_1 | 0, $1_1 | 0, $3_1 + 15 | 0 | 0) | 0;
    global$0 = $3_1 + 16 | 0;
    return $0_1 | 0;
  }
  
  function $1763($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    return $1786($0_1 | 0, $1785($1_1 | 0) | 0 | 0, $2_1 | 0) | 0 | 0;
  }
  
  function $1764($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0, $4_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    label$1 : {
    if ($2_1 >>> 0 > ($407($0_1 | 0) | 0) >>> 0) {
      break label$1
    }
    label$2 : {
      label$3 : {
      if (!($408($2_1 | 0) | 0)) {
        break label$3
      }
      $388($0_1 | 0, $2_1 | 0);
      $4_1 = $382($0_1 | 0) | 0;
      break label$2;
      }
      $410($3_1 + 8 | 0 | 0, $299($0_1 | 0) | 0 | 0, ($409($2_1 | 0) | 0) + 1 | 0 | 0);
      $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
      $411($4_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
      $412($0_1 | 0, $4_1 | 0);
      $413($0_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
      $414($0_1 | 0, $2_1 | 0);
    }
    $176($293($4_1 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
    HEAP8[($3_1 + 7 | 0) >> 0] = 0;
    $389($4_1 + $2_1 | 0 | 0, $3_1 + 7 | 0 | 0);
    $288($0_1 | 0, $2_1 | 0);
    global$0 = $3_1 + 16 | 0;
    return;
    }
    $415($0_1 | 0);
    wasm2js_trap();
  }
  
  function $1765($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0, $4_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    label$1 : {
    label$2 : {
      label$3 : {
      if (!($408($2_1 | 0) | 0)) {
        break label$3
      }
      $4_1 = $382($0_1 | 0) | 0;
      $388($0_1 | 0, $2_1 | 0);
      break label$2;
      }
      if ($2_1 >>> 0 > ($407($0_1 | 0) | 0) >>> 0) {
      break label$1
      }
      $410($3_1 + 8 | 0 | 0, $299($0_1 | 0) | 0 | 0, ($409($2_1 | 0) | 0) + 1 | 0 | 0);
      $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
      $411($4_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
      $412($0_1 | 0, $4_1 | 0);
      $413($0_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
      $414($0_1 | 0, $2_1 | 0);
    }
    $176($293($4_1 | 0) | 0 | 0, $1_1 | 0, $2_1 + 1 | 0 | 0) | 0;
    $288($0_1 | 0, $2_1 | 0);
    global$0 = $3_1 + 16 | 0;
    return;
    }
    $415($0_1 | 0);
    wasm2js_trap();
  }
  
  function $1766($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0, $4_1 = 0;
    $3_1 = $310($0_1 | 0) | 0;
    $4_1 = $309($0_1 | 0) | 0;
    label$1 : {
    if ($2_1 >>> 0 > $3_1 >>> 0) {
      break label$1
    }
    label$2 : {
      if ($2_1 >>> 0 <= $4_1 >>> 0) {
      break label$2
      }
      $305($0_1 | 0, $2_1 - $4_1 | 0 | 0);
    }
    $3_1 = $293($292($0_1 | 0) | 0 | 0) | 0;
    $1759($3_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
    return $1482($0_1 | 0, $3_1 | 0, $2_1 | 0) | 0 | 0;
    }
    $1760($0_1 | 0, $3_1 | 0, $2_1 - $3_1 | 0 | 0, $4_1 | 0, 0 | 0, $4_1 | 0, $2_1 | 0, $1_1 | 0);
    return $0_1 | 0;
  }
  
  function $1767($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $1766($0_1 | 0, $1_1 | 0, $437($1_1 | 0) | 0 | 0) | 0 | 0;
  }
  
  function $1768($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $4_1 = 0, $5_1 = 0, $3_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    label$1 : {
    label$2 : {
      $4_1 = $310($0_1 | 0) | 0;
      $5_1 = $309($0_1 | 0) | 0;
      if (($4_1 - $5_1 | 0) >>> 0 < $2_1 >>> 0) {
      break label$2
      }
      if (!$2_1) {
      break label$1
      }
      $305($0_1 | 0, $2_1 | 0);
      $4_1 = $293($292($0_1 | 0) | 0 | 0) | 0;
      $176($4_1 + $5_1 | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
      $2_1 = $5_1 + $2_1 | 0;
      $992($0_1 | 0, $2_1 | 0);
      HEAP8[($3_1 + 15 | 0) >> 0] = 0;
      $389($4_1 + $2_1 | 0 | 0, $3_1 + 15 | 0 | 0);
      break label$1;
    }
    $1760($0_1 | 0, $4_1 | 0, ($2_1 - $4_1 | 0) + $5_1 | 0 | 0, $5_1 | 0, $5_1 | 0, 0 | 0, $2_1 | 0, $1_1 | 0);
    }
    global$0 = $3_1 + 16 | 0;
    return $0_1 | 0;
  }
  
  function $1769($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0, $4_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    label$1 : {
    if ($1_1 >>> 0 > ($407($0_1 | 0) | 0) >>> 0) {
      break label$1
    }
    label$2 : {
      label$3 : {
      if (!($408($1_1 | 0) | 0)) {
        break label$3
      }
      $388($0_1 | 0, $1_1 | 0);
      $4_1 = $382($0_1 | 0) | 0;
      break label$2;
      }
      $410($3_1 + 8 | 0 | 0, $299($0_1 | 0) | 0 | 0, ($409($1_1 | 0) | 0) + 1 | 0 | 0);
      $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
      $411($4_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
      $412($0_1 | 0, $4_1 | 0);
      $413($0_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
      $414($0_1 | 0, $1_1 | 0);
    }
    $1762($293($4_1 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
    HEAP8[($3_1 + 7 | 0) >> 0] = 0;
    $389($4_1 + $1_1 | 0 | 0, $3_1 + 7 | 0 | 0);
    $288($0_1 | 0, $1_1 | 0);
    global$0 = $3_1 + 16 | 0;
    return;
    }
    $415($0_1 | 0);
    wasm2js_trap();
  }
  
  function $1770($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $4_1 = 0, $2_1 = 0, $3_1 = 0;
    $2_1 = global$0 - 16 | 0;
    global$0 = $2_1;
    HEAP8[($2_1 + 15 | 0) >> 0] = $1_1;
    label$1 : {
    label$2 : {
      $3_1 = $296($0_1 | 0) | 0;
      if ($3_1) {
      break label$2
      }
      $4_1 = 10;
      $1_1 = $300($0_1 | 0) | 0;
      break label$1;
    }
    $4_1 = ($313($0_1 | 0) | 0) + -1 | 0;
    $1_1 = $314($0_1 | 0) | 0;
    }
    label$3 : {
    label$4 : {
      label$5 : {
      if (($1_1 | 0) != ($4_1 | 0)) {
        break label$5
      }
      $991($0_1 | 0, $4_1 | 0, 1 | 0, $4_1 | 0, $4_1 | 0, 0 | 0, 0 | 0);
      $305($0_1 | 0, 1 | 0);
      $292($0_1 | 0) | 0;
      break label$4;
      }
      $305($0_1 | 0, 1 | 0);
      $292($0_1 | 0) | 0;
      if ($3_1) {
      break label$4
      }
      $4_1 = $382($0_1 | 0) | 0;
      $388($0_1 | 0, $1_1 + 1 | 0 | 0);
      break label$3;
    }
    $4_1 = $381($0_1 | 0) | 0;
    $414($0_1 | 0, $1_1 + 1 | 0 | 0);
    }
    $0_1 = $4_1 + $1_1 | 0;
    $389($0_1 | 0, $2_1 + 15 | 0 | 0);
    HEAP8[($2_1 + 14 | 0) >> 0] = 0;
    $389($0_1 + 1 | 0 | 0, $2_1 + 14 | 0 | 0);
    global$0 = $2_1 + 16 | 0;
  }
  
  function $1771($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $4_1 = 0, $5_1 = 0, $3_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    label$1 : {
    if (!$1_1) {
      break label$1
    }
    label$2 : {
      $4_1 = $310($0_1 | 0) | 0;
      $5_1 = $309($0_1 | 0) | 0;
      if (($4_1 - $5_1 | 0) >>> 0 >= $1_1 >>> 0) {
      break label$2
      }
      $991($0_1 | 0, $4_1 | 0, ($1_1 - $4_1 | 0) + $5_1 | 0 | 0, $5_1 | 0, $5_1 | 0, 0 | 0, 0 | 0);
    }
    $305($0_1 | 0, $1_1 | 0);
    $4_1 = $292($0_1 | 0) | 0;
    $1762(($293($4_1 | 0) | 0) + $5_1 | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
    $1_1 = $5_1 + $1_1 | 0;
    $992($0_1 | 0, $1_1 | 0);
    HEAP8[($3_1 + 15 | 0) >> 0] = 0;
    $389($4_1 + $1_1 | 0 | 0, $3_1 + 15 | 0 | 0);
    }
    global$0 = $3_1 + 16 | 0;
    return $0_1 | 0;
  }
  
  function $1772($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0;
    label$1 : {
    $3_1 = $309($0_1 | 0) | 0;
    if ($1_1 >>> 0 <= $3_1 >>> 0) {
      break label$1
    }
    $1771($0_1 | 0, $1_1 - $3_1 | 0 | 0, $2_1 | 0) | 0;
    return;
    }
    $1481($0_1 | 0, $1_1 | 0);
  }
  
  function $1773($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    return $371($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
  }
  
  function $1774($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $6_1 = $6_1 | 0;
    $7_1 = $7_1 | 0;
    var $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
    $8_1 = global$0 - 16 | 0;
    global$0 = $8_1;
    label$1 : {
    $9_1 = $1464($0_1 | 0) | 0;
    if ($2_1 >>> 0 > ($9_1 + ($1_1 ^ -1 | 0) | 0) >>> 0) {
      break label$1
    }
    $10_1 = $815($0_1 | 0) | 0;
    label$2 : {
      if ($1_1 >>> 0 >= (($9_1 >>> 1 | 0) + -8 | 0) >>> 0) {
      break label$2
      }
      HEAP32[($8_1 + 12 | 0) >> 2] = $1_1 << 1 | 0;
      HEAP32[($8_1 + 4 | 0) >> 2] = $2_1 + $1_1 | 0;
      $9_1 = ($1466(HEAP32[($440($8_1 + 4 | 0 | 0, $8_1 + 12 | 0 | 0) | 0) >> 2] | 0 | 0) | 0) + 1 | 0;
    }
    $1484($0_1 | 0);
    $1467($8_1 + 4 | 0 | 0, $1060($0_1 | 0) | 0 | 0, $9_1 | 0);
    $9_1 = HEAP32[($8_1 + 4 | 0) >> 2] | 0;
    $1468($9_1 | 0, HEAP32[($8_1 + 8 | 0) >> 2] | 0 | 0);
    label$3 : {
      if (!$4_1) {
      break label$3
      }
      $242($374($9_1 | 0) | 0 | 0, $374($10_1 | 0) | 0 | 0, $4_1 | 0) | 0;
    }
    label$4 : {
      if (!$6_1) {
      break label$4
      }
      $242(($374($9_1 | 0) | 0) + ($4_1 << 2 | 0) | 0 | 0, $7_1 | 0, $6_1 | 0) | 0;
    }
    $11_1 = $5_1 + $4_1 | 0;
    $7_1 = $3_1 - $11_1 | 0;
    label$5 : {
      if (($3_1 | 0) == ($11_1 | 0)) {
      break label$5
      }
      $3_1 = $4_1 << 2 | 0;
      $242((($374($9_1 | 0) | 0) + $3_1 | 0) + ($6_1 << 2 | 0) | 0 | 0, (($374($10_1 | 0) | 0) + $3_1 | 0) + ($5_1 << 2 | 0) | 0 | 0, $7_1 | 0) | 0;
    }
    label$6 : {
      $3_1 = $1_1 + 1 | 0;
      if (($3_1 | 0) == (2 | 0)) {
      break label$6
      }
      $1485($1060($0_1 | 0) | 0 | 0, $10_1 | 0, $3_1 | 0);
    }
    $1469($0_1 | 0, $9_1 | 0);
    $1470($0_1 | 0, HEAP32[($8_1 + 8 | 0) >> 2] | 0 | 0);
    $4_1 = ($6_1 + $4_1 | 0) + $7_1 | 0;
    $1050($0_1 | 0, $4_1 | 0);
    HEAP32[($8_1 + 12 | 0) >> 2] = 0;
    $1049($9_1 + ($4_1 << 2 | 0) | 0 | 0, $8_1 + 12 | 0 | 0);
    $938($0_1 | 0, $2_1 + $1_1 | 0 | 0);
    global$0 = $8_1 + 16 | 0;
    return;
    }
    $1471($0_1 | 0);
    wasm2js_trap();
  }
  
  function $1775($0_1) {
    $0_1 = $0_1 | 0;
    $1484($0_1 | 0);
    label$1 : {
    if (!($875($0_1 | 0) | 0)) {
      break label$1
    }
    $1485($1060($0_1 | 0) | 0 | 0, $1048($0_1 | 0) | 0 | 0, $1487($0_1 | 0) | 0 | 0);
    }
    return $0_1 | 0;
  }
  
  function $1776($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
    $1777($0_1 | 0, $1_1 | 0, $3_1 + 12 | 0 | 0) | 0;
    global$0 = $3_1 + 16 | 0;
    return $0_1 | 0;
  }
  
  function $1777($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    return $1787($0_1 | 0, $1785($1_1 | 0) | 0 | 0, $2_1 | 0) | 0 | 0;
  }
  
  function $1778($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0, $4_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    label$1 : {
    if ($2_1 >>> 0 > ($1464($0_1 | 0) | 0) >>> 0) {
      break label$1
    }
    label$2 : {
      label$3 : {
      if (!($1465($2_1 | 0) | 0)) {
        break label$3
      }
      $1052($0_1 | 0, $2_1 | 0);
      $4_1 = $1051($0_1 | 0) | 0;
      break label$2;
      }
      $1467($3_1 + 8 | 0 | 0, $1060($0_1 | 0) | 0 | 0, ($1466($2_1 | 0) | 0) + 1 | 0 | 0);
      $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
      $1468($4_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
      $1469($0_1 | 0, $4_1 | 0);
      $1470($0_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
      $1050($0_1 | 0, $2_1 | 0);
    }
    $242($374($4_1 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
    HEAP32[($3_1 + 4 | 0) >> 2] = 0;
    $1049($4_1 + ($2_1 << 2 | 0) | 0 | 0, $3_1 + 4 | 0 | 0);
    $938($0_1 | 0, $2_1 | 0);
    global$0 = $3_1 + 16 | 0;
    return;
    }
    $1471($0_1 | 0);
    wasm2js_trap();
  }
  
  function $1779($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0, $4_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    label$1 : {
    label$2 : {
      label$3 : {
      if (!($1465($2_1 | 0) | 0)) {
        break label$3
      }
      $4_1 = $1051($0_1 | 0) | 0;
      $1052($0_1 | 0, $2_1 | 0);
      break label$2;
      }
      if ($2_1 >>> 0 > ($1464($0_1 | 0) | 0) >>> 0) {
      break label$1
      }
      $1467($3_1 + 8 | 0 | 0, $1060($0_1 | 0) | 0 | 0, ($1466($2_1 | 0) | 0) + 1 | 0 | 0);
      $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
      $1468($4_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
      $1469($0_1 | 0, $4_1 | 0);
      $1470($0_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
      $1050($0_1 | 0, $2_1 | 0);
    }
    $242($374($4_1 | 0) | 0 | 0, $1_1 | 0, $2_1 + 1 | 0 | 0) | 0;
    $938($0_1 | 0, $2_1 | 0);
    global$0 = $3_1 + 16 | 0;
    return;
    }
    $1471($0_1 | 0);
    wasm2js_trap();
  }
  
  function $1780($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0, $4_1 = 0;
    $3_1 = $1054($0_1 | 0) | 0;
    $4_1 = $730($0_1 | 0) | 0;
    label$1 : {
    if ($2_1 >>> 0 > $3_1 >>> 0) {
      break label$1
    }
    label$2 : {
      if ($2_1 >>> 0 <= $4_1 >>> 0) {
      break label$2
      }
      $1058($0_1 | 0, $2_1 - $4_1 | 0 | 0);
    }
    $3_1 = $374($815($0_1 | 0) | 0 | 0) | 0;
    $1773($3_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
    return $1710($0_1 | 0, $3_1 | 0, $2_1 | 0) | 0 | 0;
    }
    $1774($0_1 | 0, $3_1 | 0, $2_1 - $3_1 | 0 | 0, $4_1 | 0, 0 | 0, $4_1 | 0, $2_1 | 0, $1_1 | 0);
    return $0_1 | 0;
  }
  
  function $1781($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $1780($0_1 | 0, $1_1 | 0, $1387($1_1 | 0) | 0 | 0) | 0 | 0;
  }
  
  function $1782($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $4_1 = 0, $5_1 = 0, $3_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    label$1 : {
    label$2 : {
      $4_1 = $1054($0_1 | 0) | 0;
      $5_1 = $730($0_1 | 0) | 0;
      if (($4_1 - $5_1 | 0) >>> 0 < $2_1 >>> 0) {
      break label$2
      }
      if (!$2_1) {
      break label$1
      }
      $1058($0_1 | 0, $2_1 | 0);
      $4_1 = $374($815($0_1 | 0) | 0 | 0) | 0;
      $242($4_1 + ($5_1 << 2 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
      $2_1 = $5_1 + $2_1 | 0;
      $1059($0_1 | 0, $2_1 | 0);
      HEAP32[($3_1 + 12 | 0) >> 2] = 0;
      $1049($4_1 + ($2_1 << 2 | 0) | 0 | 0, $3_1 + 12 | 0 | 0);
      break label$1;
    }
    $1774($0_1 | 0, $4_1 | 0, ($2_1 - $4_1 | 0) + $5_1 | 0 | 0, $5_1 | 0, $5_1 | 0, 0 | 0, $2_1 | 0, $1_1 | 0);
    }
    global$0 = $3_1 + 16 | 0;
    return $0_1 | 0;
  }
  
  function $1783($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0, $4_1 = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    label$1 : {
    if ($1_1 >>> 0 > ($1464($0_1 | 0) | 0) >>> 0) {
      break label$1
    }
    label$2 : {
      label$3 : {
      if (!($1465($1_1 | 0) | 0)) {
        break label$3
      }
      $1052($0_1 | 0, $1_1 | 0);
      $4_1 = $1051($0_1 | 0) | 0;
      break label$2;
      }
      $1467($3_1 + 8 | 0 | 0, $1060($0_1 | 0) | 0 | 0, ($1466($1_1 | 0) | 0) + 1 | 0 | 0);
      $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
      $1468($4_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
      $1469($0_1 | 0, $4_1 | 0);
      $1470($0_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
      $1050($0_1 | 0, $1_1 | 0);
    }
    $1776($374($4_1 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
    HEAP32[($3_1 + 4 | 0) >> 2] = 0;
    $1049($4_1 + ($1_1 << 2 | 0) | 0 | 0, $3_1 + 4 | 0 | 0);
    $938($0_1 | 0, $1_1 | 0);
    global$0 = $3_1 + 16 | 0;
    return;
    }
    $1471($0_1 | 0);
    wasm2js_trap();
  }
  
  function $1784($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $4_1 = 0, $2_1 = 0, $3_1 = 0;
    $2_1 = global$0 - 16 | 0;
    global$0 = $2_1;
    HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
    label$1 : {
    label$2 : {
      $3_1 = $875($0_1 | 0) | 0;
      if ($3_1) {
      break label$2
      }
      $4_1 = 1;
      $1_1 = $877($0_1 | 0) | 0;
      break label$1;
    }
    $4_1 = ($1487($0_1 | 0) | 0) + -1 | 0;
    $1_1 = $876($0_1 | 0) | 0;
    }
    label$3 : {
    label$4 : {
      label$5 : {
      if (($1_1 | 0) != ($4_1 | 0)) {
        break label$5
      }
      $1057($0_1 | 0, $4_1 | 0, 1 | 0, $4_1 | 0, $4_1 | 0, 0 | 0, 0 | 0);
      $1058($0_1 | 0, 1 | 0);
      $815($0_1 | 0) | 0;
      break label$4;
      }
      $1058($0_1 | 0, 1 | 0);
      $815($0_1 | 0) | 0;
      if ($3_1) {
      break label$4
      }
      $4_1 = $1051($0_1 | 0) | 0;
      $1052($0_1 | 0, $1_1 + 1 | 0 | 0);
      break label$3;
    }
    $4_1 = $1048($0_1 | 0) | 0;
    $1050($0_1 | 0, $1_1 + 1 | 0 | 0);
    }
    $0_1 = $4_1 + ($1_1 << 2 | 0) | 0;
    $1049($0_1 | 0, $2_1 + 12 | 0 | 0);
    HEAP32[($2_1 + 8 | 0) >> 2] = 0;
    $1049($0_1 + 4 | 0 | 0, $2_1 + 8 | 0 | 0);
    global$0 = $2_1 + 16 | 0;
  }
  
  function $1785($0_1) {
    $0_1 = $0_1 | 0;
    return $0_1 | 0;
  }
  
  function $1786($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    label$1 : {
    label$2 : while (1) {
      if (!$1_1) {
      break label$1
      }
      HEAP8[$0_1 >> 0] = HEAPU8[$2_1 >> 0] | 0;
      $1_1 = $1_1 + -1 | 0;
      $0_1 = $0_1 + 1 | 0;
      continue label$2;
    };
    }
    return $0_1 | 0;
  }
  
  function $1787($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    label$1 : {
    label$2 : while (1) {
      if (!$1_1) {
      break label$1
      }
      HEAP32[$0_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
      $1_1 = $1_1 + -1 | 0;
      $0_1 = $0_1 + 4 | 0;
      continue label$2;
    };
    }
    return $0_1 | 0;
  }
  
  function $1788($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return $1789($0_1 | 0, $1_1 | 0) | 0 | 0;
  }
  
  function $1789($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0, $3_1 = 0;
    label$1 : {
    label$2 : {
      $2_1 = HEAP32[($1_1 + 76 | 0) >> 2] | 0;
      if (($2_1 | 0) < (0 | 0)) {
      break label$2
      }
      if (!$2_1) {
      break label$1
      }
      if (($2_1 & 1073741823 | 0 | 0) != (HEAP32[(($118() | 0) + 24 | 0) >> 2] | 0 | 0)) {
      break label$1
      }
    }
    label$3 : {
      $2_1 = $0_1 & 255 | 0;
      if (($2_1 | 0) == (HEAP32[($1_1 + 80 | 0) >> 2] | 0 | 0)) {
      break label$3
      }
      $3_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
      if (($3_1 | 0) == (HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0)) {
      break label$3
      }
      HEAP32[($1_1 + 20 | 0) >> 2] = $3_1 + 1 | 0;
      HEAP8[$3_1 >> 0] = $0_1;
      return $2_1 | 0;
    }
    return $470($1_1 | 0, $2_1 | 0) | 0 | 0;
    }
    return $1790($0_1 | 0, $1_1 | 0) | 0 | 0;
  }
  
  function $1790($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $3_1 = 0, $2_1 = 0, $4_1 = 0;
    label$1 : {
    $2_1 = $1_1 + 76 | 0;
    if (!($1791($2_1 | 0) | 0)) {
      break label$1
    }
    $153($1_1 | 0) | 0;
    }
    label$2 : {
    label$3 : {
      $3_1 = $0_1 & 255 | 0;
      if (($3_1 | 0) == (HEAP32[($1_1 + 80 | 0) >> 2] | 0 | 0)) {
      break label$3
      }
      $4_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
      if (($4_1 | 0) == (HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0)) {
      break label$3
      }
      HEAP32[($1_1 + 20 | 0) >> 2] = $4_1 + 1 | 0;
      HEAP8[$4_1 >> 0] = $0_1;
      break label$2;
    }
    $3_1 = $470($1_1 | 0, $3_1 | 0) | 0;
    }
    label$4 : {
    if (!(($1792($2_1 | 0) | 0) & 1073741824 | 0)) {
      break label$4
    }
    $1793($2_1 | 0);
    }
    return $3_1 | 0;
  }
  
  function $1791($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0;
    $1_1 = HEAP32[$0_1 >> 2] | 0;
    HEAP32[$0_1 >> 2] = $1_1 ? $1_1 : 1073741823;
    return $1_1 | 0;
  }
  
  function $1792($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0;
    $1_1 = HEAP32[$0_1 >> 2] | 0;
    HEAP32[$0_1 >> 2] = 0;
    return $1_1 | 0;
  }
  
  function $1793($0_1) {
    $0_1 = $0_1 | 0;
    $144($0_1 | 0, 1 | 0) | 0;
  }
  
  function $1794($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $3_1 = 0, $2_1 = 0;
    $2_1 = global$0 - 16 | 0;
    global$0 = $2_1;
    $3_1 = HEAP32[(0 + 69172 | 0) >> 2] | 0;
    $161(67166 | 0, 11 | 0, 1 | 0, $3_1 | 0) | 0;
    HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
    $598($3_1 | 0, $0_1 | 0, $1_1 | 0) | 0;
    $1788(10 | 0, $3_1 | 0) | 0;
    $158();
    wasm2js_trap();
  }
  
  function $1795($0_1) {
    $0_1 = $0_1 | 0;
    return HEAP32[$0_1 >> 2] | 0 | 0;
  }
  
  function $1796() {
    return $1795(90860 | 0) | 0 | 0;
  }
  
  function $1797() {
    return 0 | 0;
  }
  
  function $1798() {
    $1794(67136 | 0, 0 | 0);
    wasm2js_trap();
  }
  
  function $1799($0_1) {
    $0_1 = $0_1 | 0;
    return $1836($0_1 | 0) | 0 | 0;
  }
  
  function $1800($0_1) {
    $0_1 = $0_1 | 0;
  }
  
  function $1801($0_1) {
    $0_1 = $0_1 | 0;
  }
  
  function $1802($0_1) {
    $0_1 = $0_1 | 0;
    $1747($1799($0_1 | 0) | 0 | 0, 8 | 0);
  }
  
  function $1803($0_1) {
    $0_1 = $0_1 | 0;
    $1747($1799($0_1 | 0) | 0 | 0, 8 | 0);
  }
  
  function $1804($0_1) {
    $0_1 = $0_1 | 0;
    $1747($1799($0_1 | 0) | 0 | 0, 12 | 0);
  }
  
  function $1805($0_1) {
    $0_1 = $0_1 | 0;
    $1747($1799($0_1 | 0) | 0 | 0, 24 | 0);
  }
  
  function $1806($0_1) {
    $0_1 = $0_1 | 0;
    $1747($1799($0_1 | 0) | 0 | 0, 16 | 0);
  }
  
  function $1807($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    return $1808($0_1 | 0, $1_1 | 0, 0 | 0) | 0 | 0;
  }
  
  function $1808($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    label$1 : {
    if ($2_1) {
      break label$1
    }
    return (HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) | 0;
    }
    label$2 : {
    if (($0_1 | 0) != ($1_1 | 0)) {
      break label$2
    }
    return 1 | 0;
    }
    return !($579($1809($0_1 | 0) | 0 | 0, $1809($1_1 | 0) | 0 | 0) | 0) | 0;
  }
  
  function $1809($0_1) {
    $0_1 = $0_1 | 0;
    return HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0;
  }
  
  function $1810($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0, $4_1 = 0;
    $3_1 = global$0 - 64 | 0;
    global$0 = $3_1;
    $4_1 = 1;
    label$1 : {
    label$2 : {
      if ($1808($0_1 | 0, $1_1 | 0, 0 | 0) | 0) {
      break label$2
      }
      $4_1 = 0;
      if (!$1_1) {
      break label$2
      }
      $4_1 = 0;
      $1_1 = $1811($1_1 | 0, 83544 | 0, 83592 | 0, 0 | 0) | 0;
      if (!$1_1) {
      break label$2
      }
      $4_1 = HEAP32[$2_1 >> 2] | 0;
      if (!$4_1) {
      break label$1
      }
      $115($3_1 + 8 | 0 | 0, 0 | 0, 56 | 0) | 0;
      HEAP8[($3_1 + 59 | 0) >> 0] = 1;
      HEAP32[($3_1 + 16 | 0) >> 2] = -1;
      HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
      HEAP32[($3_1 + 4 | 0) >> 2] = $1_1;
      HEAP32[($3_1 + 52 | 0) >> 2] = 1;
      FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($1_1, $3_1 + 4 | 0, $4_1, 1);
      label$3 : {
      $4_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
      if (($4_1 | 0) != (1 | 0)) {
        break label$3
      }
      HEAP32[$2_1 >> 2] = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
      }
      $4_1 = ($4_1 | 0) == (1 | 0);
    }
    global$0 = $3_1 + 64 | 0;
    return $4_1 | 0;
    }
    fimport$24(67083 | 0, 65910 | 0, 473 | 0, 66037 | 0);
    wasm2js_trap();
  }
  
  function $1811($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    var $4_1 = 0, $6_1 = 0, $5_1 = 0, $7_1 = 0;
    $4_1 = global$0 - 16 | 0;
    global$0 = $4_1;
    $1812($4_1 + 4 | 0 | 0, $0_1 | 0);
    $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
    $6_1 = $1808($5_1 | 0, $2_1 | 0, 0 | 0) | 0;
    $7_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
    label$1 : {
    label$2 : {
      if (!$6_1) {
      break label$2
      }
      $6_1 = $1813($0_1 | 0, $7_1 | 0, $1_1 | 0, $2_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, $3_1 | 0) | 0;
      break label$1;
    }
    $6_1 = $1814($0_1 | 0, $7_1 | 0, $2_1 | 0, $5_1 | 0, $3_1 | 0) | 0;
    if ($6_1) {
      break label$1
    }
    $6_1 = $1815($0_1 | 0, $7_1 | 0, $1_1 | 0, $2_1 | 0, $5_1 | 0, $3_1 | 0) | 0;
    }
    global$0 = $4_1 + 16 | 0;
    return $6_1 | 0;
  }
  
  function $1812($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0, $3_1 = 0;
    $2_1 = HEAP32[$1_1 >> 2] | 0;
    $3_1 = HEAP32[($2_1 + -8 | 0) >> 2] | 0;
    HEAP32[($0_1 + 8 | 0) >> 2] = $3_1;
    HEAP32[$0_1 >> 2] = $1_1 + $3_1 | 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($2_1 + -4 | 0) >> 2] | 0;
  }
  
  function $1813($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    var $6_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $7_1 = 0;
    $6_1 = global$0 - 64 | 0;
    global$0 = $6_1;
    $7_1 = 0;
    label$1 : {
    label$2 : {
      if (($5_1 | 0) < (0 | 0)) {
      break label$2
      }
      $7_1 = ($4_1 | 0) == (0 - $5_1 | 0 | 0) ? $1_1 : 0;
      break label$1;
    }
    if (($5_1 | 0) == (-2 | 0)) {
      break label$1
    }
    $7_1 = $6_1 + 28 | 0;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $6_1 + 36 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $6_1 + 44 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $6_1;
    i64toi32_i32$0 = 0;
    HEAP32[($6_1 + 20 | 0) >> 2] = 0;
    HEAP32[($6_1 + 24 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($6_1 + 16 | 0) >> 2] = $5_1;
    HEAP32[($6_1 + 12 | 0) >> 2] = $2_1;
    HEAP32[($6_1 + 8 | 0) >> 2] = $0_1;
    HEAP32[($6_1 + 4 | 0) >> 2] = $3_1;
    HEAP32[($6_1 + 60 | 0) >> 2] = 0;
    i64toi32_i32$1 = $6_1;
    i64toi32_i32$0 = 16777216;
    HEAP32[($6_1 + 52 | 0) >> 2] = 1;
    HEAP32[($6_1 + 56 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($3_1, $6_1 + 4 | 0, $1_1, $1_1, 1, 0);
    $7_1 = (HEAP32[$7_1 >> 2] | 0 | 0) == (1 | 0) ? $1_1 : 0;
    }
    global$0 = $6_1 + 64 | 0;
    return $7_1 | 0;
  }
  
  function $1814($0_1, $1_1, $2_1, $3_1, $4_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    var $5_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $6_1 = 0;
    $5_1 = global$0 - 64 | 0;
    global$0 = $5_1;
    $6_1 = 0;
    label$1 : {
    if (($4_1 | 0) < (0 | 0)) {
      break label$1
    }
    $0_1 = $0_1 - $4_1 | 0;
    if (($0_1 | 0) < ($1_1 | 0)) {
      break label$1
    }
    $6_1 = $5_1 + 28 | 0;
    i64toi32_i32$1 = $6_1;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $5_1 + 36 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $5_1 + 44 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = 0;
    HEAP32[($5_1 + 20 | 0) >> 2] = 0;
    HEAP32[($5_1 + 24 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($5_1 + 16 | 0) >> 2] = $4_1;
    HEAP32[($5_1 + 12 | 0) >> 2] = $2_1;
    HEAP32[($5_1 + 4 | 0) >> 2] = $3_1;
    HEAP32[($5_1 + 60 | 0) >> 2] = 0;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = 16777216;
    HEAP32[($5_1 + 52 | 0) >> 2] = 1;
    HEAP32[($5_1 + 56 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
    FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($3_1, $5_1 + 4 | 0, $1_1, $1_1, 1, 0);
    $6_1 = HEAP32[$6_1 >> 2] | 0 ? $0_1 : 0;
    }
    global$0 = $5_1 + 64 | 0;
    return $6_1 | 0;
  }
  
  function $1815($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    var $6_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0, wasm2js_i32$6 = 0, wasm2js_i32$7 = 0, wasm2js_i32$8 = 0;
    $6_1 = global$0 - 64 | 0;
    global$0 = $6_1;
    HEAP32[($6_1 + 16 | 0) >> 2] = $5_1;
    HEAP32[($6_1 + 12 | 0) >> 2] = $2_1;
    HEAP32[($6_1 + 8 | 0) >> 2] = $0_1;
    HEAP32[($6_1 + 4 | 0) >> 2] = $3_1;
    $5_1 = 0;
    $115($6_1 + 20 | 0 | 0, 0 | 0, 39 | 0) | 0;
    HEAP32[($6_1 + 60 | 0) >> 2] = 0;
    HEAP8[($6_1 + 59 | 0) >> 0] = 1;
    FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($4_1, $6_1 + 4 | 0, $1_1, 1, 0);
    label$1 : {
    label$2 : {
      switch (HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0) {
      case 0:
      $5_1 = (wasm2js_i32$0 = (wasm2js_i32$3 = (wasm2js_i32$6 = HEAP32[($6_1 + 24 | 0) >> 2] | 0, wasm2js_i32$7 = 0, wasm2js_i32$8 = (HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0) == (1 | 0), wasm2js_i32$8 ? wasm2js_i32$6 : wasm2js_i32$7), wasm2js_i32$4 = 0, wasm2js_i32$5 = (HEAP32[($6_1 + 32 | 0) >> 2] | 0 | 0) == (1 | 0), wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (HEAP32[($6_1 + 44 | 0) >> 2] | 0 | 0) == (1 | 0), wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
      break label$1;
      case 1:
      break label$2;
      default:
      break label$1;
      };
    }
    label$4 : {
      if ((HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0) == (1 | 0)) {
      break label$4
      }
      if (HEAP32[($6_1 + 44 | 0) >> 2] | 0) {
      break label$1
      }
      if ((HEAP32[($6_1 + 32 | 0) >> 2] | 0 | 0) != (1 | 0)) {
      break label$1
      }
      if ((HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
      break label$1
      }
    }
    $5_1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
    }
    global$0 = $6_1 + 64 | 0;
    return $5_1 | 0;
  }
  
  function $1816($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    var $4_1 = 0;
    label$1 : {
    $4_1 = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
    if ($4_1) {
      break label$1
    }
    HEAP32[($1_1 + 24 | 0) >> 2] = $3_1;
    HEAP32[($1_1 + 16 | 0) >> 2] = $2_1;
    HEAP32[($1_1 + 36 | 0) >> 2] = 1;
    HEAP32[($1_1 + 20 | 0) >> 2] = HEAP32[($1_1 + 56 | 0) >> 2] | 0;
    return;
    }
    label$2 : {
    label$3 : {
      if ((HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0) != (HEAP32[($1_1 + 56 | 0) >> 2] | 0 | 0)) {
      break label$3
      }
      if ((HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
      break label$3
      }
      if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) != (2 | 0)) {
      break label$2
      }
      HEAP32[($1_1 + 24 | 0) >> 2] = $3_1;
      return;
    }
    HEAP8[($1_1 + 54 | 0) >> 0] = 1;
    HEAP32[($1_1 + 24 | 0) >> 2] = 2;
    HEAP32[($1_1 + 36 | 0) >> 2] = $4_1 + 1 | 0;
    }
  }
  
  function $1817($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    label$1 : {
    if (!($1808($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0) | 0)) {
      break label$1
    }
    $1816($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
    }
  }
  
  function $1818($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    label$1 : {
    if (!($1808($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0) | 0)) {
      break label$1
    }
    $1816($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
    return;
    }
    $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1);
  }
  
  function $1819($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    var $4_1 = 0, $6_1 = 0, $5_1 = 0;
    $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    $5_1 = $4_1 & 1 | 0;
    label$1 : {
    label$2 : {
      if ((HEAPU8[($1_1 + 55 | 0) >> 0] | 0 | 0) != (1 | 0)) {
      break label$2
      }
      $6_1 = $4_1 >> 8 | 0;
      if (!$5_1) {
      break label$1
      }
      $6_1 = $1820(HEAP32[$2_1 >> 2] | 0 | 0, $6_1 | 0) | 0;
      break label$1;
    }
    label$3 : {
      if ($5_1) {
      break label$3
      }
      $6_1 = $4_1 >> 8 | 0;
      break label$1;
    }
    HEAP32[($1_1 + 56 | 0) >> 2] = $1809(HEAP32[$0_1 >> 2] | 0 | 0) | 0;
    $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    $6_1 = 0;
    $2_1 = 0;
    }
    $0_1 = HEAP32[$0_1 >> 2] | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1 + $6_1 | 0, $4_1 & 2 | 0 ? $3_1 : 2);
  }
  
  function $1820($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    return HEAP32[($0_1 + $1_1 | 0) >> 2] | 0 | 0;
  }
  
  function $1821($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    var $4_1 = 0, $5_1 = 0;
    label$1 : {
    if (!($1808($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0) | 0)) {
      break label$1
    }
    $1816($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
    return;
    }
    $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    $5_1 = $0_1 + 16 | 0;
    $1819($5_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
    label$2 : {
    if ($4_1 >>> 0 < 2 >>> 0) {
      break label$2
    }
    $4_1 = $5_1 + ($4_1 << 3 | 0) | 0;
    $0_1 = $0_1 + 24 | 0;
    label$3 : while (1) {
      $1819($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
      if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
      break label$2
      }
      $0_1 = $0_1 + 8 | 0;
      if ($0_1 >>> 0 < $4_1 >>> 0) {
      continue label$3
      }
      break label$3;
    };
    }
  }
  
  function $1822($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0, $4_1 = 0;
    $3_1 = 1;
    label$1 : {
    label$2 : {
      if ((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 24 | 0) {
      break label$2
      }
      $3_1 = 0;
      if (!$1_1) {
      break label$1
      }
      $4_1 = $1811($1_1 | 0, 83544 | 0, 83640 | 0, 0 | 0) | 0;
      if (!$4_1) {
      break label$1
      }
      $3_1 = ((HEAPU8[($4_1 + 8 | 0) >> 0] | 0) & 24 | 0 | 0) != (0 | 0);
    }
    $3_1 = $1808($0_1 | 0, $1_1 | 0, $3_1 | 0) | 0;
    }
    return $3_1 | 0;
  }
  
  function $1823($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $4_1 = 0, $3_1 = 0, $5_1 = 0, $6_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
    $3_1 = global$0 - 64 | 0;
    global$0 = $3_1;
    label$1 : {
    label$2 : {
      if (!($1808($1_1 | 0, 83908 | 0, 0 | 0) | 0)) {
      break label$2
      }
      HEAP32[$2_1 >> 2] = 0;
      $4_1 = 1;
      break label$1;
    }
    label$3 : {
      if (!($1822($0_1 | 0, $1_1 | 0, $1_1 | 0) | 0)) {
      break label$3
      }
      $4_1 = 1;
      $1_1 = HEAP32[$2_1 >> 2] | 0;
      if (!$1_1) {
      break label$1
      }
      HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
      break label$1;
    }
    label$4 : {
      if (!$1_1) {
      break label$4
      }
      $4_1 = 0;
      $1_1 = $1811($1_1 | 0, 83544 | 0, 83688 | 0, 0 | 0) | 0;
      if (!$1_1) {
      break label$1
      }
      label$5 : {
      $5_1 = HEAP32[$2_1 >> 2] | 0;
      if (!$5_1) {
        break label$5
      }
      HEAP32[$2_1 >> 2] = HEAP32[$5_1 >> 2] | 0;
      }
      $5_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
      $6_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
      if (($5_1 & ($6_1 ^ -1 | 0) | 0) & 7 | 0) {
      break label$1
      }
      if ((($5_1 ^ -1 | 0) & $6_1 | 0) & 96 | 0) {
      break label$1
      }
      $4_1 = 1;
      if ($1808(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0, 0 | 0) | 0) {
      break label$1
      }
      label$6 : {
      if (!($1808(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, 83896 | 0, 0 | 0) | 0)) {
        break label$6
      }
      $1_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
      if (!$1_1) {
        break label$1
      }
      $4_1 = !($1811($1_1 | 0, 83544 | 0, 83740 | 0, 0 | 0) | 0);
      break label$1;
      }
      $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
      if (!$5_1) {
      break label$4
      }
      $4_1 = 0;
      label$7 : {
      $6_1 = $1811($5_1 | 0, 83544 | 0, 83688 | 0, 0 | 0) | 0;
      if (!$6_1) {
        break label$7
      }
      if (!((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 1 | 0)) {
        break label$1
      }
      $4_1 = $1824($6_1 | 0, HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0) | 0;
      break label$1;
      }
      $4_1 = 0;
      label$8 : {
      $6_1 = $1811($5_1 | 0, 83544 | 0, 83800 | 0, 0 | 0) | 0;
      if (!$6_1) {
        break label$8
      }
      if (!((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 1 | 0)) {
        break label$1
      }
      $4_1 = $1825($6_1 | 0, HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0) | 0;
      break label$1;
      }
      $4_1 = 0;
      $0_1 = $1811($5_1 | 0, 83544 | 0, 83592 | 0, 0 | 0) | 0;
      if (!$0_1) {
      break label$1
      }
      $1_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
      if (!$1_1) {
      break label$1
      }
      $4_1 = 0;
      $1_1 = $1811($1_1 | 0, 83544 | 0, 83592 | 0, 0 | 0) | 0;
      if (!$1_1) {
      break label$1
      }
      $4_1 = HEAP32[$2_1 >> 2] | 0;
      $115($3_1 + 8 | 0 | 0, 0 | 0, 56 | 0) | 0;
      HEAP8[($3_1 + 59 | 0) >> 0] = ($4_1 | 0) != (0 | 0);
      HEAP32[($3_1 + 16 | 0) >> 2] = -1;
      HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
      HEAP32[($3_1 + 4 | 0) >> 2] = $1_1;
      HEAP32[($3_1 + 52 | 0) >> 2] = 1;
      FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($1_1, $3_1 + 4 | 0, $4_1, 1);
      label$9 : {
      $1_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
      if (($1_1 | 0) != (1 | 0)) {
        break label$9
      }
      HEAP32[$2_1 >> 2] = (wasm2js_i32$0 = HEAP32[($3_1 + 20 | 0) >> 2] | 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = $4_1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
      }
      $4_1 = ($1_1 | 0) == (1 | 0);
      break label$1;
    }
    $4_1 = 0;
    }
    global$0 = $3_1 + 64 | 0;
    return $4_1 | 0;
  }
  
  function $1824($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0, $3_1 = 0;
    label$1 : {
    label$2 : while (1) {
      label$3 : {
      if ($1_1) {
        break label$3
      }
      return 0 | 0;
      }
      $2_1 = 0;
      $1_1 = $1811($1_1 | 0, 83544 | 0, 83688 | 0, 0 | 0) | 0;
      if (!$1_1) {
      break label$1
      }
      if ((HEAP32[($1_1 + 8 | 0) >> 2] | 0) & ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) ^ -1 | 0) | 0) {
      break label$1
      }
      label$4 : {
      if (!($1808(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0, 0 | 0) | 0)) {
        break label$4
      }
      return 1 | 0;
      }
      if (!((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 1 | 0)) {
      break label$1
      }
      $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
      if (!$3_1) {
      break label$1
      }
      label$5 : {
      $0_1 = $1811($3_1 | 0, 83544 | 0, 83688 | 0, 0 | 0) | 0;
      if (!$0_1) {
        break label$5
      }
      $1_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
      continue label$2;
      }
      break label$2;
    };
    $2_1 = 0;
    $0_1 = $1811($3_1 | 0, 83544 | 0, 83800 | 0, 0 | 0) | 0;
    if (!$0_1) {
      break label$1
    }
    $2_1 = $1825($0_1 | 0, HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0) | 0;
    }
    return $2_1 | 0;
  }
  
  function $1825($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0;
    $2_1 = 0;
    label$1 : {
    if (!$1_1) {
      break label$1
    }
    $1_1 = $1811($1_1 | 0, 83544 | 0, 83800 | 0, 0 | 0) | 0;
    if (!$1_1) {
      break label$1
    }
    if ((HEAP32[($1_1 + 8 | 0) >> 2] | 0) & ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) ^ -1 | 0) | 0) {
      break label$1
    }
    $2_1 = 0;
    if (!($1808(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0, 0 | 0) | 0)) {
      break label$1
    }
    $2_1 = $1808(HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
    }
    return $2_1 | 0;
  }
  
  function $1826($0_1, $1_1, $2_1, $3_1, $4_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    HEAP8[($1_1 + 53 | 0) >> 0] = 1;
    label$1 : {
    if (($3_1 | 0) != (HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0)) {
      break label$1
    }
    HEAP8[($1_1 + 52 | 0) >> 0] = 1;
    label$2 : {
      label$3 : {
      $3_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
      if ($3_1) {
        break label$3
      }
      HEAP32[($1_1 + 36 | 0) >> 2] = 1;
      HEAP32[($1_1 + 24 | 0) >> 2] = $4_1;
      HEAP32[($1_1 + 16 | 0) >> 2] = $2_1;
      if (($4_1 | 0) != (1 | 0)) {
        break label$1
      }
      if ((HEAP32[($1_1 + 48 | 0) >> 2] | 0 | 0) == (1 | 0)) {
        break label$2
      }
      break label$1;
      }
      label$4 : {
      if (($3_1 | 0) != ($2_1 | 0)) {
        break label$4
      }
      label$5 : {
        $3_1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
        if (($3_1 | 0) != (2 | 0)) {
        break label$5
        }
        HEAP32[($1_1 + 24 | 0) >> 2] = $4_1;
        $3_1 = $4_1;
      }
      if ((HEAP32[($1_1 + 48 | 0) >> 2] | 0 | 0) != (1 | 0)) {
        break label$1
      }
      if (($3_1 | 0) == (1 | 0)) {
        break label$2
      }
      break label$1;
      }
      HEAP32[($1_1 + 36 | 0) >> 2] = (HEAP32[($1_1 + 36 | 0) >> 2] | 0) + 1 | 0;
    }
    HEAP8[($1_1 + 54 | 0) >> 0] = 1;
    }
  }
  
  function $1827($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    label$1 : {
    if (($2_1 | 0) != (HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0)) {
      break label$1
    }
    if ((HEAP32[($1_1 + 28 | 0) >> 2] | 0 | 0) == (1 | 0)) {
      break label$1
    }
    HEAP32[($1_1 + 28 | 0) >> 2] = $3_1;
    }
  }
  
  function $1828($0_1, $1_1, $2_1, $3_1, $4_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    var $5_1 = 0, $6_1 = 0, $7_1 = 0;
    label$1 : {
    if (!($1808($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $4_1 | 0) | 0)) {
      break label$1
    }
    $1827($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
    return;
    }
    label$2 : {
    label$3 : {
      label$4 : {
      if (!($1808($0_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0, $4_1 | 0) | 0)) {
        break label$4
      }
      label$5 : {
        label$6 : {
        if (($2_1 | 0) == (HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0)) {
          break label$6
        }
        if (($2_1 | 0) != (HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0)) {
          break label$5
        }
        }
        if (($3_1 | 0) != (1 | 0)) {
        break label$2
        }
        HEAP32[($1_1 + 32 | 0) >> 2] = 1;
        return;
      }
      HEAP32[($1_1 + 32 | 0) >> 2] = $3_1;
      if ((HEAP32[($1_1 + 44 | 0) >> 2] | 0 | 0) == (4 | 0)) {
        break label$3
      }
      $5_1 = $0_1 + 16 | 0;
      $3_1 = $5_1 + ((HEAP32[($0_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0;
      $6_1 = 0;
      $7_1 = 0;
      label$7 : while (1) {
        label$8 : {
        label$9 : {
          label$10 : {
          label$11 : {
            if ($5_1 >>> 0 >= $3_1 >>> 0) {
            break label$11
            }
            HEAP16[($1_1 + 52 | 0) >> 1] = 0;
            $1829($5_1 | 0, $1_1 | 0, $2_1 | 0, $2_1 | 0, 1 | 0, $4_1 | 0);
            if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
            break label$11
            }
            if ((HEAPU8[($1_1 + 53 | 0) >> 0] | 0 | 0) != (1 | 0)) {
            break label$8
            }
            label$12 : {
            if ((HEAPU8[($1_1 + 52 | 0) >> 0] | 0 | 0) != (1 | 0)) {
              break label$12
            }
            if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) == (1 | 0)) {
              break label$9
            }
            $6_1 = 1;
            $7_1 = 1;
            if (!((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 2 | 0)) {
              break label$9
            }
            break label$8;
            }
            $6_1 = 1;
            if ((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 1 | 0) {
            break label$8
            }
            $5_1 = 3;
            break label$10;
          }
          $5_1 = $6_1 & 1 | 0 ? 3 : 4;
          }
          HEAP32[($1_1 + 44 | 0) >> 2] = $5_1;
          if ($7_1 & 1 | 0) {
          break label$2
          }
          break label$3;
        }
        HEAP32[($1_1 + 44 | 0) >> 2] = 3;
        break label$2;
        }
        $5_1 = $5_1 + 8 | 0;
        continue label$7;
      };
      }
      $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
      $6_1 = $0_1 + 16 | 0;
      $1830($6_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
      if ($5_1 >>> 0 < 2 >>> 0) {
      break label$2
      }
      $6_1 = $6_1 + ($5_1 << 3 | 0) | 0;
      $5_1 = $0_1 + 24 | 0;
      label$13 : {
      label$14 : {
        $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
        if ($0_1 & 2 | 0) {
        break label$14
        }
        if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
        break label$13
        }
      }
      label$15 : while (1) {
        if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
        break label$2
        }
        $1830($5_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
        $5_1 = $5_1 + 8 | 0;
        if ($5_1 >>> 0 < $6_1 >>> 0) {
        continue label$15
        }
        break label$2;
      };
      }
      label$16 : {
      if ($0_1 & 1 | 0) {
        break label$16
      }
      label$17 : while (1) {
        if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
        break label$2
        }
        if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) == (1 | 0)) {
        break label$2
        }
        $1830($5_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
        $5_1 = $5_1 + 8 | 0;
        if ($5_1 >>> 0 < $6_1 >>> 0) {
        continue label$17
        }
        break label$2;
      };
      }
      label$18 : while (1) {
      if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
        break label$2
      }
      label$19 : {
        if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
        break label$19
        }
        if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) == (1 | 0)) {
        break label$2
        }
      }
      $1830($5_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
      $5_1 = $5_1 + 8 | 0;
      if ($5_1 >>> 0 < $6_1 >>> 0) {
        continue label$18
      }
      break label$2;
      };
    }
    HEAP32[($1_1 + 20 | 0) >> 2] = $2_1;
    HEAP32[($1_1 + 40 | 0) >> 2] = (HEAP32[($1_1 + 40 | 0) >> 2] | 0) + 1 | 0;
    if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
      break label$2
    }
    if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) != (2 | 0)) {
      break label$2
    }
    HEAP8[($1_1 + 54 | 0) >> 0] = 1;
    return;
    }
  }
  
  function $1829($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    var $6_1 = 0, $7_1 = 0;
    $6_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    $7_1 = $6_1 >> 8 | 0;
    label$1 : {
    if (!($6_1 & 1 | 0)) {
      break label$1
    }
    $7_1 = $1820(HEAP32[$3_1 >> 2] | 0 | 0, $7_1 | 0) | 0;
    }
    $0_1 = HEAP32[$0_1 >> 2] | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1 + $7_1 | 0, $6_1 & 2 | 0 ? $4_1 : 2, $5_1);
  }
  
  function $1830($0_1, $1_1, $2_1, $3_1, $4_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    var $5_1 = 0, $6_1 = 0;
    $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    $6_1 = $5_1 >> 8 | 0;
    label$1 : {
    if (!($5_1 & 1 | 0)) {
      break label$1
    }
    $6_1 = $1820(HEAP32[$2_1 >> 2] | 0 | 0, $6_1 | 0) | 0;
    }
    $0_1 = HEAP32[$0_1 >> 2] | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1 + $6_1 | 0, $5_1 & 2 | 0 ? $3_1 : 2, $4_1);
  }
  
  function $1831($0_1, $1_1, $2_1, $3_1, $4_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    label$1 : {
    if (!($1808($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $4_1 | 0) | 0)) {
      break label$1
    }
    $1827($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
    return;
    }
    label$2 : {
    label$3 : {
      if (!($1808($0_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0, $4_1 | 0) | 0)) {
      break label$3
      }
      label$4 : {
      label$5 : {
        if (($2_1 | 0) == (HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0)) {
        break label$5
        }
        if (($2_1 | 0) != (HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0)) {
        break label$4
        }
      }
      if (($3_1 | 0) != (1 | 0)) {
        break label$2
      }
      HEAP32[($1_1 + 32 | 0) >> 2] = 1;
      return;
      }
      HEAP32[($1_1 + 32 | 0) >> 2] = $3_1;
      label$6 : {
      if ((HEAP32[($1_1 + 44 | 0) >> 2] | 0 | 0) == (4 | 0)) {
        break label$6
      }
      HEAP16[($1_1 + 52 | 0) >> 1] = 0;
      $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
      FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $2_1, 1, $4_1);
      label$7 : {
        if ((HEAPU8[($1_1 + 53 | 0) >> 0] | 0 | 0) != (1 | 0)) {
        break label$7
        }
        HEAP32[($1_1 + 44 | 0) >> 2] = 3;
        if (!(HEAPU8[($1_1 + 52 | 0) >> 0] | 0)) {
        break label$6
        }
        break label$2;
      }
      HEAP32[($1_1 + 44 | 0) >> 2] = 4;
      }
      HEAP32[($1_1 + 20 | 0) >> 2] = $2_1;
      HEAP32[($1_1 + 40 | 0) >> 2] = (HEAP32[($1_1 + 40 | 0) >> 2] | 0) + 1 | 0;
      if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
      break label$2
      }
      if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) != (2 | 0)) {
      break label$2
      }
      HEAP8[($1_1 + 54 | 0) >> 0] = 1;
      return;
    }
    $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1);
    }
  }
  
  function $1832($0_1, $1_1, $2_1, $3_1, $4_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    label$1 : {
    if (!($1808($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $4_1 | 0) | 0)) {
      break label$1
    }
    $1827($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
    return;
    }
    label$2 : {
    if (!($1808($0_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0, $4_1 | 0) | 0)) {
      break label$2
    }
    label$3 : {
      label$4 : {
      if (($2_1 | 0) == (HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0)) {
        break label$4
      }
      if (($2_1 | 0) != (HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0)) {
        break label$3
      }
      }
      if (($3_1 | 0) != (1 | 0)) {
      break label$2
      }
      HEAP32[($1_1 + 32 | 0) >> 2] = 1;
      return;
    }
    HEAP32[($1_1 + 20 | 0) >> 2] = $2_1;
    HEAP32[($1_1 + 32 | 0) >> 2] = $3_1;
    HEAP32[($1_1 + 40 | 0) >> 2] = (HEAP32[($1_1 + 40 | 0) >> 2] | 0) + 1 | 0;
    label$5 : {
      if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
      break label$5
      }
      if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) != (2 | 0)) {
      break label$5
      }
      HEAP8[($1_1 + 54 | 0) >> 0] = 1;
    }
    HEAP32[($1_1 + 44 | 0) >> 2] = 4;
    }
  }
  
  function $1833($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    var $7_1 = 0, $6_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
    label$1 : {
    if (!($1808($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0)) {
      break label$1
    }
    $1826($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
    return;
    }
    $6_1 = HEAPU8[($1_1 + 53 | 0) >> 0] | 0;
    $7_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    HEAP8[($1_1 + 53 | 0) >> 0] = 0;
    $8_1 = HEAPU8[($1_1 + 52 | 0) >> 0] | 0;
    HEAP8[($1_1 + 52 | 0) >> 0] = 0;
    $9_1 = $0_1 + 16 | 0;
    $1829($9_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0);
    $10_1 = HEAPU8[($1_1 + 52 | 0) >> 0] | 0;
    $8_1 = $8_1 | $10_1 | 0;
    $11_1 = HEAPU8[($1_1 + 53 | 0) >> 0] | 0;
    $6_1 = $6_1 | $11_1 | 0;
    label$2 : {
    if ($7_1 >>> 0 < 2 >>> 0) {
      break label$2
    }
    $9_1 = $9_1 + ($7_1 << 3 | 0) | 0;
    $7_1 = $0_1 + 24 | 0;
    label$3 : while (1) {
      if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
      break label$2
      }
      label$4 : {
      label$5 : {
        if (!($10_1 & 1 | 0)) {
        break label$5
        }
        if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) == (1 | 0)) {
        break label$2
        }
        if ((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 2 | 0) {
        break label$4
        }
        break label$2;
      }
      if (!($11_1 & 1 | 0)) {
        break label$4
      }
      if (!((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 1 | 0)) {
        break label$2
      }
      }
      HEAP16[($1_1 + 52 | 0) >> 1] = 0;
      $1829($7_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0);
      $11_1 = HEAPU8[($1_1 + 53 | 0) >> 0] | 0;
      $6_1 = ($11_1 | $6_1 | 0) & 1 | 0;
      $10_1 = HEAPU8[($1_1 + 52 | 0) >> 0] | 0;
      $8_1 = ($10_1 | $8_1 | 0) & 1 | 0;
      $7_1 = $7_1 + 8 | 0;
      if ($7_1 >>> 0 < $9_1 >>> 0) {
      continue label$3
      }
      break label$3;
    };
    }
    HEAP8[($1_1 + 53 | 0) >> 0] = $6_1 & 1 | 0;
    HEAP8[($1_1 + 52 | 0) >> 0] = $8_1 & 1 | 0;
  }
  
  function $1834($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    label$1 : {
    if (!($1808($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0)) {
      break label$1
    }
    $1826($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
    return;
    }
    $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1);
  }
  
  function $1835($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    label$1 : {
    if (!($1808($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0)) {
      break label$1
    }
    $1826($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
    }
  }
  
  function $1836($0_1) {
    $0_1 = $0_1 | 0;
    return $0_1 | 0;
  }
  
  function $1837($0_1) {
    $0_1 = $0_1 | 0;
    global$1 = $0_1;
  }
  
  function $1839() {
    global$3 = 65536;
    global$2 = (0 + 15 | 0) & -16 | 0;
  }
  
  function $1840() {
    return global$0 - global$2 | 0 | 0;
  }
  
  function $1841() {
    return global$3 | 0;
  }
  
  function $1842() {
    return global$2 | 0;
  }
  
  function $1843($0_1) {
    $0_1 = $0_1 | 0;
    global$0 = $0_1;
  }
  
  function $1844($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0;
    $1_1 = (global$0 - $0_1 | 0) & -16 | 0;
    global$0 = $1_1;
    return $1_1 | 0;
  }
  
  function $1845() {
    return global$0 | 0;
  }
  
  function $1846($0_1, $1_1, $2_1, $3_1, $3$hi, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $3$hi = $3$hi | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    var i64toi32_i32$0 = 0;
    i64toi32_i32$0 = $3$hi;
    FUNCTION_TABLE[$0_1 | 0]($1_1, $2_1, $3_1, i64toi32_i32$0, $4_1, $5_1);
  }
  
  function $1847($0_1, $1_1, $2_1, $2$hi, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $2$hi = $2$hi | 0;
    $3_1 = $3_1 | 0;
    var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = FUNCTION_TABLE[$0_1 | 0]($1_1, $2_1, i64toi32_i32$0, $3_1) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
    return i64toi32_i32$0 | 0;
  }
  
  function $1848($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $5$hi) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $5$hi = $5$hi | 0;
    var i64toi32_i32$0 = 0;
    i64toi32_i32$0 = $5$hi;
    return FUNCTION_TABLE[$0_1 | 0]($1_1, $2_1, $3_1, $4_1, $5_1, i64toi32_i32$0) | 0 | 0;
  }
  
  function $1849($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $5$hi, $6_1, $6$hi) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $5$hi = $5$hi | 0;
    $6_1 = $6_1 | 0;
    $6$hi = $6$hi | 0;
    var i64toi32_i32$0 = 0;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$0 = $6$hi;
    i64toi32_i32$0 = $5$hi;
    return FUNCTION_TABLE[$0_1 | 0]($1_1, $2_1, $3_1, $4_1, $5_1, i64toi32_i32$0, $6_1, $6$hi) | 0 | 0;
  }
  
  function $1850($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $6$hi, $7_1, $7$hi) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $6_1 = $6_1 | 0;
    $6$hi = $6$hi | 0;
    $7_1 = $7_1 | 0;
    $7$hi = $7$hi | 0;
    var i64toi32_i32$0 = 0;
    i64toi32_i32$0 = $6$hi;
    i64toi32_i32$0 = $7$hi;
    i64toi32_i32$0 = $6$hi;
    return FUNCTION_TABLE[$0_1 | 0]($1_1, $2_1, $3_1, $4_1, $5_1, $6_1, i64toi32_i32$0, $7_1, $7$hi) | 0 | 0;
  }
  
  function $1851($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $6_1 = $6_1 | 0;
    var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $18_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $11_1 = 0, $11$hi = 0, $14$hi = 0;
    $7_1 = $0_1;
    $8_1 = $1_1;
    $9_1 = $2_1;
    i64toi32_i32$0 = 0;
    $11_1 = $3_1;
    $11$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    $18_1 = 0;
    } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
    $18_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $14$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$0 = $11_1;
    i64toi32_i32$2 = $14$hi;
    i64toi32_i32$3 = $18_1;
    i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
    $1846($7_1 | 0, $8_1 | 0, $9_1 | 0, i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0, i64toi32_i32$2 | 0, $5_1 | 0, $6_1 | 0);
  }
  
  function $1852($0_1, $1_1, $2_1, $3_1, $4_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    var i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $17_1 = 0, $18_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0, $9$hi = 0, $12$hi = 0, $5_1 = 0, $5$hi = 0;
    $6_1 = $0_1;
    $7_1 = $1_1;
    i64toi32_i32$0 = 0;
    $9_1 = $2_1;
    $9$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = $3_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    $17_1 = 0;
    } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
    $17_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $12$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $9$hi;
    i64toi32_i32$0 = $9_1;
    i64toi32_i32$2 = $12$hi;
    i64toi32_i32$3 = $17_1;
    i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
    i64toi32_i32$2 = $1847($6_1 | 0, $7_1 | 0, i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0, i64toi32_i32$2 | 0, $4_1 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $5_1 = i64toi32_i32$2;
    $5$hi = i64toi32_i32$0;
    i64toi32_i32$1 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $18_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
    i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $18_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
    }
    $1837($18_1 | 0);
    i64toi32_i32$2 = $5$hi;
    return $5_1 | 0;
  }
  
  function $1853($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $6_1 = $6_1 | 0;
    var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $20_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $13_1 = 0, $13$hi = 0, $16$hi = 0;
    $7_1 = $0_1;
    $8_1 = $1_1;
    $9_1 = $2_1;
    $10_1 = $3_1;
    $11_1 = $4_1;
    i64toi32_i32$0 = 0;
    $13_1 = $5_1;
    $13$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = $6_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    $20_1 = 0;
    } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
    $20_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $16$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $13$hi;
    i64toi32_i32$0 = $13_1;
    i64toi32_i32$2 = $16$hi;
    i64toi32_i32$3 = $20_1;
    i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
    return $1848($7_1 | 0, $8_1 | 0, $9_1 | 0, $10_1 | 0, $11_1 | 0, i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0, i64toi32_i32$2 | 0) | 0 | 0;
  }
  
  function $1854($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $6_1 = $6_1 | 0;
    $7_1 = $7_1 | 0;
    $8_1 = $8_1 | 0;
    var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $29_1 = 0, $30_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $15_1 = 0, $15$hi = 0, $18$hi = 0, $19_1 = 0, $19$hi = 0, $21_1 = 0, $21$hi = 0, $24$hi = 0, $25_1 = 0, $25$hi = 0;
    $9_1 = $0_1;
    $10_1 = $1_1;
    $11_1 = $2_1;
    $12_1 = $3_1;
    $13_1 = $4_1;
    i64toi32_i32$0 = 0;
    $15_1 = $5_1;
    $15$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = $6_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    $29_1 = 0;
    } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
    $29_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $18$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $15$hi;
    i64toi32_i32$0 = $15_1;
    i64toi32_i32$2 = $18$hi;
    i64toi32_i32$3 = $29_1;
    i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
    $19_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
    $19$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    $21_1 = $7_1;
    $21$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = $8_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    $30_1 = 0;
    } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
    $30_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    }
    $24$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $21$hi;
    i64toi32_i32$2 = $21_1;
    i64toi32_i32$1 = $24$hi;
    i64toi32_i32$3 = $30_1;
    i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $25_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $25$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $19$hi;
    i64toi32_i32$2 = $25$hi;
    return $1849($9_1 | 0, $10_1 | 0, $11_1 | 0, $12_1 | 0, $13_1 | 0, $19_1 | 0, i64toi32_i32$1 | 0, $25_1 | 0, i64toi32_i32$2 | 0) | 0 | 0;
  }
  
  function $1855($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    $6_1 = $6_1 | 0;
    $7_1 = $7_1 | 0;
    $8_1 = $8_1 | 0;
    $9_1 = $9_1 | 0;
    var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $31_1 = 0, $32_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $17_1 = 0, $17$hi = 0, $20$hi = 0, $21_1 = 0, $21$hi = 0, $23_1 = 0, $23$hi = 0, $26$hi = 0, $27_1 = 0, $27$hi = 0;
    $10_1 = $0_1;
    $11_1 = $1_1;
    $12_1 = $2_1;
    $13_1 = $3_1;
    $14_1 = $4_1;
    $15_1 = $5_1;
    i64toi32_i32$0 = 0;
    $17_1 = $6_1;
    $17$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    $31_1 = 0;
    } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
    $31_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $20$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $17$hi;
    i64toi32_i32$0 = $17_1;
    i64toi32_i32$2 = $20$hi;
    i64toi32_i32$3 = $31_1;
    i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
    $21_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
    $21$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    $23_1 = $8_1;
    $23$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = $9_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    $32_1 = 0;
    } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
    $32_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    }
    $26$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $23$hi;
    i64toi32_i32$2 = $23_1;
    i64toi32_i32$1 = $26$hi;
    i64toi32_i32$3 = $32_1;
    i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $27_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $27$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $21$hi;
    i64toi32_i32$2 = $27$hi;
    return $1850($10_1 | 0, $11_1 | 0, $12_1 | 0, $13_1 | 0, $14_1 | 0, $15_1 | 0, $21_1 | 0, i64toi32_i32$1 | 0, $27_1 | 0, i64toi32_i32$2 | 0) | 0 | 0;
  }
  
  function $1856($0_1, $1_1, $2_1, $3_1, $3$hi, $4_1, $4$hi) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $3$hi = $3$hi | 0;
    $4_1 = $4_1 | 0;
    $4$hi = $4$hi | 0;
    var i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $18_1 = 0, $19_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0, $12_1 = 0, $14_1 = 0;
    $5_1 = $0_1;
    $6_1 = $1_1;
    $7_1 = $2_1;
    i64toi32_i32$0 = $3$hi;
    $9_1 = $3_1;
    i64toi32_i32$2 = $3_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $18_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $18_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $12_1 = $18_1;
    i64toi32_i32$1 = $4$hi;
    $14_1 = $4_1;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $19_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $19_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    fimport$25($5_1 | 0, $6_1 | 0, $7_1 | 0, $9_1 | 0, $12_1 | 0, $14_1 | 0, $19_1 | 0);
  }
  
  function $1857($0_1, $1_1, $1$hi, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1$hi = $1$hi | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $12_1 = 0, $4_1 = 0, $6_1 = 0, i64toi32_i32$2 = 0;
    $4_1 = $0_1;
    i64toi32_i32$0 = $1$hi;
    $6_1 = $1_1;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $12_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $12_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    return fimport$26($4_1 | 0, $6_1 | 0, $12_1 | 0, $2_1 | 0, $3_1 | 0) | 0 | 0;
  }
  
  function _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE(var$0, var$0$hi, var$1, var$1$hi) {
    var$0 = var$0 | 0;
    var$0$hi = var$0$hi | 0;
    var$1 = var$1 | 0;
    var$1$hi = var$1$hi | 0;
    var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, var$2 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, var$3 = 0, var$4 = 0, var$5 = 0, $21_1 = 0, $22_1 = 0, var$6 = 0, $24_1 = 0, $17_1 = 0, $18_1 = 0, $23_1 = 0, $29_1 = 0, $45_1 = 0, $56$hi = 0, $62$hi = 0;
    i64toi32_i32$0 = var$1$hi;
    var$2 = var$1;
    var$4 = var$2 >>> 16 | 0;
    i64toi32_i32$0 = var$0$hi;
    var$3 = var$0;
    var$5 = var$3 >>> 16 | 0;
    $17_1 = Math_imul(var$4, var$5);
    $18_1 = var$2;
    i64toi32_i32$2 = var$3;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $21_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $21_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $23_1 = $17_1 + Math_imul($18_1, $21_1) | 0;
    i64toi32_i32$1 = var$1$hi;
    i64toi32_i32$0 = var$1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $22_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $22_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $29_1 = $23_1 + Math_imul($22_1, var$3) | 0;
    var$2 = var$2 & 65535 | 0;
    var$3 = var$3 & 65535 | 0;
    var$6 = Math_imul(var$2, var$3);
    var$2 = (var$6 >>> 16 | 0) + Math_imul(var$2, var$5) | 0;
    $45_1 = $29_1 + (var$2 >>> 16 | 0) | 0;
    var$2 = (var$2 & 65535 | 0) + Math_imul(var$4, var$3) | 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = $45_1 + (var$2 >>> 16 | 0) | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    $24_1 = 0;
    } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
    $24_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    }
    $56$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $62$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $56$hi;
    i64toi32_i32$2 = $24_1;
    i64toi32_i32$1 = $62$hi;
    i64toi32_i32$3 = var$2 << 16 | 0 | (var$6 & 65535 | 0) | 0;
    i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    i64toi32_i32$2 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
    return i64toi32_i32$2 | 0;
  }
  
  function _ZN17compiler_builtins3int4sdiv3Div3div17he78fc483e41d7ec7E(var$0, var$0$hi, var$1, var$1$hi) {
    var$0 = var$0 | 0;
    var$0$hi = var$0$hi | 0;
    var$1 = var$1 | 0;
    var$1$hi = var$1$hi | 0;
    var i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, var$2 = 0, var$2$hi = 0, i64toi32_i32$6 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $7$hi = 0, $9_1 = 0, $9$hi = 0, $14$hi = 0, $16$hi = 0, $17_1 = 0, $17$hi = 0, $23$hi = 0;
    i64toi32_i32$0 = var$0$hi;
    i64toi32_i32$2 = var$0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 63;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
    $21_1 = i64toi32_i32$0 >> i64toi32_i32$4 | 0;
    } else {
    i64toi32_i32$1 = i64toi32_i32$0 >> i64toi32_i32$4 | 0;
    $21_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    var$2 = $21_1;
    var$2$hi = i64toi32_i32$1;
    i64toi32_i32$1 = var$0$hi;
    i64toi32_i32$1 = var$2$hi;
    i64toi32_i32$0 = var$2;
    i64toi32_i32$2 = var$0$hi;
    i64toi32_i32$3 = var$0;
    i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
    $7$hi = i64toi32_i32$2;
    i64toi32_i32$2 = i64toi32_i32$1;
    i64toi32_i32$2 = $7$hi;
    i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
    i64toi32_i32$0 = var$2$hi;
    i64toi32_i32$3 = var$2;
    i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
    i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
    i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
    $9_1 = i64toi32_i32$4;
    $9$hi = i64toi32_i32$5;
    i64toi32_i32$5 = var$1$hi;
    i64toi32_i32$2 = var$1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 63;
    i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
    $22_1 = i64toi32_i32$5 >> i64toi32_i32$0 | 0;
    } else {
    i64toi32_i32$1 = i64toi32_i32$5 >> i64toi32_i32$0 | 0;
    $22_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$0 | 0) | 0;
    }
    var$2 = $22_1;
    var$2$hi = i64toi32_i32$1;
    i64toi32_i32$1 = var$1$hi;
    i64toi32_i32$1 = var$2$hi;
    i64toi32_i32$5 = var$2;
    i64toi32_i32$2 = var$1$hi;
    i64toi32_i32$3 = var$1;
    i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
    $14$hi = i64toi32_i32$2;
    i64toi32_i32$2 = i64toi32_i32$1;
    i64toi32_i32$2 = $14$hi;
    i64toi32_i32$1 = i64toi32_i32$5 ^ i64toi32_i32$3 | 0;
    i64toi32_i32$5 = var$2$hi;
    i64toi32_i32$3 = var$2;
    i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
    i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
    i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
    $16$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $9$hi;
    i64toi32_i32$1 = $16$hi;
    i64toi32_i32$1 = __wasm_i64_udiv($9_1 | 0, i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0) | 0;
    i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
    $17_1 = i64toi32_i32$1;
    $17$hi = i64toi32_i32$4;
    i64toi32_i32$4 = var$1$hi;
    i64toi32_i32$4 = var$0$hi;
    i64toi32_i32$4 = var$1$hi;
    i64toi32_i32$2 = var$1;
    i64toi32_i32$1 = var$0$hi;
    i64toi32_i32$3 = var$0;
    i64toi32_i32$1 = i64toi32_i32$4 ^ i64toi32_i32$1 | 0;
    i64toi32_i32$4 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 63;
    i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
    $23_1 = i64toi32_i32$1 >> i64toi32_i32$5 | 0;
    } else {
    i64toi32_i32$2 = i64toi32_i32$1 >> i64toi32_i32$5 | 0;
    $23_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$5 | 0) | 0;
    }
    var$0 = $23_1;
    var$0$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $17$hi;
    i64toi32_i32$1 = $17_1;
    i64toi32_i32$4 = var$0$hi;
    i64toi32_i32$3 = var$0;
    i64toi32_i32$4 = i64toi32_i32$2 ^ i64toi32_i32$4 | 0;
    $23$hi = i64toi32_i32$4;
    i64toi32_i32$4 = var$0$hi;
    i64toi32_i32$4 = $23$hi;
    i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
    i64toi32_i32$1 = var$0$hi;
    i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
    i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0;
    i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
    i64toi32_i32$0 = i64toi32_i32$4 - i64toi32_i32$0 | 0;
    i64toi32_i32$2 = i64toi32_i32$5;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
    return i64toi32_i32$2 | 0;
  }
  
  function _ZN17compiler_builtins3int4sdiv3Mod4mod_17h2cbb7bbf36e41d68E(var$0, var$0$hi, var$1, var$1$hi) {
    var$0 = var$0 | 0;
    var$0$hi = var$0$hi | 0;
    var$1 = var$1 | 0;
    var$1$hi = var$1$hi | 0;
    var i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, var$2$hi = 0, i64toi32_i32$6 = 0, var$2 = 0, $20_1 = 0, $21_1 = 0, $7$hi = 0, $9_1 = 0, $9$hi = 0, $14$hi = 0, $16$hi = 0, $17$hi = 0, $19$hi = 0;
    i64toi32_i32$0 = var$0$hi;
    i64toi32_i32$2 = var$0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 63;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
    $20_1 = i64toi32_i32$0 >> i64toi32_i32$4 | 0;
    } else {
    i64toi32_i32$1 = i64toi32_i32$0 >> i64toi32_i32$4 | 0;
    $20_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    var$2 = $20_1;
    var$2$hi = i64toi32_i32$1;
    i64toi32_i32$1 = var$0$hi;
    i64toi32_i32$1 = var$2$hi;
    i64toi32_i32$0 = var$2;
    i64toi32_i32$2 = var$0$hi;
    i64toi32_i32$3 = var$0;
    i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
    $7$hi = i64toi32_i32$2;
    i64toi32_i32$2 = i64toi32_i32$1;
    i64toi32_i32$2 = $7$hi;
    i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
    i64toi32_i32$0 = var$2$hi;
    i64toi32_i32$3 = var$2;
    i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
    i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
    i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
    $9_1 = i64toi32_i32$4;
    $9$hi = i64toi32_i32$5;
    i64toi32_i32$5 = var$1$hi;
    i64toi32_i32$2 = var$1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 63;
    i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
    $21_1 = i64toi32_i32$5 >> i64toi32_i32$0 | 0;
    } else {
    i64toi32_i32$1 = i64toi32_i32$5 >> i64toi32_i32$0 | 0;
    $21_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$0 | 0) | 0;
    }
    var$0 = $21_1;
    var$0$hi = i64toi32_i32$1;
    i64toi32_i32$1 = var$1$hi;
    i64toi32_i32$1 = var$0$hi;
    i64toi32_i32$5 = var$0;
    i64toi32_i32$2 = var$1$hi;
    i64toi32_i32$3 = var$1;
    i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
    $14$hi = i64toi32_i32$2;
    i64toi32_i32$2 = i64toi32_i32$1;
    i64toi32_i32$2 = $14$hi;
    i64toi32_i32$1 = i64toi32_i32$5 ^ i64toi32_i32$3 | 0;
    i64toi32_i32$5 = var$0$hi;
    i64toi32_i32$3 = var$0;
    i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
    i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
    i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
    $16$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $9$hi;
    i64toi32_i32$1 = $16$hi;
    i64toi32_i32$1 = __wasm_i64_urem($9_1 | 0, i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0) | 0;
    i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
    $17$hi = i64toi32_i32$4;
    i64toi32_i32$4 = var$2$hi;
    i64toi32_i32$4 = $17$hi;
    i64toi32_i32$2 = i64toi32_i32$1;
    i64toi32_i32$1 = var$2$hi;
    i64toi32_i32$3 = var$2;
    i64toi32_i32$1 = i64toi32_i32$4 ^ i64toi32_i32$1 | 0;
    $19$hi = i64toi32_i32$1;
    i64toi32_i32$1 = var$2$hi;
    i64toi32_i32$1 = $19$hi;
    i64toi32_i32$4 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
    i64toi32_i32$2 = var$2$hi;
    i64toi32_i32$5 = i64toi32_i32$4 - i64toi32_i32$3 | 0;
    i64toi32_i32$6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0;
    i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
    i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
    i64toi32_i32$4 = i64toi32_i32$5;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
    return i64toi32_i32$4 | 0;
  }
  
  function _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0, var$0$hi, var$1, var$1$hi) {
    var$0 = var$0 | 0;
    var$0$hi = var$0$hi | 0;
    var$1 = var$1 | 0;
    var$1$hi = var$1$hi | 0;
    var i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, var$2 = 0, var$3 = 0, var$4 = 0, var$5 = 0, var$5$hi = 0, var$6 = 0, var$6$hi = 0, i64toi32_i32$6 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, var$8$hi = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, var$7$hi = 0, $49_1 = 0, $63$hi = 0, $65_1 = 0, $65$hi = 0, $120$hi = 0, $129$hi = 0, $134$hi = 0, var$8 = 0, $140_1 = 0, $140$hi = 0, $142$hi = 0, $144_1 = 0, $144$hi = 0, $151_1 = 0, $151$hi = 0, $154$hi = 0, var$7 = 0, $165$hi = 0;
    label$1 : {
    label$2 : {
      label$3 : {
      label$4 : {
        label$5 : {
        label$6 : {
          label$7 : {
          label$8 : {
            label$9 : {
            label$10 : {
              label$11 : {
              i64toi32_i32$0 = var$0$hi;
              i64toi32_i32$2 = var$0;
              i64toi32_i32$1 = 0;
              i64toi32_i32$3 = 32;
              i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
                i64toi32_i32$1 = 0;
                $37_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
              } else {
                i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
                $37_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
              }
              var$2 = $37_1;
              if (var$2) {
                i64toi32_i32$1 = var$1$hi;
                var$3 = var$1;
                if (!var$3) {
                break label$11
                }
                i64toi32_i32$0 = var$3;
                i64toi32_i32$2 = 0;
                i64toi32_i32$3 = 32;
                i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
                if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
                i64toi32_i32$2 = 0;
                $38_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
                } else {
                i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
                $38_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
                }
                var$4 = $38_1;
                if (!var$4) {
                break label$9
                }
                var$2 = Math_clz32(var$4) - Math_clz32(var$2) | 0;
                if (var$2 >>> 0 <= 31 >>> 0) {
                break label$8
                }
                break label$2;
              }
              i64toi32_i32$2 = var$1$hi;
              i64toi32_i32$1 = var$1;
              i64toi32_i32$0 = 1;
              i64toi32_i32$3 = 0;
              if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
                break label$2
              }
              i64toi32_i32$1 = var$0$hi;
              var$2 = var$0;
              i64toi32_i32$1 = i64toi32_i32$2;
              i64toi32_i32$1 = i64toi32_i32$2;
              var$3 = var$1;
              var$2 = (var$2 >>> 0) / (var$3 >>> 0) | 0;
              i64toi32_i32$1 = 0;
              __wasm_intrinsics_temp_i64 = var$0 - Math_imul(var$2, var$3) | 0;
              __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
              i64toi32_i32$1 = 0;
              i64toi32_i32$2 = var$2;
              i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
              return i64toi32_i32$2 | 0;
              }
              i64toi32_i32$2 = var$1$hi;
              i64toi32_i32$3 = var$1;
              i64toi32_i32$1 = 0;
              i64toi32_i32$0 = 32;
              i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
              i64toi32_i32$1 = 0;
              $39_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
              } else {
              i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
              $39_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
              }
              var$3 = $39_1;
              i64toi32_i32$1 = var$0$hi;
              if (!var$0) {
              break label$7
              }
              if (!var$3) {
              break label$6
              }
              var$4 = var$3 + -1 | 0;
              if (var$4 & var$3 | 0) {
              break label$6
              }
              i64toi32_i32$1 = 0;
              i64toi32_i32$2 = var$4 & var$2 | 0;
              i64toi32_i32$3 = 0;
              i64toi32_i32$0 = 32;
              i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
              i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
              $40_1 = 0;
              } else {
              i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
              $40_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
              }
              $63$hi = i64toi32_i32$3;
              i64toi32_i32$3 = var$0$hi;
              i64toi32_i32$1 = var$0;
              i64toi32_i32$2 = 0;
              i64toi32_i32$0 = -1;
              i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
              $65_1 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
              $65$hi = i64toi32_i32$2;
              i64toi32_i32$2 = $63$hi;
              i64toi32_i32$3 = $40_1;
              i64toi32_i32$1 = $65$hi;
              i64toi32_i32$0 = $65_1;
              i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
              __wasm_intrinsics_temp_i64 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
              __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
              i64toi32_i32$1 = 0;
              i64toi32_i32$3 = var$2 >>> ((__wasm_ctz_i32(var$3 | 0) | 0) & 31 | 0) | 0;
              i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
              return i64toi32_i32$3 | 0;
            }
            }
            var$4 = var$3 + -1 | 0;
            if (!(var$4 & var$3 | 0)) {
            break label$5
            }
            var$2 = (Math_clz32(var$3) + 33 | 0) - Math_clz32(var$2) | 0;
            var$3 = 0 - var$2 | 0;
            break label$3;
          }
          var$3 = 63 - var$2 | 0;
          var$2 = var$2 + 1 | 0;
          break label$3;
          }
          var$4 = (var$2 >>> 0) / (var$3 >>> 0) | 0;
          i64toi32_i32$3 = 0;
          i64toi32_i32$2 = var$2 - Math_imul(var$4, var$3) | 0;
          i64toi32_i32$1 = 0;
          i64toi32_i32$0 = 32;
          i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
          if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
          i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
          $41_1 = 0;
          } else {
          i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
          $41_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
          }
          __wasm_intrinsics_temp_i64 = $41_1;
          __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
          i64toi32_i32$1 = 0;
          i64toi32_i32$2 = var$4;
          i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
          return i64toi32_i32$2 | 0;
        }
        var$2 = Math_clz32(var$3) - Math_clz32(var$2) | 0;
        if (var$2 >>> 0 < 31 >>> 0) {
          break label$4
        }
        break label$2;
        }
        i64toi32_i32$2 = var$0$hi;
        i64toi32_i32$2 = 0;
        __wasm_intrinsics_temp_i64 = var$4 & var$0 | 0;
        __wasm_intrinsics_temp_i64$hi = i64toi32_i32$2;
        if ((var$3 | 0) == (1 | 0)) {
        break label$1
        }
        i64toi32_i32$2 = var$0$hi;
        i64toi32_i32$2 = 0;
        $120$hi = i64toi32_i32$2;
        i64toi32_i32$2 = var$0$hi;
        i64toi32_i32$3 = var$0;
        i64toi32_i32$1 = $120$hi;
        i64toi32_i32$0 = __wasm_ctz_i32(var$3 | 0) | 0;
        i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = 0;
        $42_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
        } else {
        i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
        $42_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
        }
        i64toi32_i32$3 = $42_1;
        i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
        return i64toi32_i32$3 | 0;
      }
      var$3 = 63 - var$2 | 0;
      var$2 = var$2 + 1 | 0;
      }
      i64toi32_i32$3 = var$0$hi;
      i64toi32_i32$3 = 0;
      $129$hi = i64toi32_i32$3;
      i64toi32_i32$3 = var$0$hi;
      i64toi32_i32$2 = var$0;
      i64toi32_i32$1 = $129$hi;
      i64toi32_i32$0 = var$2 & 63 | 0;
      i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $43_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
      } else {
      i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
      $43_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
      }
      var$5 = $43_1;
      var$5$hi = i64toi32_i32$1;
      i64toi32_i32$1 = var$0$hi;
      i64toi32_i32$1 = 0;
      $134$hi = i64toi32_i32$1;
      i64toi32_i32$1 = var$0$hi;
      i64toi32_i32$3 = var$0;
      i64toi32_i32$2 = $134$hi;
      i64toi32_i32$0 = var$3 & 63 | 0;
      i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
      $44_1 = 0;
      } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
      $44_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
      }
      var$0 = $44_1;
      var$0$hi = i64toi32_i32$2;
      label$13 : {
      if (var$2) {
        i64toi32_i32$2 = var$1$hi;
        i64toi32_i32$1 = var$1;
        i64toi32_i32$3 = -1;
        i64toi32_i32$0 = -1;
        i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
        i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
        }
        var$8 = i64toi32_i32$4;
        var$8$hi = i64toi32_i32$5;
        label$15 : while (1) {
        i64toi32_i32$5 = var$5$hi;
        i64toi32_i32$2 = var$5;
        i64toi32_i32$1 = 0;
        i64toi32_i32$0 = 1;
        i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
          i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
          $45_1 = 0;
        } else {
          i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
          $45_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
        }
        $140_1 = $45_1;
        $140$hi = i64toi32_i32$1;
        i64toi32_i32$1 = var$0$hi;
        i64toi32_i32$5 = var$0;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 63;
        i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
          i64toi32_i32$2 = 0;
          $46_1 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
        } else {
          i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
          $46_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
        }
        $142$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $140$hi;
        i64toi32_i32$1 = $140_1;
        i64toi32_i32$5 = $142$hi;
        i64toi32_i32$0 = $46_1;
        i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
        var$5 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
        var$5$hi = i64toi32_i32$5;
        $144_1 = var$5;
        $144$hi = i64toi32_i32$5;
        i64toi32_i32$5 = var$8$hi;
        i64toi32_i32$5 = var$5$hi;
        i64toi32_i32$5 = var$8$hi;
        i64toi32_i32$2 = var$8;
        i64toi32_i32$1 = var$5$hi;
        i64toi32_i32$0 = var$5;
        i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
        i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
        i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
        i64toi32_i32$5 = i64toi32_i32$3;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 63;
        i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
          i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
          $47_1 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
        } else {
          i64toi32_i32$2 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
          $47_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
        }
        var$6 = $47_1;
        var$6$hi = i64toi32_i32$2;
        i64toi32_i32$2 = var$1$hi;
        i64toi32_i32$2 = var$6$hi;
        i64toi32_i32$4 = var$6;
        i64toi32_i32$5 = var$1$hi;
        i64toi32_i32$0 = var$1;
        i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
        $151_1 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
        $151$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $144$hi;
        i64toi32_i32$2 = $144_1;
        i64toi32_i32$4 = $151$hi;
        i64toi32_i32$0 = $151_1;
        i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
        i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
        i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
        i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$3 | 0;
        var$5 = i64toi32_i32$1;
        var$5$hi = i64toi32_i32$3;
        i64toi32_i32$3 = var$0$hi;
        i64toi32_i32$5 = var$0;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 1;
        i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
          i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
          $48_1 = 0;
        } else {
          i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
          $48_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
        }
        $154$hi = i64toi32_i32$2;
        i64toi32_i32$2 = var$7$hi;
        i64toi32_i32$2 = $154$hi;
        i64toi32_i32$3 = $48_1;
        i64toi32_i32$5 = var$7$hi;
        i64toi32_i32$0 = var$7;
        i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
        var$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
        var$0$hi = i64toi32_i32$5;
        i64toi32_i32$5 = var$6$hi;
        i64toi32_i32$2 = var$6;
        i64toi32_i32$3 = 0;
        i64toi32_i32$0 = 1;
        i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
        var$6 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
        var$6$hi = i64toi32_i32$3;
        var$7 = var$6;
        var$7$hi = i64toi32_i32$3;
        var$2 = var$2 + -1 | 0;
        if (var$2) {
          continue label$15
        }
        break label$15;
        };
        break label$13;
      }
      }
      i64toi32_i32$3 = var$5$hi;
      __wasm_intrinsics_temp_i64 = var$5;
      __wasm_intrinsics_temp_i64$hi = i64toi32_i32$3;
      i64toi32_i32$3 = var$0$hi;
      i64toi32_i32$5 = var$0;
      i64toi32_i32$2 = 0;
      i64toi32_i32$0 = 1;
      i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
      $49_1 = 0;
      } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
      $49_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
      }
      $165$hi = i64toi32_i32$2;
      i64toi32_i32$2 = var$6$hi;
      i64toi32_i32$2 = $165$hi;
      i64toi32_i32$3 = $49_1;
      i64toi32_i32$5 = var$6$hi;
      i64toi32_i32$0 = var$6;
      i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
      i64toi32_i32$3 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
      i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
      return i64toi32_i32$3 | 0;
    }
    i64toi32_i32$3 = var$0$hi;
    __wasm_intrinsics_temp_i64 = var$0;
    __wasm_intrinsics_temp_i64$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    var$0 = 0;
    var$0$hi = i64toi32_i32$3;
    }
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$5 = var$0;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$3;
    return i64toi32_i32$5 | 0;
  }
  
  function __wasm_ctz_i32(var$0) {
    var$0 = var$0 | 0;
    if (var$0) {
    return 31 - Math_clz32((var$0 + -1 | 0) ^ var$0 | 0) | 0 | 0
    }
    return 32 | 0;
  }
  
  function __wasm_i64_mul(var$0, var$0$hi, var$1, var$1$hi) {
    var$0 = var$0 | 0;
    var$0$hi = var$0$hi | 0;
    var$1 = var$1 | 0;
    var$1$hi = var$1$hi | 0;
    var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
    i64toi32_i32$0 = var$0$hi;
    i64toi32_i32$0 = var$1$hi;
    i64toi32_i32$0 = var$0$hi;
    i64toi32_i32$1 = var$1$hi;
    i64toi32_i32$1 = _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
    return i64toi32_i32$1 | 0;
  }
  
  function __wasm_i64_sdiv(var$0, var$0$hi, var$1, var$1$hi) {
    var$0 = var$0 | 0;
    var$0$hi = var$0$hi | 0;
    var$1 = var$1 | 0;
    var$1$hi = var$1$hi | 0;
    var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
    i64toi32_i32$0 = var$0$hi;
    i64toi32_i32$0 = var$1$hi;
    i64toi32_i32$0 = var$0$hi;
    i64toi32_i32$1 = var$1$hi;
    i64toi32_i32$1 = _ZN17compiler_builtins3int4sdiv3Div3div17he78fc483e41d7ec7E(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
    return i64toi32_i32$1 | 0;
  }
  
  function __wasm_i64_srem(var$0, var$0$hi, var$1, var$1$hi) {
    var$0 = var$0 | 0;
    var$0$hi = var$0$hi | 0;
    var$1 = var$1 | 0;
    var$1$hi = var$1$hi | 0;
    var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
    i64toi32_i32$0 = var$0$hi;
    i64toi32_i32$0 = var$1$hi;
    i64toi32_i32$0 = var$0$hi;
    i64toi32_i32$1 = var$1$hi;
    i64toi32_i32$1 = _ZN17compiler_builtins3int4sdiv3Mod4mod_17h2cbb7bbf36e41d68E(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
    return i64toi32_i32$1 | 0;
  }
  
  function __wasm_i64_udiv(var$0, var$0$hi, var$1, var$1$hi) {
    var$0 = var$0 | 0;
    var$0$hi = var$0$hi | 0;
    var$1 = var$1 | 0;
    var$1$hi = var$1$hi | 0;
    var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
    i64toi32_i32$0 = var$0$hi;
    i64toi32_i32$0 = var$1$hi;
    i64toi32_i32$0 = var$0$hi;
    i64toi32_i32$1 = var$1$hi;
    i64toi32_i32$1 = _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
    return i64toi32_i32$1 | 0;
  }
  
  function __wasm_rotl_i32(var$0, var$1) {
    var$0 = var$0 | 0;
    var$1 = var$1 | 0;
    var var$2 = 0;
    var$2 = var$1 & 31 | 0;
    var$1 = (0 - var$1 | 0) & 31 | 0;
    return ((-1 >>> var$2 | 0) & var$0 | 0) << var$2 | 0 | (((-1 << var$1 | 0) & var$0 | 0) >>> var$1 | 0) | 0 | 0;
  }
  
  function __wasm_i64_urem(var$0, var$0$hi, var$1, var$1$hi) {
    var$0 = var$0 | 0;
    var$0$hi = var$0$hi | 0;
    var$1 = var$1 | 0;
    var$1$hi = var$1$hi | 0;
    var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
    i64toi32_i32$0 = var$0$hi;
    i64toi32_i32$0 = var$1$hi;
    i64toi32_i32$0 = var$0$hi;
    i64toi32_i32$1 = var$1$hi;
    i64toi32_i32$1 = _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    i64toi32_i32$0 = __wasm_intrinsics_temp_i64$hi;
    i64toi32_i32$1 = __wasm_intrinsics_temp_i64;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
    return i64toi32_i32$1 | 0;
  }
  
  // EMSCRIPTEN_END_FUNCS
  ;
  bufferView = HEAPU8;
  initActiveSegments(imports);
  var FUNCTION_TABLE = Table([null, $3, $7, $10, $13, $21, $23, $25, $37, $28, $80, $87, fimport$12, $164, $165, $167, $168, $169, $171, $172, $173, $174, $181, $183, $185, $186, $187, $189, $191, $190, $192, $217, $219, $218, $220, $232, $233, $235, $236, $237, $238, $239, $240, $241, $246, $248, $250, $251, $252, $254, $256, $255, $257, $276, $278, $277, $279, $162, $163, $230, $231, $443, $444, $143, $141, $139, $450, $140, $451, $497, $498, $499, $500, $502, $503, $510, $511, $512, $513, $514, $516, $517, $519, $521, $522, $527, $528, $529, $531, $532, $575, $599, $600, $603, $128, $964, $1243, $1265, $1273, $1285, $1395, $1398, $1402, $1405, $1408, $1411, $1413, $1415, $1417, $1419, $1421, $1423, $1425, $1427, $1254, $1258, $1281, $1302, $1303, $1304, $1305, $1306, $1307, $1308, $1309, $1310, $1311, $1131, $1321, $1322, $1325, $1328, $1329, $1332, $1333, $1335, $1374, $1375, $1378, $1380, $1382, $1384, $1388, $1376, $1377, $1379, $1381, $1383, $1385, $1389, $652, $1280, $1286, $1287, $1288, $1289, $1290, $1291, $1293, $1294, $1296, $1297, $1298, $1299, $1300, $1312, $1313, $1314, $1315, $1316, $1317, $1318, $1319, $1336, $1337, $1339, $1341, $1342, $1343, $1344, $1346, $1347, $1348, $1349, $1350, $1351, $1352, $1353, $1354, $1355, $1356, $1358, $1360, $1361, $1362, $1363, $1365, $1366, $1367, $1368, $1369, $1370, $1371, $1372, $1373, $651, $653, $654, $655, $658, $659, $660, $661, $662, $666, $1430, $667, $681, $690, $693, $696, $699, $702, $705, $710, $713, $716, $1431, $723, $733, $738, $740, $742, $744, $746, $748, $752, $754, $756, $1432, $773, $781, $788, $790, $792, $794, $803, $805, $1433, $809, $818, $822, $824, $826, $828, $834, $836, $1434, $1436, $845, $846, $847, $848, $850, $852, $855, $1393, $1400, $1406, $1420, $1424, $1412, $1416, $1437, $1439, $870, $871, $872, $878, $880, $882, $885, $1396, $1403, $1409, $1422, $1426, $1414, $1418, $1441, $1440, $898, $1443, $1442, $904, $1444, $910, $913, $914, $915, $916, $917, $918, $919, $920, $1445, $921, $922, $923, $924, $925, $926, $927, $928, $929, $1446, $930, $933, $934, $935, $939, $940, $941, $942, $943, $1447, $944, $945, $946, $947, $948, $949, $950, $951, $952, $1448, $963, $987, $1449, $1027, $1045, $1450, $1091, $1103, $1451, $1104, $1117, $1452, $1125, $1126, $1127, $1453, $1128, $1129, $1130, $1740, $1741, $1798, $1799, $1802, $1800, $1801, $1807, $1803, $1810, $1835, $1832, $1817, $1804, $1834, $1831, $1818, $1805, $1833, $1828, $1821, $1806, $1823]);
  function __wasm_memory_size() {
    return buffer.byteLength / 65536 | 0;
  }
  
  return {
    "memory": Object.create(Object.prototype, {
    "grow": {
      
    }, 
    "buffer": {
      "get": function () {
      return buffer;
      }
      
    }
    }), 
    "__wasm_call_ctors": $0, 
    "__getTypeName": $1, 
    "__indirect_function_table": FUNCTION_TABLE, 
    "fflush": $155, 
    "malloc": $126, 
    "strerror": $1758, 
    "free": $128, 
    "emscripten_stack_init": $1839, 
    "emscripten_stack_get_free": $1840, 
    "emscripten_stack_get_base": $1841, 
    "emscripten_stack_get_end": $1842, 
    "_emscripten_stack_restore": $1843, 
    "_emscripten_stack_alloc": $1844, 
    "emscripten_stack_get_current": $1845, 
    "dynCall_viijii": $1851, 
    "dynCall_jiji": $1852, 
    "dynCall_iiiiij": $1853, 
    "dynCall_iiiiijj": $1854, 
    "dynCall_iiiiiijj": $1855
  };
  }

    return asmFunc(info);
  }

  )(info);
    },

    instantiate: /** @suppress{checkTypes} */ function(binary, info) {
      return {
        then: function(ok) {
          var module = new WebAssembly.Module(binary);
          ok({
            'instance': new WebAssembly.Instance(module, info)
          });
          // Emulate a simple WebAssembly.instantiate(..).then(()=>{}).catch(()=>{}) syntax.
          return { catch: function() {} };
        }
      };
    },

    RuntimeError: Error,

    isWasm2js: true,
  };
  // end include: wasm2js.js
  if (WebAssembly.isWasm2js) {
    // We don't need to actually download a wasm binary, mark it as present but
    // empty.
    wasmBinary = [];
  }

  if (typeof WebAssembly != 'object') {
    err('no native wasm support detected');
  }

  // Wasm globals

  var wasmMemory;

  //========================================
  // Runtime essentials
  //========================================

  // whether we are quitting the application. no code should run after this.
  // set in exit() and abort()
  var ABORT = false;

  // set by exit() and abort().  Passed to 'onExit' handler.
  // NOTE: This is also used as the process return code code in shell environments
  // but only when noExitRuntime is false.
  var EXITSTATUS;

  // In STRICT mode, we only define assert() when ASSERTIONS is set.  i.e. we
  // don't define it at all in release modes.  This matches the behaviour of
  // MINIMAL_RUNTIME.
  // TODO(sbc): Make this the default even without STRICT enabled.
  /** @type {function(*, string=)} */
  function assert(condition, text) {
    if (!condition) {
      abort('Assertion failed' + (text ? ': ' + text : ''));
    }
  }

  // We used to include malloc/free by default in the past. Show a helpful error in
  // builds with assertions.

  // Memory management

  var HEAP,
  /** @type {!Int8Array} */
    HEAP8,
  /** @type {!Uint8Array} */
    HEAPU8,
  /** @type {!Int16Array} */
    HEAP16,
  /** @type {!Uint16Array} */
    HEAPU16,
  /** @type {!Int32Array} */
    HEAP32,
  /** @type {!Uint32Array} */
    HEAPU32,
  /** @type {!Float32Array} */
    HEAPF32,
  /** @type {!Float64Array} */
    HEAPF64;

  // include: runtime_shared.js
  function updateMemoryViews() {
    var b = wasmMemory.buffer;
    Module['HEAP8'] = HEAP8 = new Int8Array(b);
    Module['HEAP16'] = HEAP16 = new Int16Array(b);
    Module['HEAPU8'] = HEAPU8 = new Uint8Array(b);
    Module['HEAPU16'] = HEAPU16 = new Uint16Array(b);
    Module['HEAP32'] = HEAP32 = new Int32Array(b);
    Module['HEAPU32'] = HEAPU32 = new Uint32Array(b);
    Module['HEAPF32'] = HEAPF32 = new Float32Array(b);
    Module['HEAPF64'] = HEAPF64 = new Float64Array(b);
  }

  // end include: runtime_shared.js
  assert(!Module['STACK_SIZE'], 'STACK_SIZE can no longer be set at runtime.  Use -sSTACK_SIZE at link time')

  assert(typeof Int32Array != 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray != undefined && Int32Array.prototype.set != undefined,
        'JS engine does not provide full typed array support');

  // If memory is defined in wasm, the user can't provide it, or set INITIAL_MEMORY
  assert(!Module['wasmMemory'], 'Use of `wasmMemory` detected.  Use -sIMPORTED_MEMORY to define wasmMemory externally');
  assert(!Module['INITIAL_MEMORY'], 'Detected runtime INITIAL_MEMORY setting.  Use -sIMPORTED_MEMORY to define wasmMemory dynamically');

  // include: runtime_stack_check.js
  // Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
  function writeStackCookie() {
    var max = _emscripten_stack_get_end();
    assert((max & 3) == 0);
    // If the stack ends at address zero we write our cookies 4 bytes into the
    // stack.  This prevents interference with SAFE_HEAP and ASAN which also
    // monitor writes to address zero.
    if (max == 0) {
      max += 4;
    }
    // The stack grow downwards towards _emscripten_stack_get_end.
    // We write cookies to the final two words in the stack and detect if they are
    // ever overwritten.
    HEAPU32[((max)>>2)] = 0x02135467;
    HEAPU32[(((max)+(4))>>2)] = 0x89BACDFE;
    // Also test the global address 0 for integrity.
    HEAPU32[((0)>>2)] = 1668509029;
  }

  function checkStackCookie() {
    if (ABORT) return;
    var max = _emscripten_stack_get_end();
    // See writeStackCookie().
    if (max == 0) {
      max += 4;
    }
    var cookie1 = HEAPU32[((max)>>2)];
    var cookie2 = HEAPU32[(((max)+(4))>>2)];
    if (cookie1 != 0x02135467 || cookie2 != 0x89BACDFE) {
      abort(`Stack overflow! Stack cookie has been overwritten at ${ptrToString(max)}, expected hex dwords 0x89BACDFE and 0x2135467, but received ${ptrToString(cookie2)} ${ptrToString(cookie1)}`);
    }
    // Also test the global address 0 for integrity.
    if (HEAPU32[((0)>>2)] != 0x63736d65 /* 'emsc' */) {
      abort('Runtime error: The application has corrupted its heap memory area (address zero)!');
    }
  }
  // end include: runtime_stack_check.js
  var __ATPRERUN__  = []; // functions called before the runtime is initialized
  var __ATINIT__    = []; // functions called during startup
  var __ATEXIT__    = []; // functions called during shutdown
  var __ATPOSTRUN__ = []; // functions called after the main() is called

  var runtimeInitialized = false;

  function preRun() {
    var preRuns = Module['preRun'];
    if (preRuns) {
      if (typeof preRuns == 'function') preRuns = [preRuns];
      preRuns.forEach(addOnPreRun);
    }
    callRuntimeCallbacks(__ATPRERUN__);
  }

  function initRuntime() {
    assert(!runtimeInitialized);
    runtimeInitialized = true;

    checkStackCookie();

    
  if (!Module['noFSInit'] && !FS.initialized)
    FS.init();
  FS.ignorePermissions = false;

  TTY.init();
    callRuntimeCallbacks(__ATINIT__);
  }

  function postRun() {
    checkStackCookie();

    var postRuns = Module['postRun'];
    if (postRuns) {
      if (typeof postRuns == 'function') postRuns = [postRuns];
      postRuns.forEach(addOnPostRun);
    }

    callRuntimeCallbacks(__ATPOSTRUN__);
  }

  function addOnPreRun(cb) {
    __ATPRERUN__.unshift(cb);
  }

  function addOnInit(cb) {
    __ATINIT__.unshift(cb);
  }

  function addOnExit(cb) {
  }

  function addOnPostRun(cb) {
    __ATPOSTRUN__.unshift(cb);
  }

  // include: runtime_math.js
  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul

  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround

  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32

  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc

  assert(Math.imul, 'This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
  assert(Math.fround, 'This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
  assert(Math.clz32, 'This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
  assert(Math.trunc, 'This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
  // end include: runtime_math.js
  // A counter of dependencies for calling run(). If we need to
  // do asynchronous work before running, increment this and
  // decrement it. Incrementing must happen in a place like
  // Module.preRun (used by emcc to add file preloading).
  // Note that you can add dependencies in preRun, even though
  // it happens right before run - run will be postponed until
  // the dependencies are met.
  var runDependencies = 0;
  var runDependencyWatcher = null;
  var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
  var runDependencyTracking = {};

  function getUniqueRunDependency(id) {
    var orig = id;
    while (1) {
      if (!runDependencyTracking[id]) return id;
      id = orig + Math.random();
    }
  }

  function addRunDependency(id) {
    runDependencies++;

    Module['monitorRunDependencies']?.(runDependencies);

    if (id) {
      assert(!runDependencyTracking[id]);
      runDependencyTracking[id] = 1;
      if (runDependencyWatcher === null && typeof setInterval != 'undefined') {
        // Check for missing dependencies every few seconds
        runDependencyWatcher = setInterval(() => {
          if (ABORT) {
            clearInterval(runDependencyWatcher);
            runDependencyWatcher = null;
            return;
          }
          var shown = false;
          for (var dep in runDependencyTracking) {
            if (!shown) {
              shown = true;
              err('still waiting on run dependencies:');
            }
            err(`dependency: ${dep}`);
          }
          if (shown) {
            err('(end of list)');
          }
        }, 10000);
      }
    } else {
      err('warning: run dependency added without ID');
    }
  }

  function removeRunDependency(id) {
    runDependencies--;

    Module['monitorRunDependencies']?.(runDependencies);

    if (id) {
      assert(runDependencyTracking[id]);
      delete runDependencyTracking[id];
    } else {
      err('warning: run dependency removed without ID');
    }
    if (runDependencies == 0) {
      if (runDependencyWatcher !== null) {
        clearInterval(runDependencyWatcher);
        runDependencyWatcher = null;
      }
      if (dependenciesFulfilled) {
        var callback = dependenciesFulfilled;
        dependenciesFulfilled = null;
        callback(); // can add another dependenciesFulfilled
      }
    }
  }

  /** @param {string|number=} what */
  function abort(what) {
    Module['onAbort']?.(what);

    what = 'Aborted(' + what + ')';
    // TODO(sbc): Should we remove printing and leave it up to whoever
    // catches the exception?
    err(what);

    ABORT = true;

    // Use a wasm runtime error, because a JS error might be seen as a foreign
    // exception, which means we'd run destructors on it. We need the error to
    // simply make the program stop.
    // FIXME This approach does not work in Wasm EH because it currently does not assume
    // all RuntimeErrors are from traps; it decides whether a RuntimeError is from
    // a trap or not based on a hidden field within the object. So at the moment
    // we don't have a way of throwing a wasm trap from JS. TODO Make a JS API that
    // allows this in the wasm spec.

    // Suppress closure compiler warning here. Closure compiler's builtin extern
    // definition for WebAssembly.RuntimeError claims it takes no arguments even
    // though it can.
    // TODO(https://github.com/google/closure-compiler/pull/3913): Remove if/when upstream closure gets fixed.
    /** @suppress {checkTypes} */
    var e = new WebAssembly.RuntimeError(what);

    readyPromiseReject(e);
    // Throw the error whether or not MODULARIZE is set because abort is used
    // in code paths apart from instantiation where an exception is expected
    // to be thrown when abort is called.
    throw e;
  }

  // include: memoryprofiler.js
  // end include: memoryprofiler.js
  // include: URIUtils.js
  // Prefix of data URIs emitted by SINGLE_FILE and related options.
  var dataURIPrefix = 'data:application/octet-stream;base64,';

  /**
  * Indicates whether filename is a base64 data URI.
  * @noinline
  */
  var isDataURI = (filename) => filename.startsWith(dataURIPrefix);

  /**
  * Indicates whether filename is delivered via file protocol (as opposed to http/https)
  * @noinline
  */
  var isFileURI = (filename) => filename.startsWith('file://');
  // end include: URIUtils.js
  function createExportWrapper(name, nargs) {
    return (...args) => {
      assert(runtimeInitialized, `native function \`${name}\` called before runtime initialization`);
      var f = wasmExports[name];
      assert(f, `exported native function \`${name}\` not found`);
      // Only assert for too many arguments. Too few can be valid since the missing arguments will be zero filled.
      assert(args.length <= nargs, `native function \`${name}\` called with ${args.length} args but expects ${nargs}`);
      return f(...args);
    };
  }

  // include: runtime_exceptions.js
  // end include: runtime_exceptions.js
  function findWasmBinary() {
      var f = 'communication.wasm';
      if (!isDataURI(f)) {
        return locateFile(f);
      }
      return f;
  }

  var wasmBinaryFile;

  function getBinarySync(file) {
    if (file == wasmBinaryFile && wasmBinary) {
      return new Uint8Array(wasmBinary);
    }
    if (readBinary) {
      return readBinary(file);
    }
    throw 'both async and sync fetching of the wasm failed';
  }

  function getBinaryPromise(binaryFile) {
    // If we don't have the binary yet, load it asynchronously using readAsync.
    if (!wasmBinary
        ) {
      // Fetch the binary using readAsync
      return readAsync(binaryFile).then(
        (response) => new Uint8Array(/** @type{!ArrayBuffer} */(response)),
        // Fall back to getBinarySync if readAsync fails
        () => getBinarySync(binaryFile)
      );
    }

    // Otherwise, getBinarySync should be able to get it synchronously
    return Promise.resolve().then(() => getBinarySync(binaryFile));
  }

  function instantiateArrayBuffer(binaryFile, imports, receiver) {
    return getBinaryPromise(binaryFile).then((binary) => {
      return WebAssembly.instantiate(binary, imports);
    }).then(receiver, (reason) => {
      err(`failed to asynchronously prepare wasm: ${reason}`);

      // Warn on some common problems.
      if (isFileURI(wasmBinaryFile)) {
        err(`warning: Loading from a file URI (${wasmBinaryFile}) is not supported in most browsers. See https://emscripten.org/docs/getting_started/FAQ.html#how-do-i-run-a-local-webserver-for-testing-why-does-my-program-stall-in-downloading-or-preparing`);
      }
      abort(reason);
    });
  }

  function instantiateAsync(binary, binaryFile, imports, callback) {
    if (!binary &&
        typeof WebAssembly.instantiateStreaming == 'function' &&
        !isDataURI(binaryFile) &&
        typeof fetch == 'function') {
      return fetch(binaryFile, { credentials: 'same-origin' }).then((response) => {
        // Suppress closure warning here since the upstream definition for
        // instantiateStreaming only allows Promise<Repsponse> rather than
        // an actual Response.
        // TODO(https://github.com/google/closure-compiler/pull/3913): Remove if/when upstream closure is fixed.
        /** @suppress {checkTypes} */
        var result = WebAssembly.instantiateStreaming(response, imports);

        return result.then(
          callback,
          function(reason) {
            // We expect the most common failure cause to be a bad MIME type for the binary,
            // in which case falling back to ArrayBuffer instantiation should work.
            err(`wasm streaming compile failed: ${reason}`);
            err('falling back to ArrayBuffer instantiation');
            return instantiateArrayBuffer(binaryFile, imports, callback);
          });
      });
    }
    return instantiateArrayBuffer(binaryFile, imports, callback);
  }

  function getWasmImports() {
    // prepare imports
    return {
      'env': wasmImports,
      'wasi_snapshot_preview1': wasmImports,
    }
  }

  // Create the wasm instance.
  // Receives the wasm imports, returns the exports.
  function createWasm() {
    var info = getWasmImports();
    // Load the wasm module and create an instance of using native support in the JS engine.
    // handle a generated wasm instance, receiving its exports and
    // performing other necessary setup
    /** @param {WebAssembly.Module=} module*/
    function receiveInstance(instance, module) {
      wasmExports = instance.exports;

      

      wasmMemory = wasmExports['memory'];
      
      assert(wasmMemory, 'memory not found in wasm exports');
      updateMemoryViews();

      wasmTable = wasmExports['__indirect_function_table'];
      
      assert(wasmTable, 'table not found in wasm exports');

      addOnInit(wasmExports['__wasm_call_ctors']);

      removeRunDependency('wasm-instantiate');
      return wasmExports;
    }
    // wait for the pthread pool (if any)
    addRunDependency('wasm-instantiate');

    // Prefer streaming instantiation if available.
    // Async compilation can be confusing when an error on the page overwrites Module
    // (for example, if the order of elements is wrong, and the one defining Module is
    // later), so we save Module and check it later.
    var trueModule = Module;
    function receiveInstantiationResult(result) {
      // 'result' is a ResultObject object which has both the module and instance.
      // receiveInstance() will swap in the exports (to Module.asm) so they can be called
      assert(Module === trueModule, 'the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?');
      trueModule = null;
      // TODO: Due to Closure regression https://github.com/google/closure-compiler/issues/3193, the above line no longer optimizes out down to the following line.
      // When the regression is fixed, can restore the above PTHREADS-enabled path.
      receiveInstance(result['instance']);
    }

    // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback
    // to manually instantiate the Wasm module themselves. This allows pages to
    // run the instantiation parallel to any other async startup actions they are
    // performing.
    // Also pthreads and wasm workers initialize the wasm instance through this
    // path.
    if (Module['instantiateWasm']) {
      try {
        return Module['instantiateWasm'](info, receiveInstance);
      } catch(e) {
        err(`Module.instantiateWasm callback failed with error: ${e}`);
          // If instantiation fails, reject the module ready promise.
          readyPromiseReject(e);
      }
    }

    wasmBinaryFile ??= findWasmBinary();

    // If instantiation fails, reject the module ready promise.
    instantiateAsync(wasmBinary, wasmBinaryFile, info, receiveInstantiationResult).catch(readyPromiseReject);
    return {}; // no exports yet; we'll fill them in later
  }

  // Globals used by JS i64 conversions (see makeSetValue)
  var tempDouble;
  var tempI64;

  // include: runtime_debug.js
  // Endianness check
  (() => {
    var h16 = new Int16Array(1);
    var h8 = new Int8Array(h16.buffer);
    h16[0] = 0x6373;
    if (h8[0] !== 0x73 || h8[1] !== 0x63) throw 'Runtime error: expected the system to be little-endian! (Run with -sSUPPORT_BIG_ENDIAN to bypass)';
  })();

  if (Module['ENVIRONMENT']) {
    throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -sENVIRONMENT=web or -sENVIRONMENT=node)');
  }

  function legacyModuleProp(prop, newName, incoming=true) {
    if (!Object.getOwnPropertyDescriptor(Module, prop)) {
      Object.defineProperty(Module, prop, {
        configurable: true,
        get() {
          let extra = incoming ? ' (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)' : '';
          abort(`\`Module.${prop}\` has been replaced by \`${newName}\`` + extra);

        }
      });
    }
  }

  function ignoredModuleProp(prop) {
    if (Object.getOwnPropertyDescriptor(Module, prop)) {
      abort(`\`Module.${prop}\` was supplied but \`${prop}\` not included in INCOMING_MODULE_JS_API`);
    }
  }

  // forcing the filesystem exports a few things by default
  function isExportedByForceFilesystem(name) {
    return name === 'FS_createPath' ||
          name === 'FS_createDataFile' ||
          name === 'FS_createPreloadedFile' ||
          name === 'FS_unlink' ||
          name === 'addRunDependency' ||
          // The old FS has some functionality that WasmFS lacks.
          name === 'FS_createLazyFile' ||
          name === 'FS_createDevice' ||
          name === 'removeRunDependency';
  }

  /**
  * Intercept access to a global symbol.  This enables us to give informative
  * warnings/errors when folks attempt to use symbols they did not include in
  * their build, or no symbols that no longer exist.
  */
  function hookGlobalSymbolAccess(sym, func) {
    // In MODULARIZE mode the generated code runs inside a function scope and not
    // the global scope, and JavaScript does not provide access to function scopes
    // so we cannot dynamically modify the scrope using `defineProperty` in this
    // case.
    //
    // In this mode we simply ignore requests for `hookGlobalSymbolAccess`. Since
    // this is a debug-only feature, skipping it is not major issue.
  }

  function missingGlobal(sym, msg) {
    hookGlobalSymbolAccess(sym, () => {
      warnOnce(`\`${sym}\` is not longer defined by emscripten. ${msg}`);
    });
  }

  missingGlobal('buffer', 'Please use HEAP8.buffer or wasmMemory.buffer');
  missingGlobal('asm', 'Please use wasmExports instead');

  function missingLibrarySymbol(sym) {
    hookGlobalSymbolAccess(sym, () => {
      // Can't `abort()` here because it would break code that does runtime
      // checks.  e.g. `if (typeof SDL === 'undefined')`.
      var msg = `\`${sym}\` is a library symbol and not included by default; add it to your library.js __deps or to DEFAULT_LIBRARY_FUNCS_TO_INCLUDE on the command line`;
      // DEFAULT_LIBRARY_FUNCS_TO_INCLUDE requires the name as it appears in
      // library.js, which means $name for a JS name with no prefix, or name
      // for a JS name like _name.
      var librarySymbol = sym;
      if (!librarySymbol.startsWith('_')) {
        librarySymbol = '$' + sym;
      }
      msg += ` (e.g. -sDEFAULT_LIBRARY_FUNCS_TO_INCLUDE='${librarySymbol}')`;
      if (isExportedByForceFilesystem(sym)) {
        msg += '. Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you';
      }
      warnOnce(msg);
    });

    // Any symbol that is not included from the JS library is also (by definition)
    // not exported on the Module object.
    unexportedRuntimeSymbol(sym);
  }

  function unexportedRuntimeSymbol(sym) {
    if (!Object.getOwnPropertyDescriptor(Module, sym)) {
      Object.defineProperty(Module, sym, {
        configurable: true,
        get() {
          var msg = `'${sym}' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the Emscripten FAQ)`;
          if (isExportedByForceFilesystem(sym)) {
            msg += '. Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you';
          }
          abort(msg);
        }
      });
    }
  }

  // Used by XXXXX_DEBUG settings to output debug messages.
  function dbg(...args) {
    // TODO(sbc): Make this configurable somehow.  Its not always convenient for
    // logging to show up as warnings.
    console.warn(...args);
  }
  // end include: runtime_debug.js
  // === Body ===
  // end include: preamble.js


    /** @constructor */
    function ExitStatus(status) {
        this.name = 'ExitStatus';
        this.message = `Program terminated with exit(${status})`;
        this.status = status;
      }

    var callRuntimeCallbacks = (callbacks) => {
        // Pass the module as the first argument.
        callbacks.forEach((f) => f(Module));
      };

    
      /**
      * @param {number} ptr
      * @param {string} type
      */
    function getValue(ptr, type = 'i8') {
      if (type.endsWith('*')) type = '*';
      switch (type) {
        case 'i1': return HEAP8[ptr];
        case 'i8': return HEAP8[ptr];
        case 'i16': return HEAP16[((ptr)>>1)];
        case 'i32': return HEAP32[((ptr)>>2)];
        case 'i64': abort('to do getValue(i64) use WASM_BIGINT');
        case 'float': return HEAPF32[((ptr)>>2)];
        case 'double': return HEAPF64[((ptr)>>3)];
        case '*': return HEAPU32[((ptr)>>2)];
        default: abort(`invalid type for getValue: ${type}`);
      }
    }

    var noExitRuntime = Module['noExitRuntime'] || true;

    var ptrToString = (ptr) => {
        assert(typeof ptr === 'number');
        // With CAN_ADDRESS_2GB or MEMORY64, pointers are already unsigned.
        ptr >>>= 0;
        return '0x' + ptr.toString(16).padStart(8, '0');
      };

    
      /**
      * @param {number} ptr
      * @param {number} value
      * @param {string} type
      */
    function setValue(ptr, value, type = 'i8') {
      if (type.endsWith('*')) type = '*';
      switch (type) {
        case 'i1': HEAP8[ptr] = value; break;
        case 'i8': HEAP8[ptr] = value; break;
        case 'i16': HEAP16[((ptr)>>1)] = value; break;
        case 'i32': HEAP32[((ptr)>>2)] = value; break;
        case 'i64': abort('to do setValue(i64) use WASM_BIGINT');
        case 'float': HEAPF32[((ptr)>>2)] = value; break;
        case 'double': HEAPF64[((ptr)>>3)] = value; break;
        case '*': HEAPU32[((ptr)>>2)] = value; break;
        default: abort(`invalid type for setValue: ${type}`);
      }
    }

    var stackRestore = (val) => __emscripten_stack_restore(val);

    var stackSave = () => _emscripten_stack_get_current();

    var warnOnce = (text) => {
        warnOnce.shown ||= {};
        if (!warnOnce.shown[text]) {
          warnOnce.shown[text] = 1;
          err(text);
        }
      };

    var UTF8Decoder = typeof TextDecoder != 'undefined' ? new TextDecoder() : undefined;
    
      /**
      * Given a pointer 'idx' to a null-terminated UTF8-encoded string in the given
      * array that contains uint8 values, returns a copy of that string as a
      * Javascript String object.
      * heapOrArray is either a regular array, or a JavaScript typed array view.
      * @param {number=} idx
      * @param {number=} maxBytesToRead
      * @return {string}
      */
    var UTF8ArrayToString = (heapOrArray, idx = 0, maxBytesToRead = NaN) => {
        var endIdx = idx + maxBytesToRead;
        var endPtr = idx;
        // TextDecoder needs to know the byte length in advance, it doesn't stop on
        // null terminator by itself.  Also, use the length info to avoid running tiny
        // strings through TextDecoder, since .subarray() allocates garbage.
        // (As a tiny code save trick, compare endPtr against endIdx using a negation,
        // so that undefined/NaN means Infinity)
        while (heapOrArray[endPtr] && !(endPtr >= endIdx)) ++endPtr;
    
        if (endPtr - idx > 16 && heapOrArray.buffer && UTF8Decoder) {
          return UTF8Decoder.decode(heapOrArray.subarray(idx, endPtr));
        }
        var str = '';
        // If building with TextDecoder, we have already computed the string length
        // above, so test loop end condition against that
        while (idx < endPtr) {
          // For UTF8 byte structure, see:
          // http://en.wikipedia.org/wiki/UTF-8#Description
          // https://www.ietf.org/rfc/rfc2279.txt
          // https://tools.ietf.org/html/rfc3629
          var u0 = heapOrArray[idx++];
          if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
          var u1 = heapOrArray[idx++] & 63;
          if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
          var u2 = heapOrArray[idx++] & 63;
          if ((u0 & 0xF0) == 0xE0) {
            u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
          } else {
            if ((u0 & 0xF8) != 0xF0) warnOnce('Invalid UTF-8 leading byte ' + ptrToString(u0) + ' encountered when deserializing a UTF-8 string in wasm memory to a JS string!');
            u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (heapOrArray[idx++] & 63);
          }
    
          if (u0 < 0x10000) {
            str += String.fromCharCode(u0);
          } else {
            var ch = u0 - 0x10000;
            str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
          }
        }
        return str;
      };
    
      /**
      * Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the
      * emscripten HEAP, returns a copy of that string as a Javascript String object.
      *
      * @param {number} ptr
      * @param {number=} maxBytesToRead - An optional length that specifies the
      *   maximum number of bytes to read. You can omit this parameter to scan the
      *   string until the first 0 byte. If maxBytesToRead is passed, and the string
      *   at [ptr, ptr+maxBytesToReadr[ contains a null byte in the middle, then the
      *   string will cut short at that byte index (i.e. maxBytesToRead will not
      *   produce a string of exact length [ptr, ptr+maxBytesToRead[) N.B. mixing
      *   frequent uses of UTF8ToString() with and without maxBytesToRead may throw
      *   JS JIT optimizations off, so it is worth to consider consistently using one
      * @return {string}
      */
    var UTF8ToString = (ptr, maxBytesToRead) => {
        assert(typeof ptr == 'number', `UTF8ToString expects a number (got ${typeof ptr})`);
        return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
      };
    var ___assert_fail = (condition, filename, line, func) => {
        abort(`Assertion failed: ${UTF8ToString(condition)}, at: ` + [filename ? UTF8ToString(filename) : 'unknown filename', line, func ? UTF8ToString(func) : 'unknown function']);
      };

    var __abort_js = () => {
        abort('native code called abort()');
      };

    var __embind_register_bigint = (primitiveType, name, size, minRange, maxRange) => {};

    var embind_init_charCodes = () => {
        var codes = new Array(256);
        for (var i = 0; i < 256; ++i) {
            codes[i] = String.fromCharCode(i);
        }
        embind_charCodes = codes;
      };
    var embind_charCodes;
    var readLatin1String = (ptr) => {
        var ret = "";
        var c = ptr;
        while (HEAPU8[c]) {
            ret += embind_charCodes[HEAPU8[c++]];
        }
        return ret;
      };
    
    var awaitingDependencies = {
    };
    
    var registeredTypes = {
    };
    
    var typeDependencies = {
    };
    
    var BindingError;
    var throwBindingError = (message) => { throw new BindingError(message); };
    
    
    
    
    var InternalError;
    var throwInternalError = (message) => { throw new InternalError(message); };
    var whenDependentTypesAreResolved = (myTypes, dependentTypes, getTypeConverters) => {
        myTypes.forEach((type) => typeDependencies[type] = dependentTypes);
    
        function onComplete(typeConverters) {
          var myTypeConverters = getTypeConverters(typeConverters);
          if (myTypeConverters.length !== myTypes.length) {
            throwInternalError('Mismatched type converter count');
          }
          for (var i = 0; i < myTypes.length; ++i) {
            registerType(myTypes[i], myTypeConverters[i]);
          }
        }
    
        var typeConverters = new Array(dependentTypes.length);
        var unregisteredTypes = [];
        var registered = 0;
        dependentTypes.forEach((dt, i) => {
          if (registeredTypes.hasOwnProperty(dt)) {
            typeConverters[i] = registeredTypes[dt];
          } else {
            unregisteredTypes.push(dt);
            if (!awaitingDependencies.hasOwnProperty(dt)) {
              awaitingDependencies[dt] = [];
            }
            awaitingDependencies[dt].push(() => {
              typeConverters[i] = registeredTypes[dt];
              ++registered;
              if (registered === unregisteredTypes.length) {
                onComplete(typeConverters);
              }
            });
          }
        });
        if (0 === unregisteredTypes.length) {
          onComplete(typeConverters);
        }
      };
    /** @param {Object=} options */
    function sharedRegisterType(rawType, registeredInstance, options = {}) {
        var name = registeredInstance.name;
        if (!rawType) {
          throwBindingError(`type "${name}" must have a positive integer typeid pointer`);
        }
        if (registeredTypes.hasOwnProperty(rawType)) {
          if (options.ignoreDuplicateRegistrations) {
            return;
          } else {
            throwBindingError(`Cannot register type '${name}' twice`);
          }
        }
    
        registeredTypes[rawType] = registeredInstance;
        delete typeDependencies[rawType];
    
        if (awaitingDependencies.hasOwnProperty(rawType)) {
          var callbacks = awaitingDependencies[rawType];
          delete awaitingDependencies[rawType];
          callbacks.forEach((cb) => cb());
        }
      }
    /** @param {Object=} options */
    function registerType(rawType, registeredInstance, options = {}) {
        if (!('argPackAdvance' in registeredInstance)) {
          throw new TypeError('registerType registeredInstance requires argPackAdvance');
        }
        return sharedRegisterType(rawType, registeredInstance, options);
      }
    
    var GenericWireTypeSize = 8;
    /** @suppress {globalThis} */
    var __embind_register_bool = (rawType, name, trueValue, falseValue) => {
        name = readLatin1String(name);
        registerType(rawType, {
            name,
            'fromWireType': function(wt) {
                // ambiguous emscripten ABI: sometimes return values are
                // true or false, and sometimes integers (0 or 1)
                return !!wt;
            },
            'toWireType': function(destructors, o) {
                return o ? trueValue : falseValue;
            },
            argPackAdvance: GenericWireTypeSize,
            'readValueFromPointer': function(pointer) {
                return this['fromWireType'](HEAPU8[pointer]);
            },
            destructorFunction: null, // This type does not need a destructor
        });
      };

    
    
    var shallowCopyInternalPointer = (o) => {
        return {
          count: o.count,
          deleteScheduled: o.deleteScheduled,
          preservePointerOnDelete: o.preservePointerOnDelete,
          ptr: o.ptr,
          ptrType: o.ptrType,
          smartPtr: o.smartPtr,
          smartPtrType: o.smartPtrType,
        };
      };
    
    var throwInstanceAlreadyDeleted = (obj) => {
        function getInstanceTypeName(handle) {
          return handle.$$.ptrType.registeredClass.name;
        }
        throwBindingError(getInstanceTypeName(obj) + ' instance already deleted');
      };
    
    var finalizationRegistry = false;
    
    var detachFinalizer = (handle) => {};
    
    var runDestructor = ($$) => {
        if ($$.smartPtr) {
          $$.smartPtrType.rawDestructor($$.smartPtr);
        } else {
          $$.ptrType.registeredClass.rawDestructor($$.ptr);
        }
      };
    var releaseClassHandle = ($$) => {
        $$.count.value -= 1;
        var toDelete = 0 === $$.count.value;
        if (toDelete) {
          runDestructor($$);
        }
      };
    
    var downcastPointer = (ptr, ptrClass, desiredClass) => {
        if (ptrClass === desiredClass) {
          return ptr;
        }
        if (undefined === desiredClass.baseClass) {
          return null; // no conversion
        }
    
        var rv = downcastPointer(ptr, ptrClass, desiredClass.baseClass);
        if (rv === null) {
          return null;
        }
        return desiredClass.downcast(rv);
      };
    
    var registeredPointers = {
    };
    
    var registeredInstances = {
    };
    
    var getBasestPointer = (class_, ptr) => {
        if (ptr === undefined) {
            throwBindingError('ptr should not be undefined');
        }
        while (class_.baseClass) {
            ptr = class_.upcast(ptr);
            class_ = class_.baseClass;
        }
        return ptr;
      };
    var getInheritedInstance = (class_, ptr) => {
        ptr = getBasestPointer(class_, ptr);
        return registeredInstances[ptr];
      };
    
    
    var makeClassHandle = (prototype, record) => {
        if (!record.ptrType || !record.ptr) {
          throwInternalError('makeClassHandle requires ptr and ptrType');
        }
        var hasSmartPtrType = !!record.smartPtrType;
        var hasSmartPtr = !!record.smartPtr;
        if (hasSmartPtrType !== hasSmartPtr) {
          throwInternalError('Both smartPtrType and smartPtr must be specified');
        }
        record.count = { value: 1 };
        return attachFinalizer(Object.create(prototype, {
          $$: {
            value: record,
            writable: true,
          },
        }));
      };
    /** @suppress {globalThis} */
    function RegisteredPointer_fromWireType(ptr) {
        // ptr is a raw pointer (or a raw smartpointer)
    
        // rawPointer is a maybe-null raw pointer
        var rawPointer = this.getPointee(ptr);
        if (!rawPointer) {
          this.destructor(ptr);
          return null;
        }
    
        var registeredInstance = getInheritedInstance(this.registeredClass, rawPointer);
        if (undefined !== registeredInstance) {
          // JS object has been neutered, time to repopulate it
          if (0 === registeredInstance.$$.count.value) {
            registeredInstance.$$.ptr = rawPointer;
            registeredInstance.$$.smartPtr = ptr;
            return registeredInstance['clone']();
          } else {
            // else, just increment reference count on existing object
            // it already has a reference to the smart pointer
            var rv = registeredInstance['clone']();
            this.destructor(ptr);
            return rv;
          }
        }
    
        function makeDefaultHandle() {
          if (this.isSmartPointer) {
            return makeClassHandle(this.registeredClass.instancePrototype, {
              ptrType: this.pointeeType,
              ptr: rawPointer,
              smartPtrType: this,
              smartPtr: ptr,
            });
          } else {
            return makeClassHandle(this.registeredClass.instancePrototype, {
              ptrType: this,
              ptr,
            });
          }
        }
    
        var actualType = this.registeredClass.getActualType(rawPointer);
        var registeredPointerRecord = registeredPointers[actualType];
        if (!registeredPointerRecord) {
          return makeDefaultHandle.call(this);
        }
    
        var toType;
        if (this.isConst) {
          toType = registeredPointerRecord.constPointerType;
        } else {
          toType = registeredPointerRecord.pointerType;
        }
        var dp = downcastPointer(
            rawPointer,
            this.registeredClass,
            toType.registeredClass);
        if (dp === null) {
          return makeDefaultHandle.call(this);
        }
        if (this.isSmartPointer) {
          return makeClassHandle(toType.registeredClass.instancePrototype, {
            ptrType: toType,
            ptr: dp,
            smartPtrType: this,
            smartPtr: ptr,
          });
        } else {
          return makeClassHandle(toType.registeredClass.instancePrototype, {
            ptrType: toType,
            ptr: dp,
          });
        }
      }
    var attachFinalizer = (handle) => {
        if ('undefined' === typeof FinalizationRegistry) {
          attachFinalizer = (handle) => handle;
          return handle;
        }
        // If the running environment has a FinalizationRegistry (see
        // https://github.com/tc39/proposal-weakrefs), then attach finalizers
        // for class handles.  We check for the presence of FinalizationRegistry
        // at run-time, not build-time.
        finalizationRegistry = new FinalizationRegistry((info) => {
          console.warn(info.leakWarning);
          releaseClassHandle(info.$$);
        });
        attachFinalizer = (handle) => {
          var $$ = handle.$$;
          var hasSmartPtr = !!$$.smartPtr;
          if (hasSmartPtr) {
            // We should not call the destructor on raw pointers in case other code expects the pointee to live
            var info = { $$: $$ };
            // Create a warning as an Error instance in advance so that we can store
            // the current stacktrace and point to it when / if a leak is detected.
            // This is more useful than the empty stacktrace of `FinalizationRegistry`
            // callback.
            var cls = $$.ptrType.registeredClass;
            var err = new Error(`Embind found a leaked C++ instance ${cls.name} <${ptrToString($$.ptr)}>.\n` +
            "We'll free it automatically in this case, but this functionality is not reliable across various environments.\n" +
            "Make sure to invoke .delete() manually once you're done with the instance instead.\n" +
            "Originally allocated"); // `.stack` will add "at ..." after this sentence
            if ('captureStackTrace' in Error) {
              Error.captureStackTrace(err, RegisteredPointer_fromWireType);
            }
            info.leakWarning = err.stack.replace(/^Error: /, '');
            finalizationRegistry.register(handle, info, handle);
          }
          return handle;
        };
        detachFinalizer = (handle) => finalizationRegistry.unregister(handle);
        return attachFinalizer(handle);
      };
    
    
    
    
    var deletionQueue = [];
    var flushPendingDeletes = () => {
        while (deletionQueue.length) {
          var obj = deletionQueue.pop();
          obj.$$.deleteScheduled = false;
          obj['delete']();
        }
      };
    
    var delayFunction;
    var init_ClassHandle = () => {
        Object.assign(ClassHandle.prototype, {
          "isAliasOf"(other) {
            if (!(this instanceof ClassHandle)) {
              return false;
            }
            if (!(other instanceof ClassHandle)) {
              return false;
            }
    
            var leftClass = this.$$.ptrType.registeredClass;
            var left = this.$$.ptr;
            other.$$ = /** @type {Object} */ (other.$$);
            var rightClass = other.$$.ptrType.registeredClass;
            var right = other.$$.ptr;
    
            while (leftClass.baseClass) {
              left = leftClass.upcast(left);
              leftClass = leftClass.baseClass;
            }
    
            while (rightClass.baseClass) {
              right = rightClass.upcast(right);
              rightClass = rightClass.baseClass;
            }
    
            return leftClass === rightClass && left === right;
          },
    
          "clone"() {
            if (!this.$$.ptr) {
              throwInstanceAlreadyDeleted(this);
            }
    
            if (this.$$.preservePointerOnDelete) {
              this.$$.count.value += 1;
              return this;
            } else {
              var clone = attachFinalizer(Object.create(Object.getPrototypeOf(this), {
                $$: {
                  value: shallowCopyInternalPointer(this.$$),
                }
              }));
    
              clone.$$.count.value += 1;
              clone.$$.deleteScheduled = false;
              return clone;
            }
          },
    
          "delete"() {
            if (!this.$$.ptr) {
              throwInstanceAlreadyDeleted(this);
            }
    
            if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
              throwBindingError('Object already scheduled for deletion');
            }
    
            detachFinalizer(this);
            releaseClassHandle(this.$$);
    
            if (!this.$$.preservePointerOnDelete) {
              this.$$.smartPtr = undefined;
              this.$$.ptr = undefined;
            }
          },
    
          "isDeleted"() {
            return !this.$$.ptr;
          },
    
          "deleteLater"() {
            if (!this.$$.ptr) {
              throwInstanceAlreadyDeleted(this);
            }
            if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
              throwBindingError('Object already scheduled for deletion');
            }
            deletionQueue.push(this);
            if (deletionQueue.length === 1 && delayFunction) {
              delayFunction(flushPendingDeletes);
            }
            this.$$.deleteScheduled = true;
            return this;
          },
        });
      };
    /** @constructor */
    function ClassHandle() {
      }
    
    var createNamedFunction = (name, body) => Object.defineProperty(body, 'name', {
        value: name
      });
    
    
    var ensureOverloadTable = (proto, methodName, humanName) => {
        if (undefined === proto[methodName].overloadTable) {
          var prevFunc = proto[methodName];
          // Inject an overload resolver function that routes to the appropriate overload based on the number of arguments.
          proto[methodName] = function(...args) {
            // TODO This check can be removed in -O3 level "unsafe" optimizations.
            if (!proto[methodName].overloadTable.hasOwnProperty(args.length)) {
              throwBindingError(`Function '${humanName}' called with an invalid number of arguments (${args.length}) - expects one of (${proto[methodName].overloadTable})!`);
            }
            return proto[methodName].overloadTable[args.length].apply(this, args);
          };
          // Move the previous function into the overload table.
          proto[methodName].overloadTable = [];
          proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
        }
      };
    
    /** @param {number=} numArguments */
    var exposePublicSymbol = (name, value, numArguments) => {
        if (Module.hasOwnProperty(name)) {
          if (undefined === numArguments || (undefined !== Module[name].overloadTable && undefined !== Module[name].overloadTable[numArguments])) {
            throwBindingError(`Cannot register public name '${name}' twice`);
          }
    
          // We are exposing a function with the same name as an existing function. Create an overload table and a function selector
          // that routes between the two.
          ensureOverloadTable(Module, name, name);
          if (Module.hasOwnProperty(numArguments)) {
            throwBindingError(`Cannot register multiple overloads of a function with the same number of arguments (${numArguments})!`);
          }
          // Add the new function into the overload table.
          Module[name].overloadTable[numArguments] = value;
        }
        else {
          Module[name] = value;
          if (undefined !== numArguments) {
            Module[name].numArguments = numArguments;
          }
        }
      };
    
    var char_0 = 48;
    
    var char_9 = 57;
    var makeLegalFunctionName = (name) => {
        assert(typeof name === 'string');
        name = name.replace(/[^a-zA-Z0-9_]/g, '$');
        var f = name.charCodeAt(0);
        if (f >= char_0 && f <= char_9) {
          return `_${name}`;
        }
        return name;
      };
    
    
    /** @constructor */
    function RegisteredClass(name,
                                constructor,
                                instancePrototype,
                                rawDestructor,
                                baseClass,
                                getActualType,
                                upcast,
                                downcast) {
        this.name = name;
        this.constructor = constructor;
        this.instancePrototype = instancePrototype;
        this.rawDestructor = rawDestructor;
        this.baseClass = baseClass;
        this.getActualType = getActualType;
        this.upcast = upcast;
        this.downcast = downcast;
        this.pureVirtualFunctions = [];
      }
    
    
    var upcastPointer = (ptr, ptrClass, desiredClass) => {
        while (ptrClass !== desiredClass) {
          if (!ptrClass.upcast) {
            throwBindingError(`Expected null or instance of ${desiredClass.name}, got an instance of ${ptrClass.name}`);
          }
          ptr = ptrClass.upcast(ptr);
          ptrClass = ptrClass.baseClass;
        }
        return ptr;
      };
    /** @suppress {globalThis} */
    function constNoSmartPtrRawPointerToWireType(destructors, handle) {
        if (handle === null) {
          if (this.isReference) {
            throwBindingError(`null is not a valid ${this.name}`);
          }
          return 0;
        }
    
        if (!handle.$$) {
          throwBindingError(`Cannot pass "${embindRepr(handle)}" as a ${this.name}`);
        }
        if (!handle.$$.ptr) {
          throwBindingError(`Cannot pass deleted object as a pointer of type ${this.name}`);
        }
        var handleClass = handle.$$.ptrType.registeredClass;
        var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
        return ptr;
      }
    
    
    /** @suppress {globalThis} */
    function genericPointerToWireType(destructors, handle) {
        var ptr;
        if (handle === null) {
          if (this.isReference) {
            throwBindingError(`null is not a valid ${this.name}`);
          }
    
          if (this.isSmartPointer) {
            ptr = this.rawConstructor();
            if (destructors !== null) {
              destructors.push(this.rawDestructor, ptr);
            }
            return ptr;
          } else {
            return 0;
          }
        }
    
        if (!handle || !handle.$$) {
          throwBindingError(`Cannot pass "${embindRepr(handle)}" as a ${this.name}`);
        }
        if (!handle.$$.ptr) {
          throwBindingError(`Cannot pass deleted object as a pointer of type ${this.name}`);
        }
        if (!this.isConst && handle.$$.ptrType.isConst) {
          throwBindingError(`Cannot convert argument of type ${(handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name)} to parameter type ${this.name}`);
        }
        var handleClass = handle.$$.ptrType.registeredClass;
        ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
    
        if (this.isSmartPointer) {
          // TODO: this is not strictly true
          // We could support BY_EMVAL conversions from raw pointers to smart pointers
          // because the smart pointer can hold a reference to the handle
          if (undefined === handle.$$.smartPtr) {
            throwBindingError('Passing raw pointer to smart pointer is illegal');
          }
    
          switch (this.sharingPolicy) {
            case 0: // NONE
              // no upcasting
              if (handle.$$.smartPtrType === this) {
                ptr = handle.$$.smartPtr;
              } else {
                throwBindingError(`Cannot convert argument of type ${(handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name)} to parameter type ${this.name}`);
              }
              break;
    
            case 1: // INTRUSIVE
              ptr = handle.$$.smartPtr;
              break;
    
            case 2: // BY_EMVAL
              if (handle.$$.smartPtrType === this) {
                ptr = handle.$$.smartPtr;
              } else {
                var clonedHandle = handle['clone']();
                ptr = this.rawShare(
                  ptr,
                  Emval.toHandle(() => clonedHandle['delete']())
                );
                if (destructors !== null) {
                  destructors.push(this.rawDestructor, ptr);
                }
              }
              break;
    
            default:
              throwBindingError('Unsupporting sharing policy');
          }
        }
        return ptr;
      }
    
    
    /** @suppress {globalThis} */
    function nonConstNoSmartPtrRawPointerToWireType(destructors, handle) {
        if (handle === null) {
          if (this.isReference) {
            throwBindingError(`null is not a valid ${this.name}`);
          }
          return 0;
        }
    
        if (!handle.$$) {
          throwBindingError(`Cannot pass "${embindRepr(handle)}" as a ${this.name}`);
        }
        if (!handle.$$.ptr) {
          throwBindingError(`Cannot pass deleted object as a pointer of type ${this.name}`);
        }
        if (handle.$$.ptrType.isConst) {
            throwBindingError(`Cannot convert argument of type ${handle.$$.ptrType.name} to parameter type ${this.name}`);
        }
        var handleClass = handle.$$.ptrType.registeredClass;
        var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
        return ptr;
      }
    
    
    /** @suppress {globalThis} */
    function readPointer(pointer) {
        return this['fromWireType'](HEAPU32[((pointer)>>2)]);
      }
    
    
    var init_RegisteredPointer = () => {
        Object.assign(RegisteredPointer.prototype, {
          getPointee(ptr) {
            if (this.rawGetPointee) {
              ptr = this.rawGetPointee(ptr);
            }
            return ptr;
          },
          destructor(ptr) {
            this.rawDestructor?.(ptr);
          },
          argPackAdvance: GenericWireTypeSize,
          'readValueFromPointer': readPointer,
          'fromWireType': RegisteredPointer_fromWireType,
        });
      };
    /** @constructor
        @param {*=} pointeeType,
        @param {*=} sharingPolicy,
        @param {*=} rawGetPointee,
        @param {*=} rawConstructor,
        @param {*=} rawShare,
        @param {*=} rawDestructor,
        */
    function RegisteredPointer(
        name,
        registeredClass,
        isReference,
        isConst,
    
        // smart pointer properties
        isSmartPointer,
        pointeeType,
        sharingPolicy,
        rawGetPointee,
        rawConstructor,
        rawShare,
        rawDestructor
      ) {
        this.name = name;
        this.registeredClass = registeredClass;
        this.isReference = isReference;
        this.isConst = isConst;
    
        // smart pointer properties
        this.isSmartPointer = isSmartPointer;
        this.pointeeType = pointeeType;
        this.sharingPolicy = sharingPolicy;
        this.rawGetPointee = rawGetPointee;
        this.rawConstructor = rawConstructor;
        this.rawShare = rawShare;
        this.rawDestructor = rawDestructor;
    
        if (!isSmartPointer && registeredClass.baseClass === undefined) {
          if (isConst) {
            this['toWireType'] = constNoSmartPtrRawPointerToWireType;
            this.destructorFunction = null;
          } else {
            this['toWireType'] = nonConstNoSmartPtrRawPointerToWireType;
            this.destructorFunction = null;
          }
        } else {
          this['toWireType'] = genericPointerToWireType;
          // Here we must leave this.destructorFunction undefined, since whether genericPointerToWireType returns
          // a pointer that needs to be freed up is runtime-dependent, and cannot be evaluated at registration time.
          // TODO: Create an alternative mechanism that allows removing the use of var destructors = []; array in
          //       craftInvokerFunction altogether.
        }
      }
    
    /** @param {number=} numArguments */
    var replacePublicSymbol = (name, value, numArguments) => {
        if (!Module.hasOwnProperty(name)) {
          throwInternalError('Replacing nonexistent public symbol');
        }
        // If there's an overload table for this symbol, replace the symbol in the overload table instead.
        if (undefined !== Module[name].overloadTable && undefined !== numArguments) {
          Module[name].overloadTable[numArguments] = value;
        }
        else {
          Module[name] = value;
          Module[name].argCount = numArguments;
        }
      };
    
    
    
    var dynCallLegacy = (sig, ptr, args) => {
        sig = sig.replace(/p/g, 'i')
        assert(('dynCall_' + sig) in Module, `bad function pointer type - dynCall function not found for sig '${sig}'`);
        if (args?.length) {
          // j (64-bit integer) must be passed in as two numbers [low 32, high 32].
          assert(args.length === sig.substring(1).replace(/j/g, '--').length);
        } else {
          assert(sig.length == 1);
        }
        var f = Module['dynCall_' + sig];
        return f(ptr, ...args);
      };
    
    var wasmTableMirror = [];
    
    /** @type {WebAssembly.Table} */
    var wasmTable;
    var getWasmTableEntry = (funcPtr) => {
        var func = wasmTableMirror[funcPtr];
        if (!func) {
          if (funcPtr >= wasmTableMirror.length) wasmTableMirror.length = funcPtr + 1;
          wasmTableMirror[funcPtr] = func = wasmTable.get(funcPtr);
        }
        assert(wasmTable.get(funcPtr) == func, 'JavaScript-side Wasm function table mirror is out of date!');
        return func;
      };
    
    var dynCall = (sig, ptr, args = []) => {
        // Without WASM_BIGINT support we cannot directly call function with i64 as
        // part of their signature, so we rely on the dynCall functions generated by
        // wasm-emscripten-finalize
        if (sig.includes('j')) {
          return dynCallLegacy(sig, ptr, args);
        }
        assert(getWasmTableEntry(ptr), `missing table entry in dynCall: ${ptr}`);
        var rtn = getWasmTableEntry(ptr)(...args);
        return rtn;
      };
    var getDynCaller = (sig, ptr) => {
        assert(sig.includes('j') || sig.includes('p'), 'getDynCaller should only be called with i64 sigs')
        return (...args) => dynCall(sig, ptr, args);
      };
    
    
    var embind__requireFunction = (signature, rawFunction) => {
        signature = readLatin1String(signature);
    
        function makeDynCaller() {
          if (signature.includes('j')) {
            return getDynCaller(signature, rawFunction);
          }
          return getWasmTableEntry(rawFunction);
        }
    
        var fp = makeDynCaller();
        if (typeof fp != "function") {
            throwBindingError(`unknown function pointer with signature ${signature}: ${rawFunction}`);
        }
        return fp;
      };
    
    
    
    var extendError = (baseErrorType, errorName) => {
        var errorClass = createNamedFunction(errorName, function(message) {
          this.name = errorName;
          this.message = message;
    
          var stack = (new Error(message)).stack;
          if (stack !== undefined) {
            this.stack = this.toString() + '\n' +
                stack.replace(/^Error(:[^\n]*)?\n/, '');
          }
        });
        errorClass.prototype = Object.create(baseErrorType.prototype);
        errorClass.prototype.constructor = errorClass;
        errorClass.prototype.toString = function() {
          if (this.message === undefined) {
            return this.name;
          } else {
            return `${this.name}: ${this.message}`;
          }
        };
    
        return errorClass;
      };
    var UnboundTypeError;
    
    
    
    var getTypeName = (type) => {
        var ptr = ___getTypeName(type);
        var rv = readLatin1String(ptr);
        _free(ptr);
        return rv;
      };
    var throwUnboundTypeError = (message, types) => {
        var unboundTypes = [];
        var seen = {};
        function visit(type) {
          if (seen[type]) {
            return;
          }
          if (registeredTypes[type]) {
            return;
          }
          if (typeDependencies[type]) {
            typeDependencies[type].forEach(visit);
            return;
          }
          unboundTypes.push(type);
          seen[type] = true;
        }
        types.forEach(visit);
    
        throw new UnboundTypeError(`${message}: ` + unboundTypes.map(getTypeName).join([', ']));
      };
    
    var __embind_register_class = (rawType,
                              rawPointerType,
                              rawConstPointerType,
                              baseClassRawType,
                              getActualTypeSignature,
                              getActualType,
                              upcastSignature,
                              upcast,
                              downcastSignature,
                              downcast,
                              name,
                              destructorSignature,
                              rawDestructor) => {
        name = readLatin1String(name);
        getActualType = embind__requireFunction(getActualTypeSignature, getActualType);
        upcast &&= embind__requireFunction(upcastSignature, upcast);
        downcast &&= embind__requireFunction(downcastSignature, downcast);
        rawDestructor = embind__requireFunction(destructorSignature, rawDestructor);
        var legalFunctionName = makeLegalFunctionName(name);
    
        exposePublicSymbol(legalFunctionName, function() {
          // this code cannot run if baseClassRawType is zero
          throwUnboundTypeError(`Cannot construct ${name} due to unbound types`, [baseClassRawType]);
        });
    
        whenDependentTypesAreResolved(
          [rawType, rawPointerType, rawConstPointerType],
          baseClassRawType ? [baseClassRawType] : [],
          (base) => {
            base = base[0];
    
            var baseClass;
            var basePrototype;
            if (baseClassRawType) {
              baseClass = base.registeredClass;
              basePrototype = baseClass.instancePrototype;
            } else {
              basePrototype = ClassHandle.prototype;
            }
    
            var constructor = createNamedFunction(name, function(...args) {
              if (Object.getPrototypeOf(this) !== instancePrototype) {
                throw new BindingError("Use 'new' to construct " + name);
              }
              if (undefined === registeredClass.constructor_body) {
                throw new BindingError(name + " has no accessible constructor");
              }
              var body = registeredClass.constructor_body[args.length];
              if (undefined === body) {
                throw new BindingError(`Tried to invoke ctor of ${name} with invalid number of parameters (${args.length}) - expected (${Object.keys(registeredClass.constructor_body).toString()}) parameters instead!`);
              }
              return body.apply(this, args);
            });
    
            var instancePrototype = Object.create(basePrototype, {
              constructor: { value: constructor },
            });
    
            constructor.prototype = instancePrototype;
    
            var registeredClass = new RegisteredClass(name,
                                                      constructor,
                                                      instancePrototype,
                                                      rawDestructor,
                                                      baseClass,
                                                      getActualType,
                                                      upcast,
                                                      downcast);
    
            if (registeredClass.baseClass) {
              // Keep track of class hierarchy. Used to allow sub-classes to inherit class functions.
              registeredClass.baseClass.__derivedClasses ??= [];
    
              registeredClass.baseClass.__derivedClasses.push(registeredClass);
            }
    
            var referenceConverter = new RegisteredPointer(name,
                                                          registeredClass,
                                                          true,
                                                          false,
                                                          false);
    
            var pointerConverter = new RegisteredPointer(name + '*',
                                                        registeredClass,
                                                        false,
                                                        false,
                                                        false);
    
            var constPointerConverter = new RegisteredPointer(name + ' const*',
                                                              registeredClass,
                                                              false,
                                                              true,
                                                              false);
    
            registeredPointers[rawType] = {
              pointerType: pointerConverter,
              constPointerType: constPointerConverter
            };
    
            replacePublicSymbol(legalFunctionName, constructor);
    
            return [referenceConverter, pointerConverter, constPointerConverter];
          }
        );
      };

    var heap32VectorToArray = (count, firstElement) => {
        var array = [];
        for (var i = 0; i < count; i++) {
          // TODO(https://github.com/emscripten-core/emscripten/issues/17310):
          // Find a way to hoist the `>> 2` or `>> 3` out of this loop.
          array.push(HEAPU32[(((firstElement)+(i * 4))>>2)]);
        }
        return array;
      };
    
    
    var runDestructors = (destructors) => {
        while (destructors.length) {
          var ptr = destructors.pop();
          var del = destructors.pop();
          del(ptr);
        }
      };
    
    
    
    
    
    
    
    function usesDestructorStack(argTypes) {
        // Skip return value at index 0 - it's not deleted here.
        for (var i = 1; i < argTypes.length; ++i) {
          // The type does not define a destructor function - must use dynamic stack
          if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) {
            return true;
          }
        }
        return false;
      }
    
    function newFunc(constructor, argumentList) {
        if (!(constructor instanceof Function)) {
          throw new TypeError(`new_ called with constructor type ${typeof(constructor)} which is not a function`);
        }
        /*
        * Previously, the following line was just:
        *   function dummy() {};
        * Unfortunately, Chrome was preserving 'dummy' as the object's name, even
        * though at creation, the 'dummy' has the correct constructor name.  Thus,
        * objects created with IMVU.new would show up in the debugger as 'dummy',
        * which isn't very helpful.  Using IMVU.createNamedFunction addresses the
        * issue.  Doubly-unfortunately, there's no way to write a test for this
        * behavior.  -NRD 2013.02.22
        */
        var dummy = createNamedFunction(constructor.name || 'unknownFunctionName', function(){});
        dummy.prototype = constructor.prototype;
        var obj = new dummy;
    
        var r = constructor.apply(obj, argumentList);
        return (r instanceof Object) ? r : obj;
      }
    
    
    function checkArgCount(numArgs, minArgs, maxArgs, humanName, throwBindingError) {
        if (numArgs < minArgs || numArgs > maxArgs) {
          var argCountMessage = minArgs == maxArgs ? minArgs : `${minArgs} to ${maxArgs}`;
          throwBindingError(`function ${humanName} called with ${numArgs} arguments, expected ${argCountMessage}`);
        }
      }
    function createJsInvoker(argTypes, isClassMethodFunc, returns, isAsync) {
        var needsDestructorStack = usesDestructorStack(argTypes);
        var argCount = argTypes.length - 2;
        var argsList = [];
        var argsListWired = ['fn'];
        if (isClassMethodFunc) {
          argsListWired.push('thisWired');
        }
        for (var i = 0; i < argCount; ++i) {
          argsList.push(`arg${i}`)
          argsListWired.push(`arg${i}Wired`)
        }
        argsList = argsList.join(',')
        argsListWired = argsListWired.join(',')
    
        var invokerFnBody = `return function (${argsList}) {\n`;
    
        invokerFnBody += "checkArgCount(arguments.length, minArgs, maxArgs, humanName, throwBindingError);\n";
    
        if (needsDestructorStack) {
          invokerFnBody += "var destructors = [];\n";
        }
    
        var dtorStack = needsDestructorStack ? "destructors" : "null";
        var args1 = ["humanName", "throwBindingError", "invoker", "fn", "runDestructors", "retType", "classParam"];
    
        if (isClassMethodFunc) {
          invokerFnBody += `var thisWired = classParam['toWireType'](${dtorStack}, this);\n`;
        }
    
        for (var i = 0; i < argCount; ++i) {
          invokerFnBody += `var arg${i}Wired = argType${i}['toWireType'](${dtorStack}, arg${i});\n`;
          args1.push(`argType${i}`);
        }
    
        invokerFnBody += (returns || isAsync ? "var rv = ":"") + `invoker(${argsListWired});\n`;
    
        var returnVal = returns ? "rv" : "";
    
        if (needsDestructorStack) {
          invokerFnBody += "runDestructors(destructors);\n";
        } else {
          for (var i = isClassMethodFunc?1:2; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here. Also skip class type if not a method.
            var paramName = (i === 1 ? "thisWired" : ("arg"+(i - 2)+"Wired"));
            if (argTypes[i].destructorFunction !== null) {
              invokerFnBody += `${paramName}_dtor(${paramName});\n`;
              args1.push(`${paramName}_dtor`);
            }
          }
        }
    
        if (returns) {
          invokerFnBody += "var ret = retType['fromWireType'](rv);\n" +
                          "return ret;\n";
        } else {
        }
    
        invokerFnBody += "}\n";
    
        args1.push('checkArgCount', 'minArgs', 'maxArgs');
        invokerFnBody = `if (arguments.length !== ${args1.length}){ throw new Error(humanName + "Expected ${args1.length} closure arguments " + arguments.length + " given."); }\n${invokerFnBody}`;
        return [args1, invokerFnBody];
      }
    
    function getRequiredArgCount(argTypes) {
        var requiredArgCount = argTypes.length - 2;
        for (var i = argTypes.length - 1; i >= 2; --i) {
          if (!argTypes[i].optional) {
            break;
          }
          requiredArgCount--;
        }
        return requiredArgCount;
      }
    
    function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc, /** boolean= */ isAsync) {
        // humanName: a human-readable string name for the function to be generated.
        // argTypes: An array that contains the embind type objects for all types in the function signature.
        //    argTypes[0] is the type object for the function return value.
        //    argTypes[1] is the type object for function this object/class type, or null if not crafting an invoker for a class method.
        //    argTypes[2...] are the actual function parameters.
        // classType: The embind type object for the class to be bound, or null if this is not a method of a class.
        // cppInvokerFunc: JS Function object to the C++-side function that interops into C++ code.
        // cppTargetFunc: Function pointer (an integer to FUNCTION_TABLE) to the target C++ function the cppInvokerFunc will end up calling.
        // isAsync: Optional. If true, returns an async function. Async bindings are only supported with JSPI.
        var argCount = argTypes.length;
    
        if (argCount < 2) {
          throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
        }
    
        assert(!isAsync, 'Async bindings are only supported with JSPI.');
    
        var isClassMethodFunc = (argTypes[1] !== null && classType !== null);
    
        // Free functions with signature "void function()" do not need an invoker that marshalls between wire types.
    // TODO: This omits argument count check - enable only at -O3 or similar.
    //    if (ENABLE_UNSAFE_OPTS && argCount == 2 && argTypes[0].name == "void" && !isClassMethodFunc) {
    //       return FUNCTION_TABLE[fn];
    //    }
    
        // Determine if we need to use a dynamic stack to store the destructors for the function parameters.
        // TODO: Remove this completely once all function invokers are being dynamically generated.
        var needsDestructorStack = usesDestructorStack(argTypes);
    
        var returns = (argTypes[0].name !== "void");
    
        var expectedArgCount = argCount - 2;
        var minArgs = getRequiredArgCount(argTypes);
      // Builld the arguments that will be passed into the closure around the invoker
      // function.
      var closureArgs = [humanName, throwBindingError, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1]];
      for (var i = 0; i < argCount - 2; ++i) {
        closureArgs.push(argTypes[i+2]);
      }
      if (!needsDestructorStack) {
        for (var i = isClassMethodFunc?1:2; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here. Also skip class type if not a method.
          if (argTypes[i].destructorFunction !== null) {
            closureArgs.push(argTypes[i].destructorFunction);
          }
        }
      }
      closureArgs.push(checkArgCount, minArgs, expectedArgCount);
    
      let [args, invokerFnBody] = createJsInvoker(argTypes, isClassMethodFunc, returns, isAsync);
      args.push(invokerFnBody);
      var invokerFn = newFunc(Function, args)(...closureArgs);
        return createNamedFunction(humanName, invokerFn);
      }
    var __embind_register_class_constructor = (
        rawClassType,
        argCount,
        rawArgTypesAddr,
        invokerSignature,
        invoker,
        rawConstructor
      ) => {
        assert(argCount > 0);
        var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
        invoker = embind__requireFunction(invokerSignature, invoker);
        var args = [rawConstructor];
        var destructors = [];
    
        whenDependentTypesAreResolved([], [rawClassType], (classType) => {
          classType = classType[0];
          var humanName = `constructor ${classType.name}`;
    
          if (undefined === classType.registeredClass.constructor_body) {
            classType.registeredClass.constructor_body = [];
          }
          if (undefined !== classType.registeredClass.constructor_body[argCount - 1]) {
            throw new BindingError(`Cannot register multiple constructors with identical number of parameters (${argCount-1}) for class '${classType.name}'! Overload resolution is currently only performed using the parameter count, not actual type info!`);
          }
          classType.registeredClass.constructor_body[argCount - 1] = () => {
            throwUnboundTypeError(`Cannot construct ${classType.name} due to unbound types`, rawArgTypes);
          };
    
          whenDependentTypesAreResolved([], rawArgTypes, (argTypes) => {
            // Insert empty slot for context type (argTypes[1]).
            argTypes.splice(1, 0, null);
            classType.registeredClass.constructor_body[argCount - 1] = craftInvokerFunction(humanName, argTypes, null, invoker, rawConstructor);
            return [];
          });
          return [];
        });
      };

    
    
    
    
    
    
    var getFunctionName = (signature) => {
        signature = signature.trim();
        const argsIndex = signature.indexOf("(");
        if (argsIndex !== -1) {
          assert(signature[signature.length - 1] == ")", "Parentheses for argument names should match.");
          return signature.substr(0, argsIndex);
        } else {
          return signature;
        }
      };
    var __embind_register_class_function = (rawClassType,
                                        methodName,
                                        argCount,
                                        rawArgTypesAddr, // [ReturnType, ThisType, Args...]
                                        invokerSignature,
                                        rawInvoker,
                                        context,
                                        isPureVirtual,
                                        isAsync,
                                        isNonnullReturn) => {
        var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
        methodName = readLatin1String(methodName);
        methodName = getFunctionName(methodName);
        rawInvoker = embind__requireFunction(invokerSignature, rawInvoker);
    
        whenDependentTypesAreResolved([], [rawClassType], (classType) => {
          classType = classType[0];
          var humanName = `${classType.name}.${methodName}`;
    
          if (methodName.startsWith("@@")) {
            methodName = Symbol[methodName.substring(2)];
          }
    
          if (isPureVirtual) {
            classType.registeredClass.pureVirtualFunctions.push(methodName);
          }
    
          function unboundTypesHandler() {
            throwUnboundTypeError(`Cannot call ${humanName} due to unbound types`, rawArgTypes);
          }
    
          var proto = classType.registeredClass.instancePrototype;
          var method = proto[methodName];
          if (undefined === method || (undefined === method.overloadTable && method.className !== classType.name && method.argCount === argCount - 2)) {
            // This is the first overload to be registered, OR we are replacing a
            // function in the base class with a function in the derived class.
            unboundTypesHandler.argCount = argCount - 2;
            unboundTypesHandler.className = classType.name;
            proto[methodName] = unboundTypesHandler;
          } else {
            // There was an existing function with the same name registered. Set up
            // a function overload routing table.
            ensureOverloadTable(proto, methodName, humanName);
            proto[methodName].overloadTable[argCount - 2] = unboundTypesHandler;
          }
    
          whenDependentTypesAreResolved([], rawArgTypes, (argTypes) => {
            var memberFunction = craftInvokerFunction(humanName, argTypes, classType, rawInvoker, context, isAsync);
    
            // Replace the initial unbound-handler-stub function with the
            // appropriate member function, now that all types are resolved. If
            // multiple overloads are registered for this function, the function
            // goes into an overload table.
            if (undefined === proto[methodName].overloadTable) {
              // Set argCount in case an overload is registered later
              memberFunction.argCount = argCount - 2;
              proto[methodName] = memberFunction;
            } else {
              proto[methodName].overloadTable[argCount - 2] = memberFunction;
            }
    
            return [];
          });
          return [];
        });
      };

    
    var emval_freelist = [];
    
    var emval_handles = [];
    var __emval_decref = (handle) => {
        if (handle > 9 && 0 === --emval_handles[handle + 1]) {
          assert(emval_handles[handle] !== undefined, `Decref for unallocated handle.`);
          emval_handles[handle] = undefined;
          emval_freelist.push(handle);
        }
      };
    
    
    
    
    
    var count_emval_handles = () => {
        return emval_handles.length / 2 - 5 - emval_freelist.length;
      };
    
    var init_emval = () => {
        // reserve 0 and some special values. These never get de-allocated.
        emval_handles.push(
          0, 1,
          undefined, 1,
          null, 1,
          true, 1,
          false, 1,
        );
        assert(emval_handles.length === 5 * 2);
        Module['count_emval_handles'] = count_emval_handles;
      };
    var Emval = {
    toValue:(handle) => {
          if (!handle) {
              throwBindingError('Cannot use deleted val. handle = ' + handle);
          }
          // handle 2 is supposed to be `undefined`.
          assert(handle === 2 || emval_handles[handle] !== undefined && handle % 2 === 0, `invalid handle: ${handle}`);
          return emval_handles[handle];
        },
    toHandle:(value) => {
          switch (value) {
            case undefined: return 2;
            case null: return 4;
            case true: return 6;
            case false: return 8;
            default:{
              const handle = emval_freelist.pop() || emval_handles.length;
              emval_handles[handle] = value;
              emval_handles[handle + 1] = 1;
              return handle;
            }
          }
        },
    };
    
    
    var EmValType = {
        name: 'emscripten::val',
        'fromWireType': (handle) => {
          var rv = Emval.toValue(handle);
          __emval_decref(handle);
          return rv;
        },
        'toWireType': (destructors, value) => Emval.toHandle(value),
        argPackAdvance: GenericWireTypeSize,
        'readValueFromPointer': readPointer,
        destructorFunction: null, // This type does not need a destructor
    
        // TODO: do we need a deleteObject here?  write a test where
        // emval is passed into JS via an interface
      };
    var __embind_register_emval = (rawType) => registerType(rawType, EmValType);

    var embindRepr = (v) => {
        if (v === null) {
            return 'null';
        }
        var t = typeof v;
        if (t === 'object' || t === 'array' || t === 'function') {
            return v.toString();
        } else {
            return '' + v;
        }
      };
    
    var floatReadValueFromPointer = (name, width) => {
        switch (width) {
            case 4: return function(pointer) {
                return this['fromWireType'](HEAPF32[((pointer)>>2)]);
            };
            case 8: return function(pointer) {
                return this['fromWireType'](HEAPF64[((pointer)>>3)]);
            };
            default:
                throw new TypeError(`invalid float width (${width}): ${name}`);
        }
      };
    
    
    var __embind_register_float = (rawType, name, size) => {
        name = readLatin1String(name);
        registerType(rawType, {
          name,
          'fromWireType': (value) => value,
          'toWireType': (destructors, value) => {
            if (typeof value != "number" && typeof value != "boolean") {
              throw new TypeError(`Cannot convert ${embindRepr(value)} to ${this.name}`);
            }
            // The VM will perform JS to Wasm value conversion, according to the spec:
            // https://www.w3.org/TR/wasm-js-api-1/#towebassemblyvalue
            return value;
          },
          argPackAdvance: GenericWireTypeSize,
          'readValueFromPointer': floatReadValueFromPointer(name, size),
          destructorFunction: null, // This type does not need a destructor
        });
      };

    
    var integerReadValueFromPointer = (name, width, signed) => {
        // integers are quite common, so generate very specialized functions
        switch (width) {
            case 1: return signed ?
                (pointer) => HEAP8[pointer] :
                (pointer) => HEAPU8[pointer];
            case 2: return signed ?
                (pointer) => HEAP16[((pointer)>>1)] :
                (pointer) => HEAPU16[((pointer)>>1)]
            case 4: return signed ?
                (pointer) => HEAP32[((pointer)>>2)] :
                (pointer) => HEAPU32[((pointer)>>2)]
            default:
                throw new TypeError(`invalid integer width (${width}): ${name}`);
        }
      };
    
    
    /** @suppress {globalThis} */
    var __embind_register_integer = (primitiveType, name, size, minRange, maxRange) => {
        name = readLatin1String(name);
        // LLVM doesn't have signed and unsigned 32-bit types, so u32 literals come
        // out as 'i32 -1'. Always treat those as max u32.
        if (maxRange === -1) {
          maxRange = 4294967295;
        }
    
        var fromWireType = (value) => value;
    
        if (minRange === 0) {
          var bitshift = 32 - 8*size;
          fromWireType = (value) => (value << bitshift) >>> bitshift;
        }
    
        var isUnsignedType = (name.includes('unsigned'));
        var checkAssertions = (value, toTypeName) => {
          if (typeof value != "number" && typeof value != "boolean") {
            throw new TypeError(`Cannot convert "${embindRepr(value)}" to ${toTypeName}`);
          }
          if (value < minRange || value > maxRange) {
            throw new TypeError(`Passing a number "${embindRepr(value)}" from JS side to C/C++ side to an argument of type "${name}", which is outside the valid range [${minRange}, ${maxRange}]!`);
          }
        }
        var toWireType;
        if (isUnsignedType) {
          toWireType = function(destructors, value) {
            checkAssertions(value, this.name);
            return value >>> 0;
          }
        } else {
          toWireType = function(destructors, value) {
            checkAssertions(value, this.name);
            // The VM will perform JS to Wasm value conversion, according to the spec:
            // https://www.w3.org/TR/wasm-js-api-1/#towebassemblyvalue
            return value;
          }
        }
        registerType(primitiveType, {
          name,
          'fromWireType': fromWireType,
          'toWireType': toWireType,
          argPackAdvance: GenericWireTypeSize,
          'readValueFromPointer': integerReadValueFromPointer(name, size, minRange !== 0),
          destructorFunction: null, // This type does not need a destructor
        });
      };

    
    var __embind_register_memory_view = (rawType, dataTypeIndex, name) => {
        var typeMapping = [
          Int8Array,
          Uint8Array,
          Int16Array,
          Uint16Array,
          Int32Array,
          Uint32Array,
          Float32Array,
          Float64Array,
        ];
    
        var TA = typeMapping[dataTypeIndex];
    
        function decodeMemoryView(handle) {
          var size = HEAPU32[((handle)>>2)];
          var data = HEAPU32[(((handle)+(4))>>2)];
          return new TA(HEAP8.buffer, data, size);
        }
    
        name = readLatin1String(name);
        registerType(rawType, {
          name,
          'fromWireType': decodeMemoryView,
          argPackAdvance: GenericWireTypeSize,
          'readValueFromPointer': decodeMemoryView,
        }, {
          ignoreDuplicateRegistrations: true,
        });
      };

    
    
    
    
    var stringToUTF8Array = (str, heap, outIdx, maxBytesToWrite) => {
        assert(typeof str === 'string', `stringToUTF8Array expects a string (got ${typeof str})`);
        // Parameter maxBytesToWrite is not optional. Negative values, 0, null,
        // undefined and false each don't write out any bytes.
        if (!(maxBytesToWrite > 0))
          return 0;
    
        var startIdx = outIdx;
        var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
        for (var i = 0; i < str.length; ++i) {
          // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code
          // unit, not a Unicode code point of the character! So decode
          // UTF16->UTF32->UTF8.
          // See http://unicode.org/faq/utf_bom.html#utf16-3
          // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description
          // and https://www.ietf.org/rfc/rfc2279.txt
          // and https://tools.ietf.org/html/rfc3629
          var u = str.charCodeAt(i); // possibly a lead surrogate
          if (u >= 0xD800 && u <= 0xDFFF) {
            var u1 = str.charCodeAt(++i);
            u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
          }
          if (u <= 0x7F) {
            if (outIdx >= endIdx) break;
            heap[outIdx++] = u;
          } else if (u <= 0x7FF) {
            if (outIdx + 1 >= endIdx) break;
            heap[outIdx++] = 0xC0 | (u >> 6);
            heap[outIdx++] = 0x80 | (u & 63);
          } else if (u <= 0xFFFF) {
            if (outIdx + 2 >= endIdx) break;
            heap[outIdx++] = 0xE0 | (u >> 12);
            heap[outIdx++] = 0x80 | ((u >> 6) & 63);
            heap[outIdx++] = 0x80 | (u & 63);
          } else {
            if (outIdx + 3 >= endIdx) break;
            if (u > 0x10FFFF) warnOnce('Invalid Unicode code point ' + ptrToString(u) + ' encountered when serializing a JS string to a UTF-8 string in wasm memory! (Valid unicode code points should be in range 0-0x10FFFF).');
            heap[outIdx++] = 0xF0 | (u >> 18);
            heap[outIdx++] = 0x80 | ((u >> 12) & 63);
            heap[outIdx++] = 0x80 | ((u >> 6) & 63);
            heap[outIdx++] = 0x80 | (u & 63);
          }
        }
        // Null-terminate the pointer to the buffer.
        heap[outIdx] = 0;
        return outIdx - startIdx;
      };
    var stringToUTF8 = (str, outPtr, maxBytesToWrite) => {
        assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
        return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
      };
    
    var lengthBytesUTF8 = (str) => {
        var len = 0;
        for (var i = 0; i < str.length; ++i) {
          // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code
          // unit, not a Unicode code point of the character! So decode
          // UTF16->UTF32->UTF8.
          // See http://unicode.org/faq/utf_bom.html#utf16-3
          var c = str.charCodeAt(i); // possibly a lead surrogate
          if (c <= 0x7F) {
            len++;
          } else if (c <= 0x7FF) {
            len += 2;
          } else if (c >= 0xD800 && c <= 0xDFFF) {
            len += 4; ++i;
          } else {
            len += 3;
          }
        }
        return len;
      };
    
    
    
    var __embind_register_std_string = (rawType, name) => {
        name = readLatin1String(name);
        var stdStringIsUTF8
        //process only std::string bindings with UTF8 support, in contrast to e.g. std::basic_string<unsigned char>
        = (name === "std::string");
    
        registerType(rawType, {
          name,
          // For some method names we use string keys here since they are part of
          // the public/external API and/or used by the runtime-generated code.
          'fromWireType'(value) {
            var length = HEAPU32[((value)>>2)];
            var payload = value + 4;
    
            var str;
            if (stdStringIsUTF8) {
              var decodeStartPtr = payload;
              // Looping here to support possible embedded '0' bytes
              for (var i = 0; i <= length; ++i) {
                var currentBytePtr = payload + i;
                if (i == length || HEAPU8[currentBytePtr] == 0) {
                  var maxRead = currentBytePtr - decodeStartPtr;
                  var stringSegment = UTF8ToString(decodeStartPtr, maxRead);
                  if (str === undefined) {
                    str = stringSegment;
                  } else {
                    str += String.fromCharCode(0);
                    str += stringSegment;
                  }
                  decodeStartPtr = currentBytePtr + 1;
                }
              }
            } else {
              var a = new Array(length);
              for (var i = 0; i < length; ++i) {
                a[i] = String.fromCharCode(HEAPU8[payload + i]);
              }
              str = a.join('');
            }
    
            _free(value);
    
            return str;
          },
          'toWireType'(destructors, value) {
            if (value instanceof ArrayBuffer) {
              value = new Uint8Array(value);
            }
    
            var length;
            var valueIsOfTypeString = (typeof value == 'string');
    
            if (!(valueIsOfTypeString || value instanceof Uint8Array || value instanceof Uint8ClampedArray || value instanceof Int8Array)) {
              throwBindingError('Cannot pass non-string to std::string');
            }
            if (stdStringIsUTF8 && valueIsOfTypeString) {
              length = lengthBytesUTF8(value);
            } else {
              length = value.length;
            }
    
            // assumes POINTER_SIZE alignment
            var base = _malloc(4 + length + 1);
            var ptr = base + 4;
            HEAPU32[((base)>>2)] = length;
            if (stdStringIsUTF8 && valueIsOfTypeString) {
              stringToUTF8(value, ptr, length + 1);
            } else {
              if (valueIsOfTypeString) {
                for (var i = 0; i < length; ++i) {
                  var charCode = value.charCodeAt(i);
                  if (charCode > 255) {
                    _free(ptr);
                    throwBindingError('String has UTF-16 code units that do not fit in 8 bits');
                  }
                  HEAPU8[ptr + i] = charCode;
                }
              } else {
                for (var i = 0; i < length; ++i) {
                  HEAPU8[ptr + i] = value[i];
                }
              }
            }
    
            if (destructors !== null) {
              destructors.push(_free, base);
            }
            return base;
          },
          argPackAdvance: GenericWireTypeSize,
          'readValueFromPointer': readPointer,
          destructorFunction(ptr) {
            _free(ptr);
          },
        });
      };

    
    
    
    var UTF16Decoder = typeof TextDecoder != 'undefined' ? new TextDecoder('utf-16le') : undefined;;
    var UTF16ToString = (ptr, maxBytesToRead) => {
        assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
        var endPtr = ptr;
        // TextDecoder needs to know the byte length in advance, it doesn't stop on
        // null terminator by itself.
        // Also, use the length info to avoid running tiny strings through
        // TextDecoder, since .subarray() allocates garbage.
        var idx = endPtr >> 1;
        var maxIdx = idx + maxBytesToRead / 2;
        // If maxBytesToRead is not passed explicitly, it will be undefined, and this
        // will always evaluate to true. This saves on code size.
        while (!(idx >= maxIdx) && HEAPU16[idx]) ++idx;
        endPtr = idx << 1;
    
        if (endPtr - ptr > 32 && UTF16Decoder)
          return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
    
        // Fallback: decode without UTF16Decoder
        var str = '';
    
        // If maxBytesToRead is not passed explicitly, it will be undefined, and the
        // for-loop's condition will always evaluate to true. The loop is then
        // terminated on the first null char.
        for (var i = 0; !(i >= maxBytesToRead / 2); ++i) {
          var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
          if (codeUnit == 0) break;
          // fromCharCode constructs a character from a UTF-16 code unit, so we can
          // pass the UTF16 string right through.
          str += String.fromCharCode(codeUnit);
        }
    
        return str;
      };
    
    var stringToUTF16 = (str, outPtr, maxBytesToWrite) => {
        assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
        assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
        // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
        maxBytesToWrite ??= 0x7FFFFFFF;
        if (maxBytesToWrite < 2) return 0;
        maxBytesToWrite -= 2; // Null terminator.
        var startPtr = outPtr;
        var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
        for (var i = 0; i < numCharsToWrite; ++i) {
          // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
          var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
          HEAP16[((outPtr)>>1)] = codeUnit;
          outPtr += 2;
        }
        // Null-terminate the pointer to the HEAP.
        HEAP16[((outPtr)>>1)] = 0;
        return outPtr - startPtr;
      };
    
    var lengthBytesUTF16 = (str) => {
        return str.length*2;
      };
    
    var UTF32ToString = (ptr, maxBytesToRead) => {
        assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
        var i = 0;
    
        var str = '';
        // If maxBytesToRead is not passed explicitly, it will be undefined, and this
        // will always evaluate to true. This saves on code size.
        while (!(i >= maxBytesToRead / 4)) {
          var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
          if (utf32 == 0) break;
          ++i;
          // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
          // See http://unicode.org/faq/utf_bom.html#utf16-3
          if (utf32 >= 0x10000) {
            var ch = utf32 - 0x10000;
            str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
          } else {
            str += String.fromCharCode(utf32);
          }
        }
        return str;
      };
    
    var stringToUTF32 = (str, outPtr, maxBytesToWrite) => {
        assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
        assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
        // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
        maxBytesToWrite ??= 0x7FFFFFFF;
        if (maxBytesToWrite < 4) return 0;
        var startPtr = outPtr;
        var endPtr = startPtr + maxBytesToWrite - 4;
        for (var i = 0; i < str.length; ++i) {
          // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
          // See http://unicode.org/faq/utf_bom.html#utf16-3
          var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
          if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
            var trailSurrogate = str.charCodeAt(++i);
            codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
          }
          HEAP32[((outPtr)>>2)] = codeUnit;
          outPtr += 4;
          if (outPtr + 4 > endPtr) break;
        }
        // Null-terminate the pointer to the HEAP.
        HEAP32[((outPtr)>>2)] = 0;
        return outPtr - startPtr;
      };
    
    var lengthBytesUTF32 = (str) => {
        var len = 0;
        for (var i = 0; i < str.length; ++i) {
          // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
          // See http://unicode.org/faq/utf_bom.html#utf16-3
          var codeUnit = str.charCodeAt(i);
          if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
          len += 4;
        }
    
        return len;
      };
    var __embind_register_std_wstring = (rawType, charSize, name) => {
        name = readLatin1String(name);
        var decodeString, encodeString, readCharAt, lengthBytesUTF;
        if (charSize === 2) {
          decodeString = UTF16ToString;
          encodeString = stringToUTF16;
          lengthBytesUTF = lengthBytesUTF16;
          readCharAt = (pointer) => HEAPU16[((pointer)>>1)];
        } else if (charSize === 4) {
          decodeString = UTF32ToString;
          encodeString = stringToUTF32;
          lengthBytesUTF = lengthBytesUTF32;
          readCharAt = (pointer) => HEAPU32[((pointer)>>2)];
        }
        registerType(rawType, {
          name,
          'fromWireType': (value) => {
            // Code mostly taken from _embind_register_std_string fromWireType
            var length = HEAPU32[((value)>>2)];
            var str;
    
            var decodeStartPtr = value + 4;
            // Looping here to support possible embedded '0' bytes
            for (var i = 0; i <= length; ++i) {
              var currentBytePtr = value + 4 + i * charSize;
              if (i == length || readCharAt(currentBytePtr) == 0) {
                var maxReadBytes = currentBytePtr - decodeStartPtr;
                var stringSegment = decodeString(decodeStartPtr, maxReadBytes);
                if (str === undefined) {
                  str = stringSegment;
                } else {
                  str += String.fromCharCode(0);
                  str += stringSegment;
                }
                decodeStartPtr = currentBytePtr + charSize;
              }
            }
    
            _free(value);
    
            return str;
          },
          'toWireType': (destructors, value) => {
            if (!(typeof value == 'string')) {
              throwBindingError(`Cannot pass non-string to C++ string type ${name}`);
            }
    
            // assumes POINTER_SIZE alignment
            var length = lengthBytesUTF(value);
            var ptr = _malloc(4 + length + charSize);
            HEAPU32[((ptr)>>2)] = length / charSize;
    
            encodeString(value, ptr + 4, length + charSize);
    
            if (destructors !== null) {
              destructors.push(_free, ptr);
            }
            return ptr;
          },
          argPackAdvance: GenericWireTypeSize,
          'readValueFromPointer': readPointer,
          destructorFunction(ptr) {
            _free(ptr);
          }
        });
      };

    
    var __embind_register_void = (rawType, name) => {
        name = readLatin1String(name);
        registerType(rawType, {
          isVoid: true, // void return values can be optimized out sometimes
          name,
          argPackAdvance: 0,
          'fromWireType': () => undefined,
          // TODO: assert if anything else is given?
          'toWireType': (destructors, o) => undefined,
        });
      };

    var __emscripten_memcpy_js = (dest, src, num) => HEAPU8.copyWithin(dest, src, src + num);

    var emval_methodCallers = [];
    
    var __emval_call = (caller, handle, destructorsRef, args) => {
        caller = emval_methodCallers[caller];
        handle = Emval.toValue(handle);
        return caller(null, handle, destructorsRef, args);
      };


    var emval_addMethodCaller = (caller) => {
        var id = emval_methodCallers.length;
        emval_methodCallers.push(caller);
        return id;
      };
    
    
    
    var requireRegisteredType = (rawType, humanName) => {
        var impl = registeredTypes[rawType];
        if (undefined === impl) {
          throwBindingError(`${humanName} has unknown type ${getTypeName(rawType)}`);
        }
        return impl;
      };
    var emval_lookupTypes = (argCount, argTypes) => {
        var a = new Array(argCount);
        for (var i = 0; i < argCount; ++i) {
          a[i] = requireRegisteredType(HEAPU32[(((argTypes)+(i * 4))>>2)],
                                      "parameter " + i);
        }
        return a;
      };
    
    
    var reflectConstruct = Reflect.construct;
    
    var emval_returnValue = (returnType, destructorsRef, handle) => {
        var destructors = [];
        var result = returnType['toWireType'](destructors, handle);
        if (destructors.length) {
          // void, primitives and any other types w/o destructors don't need to allocate a handle
          HEAPU32[((destructorsRef)>>2)] = Emval.toHandle(destructors);
        }
        return result;
      };
    
    var __emval_get_method_caller = (argCount, argTypes, kind) => {
        var types = emval_lookupTypes(argCount, argTypes);
        var retType = types.shift();
        argCount--; // remove the shifted off return type
    
        var functionBody =
          `return function (obj, func, destructorsRef, args) {\n`;
    
        var offset = 0;
        var argsList = []; // 'obj?, arg0, arg1, arg2, ... , argN'
        if (kind === /* FUNCTION */ 0) {
          argsList.push("obj");
        }
        var params = ["retType"];
        var args = [retType];
        for (var i = 0; i < argCount; ++i) {
          argsList.push("arg" + i);
          params.push("argType" + i);
          args.push(types[i]);
          functionBody +=
            `  var arg${i} = argType${i}.readValueFromPointer(args${offset ? "+" + offset : ""});\n`;
          offset += types[i].argPackAdvance;
        }
        var invoker = kind === /* CONSTRUCTOR */ 1 ? 'new func' : 'func.call';
        functionBody +=
          `  var rv = ${invoker}(${argsList.join(", ")});\n`;
        if (!retType.isVoid) {
          params.push("emval_returnValue");
          args.push(emval_returnValue);
          functionBody +=
            "  return emval_returnValue(retType, destructorsRef, rv);\n";
        }
        functionBody +=
          "};\n";
    
        params.push(functionBody);
        var invokerFunction = newFunc(Function, params)(...args);
        var functionName = `methodCaller<(${types.map(t => t.name).join(', ')}) => ${retType.name}>`;
        return emval_addMethodCaller(createNamedFunction(functionName, invokerFunction));
      };

    
    
    var __emval_run_destructors = (handle) => {
        var destructors = Emval.toValue(handle);
        runDestructors(destructors);
        __emval_decref(handle);
      };

    
    var __tzset_js = (timezone, daylight, std_name, dst_name) => {
        // TODO: Use (malleable) environment variables instead of system settings.
        var currentYear = new Date().getFullYear();
        var winter = new Date(currentYear, 0, 1);
        var summer = new Date(currentYear, 6, 1);
        var winterOffset = winter.getTimezoneOffset();
        var summerOffset = summer.getTimezoneOffset();
    
        // Local standard timezone offset. Local standard time is not adjusted for
        // daylight savings.  This code uses the fact that getTimezoneOffset returns
        // a greater value during Standard Time versus Daylight Saving Time (DST).
        // Thus it determines the expected output during Standard Time, and it
        // compares whether the output of the given date the same (Standard) or less
        // (DST).
        var stdTimezoneOffset = Math.max(winterOffset, summerOffset);
    
        // timezone is specified as seconds west of UTC ("The external variable
        // `timezone` shall be set to the difference, in seconds, between
        // Coordinated Universal Time (UTC) and local standard time."), the same
        // as returned by stdTimezoneOffset.
        // See http://pubs.opengroup.org/onlinepubs/009695399/functions/tzset.html
        HEAPU32[((timezone)>>2)] = stdTimezoneOffset * 60;
    
        HEAP32[((daylight)>>2)] = Number(winterOffset != summerOffset);
    
        var extractZone = (timezoneOffset) => {
          // Why inverse sign?
          // Read here https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTimezoneOffset
          var sign = timezoneOffset >= 0 ? "-" : "+";
    
          var absOffset = Math.abs(timezoneOffset)
          var hours = String(Math.floor(absOffset / 60)).padStart(2, "0");
          var minutes = String(absOffset % 60).padStart(2, "0");
    
          return `UTC${sign}${hours}${minutes}`;
        }
    
        var winterName = extractZone(winterOffset);
        var summerName = extractZone(summerOffset);
        assert(winterName);
        assert(summerName);
        assert(lengthBytesUTF8(winterName) <= 16, `timezone name truncated to fit in TZNAME_MAX (${winterName})`);
        assert(lengthBytesUTF8(summerName) <= 16, `timezone name truncated to fit in TZNAME_MAX (${summerName})`);
        if (summerOffset < winterOffset) {
          // Northern hemisphere
          stringToUTF8(winterName, std_name, 17);
          stringToUTF8(summerName, dst_name, 17);
        } else {
          stringToUTF8(winterName, dst_name, 17);
          stringToUTF8(summerName, std_name, 17);
        }
      };

    var getHeapMax = () =>
        HEAPU8.length;
    
    var alignMemory = (size, alignment) => {
        assert(alignment, "alignment argument is required");
        return Math.ceil(size / alignment) * alignment;
      };
    
    var abortOnCannotGrowMemory = (requestedSize) => {
        abort(`Cannot enlarge memory arrays to size ${requestedSize} bytes (OOM). Either (1) compile with -sINITIAL_MEMORY=X with X higher than the current value ${HEAP8.length}, (2) compile with -sALLOW_MEMORY_GROWTH which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with -sABORTING_MALLOC=0`);
      };
    var _emscripten_resize_heap = (requestedSize) => {
        var oldSize = HEAPU8.length;
        // With CAN_ADDRESS_2GB or MEMORY64, pointers are already unsigned.
        requestedSize >>>= 0;
        abortOnCannotGrowMemory(requestedSize);
      };

    var ENV = {
    };
    
    var getExecutableName = () => {
        return thisProgram || './this.program';
      };
    var getEnvStrings = () => {
        if (!getEnvStrings.strings) {
          // Default values.
          // Browser language detection #8751
          var lang = ((typeof navigator == 'object' && navigator.languages && navigator.languages[0]) || 'C').replace('-', '_') + '.UTF-8';
          var env = {
            'USER': 'web_user',
            'LOGNAME': 'web_user',
            'PATH': '/',
            'PWD': '/',
            'HOME': '/home/web_user',
            'LANG': lang,
            '_': getExecutableName()
          };
          // Apply the user-provided values, if any.
          for (var x in ENV) {
            // x is a key in ENV; if ENV[x] is undefined, that means it was
            // explicitly set to be so. We allow user code to do that to
            // force variables with default values to remain unset.
            if (ENV[x] === undefined) delete env[x];
            else env[x] = ENV[x];
          }
          var strings = [];
          for (var x in env) {
            strings.push(`${x}=${env[x]}`);
          }
          getEnvStrings.strings = strings;
        }
        return getEnvStrings.strings;
      };
    
    var stringToAscii = (str, buffer) => {
        for (var i = 0; i < str.length; ++i) {
          assert(str.charCodeAt(i) === (str.charCodeAt(i) & 0xff));
          HEAP8[buffer++] = str.charCodeAt(i);
        }
        // Null-terminate the string
        HEAP8[buffer] = 0;
      };
    var _environ_get = (__environ, environ_buf) => {
        var bufSize = 0;
        getEnvStrings().forEach((string, i) => {
          var ptr = environ_buf + bufSize;
          HEAPU32[(((__environ)+(i*4))>>2)] = ptr;
          stringToAscii(string, ptr);
          bufSize += string.length + 1;
        });
        return 0;
      };

    var _environ_sizes_get = (penviron_count, penviron_buf_size) => {
        var strings = getEnvStrings();
        HEAPU32[((penviron_count)>>2)] = strings.length;
        var bufSize = 0;
        strings.forEach((string) => bufSize += string.length + 1);
        HEAPU32[((penviron_buf_size)>>2)] = bufSize;
        return 0;
      };

    var PATH = {
    isAbs:(path) => path.charAt(0) === '/',
    splitPath:(filename) => {
          var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
          return splitPathRe.exec(filename).slice(1);
        },
    normalizeArray:(parts, allowAboveRoot) => {
          // if the path tries to go above the root, `up` ends up > 0
          var up = 0;
          for (var i = parts.length - 1; i >= 0; i--) {
            var last = parts[i];
            if (last === '.') {
              parts.splice(i, 1);
            } else if (last === '..') {
              parts.splice(i, 1);
              up++;
            } else if (up) {
              parts.splice(i, 1);
              up--;
            }
          }
          // if the path is allowed to go above the root, restore leading ..s
          if (allowAboveRoot) {
            for (; up; up--) {
              parts.unshift('..');
            }
          }
          return parts;
        },
    normalize:(path) => {
          var isAbsolute = PATH.isAbs(path),
              trailingSlash = path.substr(-1) === '/';
          // Normalize the path
          path = PATH.normalizeArray(path.split('/').filter((p) => !!p), !isAbsolute).join('/');
          if (!path && !isAbsolute) {
            path = '.';
          }
          if (path && trailingSlash) {
            path += '/';
          }
          return (isAbsolute ? '/' : '') + path;
        },
    dirname:(path) => {
          var result = PATH.splitPath(path),
              root = result[0],
              dir = result[1];
          if (!root && !dir) {
            // No dirname whatsoever
            return '.';
          }
          if (dir) {
            // It has a dirname, strip trailing slash
            dir = dir.substr(0, dir.length - 1);
          }
          return root + dir;
        },
    basename:(path) => {
          // EMSCRIPTEN return '/'' for '/', not an empty string
          if (path === '/') return '/';
          path = PATH.normalize(path);
          path = path.replace(/\/$/, "");
          var lastSlash = path.lastIndexOf('/');
          if (lastSlash === -1) return path;
          return path.substr(lastSlash+1);
        },
    join:(...paths) => PATH.normalize(paths.join('/')),
    join2:(l, r) => PATH.normalize(l + '/' + r),
    };
    
    var initRandomFill = () => {
        if (typeof crypto == 'object' && typeof crypto['getRandomValues'] == 'function') {
          // for modern web browsers
          return (view) => crypto.getRandomValues(view);
        } else
        // we couldn't find a proper implementation, as Math.random() is not suitable for /dev/random, see emscripten-core/emscripten/pull/7096
        abort('no cryptographic support found for randomDevice. consider polyfilling it if you want to use something insecure like Math.random(), e.g. put this in a --pre-js: var crypto = { getRandomValues: (array) => { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };');
      };
    var randomFill = (view) => {
        // Lazily init on the first invocation.
        return (randomFill = initRandomFill())(view);
      };
    
    
    
    var PATH_FS = {
    resolve:(...args) => {
          var resolvedPath = '',
            resolvedAbsolute = false;
          for (var i = args.length - 1; i >= -1 && !resolvedAbsolute; i--) {
            var path = (i >= 0) ? args[i] : FS.cwd();
            // Skip empty and invalid entries
            if (typeof path != 'string') {
              throw new TypeError('Arguments to path.resolve must be strings');
            } else if (!path) {
              return ''; // an invalid portion invalidates the whole thing
            }
            resolvedPath = path + '/' + resolvedPath;
            resolvedAbsolute = PATH.isAbs(path);
          }
          // At this point the path should be resolved to a full absolute path, but
          // handle relative paths to be safe (might happen when process.cwd() fails)
          resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter((p) => !!p), !resolvedAbsolute).join('/');
          return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
        },
    relative:(from, to) => {
          from = PATH_FS.resolve(from).substr(1);
          to = PATH_FS.resolve(to).substr(1);
          function trim(arr) {
            var start = 0;
            for (; start < arr.length; start++) {
              if (arr[start] !== '') break;
            }
            var end = arr.length - 1;
            for (; end >= 0; end--) {
              if (arr[end] !== '') break;
            }
            if (start > end) return [];
            return arr.slice(start, end - start + 1);
          }
          var fromParts = trim(from.split('/'));
          var toParts = trim(to.split('/'));
          var length = Math.min(fromParts.length, toParts.length);
          var samePartsLength = length;
          for (var i = 0; i < length; i++) {
            if (fromParts[i] !== toParts[i]) {
              samePartsLength = i;
              break;
            }
          }
          var outputParts = [];
          for (var i = samePartsLength; i < fromParts.length; i++) {
            outputParts.push('..');
          }
          outputParts = outputParts.concat(toParts.slice(samePartsLength));
          return outputParts.join('/');
        },
    };
    
    
    
    var FS_stdin_getChar_buffer = [];
    
    
    /** @type {function(string, boolean=, number=)} */
    function intArrayFromString(stringy, dontAddNull, length) {
      var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
      var u8array = new Array(len);
      var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
      if (dontAddNull) u8array.length = numBytesWritten;
      return u8array;
    }
    var FS_stdin_getChar = () => {
        if (!FS_stdin_getChar_buffer.length) {
          var result = null;
          if (typeof window != 'undefined' &&
            typeof window.prompt == 'function') {
            // Browser.
            result = window.prompt('Input: ');  // returns null on cancel
            if (result !== null) {
              result += '\n';
            }
          } else
          {}
          if (!result) {
            return null;
          }
          FS_stdin_getChar_buffer = intArrayFromString(result, true);
        }
        return FS_stdin_getChar_buffer.shift();
      };
    var TTY = {
    ttys:[],
    init() {
          // https://github.com/emscripten-core/emscripten/pull/1555
          // if (ENVIRONMENT_IS_NODE) {
          //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
          //   // device, it always assumes it's a TTY device. because of this, we're forcing
          //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
          //   // with text files until FS.init can be refactored.
          //   process.stdin.setEncoding('utf8');
          // }
        },
    shutdown() {
          // https://github.com/emscripten-core/emscripten/pull/1555
          // if (ENVIRONMENT_IS_NODE) {
          //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
          //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
          //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
          //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
          //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
          //   process.stdin.pause();
          // }
        },
    register(dev, ops) {
          TTY.ttys[dev] = { input: [], output: [], ops: ops };
          FS.registerDevice(dev, TTY.stream_ops);
        },
    stream_ops:{
    open(stream) {
            var tty = TTY.ttys[stream.node.rdev];
            if (!tty) {
              throw new FS.ErrnoError(43);
            }
            stream.tty = tty;
            stream.seekable = false;
          },
    close(stream) {
            // flush any pending line data
            stream.tty.ops.fsync(stream.tty);
          },
    fsync(stream) {
            stream.tty.ops.fsync(stream.tty);
          },
    read(stream, buffer, offset, length, pos /* ignored */) {
            if (!stream.tty || !stream.tty.ops.get_char) {
              throw new FS.ErrnoError(60);
            }
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = stream.tty.ops.get_char(stream.tty);
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(6);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
    write(stream, buffer, offset, length, pos) {
            if (!stream.tty || !stream.tty.ops.put_char) {
              throw new FS.ErrnoError(60);
            }
            try {
              for (var i = 0; i < length; i++) {
                stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
              }
            } catch (e) {
              throw new FS.ErrnoError(29);
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          },
    },
    default_tty_ops:{
    get_char(tty) {
            return FS_stdin_getChar();
          },
    put_char(tty, val) {
            if (val === null || val === 10) {
              out(UTF8ArrayToString(tty.output));
              tty.output = [];
            } else {
              if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
            }
          },
    fsync(tty) {
            if (tty.output && tty.output.length > 0) {
              out(UTF8ArrayToString(tty.output));
              tty.output = [];
            }
          },
    ioctl_tcgets(tty) {
            // typical setting
            return {
              c_iflag: 25856,
              c_oflag: 5,
              c_cflag: 191,
              c_lflag: 35387,
              c_cc: [
                0x03, 0x1c, 0x7f, 0x15, 0x04, 0x00, 0x01, 0x00, 0x11, 0x13, 0x1a, 0x00,
                0x12, 0x0f, 0x17, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
              ]
            };
          },
    ioctl_tcsets(tty, optional_actions, data) {
            // currently just ignore
            return 0;
          },
    ioctl_tiocgwinsz(tty) {
            return [24, 80];
          },
    },
    default_tty1_ops:{
    put_char(tty, val) {
            if (val === null || val === 10) {
              err(UTF8ArrayToString(tty.output));
              tty.output = [];
            } else {
              if (val != 0) tty.output.push(val);
            }
          },
    fsync(tty) {
            if (tty.output && tty.output.length > 0) {
              err(UTF8ArrayToString(tty.output));
              tty.output = [];
            }
          },
    },
    };
    
    
    var zeroMemory = (address, size) => {
        HEAPU8.fill(0, address, address + size);
      };
    
    var mmapAlloc = (size) => {
        abort('internal error: mmapAlloc called but `emscripten_builtin_memalign` native symbol not exported');
      };
    var MEMFS = {
    ops_table:null,
    mount(mount) {
          return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
        },
    createNode(parent, name, mode, dev) {
          if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
            // no supported
            throw new FS.ErrnoError(63);
          }
          MEMFS.ops_table ||= {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
          var node = FS.createNode(parent, name, mode, dev);
          if (FS.isDir(node.mode)) {
            node.node_ops = MEMFS.ops_table.dir.node;
            node.stream_ops = MEMFS.ops_table.dir.stream;
            node.contents = {};
          } else if (FS.isFile(node.mode)) {
            node.node_ops = MEMFS.ops_table.file.node;
            node.stream_ops = MEMFS.ops_table.file.stream;
            node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
            // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
            // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
            // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
            node.contents = null; 
          } else if (FS.isLink(node.mode)) {
            node.node_ops = MEMFS.ops_table.link.node;
            node.stream_ops = MEMFS.ops_table.link.stream;
          } else if (FS.isChrdev(node.mode)) {
            node.node_ops = MEMFS.ops_table.chrdev.node;
            node.stream_ops = MEMFS.ops_table.chrdev.stream;
          }
          node.timestamp = Date.now();
          // add the new node to the parent
          if (parent) {
            parent.contents[name] = node;
            parent.timestamp = node.timestamp;
          }
          return node;
        },
    getFileDataAsTypedArray(node) {
          if (!node.contents) return new Uint8Array(0);
          if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
          return new Uint8Array(node.contents);
        },
    expandFileStorage(node, newCapacity) {
          var prevCapacity = node.contents ? node.contents.length : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) >>> 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
        },
    resizeFileStorage(node, newSize) {
          if (node.usedBytes == newSize) return;
          if (newSize == 0) {
            node.contents = null; // Fully decommit when requesting a resize to zero.
            node.usedBytes = 0;
          } else {
            var oldContents = node.contents;
            node.contents = new Uint8Array(newSize); // Allocate new storage.
            if (oldContents) {
              node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
            }
            node.usedBytes = newSize;
          }
        },
    node_ops:{
    getattr(node) {
            var attr = {};
            // device numbers reuse inode numbers.
            attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
            attr.ino = node.id;
            attr.mode = node.mode;
            attr.nlink = 1;
            attr.uid = 0;
            attr.gid = 0;
            attr.rdev = node.rdev;
            if (FS.isDir(node.mode)) {
              attr.size = 4096;
            } else if (FS.isFile(node.mode)) {
              attr.size = node.usedBytes;
            } else if (FS.isLink(node.mode)) {
              attr.size = node.link.length;
            } else {
              attr.size = 0;
            }
            attr.atime = new Date(node.timestamp);
            attr.mtime = new Date(node.timestamp);
            attr.ctime = new Date(node.timestamp);
            // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
            //       but this is not required by the standard.
            attr.blksize = 4096;
            attr.blocks = Math.ceil(attr.size / attr.blksize);
            return attr;
          },
    setattr(node, attr) {
            if (attr.mode !== undefined) {
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              node.timestamp = attr.timestamp;
            }
            if (attr.size !== undefined) {
              MEMFS.resizeFileStorage(node, attr.size);
            }
          },
    lookup(parent, name) {
            throw FS.genericErrors[44];
          },
    mknod(parent, name, mode, dev) {
            return MEMFS.createNode(parent, name, mode, dev);
          },
    rename(old_node, new_dir, new_name) {
            // if we're overwriting a directory at new_name, make sure it's empty.
            if (FS.isDir(old_node.mode)) {
              var new_node;
              try {
                new_node = FS.lookupNode(new_dir, new_name);
              } catch (e) {
              }
              if (new_node) {
                for (var i in new_node.contents) {
                  throw new FS.ErrnoError(55);
                }
              }
            }
            // do the internal rewiring
            delete old_node.parent.contents[old_node.name];
            old_node.parent.timestamp = Date.now()
            old_node.name = new_name;
            new_dir.contents[new_name] = old_node;
            new_dir.timestamp = old_node.parent.timestamp;
          },
    unlink(parent, name) {
            delete parent.contents[name];
            parent.timestamp = Date.now();
          },
    rmdir(parent, name) {
            var node = FS.lookupNode(parent, name);
            for (var i in node.contents) {
              throw new FS.ErrnoError(55);
            }
            delete parent.contents[name];
            parent.timestamp = Date.now();
          },
    readdir(node) {
            var entries = ['.', '..'];
            for (var key of Object.keys(node.contents)) {
              entries.push(key);
            }
            return entries;
          },
    symlink(parent, newname, oldpath) {
            var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
            node.link = oldpath;
            return node;
          },
    readlink(node) {
            if (!FS.isLink(node.mode)) {
              throw new FS.ErrnoError(28);
            }
            return node.link;
          },
    },
    stream_ops:{
    read(stream, buffer, offset, length, position) {
            var contents = stream.node.contents;
            if (position >= stream.node.usedBytes) return 0;
            var size = Math.min(stream.node.usedBytes - position, length);
            assert(size >= 0);
            if (size > 8 && contents.subarray) { // non-trivial, and typed array
              buffer.set(contents.subarray(position, position + size), offset);
            } else {
              for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
            }
            return size;
          },
    write(stream, buffer, offset, length, position, canOwn) {
            // The data buffer should be a typed array view
            assert(!(buffer instanceof ArrayBuffer));
    
            if (!length) return 0;
            var node = stream.node;
            node.timestamp = Date.now();
    
            if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
              if (canOwn) {
                assert(position === 0, 'canOwn must imply no weird position inside the file');
                node.contents = buffer.subarray(offset, offset + length);
                node.usedBytes = length;
                return length;
              } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
                node.contents = buffer.slice(offset, offset + length);
                node.usedBytes = length;
                return length;
              } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
                node.contents.set(buffer.subarray(offset, offset + length), position);
                return length;
              }
            }
    
            // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
            MEMFS.expandFileStorage(node, position+length);
            if (node.contents.subarray && buffer.subarray) {
              // Use typed array write which is available.
              node.contents.set(buffer.subarray(offset, offset + length), position);
            } else {
              for (var i = 0; i < length; i++) {
              node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
              }
            }
            node.usedBytes = Math.max(node.usedBytes, position + length);
            return length;
          },
    llseek(stream, offset, whence) {
            var position = offset;
            if (whence === 1) {
              position += stream.position;
            } else if (whence === 2) {
              if (FS.isFile(stream.node.mode)) {
                position += stream.node.usedBytes;
              }
            }
            if (position < 0) {
              throw new FS.ErrnoError(28);
            }
            return position;
          },
    allocate(stream, offset, length) {
            MEMFS.expandFileStorage(stream.node, offset + length);
            stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
          },
    mmap(stream, length, position, prot, flags) {
            if (!FS.isFile(stream.node.mode)) {
              throw new FS.ErrnoError(43);
            }
            var ptr;
            var allocated;
            var contents = stream.node.contents;
            // Only make a new copy when MAP_PRIVATE is specified.
            if (!(flags & 2) && contents && contents.buffer === HEAP8.buffer) {
              // We can't emulate MAP_SHARED when the file is not backed by the
              // buffer we're mapping to (e.g. the HEAP buffer).
              allocated = false;
              ptr = contents.byteOffset;
            } else {
              allocated = true;
              ptr = mmapAlloc(length);
              if (!ptr) {
                throw new FS.ErrnoError(48);
              }
              if (contents) {
                // Try to avoid unnecessary slices.
                if (position > 0 || position + length < contents.length) {
                  if (contents.subarray) {
                    contents = contents.subarray(position, position + length);
                  } else {
                    contents = Array.prototype.slice.call(contents, position, position + length);
                  }
                }
                HEAP8.set(contents, ptr);
              }
            }
            return { ptr, allocated };
          },
    msync(stream, buffer, offset, length, mmapFlags) {
            MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
            // should we check if bytesWritten and length are the same?
            return 0;
          },
    },
    };
    
    /** @param {boolean=} noRunDep */
    var asyncLoad = (url, onload, onerror, noRunDep) => {
        var dep = !noRunDep ? getUniqueRunDependency(`al ${url}`) : '';
        readAsync(url).then(
          (arrayBuffer) => {
            assert(arrayBuffer, `Loading data file "${url}" failed (no arrayBuffer).`);
            onload(new Uint8Array(arrayBuffer));
            if (dep) removeRunDependency(dep);
          },
          (err) => {
            if (onerror) {
              onerror();
            } else {
              throw `Loading data file "${url}" failed.`;
            }
          }
        );
        if (dep) addRunDependency(dep);
      };
    
    
    var FS_createDataFile = (parent, name, fileData, canRead, canWrite, canOwn) => {
        FS.createDataFile(parent, name, fileData, canRead, canWrite, canOwn);
      };
    
    var preloadPlugins = Module['preloadPlugins'] || [];
    var FS_handledByPreloadPlugin = (byteArray, fullname, finish, onerror) => {
        // Ensure plugins are ready.
        if (typeof Browser != 'undefined') Browser.init();
    
        var handled = false;
        preloadPlugins.forEach((plugin) => {
          if (handled) return;
          if (plugin['canHandle'](fullname)) {
            plugin['handle'](byteArray, fullname, finish, onerror);
            handled = true;
          }
        });
        return handled;
      };
    var FS_createPreloadedFile = (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) => {
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency(`cp ${fullname}`); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            preFinish?.();
            if (!dontCreateFile) {
              FS_createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            onload?.();
            removeRunDependency(dep);
          }
          if (FS_handledByPreloadPlugin(byteArray, fullname, finish, () => {
            onerror?.();
            removeRunDependency(dep);
          })) {
            return;
          }
          finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          asyncLoad(url, processData, onerror);
        } else {
          processData(url);
        }
      };
    
    var FS_modeStringToFlags = (str) => {
        var flagModes = {
          'r': 0,
          'r+': 2,
          'w': 512 | 64 | 1,
          'w+': 512 | 64 | 2,
          'a': 1024 | 64 | 1,
          'a+': 1024 | 64 | 2,
        };
        var flags = flagModes[str];
        if (typeof flags == 'undefined') {
          throw new Error(`Unknown file open mode: ${str}`);
        }
        return flags;
      };
    
    var FS_getMode = (canRead, canWrite) => {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      };
    
    
    
    
    
    
    var strError = (errno) => {
        return UTF8ToString(_strerror(errno));
      };
    
    var ERRNO_CODES = {
        'EPERM': 63,
        'ENOENT': 44,
        'ESRCH': 71,
        'EINTR': 27,
        'EIO': 29,
        'ENXIO': 60,
        'E2BIG': 1,
        'ENOEXEC': 45,
        'EBADF': 8,
        'ECHILD': 12,
        'EAGAIN': 6,
        'EWOULDBLOCK': 6,
        'ENOMEM': 48,
        'EACCES': 2,
        'EFAULT': 21,
        'ENOTBLK': 105,
        'EBUSY': 10,
        'EEXIST': 20,
        'EXDEV': 75,
        'ENODEV': 43,
        'ENOTDIR': 54,
        'EISDIR': 31,
        'EINVAL': 28,
        'ENFILE': 41,
        'EMFILE': 33,
        'ENOTTY': 59,
        'ETXTBSY': 74,
        'EFBIG': 22,
        'ENOSPC': 51,
        'ESPIPE': 70,
        'EROFS': 69,
        'EMLINK': 34,
        'EPIPE': 64,
        'EDOM': 18,
        'ERANGE': 68,
        'ENOMSG': 49,
        'EIDRM': 24,
        'ECHRNG': 106,
        'EL2NSYNC': 156,
        'EL3HLT': 107,
        'EL3RST': 108,
        'ELNRNG': 109,
        'EUNATCH': 110,
        'ENOCSI': 111,
        'EL2HLT': 112,
        'EDEADLK': 16,
        'ENOLCK': 46,
        'EBADE': 113,
        'EBADR': 114,
        'EXFULL': 115,
        'ENOANO': 104,
        'EBADRQC': 103,
        'EBADSLT': 102,
        'EDEADLOCK': 16,
        'EBFONT': 101,
        'ENOSTR': 100,
        'ENODATA': 116,
        'ETIME': 117,
        'ENOSR': 118,
        'ENONET': 119,
        'ENOPKG': 120,
        'EREMOTE': 121,
        'ENOLINK': 47,
        'EADV': 122,
        'ESRMNT': 123,
        'ECOMM': 124,
        'EPROTO': 65,
        'EMULTIHOP': 36,
        'EDOTDOT': 125,
        'EBADMSG': 9,
        'ENOTUNIQ': 126,
        'EBADFD': 127,
        'EREMCHG': 128,
        'ELIBACC': 129,
        'ELIBBAD': 130,
        'ELIBSCN': 131,
        'ELIBMAX': 132,
        'ELIBEXEC': 133,
        'ENOSYS': 52,
        'ENOTEMPTY': 55,
        'ENAMETOOLONG': 37,
        'ELOOP': 32,
        'EOPNOTSUPP': 138,
        'EPFNOSUPPORT': 139,
        'ECONNRESET': 15,
        'ENOBUFS': 42,
        'EAFNOSUPPORT': 5,
        'EPROTOTYPE': 67,
        'ENOTSOCK': 57,
        'ENOPROTOOPT': 50,
        'ESHUTDOWN': 140,
        'ECONNREFUSED': 14,
        'EADDRINUSE': 3,
        'ECONNABORTED': 13,
        'ENETUNREACH': 40,
        'ENETDOWN': 38,
        'ETIMEDOUT': 73,
        'EHOSTDOWN': 142,
        'EHOSTUNREACH': 23,
        'EINPROGRESS': 26,
        'EALREADY': 7,
        'EDESTADDRREQ': 17,
        'EMSGSIZE': 35,
        'EPROTONOSUPPORT': 66,
        'ESOCKTNOSUPPORT': 137,
        'EADDRNOTAVAIL': 4,
        'ENETRESET': 39,
        'EISCONN': 30,
        'ENOTCONN': 53,
        'ETOOMANYREFS': 141,
        'EUSERS': 136,
        'EDQUOT': 19,
        'ESTALE': 72,
        'ENOTSUP': 138,
        'ENOMEDIUM': 148,
        'EILSEQ': 25,
        'EOVERFLOW': 61,
        'ECANCELED': 11,
        'ENOTRECOVERABLE': 56,
        'EOWNERDEAD': 62,
        'ESTRPIPE': 135,
      };
    var FS = {
    root:null,
    mounts:[],
    devices:{
    },
    streams:[],
    nextInode:1,
    nameTable:null,
    currentPath:"/",
    initialized:false,
    ignorePermissions:true,
    ErrnoError:class extends Error {
          // We set the `name` property to be able to identify `FS.ErrnoError`
          // - the `name` is a standard ECMA-262 property of error objects. Kind of good to have it anyway.
          // - when using PROXYFS, an error can come from an underlying FS
          // as different FS objects have their own FS.ErrnoError each,
          // the test `err instanceof FS.ErrnoError` won't detect an error coming from another filesystem, causing bugs.
          // we'll use the reliable test `err.name == "ErrnoError"` instead
          constructor(errno) {
            super(runtimeInitialized ? strError(errno) : '');
            // TODO(sbc): Use the inline member declaration syntax once we
            // support it in acorn and closure.
            this.name = 'ErrnoError';
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          }
        },
    genericErrors:{
    },
    filesystems:null,
    syncFSRequests:0,
    readFiles:{
    },
    FSStream:class {
          constructor() {
            // TODO(https://github.com/emscripten-core/emscripten/issues/21414):
            // Use inline field declarations.
            this.shared = {};
          }
          get object() {
            return this.node;
          }
          set object(val) {
            this.node = val;
          }
          get isRead() {
            return (this.flags & 2097155) !== 1;
          }
          get isWrite() {
            return (this.flags & 2097155) !== 0;
          }
          get isAppend() {
            return (this.flags & 1024);
          }
          get flags() {
            return this.shared.flags;
          }
          set flags(val) {
            this.shared.flags = val;
          }
          get position() {
            return this.shared.position;
          }
          set position(val) {
            this.shared.position = val;
          }
        },
    FSNode:class {
          constructor(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
            this.readMode = 292 | 73;
            this.writeMode = 146;
          }
          get read() {
            return (this.mode & this.readMode) === this.readMode;
          }
          set read(val) {
            val ? this.mode |= this.readMode : this.mode &= ~this.readMode;
          }
          get write() {
            return (this.mode & this.writeMode) === this.writeMode;
          }
          set write(val) {
            val ? this.mode |= this.writeMode : this.mode &= ~this.writeMode;
          }
          get isFolder() {
            return FS.isDir(this.mode);
          }
          get isDevice() {
            return FS.isChrdev(this.mode);
          }
        },
    lookupPath(path, opts = {}) {
          path = PATH_FS.resolve(path);
    
          if (!path) return { path: '', node: null };
    
          var defaults = {
            follow_mount: true,
            recurse_count: 0
          };
          opts = Object.assign(defaults, opts)
    
          if (opts.recurse_count > 8) {  // max recursive lookup of 8
            throw new FS.ErrnoError(32);
          }
    
          // split the absolute path
          var parts = path.split('/').filter((p) => !!p);
    
          // start at the root
          var current = FS.root;
          var current_path = '/';
    
          for (var i = 0; i < parts.length; i++) {
            var islast = (i === parts.length-1);
            if (islast && opts.parent) {
              // stop resolving
              break;
            }
    
            current = FS.lookupNode(current, parts[i]);
            current_path = PATH.join2(current_path, parts[i]);
    
            // jump to the mount's root node if this is a mountpoint
            if (FS.isMountpoint(current)) {
              if (!islast || (islast && opts.follow_mount)) {
                current = current.mounted.root;
              }
            }
    
            // by default, lookupPath will not follow a symlink if it is the final path component.
            // setting opts.follow = true will override this behavior.
            if (!islast || opts.follow) {
              var count = 0;
              while (FS.isLink(current.mode)) {
                var link = FS.readlink(current_path);
                current_path = PATH_FS.resolve(PATH.dirname(current_path), link);
    
                var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count + 1 });
                current = lookup.node;
    
                if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                  throw new FS.ErrnoError(32);
                }
              }
            }
          }
    
          return { path: current_path, node: current };
        },
    getPath(node) {
          var path;
          while (true) {
            if (FS.isRoot(node)) {
              var mount = node.mount.mountpoint;
              if (!path) return mount;
              return mount[mount.length-1] !== '/' ? `${mount}/${path}` : mount + path;
            }
            path = path ? `${node.name}/${path}` : node.name;
            node = node.parent;
          }
        },
    hashName(parentid, name) {
          var hash = 0;
    
          for (var i = 0; i < name.length; i++) {
            hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
          }
          return ((parentid + hash) >>> 0) % FS.nameTable.length;
        },
    hashAddNode(node) {
          var hash = FS.hashName(node.parent.id, node.name);
          node.name_next = FS.nameTable[hash];
          FS.nameTable[hash] = node;
        },
    hashRemoveNode(node) {
          var hash = FS.hashName(node.parent.id, node.name);
          if (FS.nameTable[hash] === node) {
            FS.nameTable[hash] = node.name_next;
          } else {
            var current = FS.nameTable[hash];
            while (current) {
              if (current.name_next === node) {
                current.name_next = node.name_next;
                break;
              }
              current = current.name_next;
            }
          }
        },
    lookupNode(parent, name) {
          var errCode = FS.mayLookup(parent);
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
          var hash = FS.hashName(parent.id, name);
          for (var node = FS.nameTable[hash]; node; node = node.name_next) {
            var nodeName = node.name;
            if (node.parent.id === parent.id && nodeName === name) {
              return node;
            }
          }
          // if we failed to find it in the cache, call into the VFS
          return FS.lookup(parent, name);
        },
    createNode(parent, name, mode, rdev) {
          assert(typeof parent == 'object')
          var node = new FS.FSNode(parent, name, mode, rdev);
    
          FS.hashAddNode(node);
    
          return node;
        },
    destroyNode(node) {
          FS.hashRemoveNode(node);
        },
    isRoot(node) {
          return node === node.parent;
        },
    isMountpoint(node) {
          return !!node.mounted;
        },
    isFile(mode) {
          return (mode & 61440) === 32768;
        },
    isDir(mode) {
          return (mode & 61440) === 16384;
        },
    isLink(mode) {
          return (mode & 61440) === 40960;
        },
    isChrdev(mode) {
          return (mode & 61440) === 8192;
        },
    isBlkdev(mode) {
          return (mode & 61440) === 24576;
        },
    isFIFO(mode) {
          return (mode & 61440) === 4096;
        },
    isSocket(mode) {
          return (mode & 49152) === 49152;
        },
    flagsToPermissionString(flag) {
          var perms = ['r', 'w', 'rw'][flag & 3];
          if ((flag & 512)) {
            perms += 'w';
          }
          return perms;
        },
    nodePermissions(node, perms) {
          if (FS.ignorePermissions) {
            return 0;
          }
          // return 0 if any user, group or owner bits are set.
          if (perms.includes('r') && !(node.mode & 292)) {
            return 2;
          } else if (perms.includes('w') && !(node.mode & 146)) {
            return 2;
          } else if (perms.includes('x') && !(node.mode & 73)) {
            return 2;
          }
          return 0;
        },
    mayLookup(dir) {
          if (!FS.isDir(dir.mode)) return 54;
          var errCode = FS.nodePermissions(dir, 'x');
          if (errCode) return errCode;
          if (!dir.node_ops.lookup) return 2;
          return 0;
        },
    mayCreate(dir, name) {
          try {
            var node = FS.lookupNode(dir, name);
            return 20;
          } catch (e) {
          }
          return FS.nodePermissions(dir, 'wx');
        },
    mayDelete(dir, name, isdir) {
          var node;
          try {
            node = FS.lookupNode(dir, name);
          } catch (e) {
            return e.errno;
          }
          var errCode = FS.nodePermissions(dir, 'wx');
          if (errCode) {
            return errCode;
          }
          if (isdir) {
            if (!FS.isDir(node.mode)) {
              return 54;
            }
            if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
              return 10;
            }
          } else {
            if (FS.isDir(node.mode)) {
              return 31;
            }
          }
          return 0;
        },
    mayOpen(node, flags) {
          if (!node) {
            return 44;
          }
          if (FS.isLink(node.mode)) {
            return 32;
          } else if (FS.isDir(node.mode)) {
            if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
                (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
              return 31;
            }
          }
          return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
        },
    MAX_OPEN_FDS:4096,
    nextfd() {
          for (var fd = 0; fd <= FS.MAX_OPEN_FDS; fd++) {
            if (!FS.streams[fd]) {
              return fd;
            }
          }
          throw new FS.ErrnoError(33);
        },
    getStreamChecked(fd) {
          var stream = FS.getStream(fd);
          if (!stream) {
            throw new FS.ErrnoError(8);
          }
          return stream;
        },
    getStream:(fd) => FS.streams[fd],
    createStream(stream, fd = -1) {
          assert(fd >= -1);
    
          // clone it, so we can return an instance of FSStream
          stream = Object.assign(new FS.FSStream(), stream);
          if (fd == -1) {
            fd = FS.nextfd();
          }
          stream.fd = fd;
          FS.streams[fd] = stream;
          return stream;
        },
    closeStream(fd) {
          FS.streams[fd] = null;
        },
    dupStream(origStream, fd = -1) {
          var stream = FS.createStream(origStream, fd);
          stream.stream_ops?.dup?.(stream);
          return stream;
        },
    chrdev_stream_ops:{
    open(stream) {
            var device = FS.getDevice(stream.node.rdev);
            // override node's stream ops with the device's
            stream.stream_ops = device.stream_ops;
            // forward the open call
            stream.stream_ops.open?.(stream);
          },
    llseek() {
            throw new FS.ErrnoError(70);
          },
    },
    major:(dev) => ((dev) >> 8),
    minor:(dev) => ((dev) & 0xff),
    makedev:(ma, mi) => ((ma) << 8 | (mi)),
    registerDevice(dev, ops) {
          FS.devices[dev] = { stream_ops: ops };
        },
    getDevice:(dev) => FS.devices[dev],
    getMounts(mount) {
          var mounts = [];
          var check = [mount];
    
          while (check.length) {
            var m = check.pop();
    
            mounts.push(m);
    
            check.push(...m.mounts);
          }
    
          return mounts;
        },
    syncfs(populate, callback) {
          if (typeof populate == 'function') {
            callback = populate;
            populate = false;
          }
    
          FS.syncFSRequests++;
    
          if (FS.syncFSRequests > 1) {
            err(`warning: ${FS.syncFSRequests} FS.syncfs operations in flight at once, probably just doing extra work`);
          }
    
          var mounts = FS.getMounts(FS.root.mount);
          var completed = 0;
    
          function doCallback(errCode) {
            assert(FS.syncFSRequests > 0);
            FS.syncFSRequests--;
            return callback(errCode);
          }
    
          function done(errCode) {
            if (errCode) {
              if (!done.errored) {
                done.errored = true;
                return doCallback(errCode);
              }
              return;
            }
            if (++completed >= mounts.length) {
              doCallback(null);
            }
          };
    
          // sync all mounts
          mounts.forEach((mount) => {
            if (!mount.type.syncfs) {
              return done(null);
            }
            mount.type.syncfs(mount, populate, done);
          });
        },
    mount(type, opts, mountpoint) {
          if (typeof type == 'string') {
            // The filesystem was not included, and instead we have an error
            // message stored in the variable.
            throw type;
          }
          var root = mountpoint === '/';
          var pseudo = !mountpoint;
          var node;
    
          if (root && FS.root) {
            throw new FS.ErrnoError(10);
          } else if (!root && !pseudo) {
            var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
    
            mountpoint = lookup.path;  // use the absolute path
            node = lookup.node;
    
            if (FS.isMountpoint(node)) {
              throw new FS.ErrnoError(10);
            }
    
            if (!FS.isDir(node.mode)) {
              throw new FS.ErrnoError(54);
            }
          }
    
          var mount = {
            type,
            opts,
            mountpoint,
            mounts: []
          };
    
          // create a root node for the fs
          var mountRoot = type.mount(mount);
          mountRoot.mount = mount;
          mount.root = mountRoot;
    
          if (root) {
            FS.root = mountRoot;
          } else if (node) {
            // set as a mountpoint
            node.mounted = mount;
    
            // add the new mount to the current mount's children
            if (node.mount) {
              node.mount.mounts.push(mount);
            }
          }
    
          return mountRoot;
        },
    unmount(mountpoint) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
    
          if (!FS.isMountpoint(lookup.node)) {
            throw new FS.ErrnoError(28);
          }
    
          // destroy the nodes for this mount, and all its child mounts
          var node = lookup.node;
          var mount = node.mounted;
          var mounts = FS.getMounts(mount);
    
          Object.keys(FS.nameTable).forEach((hash) => {
            var current = FS.nameTable[hash];
    
            while (current) {
              var next = current.name_next;
    
              if (mounts.includes(current.mount)) {
                FS.destroyNode(current);
              }
    
              current = next;
            }
          });
    
          // no longer a mountpoint
          node.mounted = null;
    
          // remove this mount from the child mounts
          var idx = node.mount.mounts.indexOf(mount);
          assert(idx !== -1);
          node.mount.mounts.splice(idx, 1);
        },
    lookup(parent, name) {
          return parent.node_ops.lookup(parent, name);
        },
    mknod(path, mode, dev) {
          var lookup = FS.lookupPath(path, { parent: true });
          var parent = lookup.node;
          var name = PATH.basename(path);
          if (!name || name === '.' || name === '..') {
            throw new FS.ErrnoError(28);
          }
          var errCode = FS.mayCreate(parent, name);
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
          if (!parent.node_ops.mknod) {
            throw new FS.ErrnoError(63);
          }
          return parent.node_ops.mknod(parent, name, mode, dev);
        },
    create(path, mode) {
          mode = mode !== undefined ? mode : 438 /* 0666 */;
          mode &= 4095;
          mode |= 32768;
          return FS.mknod(path, mode, 0);
        },
    mkdir(path, mode) {
          mode = mode !== undefined ? mode : 511 /* 0777 */;
          mode &= 511 | 512;
          mode |= 16384;
          return FS.mknod(path, mode, 0);
        },
    mkdirTree(path, mode) {
          var dirs = path.split('/');
          var d = '';
          for (var i = 0; i < dirs.length; ++i) {
            if (!dirs[i]) continue;
            d += '/' + dirs[i];
            try {
              FS.mkdir(d, mode);
            } catch(e) {
              if (e.errno != 20) throw e;
            }
          }
        },
    mkdev(path, mode, dev) {
          if (typeof dev == 'undefined') {
            dev = mode;
            mode = 438 /* 0666 */;
          }
          mode |= 8192;
          return FS.mknod(path, mode, dev);
        },
    symlink(oldpath, newpath) {
          if (!PATH_FS.resolve(oldpath)) {
            throw new FS.ErrnoError(44);
          }
          var lookup = FS.lookupPath(newpath, { parent: true });
          var parent = lookup.node;
          if (!parent) {
            throw new FS.ErrnoError(44);
          }
          var newname = PATH.basename(newpath);
          var errCode = FS.mayCreate(parent, newname);
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
          if (!parent.node_ops.symlink) {
            throw new FS.ErrnoError(63);
          }
          return parent.node_ops.symlink(parent, newname, oldpath);
        },
    rename(old_path, new_path) {
          var old_dirname = PATH.dirname(old_path);
          var new_dirname = PATH.dirname(new_path);
          var old_name = PATH.basename(old_path);
          var new_name = PATH.basename(new_path);
          // parents must exist
          var lookup, old_dir, new_dir;
    
          // let the errors from non existent directories percolate up
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
    
          if (!old_dir || !new_dir) throw new FS.ErrnoError(44);
          // need to be part of the same mount
          if (old_dir.mount !== new_dir.mount) {
            throw new FS.ErrnoError(75);
          }
          // source must exist
          var old_node = FS.lookupNode(old_dir, old_name);
          // old path should not be an ancestor of the new path
          var relative = PATH_FS.relative(old_path, new_dirname);
          if (relative.charAt(0) !== '.') {
            throw new FS.ErrnoError(28);
          }
          // new path should not be an ancestor of the old path
          relative = PATH_FS.relative(new_path, old_dirname);
          if (relative.charAt(0) !== '.') {
            throw new FS.ErrnoError(55);
          }
          // see if the new path already exists
          var new_node;
          try {
            new_node = FS.lookupNode(new_dir, new_name);
          } catch (e) {
            // not fatal
          }
          // early out if nothing needs to change
          if (old_node === new_node) {
            return;
          }
          // we'll need to delete the old entry
          var isdir = FS.isDir(old_node.mode);
          var errCode = FS.mayDelete(old_dir, old_name, isdir);
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
          // need delete permissions if we'll be overwriting.
          // need create permissions if new doesn't already exist.
          errCode = new_node ?
            FS.mayDelete(new_dir, new_name, isdir) :
            FS.mayCreate(new_dir, new_name);
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
          if (!old_dir.node_ops.rename) {
            throw new FS.ErrnoError(63);
          }
          if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
            throw new FS.ErrnoError(10);
          }
          // if we are going to change the parent, check write permissions
          if (new_dir !== old_dir) {
            errCode = FS.nodePermissions(old_dir, 'w');
            if (errCode) {
              throw new FS.ErrnoError(errCode);
            }
          }
          // remove the node from the lookup hash
          FS.hashRemoveNode(old_node);
          // do the underlying fs rename
          try {
            old_dir.node_ops.rename(old_node, new_dir, new_name);
            // update old node (we do this here to avoid each backend 
            // needing to)
            old_node.parent = new_dir;
          } catch (e) {
            throw e;
          } finally {
            // add the node back to the hash (in case node_ops.rename
            // changed its name)
            FS.hashAddNode(old_node);
          }
        },
    rmdir(path) {
          var lookup = FS.lookupPath(path, { parent: true });
          var parent = lookup.node;
          var name = PATH.basename(path);
          var node = FS.lookupNode(parent, name);
          var errCode = FS.mayDelete(parent, name, true);
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
          if (!parent.node_ops.rmdir) {
            throw new FS.ErrnoError(63);
          }
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(10);
          }
          parent.node_ops.rmdir(parent, name);
          FS.destroyNode(node);
        },
    readdir(path) {
          var lookup = FS.lookupPath(path, { follow: true });
          var node = lookup.node;
          if (!node.node_ops.readdir) {
            throw new FS.ErrnoError(54);
          }
          return node.node_ops.readdir(node);
        },
    unlink(path) {
          var lookup = FS.lookupPath(path, { parent: true });
          var parent = lookup.node;
          if (!parent) {
            throw new FS.ErrnoError(44);
          }
          var name = PATH.basename(path);
          var node = FS.lookupNode(parent, name);
          var errCode = FS.mayDelete(parent, name, false);
          if (errCode) {
            // According to POSIX, we should map EISDIR to EPERM, but
            // we instead do what Linux does (and we must, as we use
            // the musl linux libc).
            throw new FS.ErrnoError(errCode);
          }
          if (!parent.node_ops.unlink) {
            throw new FS.ErrnoError(63);
          }
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(10);
          }
          parent.node_ops.unlink(parent, name);
          FS.destroyNode(node);
        },
    readlink(path) {
          var lookup = FS.lookupPath(path);
          var link = lookup.node;
          if (!link) {
            throw new FS.ErrnoError(44);
          }
          if (!link.node_ops.readlink) {
            throw new FS.ErrnoError(28);
          }
          return PATH_FS.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
        },
    stat(path, dontFollow) {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          var node = lookup.node;
          if (!node) {
            throw new FS.ErrnoError(44);
          }
          if (!node.node_ops.getattr) {
            throw new FS.ErrnoError(63);
          }
          return node.node_ops.getattr(node);
        },
    lstat(path) {
          return FS.stat(path, true);
        },
    chmod(path, mode, dontFollow) {
          var node;
          if (typeof path == 'string') {
            var lookup = FS.lookupPath(path, { follow: !dontFollow });
            node = lookup.node;
          } else {
            node = path;
          }
          if (!node.node_ops.setattr) {
            throw new FS.ErrnoError(63);
          }
          node.node_ops.setattr(node, {
            mode: (mode & 4095) | (node.mode & ~4095),
            timestamp: Date.now()
          });
        },
    lchmod(path, mode) {
          FS.chmod(path, mode, true);
        },
    fchmod(fd, mode) {
          var stream = FS.getStreamChecked(fd);
          FS.chmod(stream.node, mode);
        },
    chown(path, uid, gid, dontFollow) {
          var node;
          if (typeof path == 'string') {
            var lookup = FS.lookupPath(path, { follow: !dontFollow });
            node = lookup.node;
          } else {
            node = path;
          }
          if (!node.node_ops.setattr) {
            throw new FS.ErrnoError(63);
          }
          node.node_ops.setattr(node, {
            timestamp: Date.now()
            // we ignore the uid / gid for now
          });
        },
    lchown(path, uid, gid) {
          FS.chown(path, uid, gid, true);
        },
    fchown(fd, uid, gid) {
          var stream = FS.getStreamChecked(fd);
          FS.chown(stream.node, uid, gid);
        },
    truncate(path, len) {
          if (len < 0) {
            throw new FS.ErrnoError(28);
          }
          var node;
          if (typeof path == 'string') {
            var lookup = FS.lookupPath(path, { follow: true });
            node = lookup.node;
          } else {
            node = path;
          }
          if (!node.node_ops.setattr) {
            throw new FS.ErrnoError(63);
          }
          if (FS.isDir(node.mode)) {
            throw new FS.ErrnoError(31);
          }
          if (!FS.isFile(node.mode)) {
            throw new FS.ErrnoError(28);
          }
          var errCode = FS.nodePermissions(node, 'w');
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
          node.node_ops.setattr(node, {
            size: len,
            timestamp: Date.now()
          });
        },
    ftruncate(fd, len) {
          var stream = FS.getStreamChecked(fd);
          if ((stream.flags & 2097155) === 0) {
            throw new FS.ErrnoError(28);
          }
          FS.truncate(stream.node, len);
        },
    utime(path, atime, mtime) {
          var lookup = FS.lookupPath(path, { follow: true });
          var node = lookup.node;
          node.node_ops.setattr(node, {
            timestamp: Math.max(atime, mtime)
          });
        },
    open(path, flags, mode) {
          if (path === "") {
            throw new FS.ErrnoError(44);
          }
          flags = typeof flags == 'string' ? FS_modeStringToFlags(flags) : flags;
          if ((flags & 64)) {
            mode = typeof mode == 'undefined' ? 438 /* 0666 */ : mode;
            mode = (mode & 4095) | 32768;
          } else {
            mode = 0;
          }
          var node;
          if (typeof path == 'object') {
            node = path;
          } else {
            path = PATH.normalize(path);
            try {
              var lookup = FS.lookupPath(path, {
                follow: !(flags & 131072)
              });
              node = lookup.node;
            } catch (e) {
              // ignore
            }
          }
          // perhaps we need to create the node
          var created = false;
          if ((flags & 64)) {
            if (node) {
              // if O_CREAT and O_EXCL are set, error out if the node already exists
              if ((flags & 128)) {
                throw new FS.ErrnoError(20);
              }
            } else {
              // node doesn't exist, try to create it
              node = FS.mknod(path, mode, 0);
              created = true;
            }
          }
          if (!node) {
            throw new FS.ErrnoError(44);
          }
          // can't truncate a device
          if (FS.isChrdev(node.mode)) {
            flags &= ~512;
          }
          // if asked only for a directory, then this must be one
          if ((flags & 65536) && !FS.isDir(node.mode)) {
            throw new FS.ErrnoError(54);
          }
          // check permissions, if this is not a file we just created now (it is ok to
          // create and write to a file with read-only permissions; it is read-only
          // for later use)
          if (!created) {
            var errCode = FS.mayOpen(node, flags);
            if (errCode) {
              throw new FS.ErrnoError(errCode);
            }
          }
          // do truncation if necessary
          if ((flags & 512) && !created) {
            FS.truncate(node, 0);
          }
          // we've already handled these, don't pass down to the underlying vfs
          flags &= ~(128 | 512 | 131072);
    
          // register the stream with the filesystem
          var stream = FS.createStream({
            node,
            path: FS.getPath(node),  // we want the absolute path to the node
            flags,
            seekable: true,
            position: 0,
            stream_ops: node.stream_ops,
            // used by the file family libc calls (fopen, fwrite, ferror, etc.)
            ungotten: [],
            error: false
          });
          // call the new stream's open function
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
          if (Module['logReadFiles'] && !(flags & 1)) {
            if (!(path in FS.readFiles)) {
              FS.readFiles[path] = 1;
            }
          }
          return stream;
        },
    close(stream) {
          if (FS.isClosed(stream)) {
            throw new FS.ErrnoError(8);
          }
          if (stream.getdents) stream.getdents = null; // free readdir state
          try {
            if (stream.stream_ops.close) {
              stream.stream_ops.close(stream);
            }
          } catch (e) {
            throw e;
          } finally {
            FS.closeStream(stream.fd);
          }
          stream.fd = null;
        },
    isClosed(stream) {
          return stream.fd === null;
        },
    llseek(stream, offset, whence) {
          if (FS.isClosed(stream)) {
            throw new FS.ErrnoError(8);
          }
          if (!stream.seekable || !stream.stream_ops.llseek) {
            throw new FS.ErrnoError(70);
          }
          if (whence != 0 && whence != 1 && whence != 2) {
            throw new FS.ErrnoError(28);
          }
          stream.position = stream.stream_ops.llseek(stream, offset, whence);
          stream.ungotten = [];
          return stream.position;
        },
    read(stream, buffer, offset, length, position) {
          assert(offset >= 0);
          if (length < 0 || position < 0) {
            throw new FS.ErrnoError(28);
          }
          if (FS.isClosed(stream)) {
            throw new FS.ErrnoError(8);
          }
          if ((stream.flags & 2097155) === 1) {
            throw new FS.ErrnoError(8);
          }
          if (FS.isDir(stream.node.mode)) {
            throw new FS.ErrnoError(31);
          }
          if (!stream.stream_ops.read) {
            throw new FS.ErrnoError(28);
          }
          var seeking = typeof position != 'undefined';
          if (!seeking) {
            position = stream.position;
          } else if (!stream.seekable) {
            throw new FS.ErrnoError(70);
          }
          var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
          if (!seeking) stream.position += bytesRead;
          return bytesRead;
        },
    write(stream, buffer, offset, length, position, canOwn) {
          assert(offset >= 0);
          if (length < 0 || position < 0) {
            throw new FS.ErrnoError(28);
          }
          if (FS.isClosed(stream)) {
            throw new FS.ErrnoError(8);
          }
          if ((stream.flags & 2097155) === 0) {
            throw new FS.ErrnoError(8);
          }
          if (FS.isDir(stream.node.mode)) {
            throw new FS.ErrnoError(31);
          }
          if (!stream.stream_ops.write) {
            throw new FS.ErrnoError(28);
          }
          if (stream.seekable && stream.flags & 1024) {
            // seek to the end before writing in append mode
            FS.llseek(stream, 0, 2);
          }
          var seeking = typeof position != 'undefined';
          if (!seeking) {
            position = stream.position;
          } else if (!stream.seekable) {
            throw new FS.ErrnoError(70);
          }
          var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
          if (!seeking) stream.position += bytesWritten;
          return bytesWritten;
        },
    allocate(stream, offset, length) {
          if (FS.isClosed(stream)) {
            throw new FS.ErrnoError(8);
          }
          if (offset < 0 || length <= 0) {
            throw new FS.ErrnoError(28);
          }
          if ((stream.flags & 2097155) === 0) {
            throw new FS.ErrnoError(8);
          }
          if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          if (!stream.stream_ops.allocate) {
            throw new FS.ErrnoError(138);
          }
          stream.stream_ops.allocate(stream, offset, length);
        },
    mmap(stream, length, position, prot, flags) {
          // User requests writing to file (prot & PROT_WRITE != 0).
          // Checking if we have permissions to write to the file unless
          // MAP_PRIVATE flag is set. According to POSIX spec it is possible
          // to write to file opened in read-only mode with MAP_PRIVATE flag,
          // as all modifications will be visible only in the memory of
          // the current process.
          if ((prot & 2) !== 0
              && (flags & 2) === 0
              && (stream.flags & 2097155) !== 2) {
            throw new FS.ErrnoError(2);
          }
          if ((stream.flags & 2097155) === 1) {
            throw new FS.ErrnoError(2);
          }
          if (!stream.stream_ops.mmap) {
            throw new FS.ErrnoError(43);
          }
          if (!length) {
            throw new FS.ErrnoError(28);
          }
          return stream.stream_ops.mmap(stream, length, position, prot, flags);
        },
    msync(stream, buffer, offset, length, mmapFlags) {
          assert(offset >= 0);
          if (!stream.stream_ops.msync) {
            return 0;
          }
          return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
        },
    ioctl(stream, cmd, arg) {
          if (!stream.stream_ops.ioctl) {
            throw new FS.ErrnoError(59);
          }
          return stream.stream_ops.ioctl(stream, cmd, arg);
        },
    readFile(path, opts = {}) {
          opts.flags = opts.flags || 0;
          opts.encoding = opts.encoding || 'binary';
          if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
            throw new Error(`Invalid encoding type "${opts.encoding}"`);
          }
          var ret;
          var stream = FS.open(path, opts.flags);
          var stat = FS.stat(path);
          var length = stat.size;
          var buf = new Uint8Array(length);
          FS.read(stream, buf, 0, length, 0);
          if (opts.encoding === 'utf8') {
            ret = UTF8ArrayToString(buf);
          } else if (opts.encoding === 'binary') {
            ret = buf;
          }
          FS.close(stream);
          return ret;
        },
    writeFile(path, data, opts = {}) {
          opts.flags = opts.flags || 577;
          var stream = FS.open(path, opts.flags, opts.mode);
          if (typeof data == 'string') {
            var buf = new Uint8Array(lengthBytesUTF8(data)+1);
            var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
            FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
          } else if (ArrayBuffer.isView(data)) {
            FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
          } else {
            throw new Error('Unsupported data type');
          }
          FS.close(stream);
        },
    cwd:() => FS.currentPath,
    chdir(path) {
          var lookup = FS.lookupPath(path, { follow: true });
          if (lookup.node === null) {
            throw new FS.ErrnoError(44);
          }
          if (!FS.isDir(lookup.node.mode)) {
            throw new FS.ErrnoError(54);
          }
          var errCode = FS.nodePermissions(lookup.node, 'x');
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
          FS.currentPath = lookup.path;
        },
    createDefaultDirectories() {
          FS.mkdir('/tmp');
          FS.mkdir('/home');
          FS.mkdir('/home/web_user');
        },
    createDefaultDevices() {
          // create /dev
          FS.mkdir('/dev');
          // setup /dev/null
          FS.registerDevice(FS.makedev(1, 3), {
            read: () => 0,
            write: (stream, buffer, offset, length, pos) => length,
          });
          FS.mkdev('/dev/null', FS.makedev(1, 3));
          // setup /dev/tty and /dev/tty1
          // stderr needs to print output using err() rather than out()
          // so we register a second tty just for it.
          TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
          TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
          FS.mkdev('/dev/tty', FS.makedev(5, 0));
          FS.mkdev('/dev/tty1', FS.makedev(6, 0));
          // setup /dev/[u]random
          // use a buffer to avoid overhead of individual crypto calls per byte
          var randomBuffer = new Uint8Array(1024), randomLeft = 0;
          var randomByte = () => {
            if (randomLeft === 0) {
              randomLeft = randomFill(randomBuffer).byteLength;
            }
            return randomBuffer[--randomLeft];
          };
          FS.createDevice('/dev', 'random', randomByte);
          FS.createDevice('/dev', 'urandom', randomByte);
          // we're not going to emulate the actual shm device,
          // just create the tmp dirs that reside in it commonly
          FS.mkdir('/dev/shm');
          FS.mkdir('/dev/shm/tmp');
        },
    createSpecialDirectories() {
          // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the
          // name of the stream for fd 6 (see test_unistd_ttyname)
          FS.mkdir('/proc');
          var proc_self = FS.mkdir('/proc/self');
          FS.mkdir('/proc/self/fd');
          FS.mount({
            mount() {
              var node = FS.createNode(proc_self, 'fd', 16384 | 511 /* 0777 */, 73);
              node.node_ops = {
                lookup(parent, name) {
                  var fd = +name;
                  var stream = FS.getStreamChecked(fd);
                  var ret = {
                    parent: null,
                    mount: { mountpoint: 'fake' },
                    node_ops: { readlink: () => stream.path },
                  };
                  ret.parent = ret; // make it look like a simple root node
                  return ret;
                }
              };
              return node;
            }
          }, {}, '/proc/self/fd');
        },
    createStandardStreams(input, output, error) {
          // TODO deprecate the old functionality of a single
          // input / output callback and that utilizes FS.createDevice
          // and instead require a unique set of stream ops
    
          // by default, we symlink the standard streams to the
          // default tty devices. however, if the standard streams
          // have been overwritten we create a unique device for
          // them instead.
          if (input) {
            FS.createDevice('/dev', 'stdin', input);
          } else {
            FS.symlink('/dev/tty', '/dev/stdin');
          }
          if (output) {
            FS.createDevice('/dev', 'stdout', null, output);
          } else {
            FS.symlink('/dev/tty', '/dev/stdout');
          }
          if (error) {
            FS.createDevice('/dev', 'stderr', null, error);
          } else {
            FS.symlink('/dev/tty1', '/dev/stderr');
          }
    
          // open default streams for the stdin, stdout and stderr devices
          var stdin = FS.open('/dev/stdin', 0);
          var stdout = FS.open('/dev/stdout', 1);
          var stderr = FS.open('/dev/stderr', 1);
          assert(stdin.fd === 0, `invalid handle for stdin (${stdin.fd})`);
          assert(stdout.fd === 1, `invalid handle for stdout (${stdout.fd})`);
          assert(stderr.fd === 2, `invalid handle for stderr (${stderr.fd})`);
        },
    staticInit() {
          // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
          [44].forEach((code) => {
            FS.genericErrors[code] = new FS.ErrnoError(code);
            FS.genericErrors[code].stack = '<generic error, no stack>';
          });
    
          FS.nameTable = new Array(4096);
    
          FS.mount(MEMFS, {}, '/');
    
          FS.createDefaultDirectories();
          FS.createDefaultDevices();
          FS.createSpecialDirectories();
    
          FS.filesystems = {
            'MEMFS': MEMFS,
          };
        },
    init(input, output, error) {
          assert(!FS.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
          FS.initialized = true;
    
          // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
          input ??= Module['stdin'];
          output ??= Module['stdout'];
          error ??= Module['stderr'];
    
          FS.createStandardStreams(input, output, error);
        },
    quit() {
          FS.initialized = false;
          // force-flush all streams, so we get musl std streams printed out
          _fflush(0);
          // close all of our streams
          for (var i = 0; i < FS.streams.length; i++) {
            var stream = FS.streams[i];
            if (!stream) {
              continue;
            }
            FS.close(stream);
          }
        },
    findObject(path, dontResolveLastLink) {
          var ret = FS.analyzePath(path, dontResolveLastLink);
          if (!ret.exists) {
            return null;
          }
          return ret.object;
        },
    analyzePath(path, dontResolveLastLink) {
          // operate from within the context of the symlink's target
          try {
            var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
            path = lookup.path;
          } catch (e) {
          }
          var ret = {
            isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
            parentExists: false, parentPath: null, parentObject: null
          };
          try {
            var lookup = FS.lookupPath(path, { parent: true });
            ret.parentExists = true;
            ret.parentPath = lookup.path;
            ret.parentObject = lookup.node;
            ret.name = PATH.basename(path);
            lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
            ret.exists = true;
            ret.path = lookup.path;
            ret.object = lookup.node;
            ret.name = lookup.node.name;
            ret.isRoot = lookup.path === '/';
          } catch (e) {
            ret.error = e.errno;
          };
          return ret;
        },
    createPath(parent, path, canRead, canWrite) {
          parent = typeof parent == 'string' ? parent : FS.getPath(parent);
          var parts = path.split('/').reverse();
          while (parts.length) {
            var part = parts.pop();
            if (!part) continue;
            var current = PATH.join2(parent, part);
            try {
              FS.mkdir(current);
            } catch (e) {
              // ignore EEXIST
            }
            parent = current;
          }
          return current;
        },
    createFile(parent, name, properties, canRead, canWrite) {
          var path = PATH.join2(typeof parent == 'string' ? parent : FS.getPath(parent), name);
          var mode = FS_getMode(canRead, canWrite);
          return FS.create(path, mode);
        },
    createDataFile(parent, name, data, canRead, canWrite, canOwn) {
          var path = name;
          if (parent) {
            parent = typeof parent == 'string' ? parent : FS.getPath(parent);
            path = name ? PATH.join2(parent, name) : parent;
          }
          var mode = FS_getMode(canRead, canWrite);
          var node = FS.create(path, mode);
          if (data) {
            if (typeof data == 'string') {
              var arr = new Array(data.length);
              for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
              data = arr;
            }
            // make sure we can write to the file
            FS.chmod(node, mode | 146);
            var stream = FS.open(node, 577);
            FS.write(stream, data, 0, data.length, 0, canOwn);
            FS.close(stream);
            FS.chmod(node, mode);
          }
        },
    createDevice(parent, name, input, output) {
          var path = PATH.join2(typeof parent == 'string' ? parent : FS.getPath(parent), name);
          var mode = FS_getMode(!!input, !!output);
          FS.createDevice.major ??= 64;
          var dev = FS.makedev(FS.createDevice.major++, 0);
          // Create a fake device that a set of stream ops to emulate
          // the old behavior.
          FS.registerDevice(dev, {
            open(stream) {
              stream.seekable = false;
            },
            close(stream) {
              // flush any pending line data
              if (output?.buffer?.length) {
                output(10);
              }
            },
            read(stream, buffer, offset, length, pos /* ignored */) {
              var bytesRead = 0;
              for (var i = 0; i < length; i++) {
                var result;
                try {
                  result = input();
                } catch (e) {
                  throw new FS.ErrnoError(29);
                }
                if (result === undefined && bytesRead === 0) {
                  throw new FS.ErrnoError(6);
                }
                if (result === null || result === undefined) break;
                bytesRead++;
                buffer[offset+i] = result;
              }
              if (bytesRead) {
                stream.node.timestamp = Date.now();
              }
              return bytesRead;
            },
            write(stream, buffer, offset, length, pos) {
              for (var i = 0; i < length; i++) {
                try {
                  output(buffer[offset+i]);
                } catch (e) {
                  throw new FS.ErrnoError(29);
                }
              }
              if (length) {
                stream.node.timestamp = Date.now();
              }
              return i;
            }
          });
          return FS.mkdev(path, mode, dev);
        },
    forceLoadFile(obj) {
          if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
          if (typeof XMLHttpRequest != 'undefined') {
            throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
          } else { // Command-line.
            try {
              obj.contents = readBinary(obj.url);
              obj.usedBytes = obj.contents.length;
            } catch (e) {
              throw new FS.ErrnoError(29);
            }
          }
        },
    createLazyFile(parent, name, url, canRead, canWrite) {
          // Lazy chunked Uint8Array (implements get and length from Uint8Array).
          // Actual getting is abstracted away for eventual reuse.
          class LazyUint8Array {
            constructor() {
              this.lengthKnown = false;
              this.chunks = []; // Loaded chunks. Index is the chunk number
            }
            get(idx) {
              if (idx > this.length-1 || idx < 0) {
                return undefined;
              }
              var chunkOffset = idx % this.chunkSize;
              var chunkNum = (idx / this.chunkSize)|0;
              return this.getter(chunkNum)[chunkOffset];
            }
            setDataGetter(getter) {
              this.getter = getter;
            }
            cacheLength() {
              // Find length
              var xhr = new XMLHttpRequest();
              xhr.open('HEAD', url, false);
              xhr.send(null);
              if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
              var datalength = Number(xhr.getResponseHeader("Content-length"));
              var header;
              var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
              var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
    
              var chunkSize = 1024*1024; // Chunk size in bytes
    
              if (!hasByteServing) chunkSize = datalength;
    
              // Function to get a range from the remote URL.
              var doXHR = (from, to) => {
                if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
                if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
    
                // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
                var xhr = new XMLHttpRequest();
                xhr.open('GET', url, false);
                if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
    
                // Some hints to the browser that we want binary data.
                xhr.responseType = 'arraybuffer';
                if (xhr.overrideMimeType) {
                  xhr.overrideMimeType('text/plain; charset=x-user-defined');
                }
    
                xhr.send(null);
                if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
                if (xhr.response !== undefined) {
                  return new Uint8Array(/** @type{Array<number>} */(xhr.response || []));
                }
                return intArrayFromString(xhr.responseText || '', true);
              };
              var lazyArray = this;
              lazyArray.setDataGetter((chunkNum) => {
                var start = chunkNum * chunkSize;
                var end = (chunkNum+1) * chunkSize - 1; // including this byte
                end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
                if (typeof lazyArray.chunks[chunkNum] == 'undefined') {
                  lazyArray.chunks[chunkNum] = doXHR(start, end);
                }
                if (typeof lazyArray.chunks[chunkNum] == 'undefined') throw new Error('doXHR failed!');
                return lazyArray.chunks[chunkNum];
              });
    
              if (usesGzip || !datalength) {
                // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
                chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
                datalength = this.getter(0).length;
                chunkSize = datalength;
                out("LazyFiles on gzip forces download of the whole file when length is accessed");
              }
    
              this._length = datalength;
              this._chunkSize = chunkSize;
              this.lengthKnown = true;
            }
            get length() {
              if (!this.lengthKnown) {
                this.cacheLength();
              }
              return this._length;
            }
            get chunkSize() {
              if (!this.lengthKnown) {
                this.cacheLength();
              }
              return this._chunkSize;
            }
          }
    
          if (typeof XMLHttpRequest != 'undefined') {
            if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
            var lazyArray = new LazyUint8Array();
            var properties = { isDevice: false, contents: lazyArray };
          } else {
            var properties = { isDevice: false, url: url };
          }
    
          var node = FS.createFile(parent, name, properties, canRead, canWrite);
          // This is a total hack, but I want to get this lazy file code out of the
          // core of MEMFS. If we want to keep this lazy file concept I feel it should
          // be its own thin LAZYFS proxying calls to MEMFS.
          if (properties.contents) {
            node.contents = properties.contents;
          } else if (properties.url) {
            node.contents = null;
            node.url = properties.url;
          }
          // Add a function that defers querying the file size until it is asked the first time.
          Object.defineProperties(node, {
            usedBytes: {
              get: function() { return this.contents.length; }
            }
          });
          // override each stream op with one that tries to force load the lazy file first
          var stream_ops = {};
          var keys = Object.keys(node.stream_ops);
          keys.forEach((key) => {
            var fn = node.stream_ops[key];
            stream_ops[key] = (...args) => {
              FS.forceLoadFile(node);
              return fn(...args);
            };
          });
          function writeChunks(stream, buffer, offset, length, position) {
            var contents = stream.node.contents;
            if (position >= contents.length)
              return 0;
            var size = Math.min(contents.length - position, length);
            assert(size >= 0);
            if (contents.slice) { // normal array
              for (var i = 0; i < size; i++) {
                buffer[offset + i] = contents[position + i];
              }
            } else {
              for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
                buffer[offset + i] = contents.get(position + i);
              }
            }
            return size;
          }
          // use a custom read function
          stream_ops.read = (stream, buffer, offset, length, position) => {
            FS.forceLoadFile(node);
            return writeChunks(stream, buffer, offset, length, position)
          };
          // use a custom mmap function
          stream_ops.mmap = (stream, length, position, prot, flags) => {
            FS.forceLoadFile(node);
            var ptr = mmapAlloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(48);
            }
            writeChunks(stream, HEAP8, ptr, length, position);
            return { ptr, allocated: true };
          };
          node.stream_ops = stream_ops;
          return node;
        },
    absolutePath() {
          abort('FS.absolutePath has been removed; use PATH_FS.resolve instead');
        },
    createFolder() {
          abort('FS.createFolder has been removed; use FS.mkdir instead');
        },
    createLink() {
          abort('FS.createLink has been removed; use FS.symlink instead');
        },
    joinPath() {
          abort('FS.joinPath has been removed; use PATH.join instead');
        },
    mmapAlloc() {
          abort('FS.mmapAlloc has been replaced by the top level function mmapAlloc');
        },
    standardizePath() {
          abort('FS.standardizePath has been removed; use PATH.normalize instead');
        },
    };
    
    var SYSCALLS = {
    DEFAULT_POLLMASK:5,
    calculateAt(dirfd, path, allowEmpty) {
          if (PATH.isAbs(path)) {
            return path;
          }
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = SYSCALLS.getStreamFromFD(dirfd);
            dir = dirstream.path;
          }
          if (path.length == 0) {
            if (!allowEmpty) {
              throw new FS.ErrnoError(44);;
            }
            return dir;
          }
          return PATH.join2(dir, path);
        },
    doStat(func, path, buf) {
          var stat = func(path);
          HEAP32[((buf)>>2)] = stat.dev;
          HEAP32[(((buf)+(4))>>2)] = stat.mode;
          HEAPU32[(((buf)+(8))>>2)] = stat.nlink;
          HEAP32[(((buf)+(12))>>2)] = stat.uid;
          HEAP32[(((buf)+(16))>>2)] = stat.gid;
          HEAP32[(((buf)+(20))>>2)] = stat.rdev;
          (tempI64 = [stat.size>>>0,(tempDouble = stat.size,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? (+(Math.floor((tempDouble)/4294967296.0)))>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)], HEAP32[(((buf)+(24))>>2)] = tempI64[0],HEAP32[(((buf)+(28))>>2)] = tempI64[1]);
          HEAP32[(((buf)+(32))>>2)] = 4096;
          HEAP32[(((buf)+(36))>>2)] = stat.blocks;
          var atime = stat.atime.getTime();
          var mtime = stat.mtime.getTime();
          var ctime = stat.ctime.getTime();
          (tempI64 = [Math.floor(atime / 1000)>>>0,(tempDouble = Math.floor(atime / 1000),(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? (+(Math.floor((tempDouble)/4294967296.0)))>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)], HEAP32[(((buf)+(40))>>2)] = tempI64[0],HEAP32[(((buf)+(44))>>2)] = tempI64[1]);
          HEAPU32[(((buf)+(48))>>2)] = (atime % 1000) * 1000 * 1000;
          (tempI64 = [Math.floor(mtime / 1000)>>>0,(tempDouble = Math.floor(mtime / 1000),(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? (+(Math.floor((tempDouble)/4294967296.0)))>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)], HEAP32[(((buf)+(56))>>2)] = tempI64[0],HEAP32[(((buf)+(60))>>2)] = tempI64[1]);
          HEAPU32[(((buf)+(64))>>2)] = (mtime % 1000) * 1000 * 1000;
          (tempI64 = [Math.floor(ctime / 1000)>>>0,(tempDouble = Math.floor(ctime / 1000),(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? (+(Math.floor((tempDouble)/4294967296.0)))>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)], HEAP32[(((buf)+(72))>>2)] = tempI64[0],HEAP32[(((buf)+(76))>>2)] = tempI64[1]);
          HEAPU32[(((buf)+(80))>>2)] = (ctime % 1000) * 1000 * 1000;
          (tempI64 = [stat.ino>>>0,(tempDouble = stat.ino,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? (+(Math.floor((tempDouble)/4294967296.0)))>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)], HEAP32[(((buf)+(88))>>2)] = tempI64[0],HEAP32[(((buf)+(92))>>2)] = tempI64[1]);
          return 0;
        },
    doMsync(addr, stream, len, flags, offset) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          if (flags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
          var buffer = HEAPU8.slice(addr, addr + len);
          FS.msync(stream, buffer, offset, len, flags);
        },
    getStreamFromFD(fd) {
          var stream = FS.getStreamChecked(fd);
          return stream;
        },
    varargs:undefined,
    getStr(ptr) {
          var ret = UTF8ToString(ptr);
          return ret;
        },
    };
    function _fd_close(fd) {
    try {
    
        var stream = SYSCALLS.getStreamFromFD(fd);
        FS.close(stream);
        return 0;
      } catch (e) {
      if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;
      return e.errno;
    }
    }

    /** @param {number=} offset */
    var doReadv = (stream, iov, iovcnt, offset) => {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAPU32[((iov)>>2)];
          var len = HEAPU32[(((iov)+(4))>>2)];
          iov += 8;
          var curr = FS.read(stream, HEAP8, ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
          if (typeof offset != 'undefined') {
            offset += curr;
          }
        }
        return ret;
      };
    
    function _fd_read(fd, iov, iovcnt, pnum) {
    try {
    
        var stream = SYSCALLS.getStreamFromFD(fd);
        var num = doReadv(stream, iov, iovcnt);
        HEAPU32[((pnum)>>2)] = num;
        return 0;
      } catch (e) {
      if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;
      return e.errno;
    }
    }

    
    var convertI32PairToI53Checked = (lo, hi) => {
        assert(lo == (lo >>> 0) || lo == (lo|0)); // lo should either be a i32 or a u32
        assert(hi === (hi|0));                    // hi should be a i32
        return ((hi + 0x200000) >>> 0 < 0x400001 - !!lo) ? (lo >>> 0) + hi * 4294967296 : NaN;
      };
    function _fd_seek(fd,offset_low, offset_high,whence,newOffset) {
      var offset = convertI32PairToI53Checked(offset_low, offset_high);
    
      
    try {
    
        if (isNaN(offset)) return 61;
        var stream = SYSCALLS.getStreamFromFD(fd);
        FS.llseek(stream, offset, whence);
        (tempI64 = [stream.position>>>0,(tempDouble = stream.position,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? (+(Math.floor((tempDouble)/4294967296.0)))>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)], HEAP32[((newOffset)>>2)] = tempI64[0],HEAP32[(((newOffset)+(4))>>2)] = tempI64[1]);
        if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
        return 0;
      } catch (e) {
      if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;
      return e.errno;
    }
    ;
    }

    /** @param {number=} offset */
    var doWritev = (stream, iov, iovcnt, offset) => {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAPU32[((iov)>>2)];
          var len = HEAPU32[(((iov)+(4))>>2)];
          iov += 8;
          var curr = FS.write(stream, HEAP8, ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) {
            // No more space to write.
            break;
          }
          if (typeof offset != 'undefined') {
            offset += curr;
          }
        }
        return ret;
      };
    
    function _fd_write(fd, iov, iovcnt, pnum) {
    try {
    
        var stream = SYSCALLS.getStreamFromFD(fd);
        var num = doWritev(stream, iov, iovcnt);
        HEAPU32[((pnum)>>2)] = num;
        return 0;
      } catch (e) {
      if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;
      return e.errno;
    }
    }
  embind_init_charCodes();
  BindingError = Module['BindingError'] = class BindingError extends Error { constructor(message) { super(message); this.name = 'BindingError'; }};
  InternalError = Module['InternalError'] = class InternalError extends Error { constructor(message) { super(message); this.name = 'InternalError'; }};
  init_ClassHandle();
  init_RegisteredPointer();
  UnboundTypeError = Module['UnboundTypeError'] = extendError(Error, 'UnboundTypeError');;
  init_emval();;

    FS.createPreloadedFile = FS_createPreloadedFile;
    FS.staticInit();
    // Set module methods based on EXPORTED_RUNTIME_METHODS
    ;
  function checkIncomingModuleAPI() {
    ignoredModuleProp('fetchSettings');
  }
  var wasmImports = {
    /** @export */
    __assert_fail: ___assert_fail,
    /** @export */
    _abort_js: __abort_js,
    /** @export */
    _embind_register_bigint: __embind_register_bigint,
    /** @export */
    _embind_register_bool: __embind_register_bool,
    /** @export */
    _embind_register_class: __embind_register_class,
    /** @export */
    _embind_register_class_constructor: __embind_register_class_constructor,
    /** @export */
    _embind_register_class_function: __embind_register_class_function,
    /** @export */
    _embind_register_emval: __embind_register_emval,
    /** @export */
    _embind_register_float: __embind_register_float,
    /** @export */
    _embind_register_integer: __embind_register_integer,
    /** @export */
    _embind_register_memory_view: __embind_register_memory_view,
    /** @export */
    _embind_register_std_string: __embind_register_std_string,
    /** @export */
    _embind_register_std_wstring: __embind_register_std_wstring,
    /** @export */
    _embind_register_void: __embind_register_void,
    /** @export */
    _emscripten_memcpy_js: __emscripten_memcpy_js,
    /** @export */
    _emval_call: __emval_call,
    /** @export */
    _emval_decref: __emval_decref,
    /** @export */
    _emval_get_method_caller: __emval_get_method_caller,
    /** @export */
    _emval_run_destructors: __emval_run_destructors,
    /** @export */
    _tzset_js: __tzset_js,
    /** @export */
    emscripten_resize_heap: _emscripten_resize_heap,
    /** @export */
    environ_get: _environ_get,
    /** @export */
    environ_sizes_get: _environ_sizes_get,
    /** @export */
    fd_close: _fd_close,
    /** @export */
    fd_read: _fd_read,
    /** @export */
    fd_seek: _fd_seek,
    /** @export */
    fd_write: _fd_write
  };
  var wasmExports = createWasm();
  var ___wasm_call_ctors = createExportWrapper('__wasm_call_ctors', 0);
  var ___getTypeName = createExportWrapper('__getTypeName', 1);
  var _fflush = createExportWrapper('fflush', 1);
  var _malloc = createExportWrapper('malloc', 1);
  var _strerror = createExportWrapper('strerror', 1);
  var _free = createExportWrapper('free', 1);
  var _emscripten_stack_init = () => (_emscripten_stack_init = wasmExports['emscripten_stack_init'])();
  var _emscripten_stack_get_free = () => (_emscripten_stack_get_free = wasmExports['emscripten_stack_get_free'])();
  var _emscripten_stack_get_base = () => (_emscripten_stack_get_base = wasmExports['emscripten_stack_get_base'])();
  var _emscripten_stack_get_end = () => (_emscripten_stack_get_end = wasmExports['emscripten_stack_get_end'])();
  var __emscripten_stack_restore = (a0) => (__emscripten_stack_restore = wasmExports['_emscripten_stack_restore'])(a0);
  var __emscripten_stack_alloc = (a0) => (__emscripten_stack_alloc = wasmExports['_emscripten_stack_alloc'])(a0);
  var _emscripten_stack_get_current = () => (_emscripten_stack_get_current = wasmExports['emscripten_stack_get_current'])();
  var dynCall_viijii = Module['dynCall_viijii'] = createExportWrapper('dynCall_viijii', 7);
  var dynCall_jiji = Module['dynCall_jiji'] = createExportWrapper('dynCall_jiji', 5);
  var dynCall_iiiiij = Module['dynCall_iiiiij'] = createExportWrapper('dynCall_iiiiij', 7);
  var dynCall_iiiiijj = Module['dynCall_iiiiijj'] = createExportWrapper('dynCall_iiiiijj', 9);
  var dynCall_iiiiiijj = Module['dynCall_iiiiiijj'] = createExportWrapper('dynCall_iiiiiijj', 10);


  // include: postamble.js
  // === Auto-generated postamble setup entry stuff ===

  var missingLibrarySymbols = [
    'writeI53ToI64',
    'writeI53ToI64Clamped',
    'writeI53ToI64Signaling',
    'writeI53ToU64Clamped',
    'writeI53ToU64Signaling',
    'readI53FromI64',
    'readI53FromU64',
    'convertI32PairToI53',
    'convertU32PairToI53',
    'stackAlloc',
    'getTempRet0',
    'setTempRet0',
    'exitJS',
    'growMemory',
    'inetPton4',
    'inetNtop4',
    'inetPton6',
    'inetNtop6',
    'readSockaddr',
    'writeSockaddr',
    'emscriptenLog',
    'readEmAsmArgs',
    'jstoi_q',
    'listenOnce',
    'autoResumeAudioContext',
    'handleException',
    'keepRuntimeAlive',
    'runtimeKeepalivePush',
    'runtimeKeepalivePop',
    'callUserCallback',
    'maybeExit',
    'asmjsMangle',
    'HandleAllocator',
    'getNativeTypeSize',
    'STACK_SIZE',
    'STACK_ALIGN',
    'POINTER_SIZE',
    'ASSERTIONS',
    'getCFunc',
    'ccall',
    'cwrap',
    'uleb128Encode',
    'sigToWasmTypes',
    'generateFuncType',
    'convertJsFunctionToWasm',
    'getEmptyTableSlot',
    'updateTableMap',
    'getFunctionAddress',
    'addFunction',
    'removeFunction',
    'reallyNegative',
    'unSign',
    'strLen',
    'reSign',
    'formatString',
    'intArrayToString',
    'AsciiToString',
    'stringToNewUTF8',
    'stringToUTF8OnStack',
    'writeArrayToMemory',
    'registerKeyEventCallback',
    'maybeCStringToJsString',
    'findEventTarget',
    'getBoundingClientRect',
    'fillMouseEventData',
    'registerMouseEventCallback',
    'registerWheelEventCallback',
    'registerUiEventCallback',
    'registerFocusEventCallback',
    'fillDeviceOrientationEventData',
    'registerDeviceOrientationEventCallback',
    'fillDeviceMotionEventData',
    'registerDeviceMotionEventCallback',
    'screenOrientation',
    'fillOrientationChangeEventData',
    'registerOrientationChangeEventCallback',
    'fillFullscreenChangeEventData',
    'registerFullscreenChangeEventCallback',
    'JSEvents_requestFullscreen',
    'JSEvents_resizeCanvasForFullscreen',
    'registerRestoreOldStyle',
    'hideEverythingExceptGivenElement',
    'restoreHiddenElements',
    'setLetterbox',
    'softFullscreenResizeWebGLRenderTarget',
    'doRequestFullscreen',
    'fillPointerlockChangeEventData',
    'registerPointerlockChangeEventCallback',
    'registerPointerlockErrorEventCallback',
    'requestPointerLock',
    'fillVisibilityChangeEventData',
    'registerVisibilityChangeEventCallback',
    'registerTouchEventCallback',
    'fillGamepadEventData',
    'registerGamepadEventCallback',
    'registerBeforeUnloadEventCallback',
    'fillBatteryEventData',
    'battery',
    'registerBatteryEventCallback',
    'setCanvasElementSize',
    'getCanvasElementSize',
    'jsStackTrace',
    'getCallstack',
    'convertPCtoSourceLocation',
    'checkWasiClock',
    'wasiRightsToMuslOFlags',
    'wasiOFlagsToMuslOFlags',
    'createDyncallWrapper',
    'safeSetTimeout',
    'setImmediateWrapped',
    'clearImmediateWrapped',
    'polyfillSetImmediate',
    'registerPostMainLoop',
    'registerPreMainLoop',
    'getPromise',
    'makePromise',
    'idsToPromises',
    'makePromiseCallback',
    'ExceptionInfo',
    'findMatchingCatch',
    'Browser_asyncPrepareDataCounter',
    'safeRequestAnimationFrame',
    'isLeapYear',
    'ydayFromDate',
    'arraySum',
    'addDays',
    'getSocketFromFD',
    'getSocketAddress',
    'FS_unlink',
    'FS_mkdirTree',
    '_setNetworkCallback',
    'heapObjectForWebGLType',
    'toTypedArrayIndex',
    'webgl_enable_ANGLE_instanced_arrays',
    'webgl_enable_OES_vertex_array_object',
    'webgl_enable_WEBGL_draw_buffers',
    'webgl_enable_WEBGL_multi_draw',
    'webgl_enable_EXT_polygon_offset_clamp',
    'webgl_enable_EXT_clip_control',
    'webgl_enable_WEBGL_polygon_mode',
    'emscriptenWebGLGet',
    'computeUnpackAlignedImageSize',
    'colorChannelsInGlTextureFormat',
    'emscriptenWebGLGetTexPixelData',
    'emscriptenWebGLGetUniform',
    'webglGetUniformLocation',
    'webglPrepareUniformLocationsBeforeFirstUse',
    'webglGetLeftBracePos',
    'emscriptenWebGLGetVertexAttrib',
    '__glGetActiveAttribOrUniform',
    'writeGLArray',
    'registerWebGlEventCallback',
    'runAndAbortIfError',
    'ALLOC_NORMAL',
    'ALLOC_STACK',
    'allocate',
    'writeStringToMemory',
    'writeAsciiToMemory',
    'setErrNo',
    'demangle',
    'stackTrace',
    'getFunctionArgsName',
    'createJsInvokerSignature',
    'registerInheritedInstance',
    'unregisterInheritedInstance',
    'getInheritedInstanceCount',
    'getLiveInheritedInstances',
    'enumReadValueFromPointer',
    'setDelayFunction',
    'validateThis',
    'getStringOrSymbol',
    'emval_get_global',
  ];
  missingLibrarySymbols.forEach(missingLibrarySymbol)

  var unexportedSymbols = [
    'run',
    'addOnPreRun',
    'addOnInit',
    'addOnPreMain',
    'addOnExit',
    'addOnPostRun',
    'addRunDependency',
    'removeRunDependency',
    'out',
    'err',
    'callMain',
    'abort',
    'wasmMemory',
    'wasmExports',
    'writeStackCookie',
    'checkStackCookie',
    'convertI32PairToI53Checked',
    'stackSave',
    'stackRestore',
    'ptrToString',
    'zeroMemory',
    'getHeapMax',
    'abortOnCannotGrowMemory',
    'ENV',
    'ERRNO_CODES',
    'strError',
    'DNS',
    'Protocols',
    'Sockets',
    'initRandomFill',
    'randomFill',
    'timers',
    'warnOnce',
    'readEmAsmArgsArray',
    'jstoi_s',
    'getExecutableName',
    'dynCallLegacy',
    'getDynCaller',
    'dynCall',
    'asyncLoad',
    'alignMemory',
    'mmapAlloc',
    'wasmTable',
    'noExitRuntime',
    'freeTableIndexes',
    'functionsInTableMap',
    'setValue',
    'getValue',
    'PATH',
    'PATH_FS',
    'UTF8Decoder',
    'UTF8ArrayToString',
    'UTF8ToString',
    'stringToUTF8Array',
    'stringToUTF8',
    'lengthBytesUTF8',
    'intArrayFromString',
    'stringToAscii',
    'UTF16Decoder',
    'UTF16ToString',
    'stringToUTF16',
    'lengthBytesUTF16',
    'UTF32ToString',
    'stringToUTF32',
    'lengthBytesUTF32',
    'JSEvents',
    'specialHTMLTargets',
    'findCanvasEventTarget',
    'currentFullscreenStrategy',
    'restoreOldWindowedStyle',
    'UNWIND_CACHE',
    'ExitStatus',
    'getEnvStrings',
    'doReadv',
    'doWritev',
    'promiseMap',
    'uncaughtExceptionCount',
    'exceptionLast',
    'exceptionCaught',
    'Browser',
    'getPreloadedImageData__data',
    'wget',
    'MONTH_DAYS_REGULAR',
    'MONTH_DAYS_LEAP',
    'MONTH_DAYS_REGULAR_CUMULATIVE',
    'MONTH_DAYS_LEAP_CUMULATIVE',
    'SYSCALLS',
    'preloadPlugins',
    'FS_createPreloadedFile',
    'FS_modeStringToFlags',
    'FS_getMode',
    'FS_stdin_getChar_buffer',
    'FS_stdin_getChar',
    'FS_createPath',
    'FS_createDevice',
    'FS_readFile',
    'FS',
    'FS_createDataFile',
    'FS_createLazyFile',
    'MEMFS',
    'TTY',
    'PIPEFS',
    'SOCKFS',
    'tempFixedLengthArray',
    'miniTempWebGLFloatBuffers',
    'miniTempWebGLIntBuffers',
    'GL',
    'AL',
    'GLUT',
    'EGL',
    'GLEW',
    'IDBStore',
    'SDL',
    'SDL_gfx',
    'allocateUTF8',
    'allocateUTF8OnStack',
    'print',
    'printErr',
    'InternalError',
    'BindingError',
    'throwInternalError',
    'throwBindingError',
    'registeredTypes',
    'awaitingDependencies',
    'typeDependencies',
    'tupleRegistrations',
    'structRegistrations',
    'sharedRegisterType',
    'whenDependentTypesAreResolved',
    'embind_charCodes',
    'embind_init_charCodes',
    'readLatin1String',
    'getTypeName',
    'getFunctionName',
    'heap32VectorToArray',
    'requireRegisteredType',
    'usesDestructorStack',
    'checkArgCount',
    'getRequiredArgCount',
    'createJsInvoker',
    'UnboundTypeError',
    'PureVirtualError',
    'GenericWireTypeSize',
    'EmValType',
    'EmValOptionalType',
    'throwUnboundTypeError',
    'ensureOverloadTable',
    'exposePublicSymbol',
    'replacePublicSymbol',
    'extendError',
    'createNamedFunction',
    'embindRepr',
    'registeredInstances',
    'getBasestPointer',
    'getInheritedInstance',
    'registeredPointers',
    'registerType',
    'integerReadValueFromPointer',
    'floatReadValueFromPointer',
    'readPointer',
    'runDestructors',
    'newFunc',
    'craftInvokerFunction',
    'embind__requireFunction',
    'genericPointerToWireType',
    'constNoSmartPtrRawPointerToWireType',
    'nonConstNoSmartPtrRawPointerToWireType',
    'init_RegisteredPointer',
    'RegisteredPointer',
    'RegisteredPointer_fromWireType',
    'runDestructor',
    'releaseClassHandle',
    'finalizationRegistry',
    'detachFinalizer_deps',
    'detachFinalizer',
    'attachFinalizer',
    'makeClassHandle',
    'init_ClassHandle',
    'ClassHandle',
    'throwInstanceAlreadyDeleted',
    'deletionQueue',
    'flushPendingDeletes',
    'delayFunction',
    'RegisteredClass',
    'shallowCopyInternalPointer',
    'downcastPointer',
    'upcastPointer',
    'char_0',
    'char_9',
    'makeLegalFunctionName',
    'emval_freelist',
    'emval_handles',
    'emval_symbols',
    'init_emval',
    'count_emval_handles',
    'Emval',
    'emval_returnValue',
    'emval_lookupTypes',
    'emval_methodCallers',
    'emval_addMethodCaller',
    'reflectConstruct',
  ];
  unexportedSymbols.forEach(unexportedRuntimeSymbol);



  var calledRun;
  var calledPrerun;

  dependenciesFulfilled = function runCaller() {
    // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
    if (!calledRun) run();
    if (!calledRun) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
  };

  function stackCheckInit() {
    // This is normally called automatically during __wasm_call_ctors but need to
    // get these values before even running any of the ctors so we call it redundantly
    // here.
    _emscripten_stack_init();
    // TODO(sbc): Move writeStackCookie to native to to avoid this.
    writeStackCookie();
  }

  function run() {

    if (runDependencies > 0) {
      return;
    }

      stackCheckInit();

    if (!calledPrerun) {
      calledPrerun = 1;
      preRun();

      // a preRun added a dependency, run will be called later
      if (runDependencies > 0) {
        return;
      }
    }

    function doRun() {
      // run may have just been called through dependencies being fulfilled just in this very frame,
      // or while the async setStatus time below was happening
      if (calledRun) return;
      calledRun = 1;
      Module['calledRun'] = 1;

      if (ABORT) return;

      initRuntime();

      readyPromiseResolve(Module);
      Module['onRuntimeInitialized']?.();

      assert(!Module['_main'], 'compiled without a main, but one is present. if you added it from JS, use Module["onRuntimeInitialized"]');

      postRun();
    }

    if (Module['setStatus']) {
      Module['setStatus']('Running...');
      setTimeout(() => {
        setTimeout(() => Module['setStatus'](''), 1);
        doRun();
      }, 1);
    } else
    {
      doRun();
    }
    checkStackCookie();
  }

  function checkUnflushedContent() {
    // Compiler settings do not allow exiting the runtime, so flushing
    // the streams is not possible. but in ASSERTIONS mode we check
    // if there was something to flush, and if so tell the user they
    // should request that the runtime be exitable.
    // Normally we would not even include flush() at all, but in ASSERTIONS
    // builds we do so just for this check, and here we see if there is any
    // content to flush, that is, we check if there would have been
    // something a non-ASSERTIONS build would have not seen.
    // How we flush the streams depends on whether we are in SYSCALLS_REQUIRE_FILESYSTEM=0
    // mode (which has its own special function for this; otherwise, all
    // the code is inside libc)
    var oldOut = out;
    var oldErr = err;
    var has = false;
    out = err = (x) => {
      has = true;
    }
    try { // it doesn't matter if it fails
      _fflush(0);
      // also flush in the JS FS layer
      ['stdout', 'stderr'].forEach((name) => {
        var info = FS.analyzePath('/dev/' + name);
        if (!info) return;
        var stream = info.object;
        var rdev = stream.rdev;
        var tty = TTY.ttys[rdev];
        if (tty?.output?.length) {
          has = true;
        }
      });
    } catch(e) {}
    out = oldOut;
    err = oldErr;
    if (has) {
      warnOnce('stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the Emscripten FAQ), or make sure to emit a newline when you printf etc.');
    }
  }

  if (Module['preInit']) {
    if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
    while (Module['preInit'].length > 0) {
      Module['preInit'].pop()();
    }
  }

  run();

  // end include: postamble.js

  // include: postamble_modularize.js
  // In MODULARIZE mode we wrap the generated code in a factory function
  // and return either the Module itself, or a promise of the module.
  //
  // We assign to the `moduleRtn` global here and configure closure to see
  // this as and extern so it won't get minified.

  moduleRtn = readyPromise;

  // Assertion for attempting to access module properties on the incoming
  // moduleArg.  In the past we used this object as the prototype of the module
  // and assigned properties to it, but now we return a distinct object.  This
  // keeps the instance private until it is ready (i.e the promise has been
  // resolved).
  for (const prop of Object.keys(Module)) {
    if (!(prop in moduleArg)) {
      Object.defineProperty(moduleArg, prop, {
        configurable: true,
        get() {
          abort(`Access to module property ('${prop}') is no longer possible via the module constructor argument; Instead, use the result of the module constructor.`)
        }
      });
    }
  }
  // end include: postamble_modularize.js



    return moduleRtn;
  }
);
})();
if (typeof exports === 'object' && typeof module === 'object')
  module.exports = Module;
else if (typeof define === 'function' && define['amd'])
  define([], () => Module);
